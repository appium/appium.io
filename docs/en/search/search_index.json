{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about-appium/api/","text":"Appium API Documentation Status Execute Mobile Command Session Create End Get Session Capabilities Go Back Screenshot Source Timeouts Timeouts Implicit Wait Async Script Orientation Get Orientation Set Orientation Geolocation Get Geolocation Set Geolocation Logs Get Log Types Get Logs Events Log event Get events Settings Update Settings Get Device Settings Execute Driver Script Device Activity Start Activity Current Activity Current Package App Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage Clipboard Get Clipboard Set Clipboard Emulator Power AC Power Capacity Files Push File Pull File Pull Folder Interactions Shake Lock Unlock Is Locked Rotate Keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown Network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed Performance Data Get Performance Data Performance Data Types Screen Recording Start Screen Recording Stop Screen Recording Simulator Perform Touch ID Toggle Touch ID Enrollment System Open Notifications System Bars System Time Display density Authentication Finger Print Element Find Element Find Elements Actions Click Send Keys Clear Attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View Other Submit Active Element Equals Element Context Get Context Get All Contexts Set Context Interactions Mouse Move To Click Double Click Button Down Button Up Touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform W3C Actions Web Window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window Navigation Go to URL Get URL Back Forward Refresh Storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies Frame Switch to Frame Switch to Parent Frame Execute Async Execute","title":"API Documentation"},{"location":"about-appium/api/#appium-api-documentation","text":"Status Execute Mobile Command Session Create End Get Session Capabilities Go Back Screenshot Source Timeouts Timeouts Implicit Wait Async Script Orientation Get Orientation Set Orientation Geolocation Get Geolocation Set Geolocation Logs Get Log Types Get Logs Events Log event Get events Settings Update Settings Get Device Settings Execute Driver Script Device Activity Start Activity Current Activity Current Package App Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage Clipboard Get Clipboard Set Clipboard Emulator Power AC Power Capacity Files Push File Pull File Pull Folder Interactions Shake Lock Unlock Is Locked Rotate Keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown Network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed Performance Data Get Performance Data Performance Data Types Screen Recording Start Screen Recording Stop Screen Recording Simulator Perform Touch ID Toggle Touch ID Enrollment System Open Notifications System Bars System Time Display density Authentication Finger Print Element Find Element Find Elements Actions Click Send Keys Clear Attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View Other Submit Active Element Equals Element Context Get Context Get All Contexts Set Context Interactions Mouse Move To Click Double Click Button Down Button Up Touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform W3C Actions Web Window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window Navigation Go to URL Get URL Back Forward Refresh Storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies Frame Switch to Frame Switch to Parent Frame Execute Async Execute","title":"Appium API Documentation"},{"location":"about-appium/appium-clients/","text":"List of client libraries with Appium server support These libraries wrap standard Selenium client libraries to provide all the regular selenium commands dictated by the JSON Wire protocol , and add extra commands related to controlling mobile devices, such as multi-touch gestures and screen orientation . Appium client libraries implement the Mobile JSON Wire Protocol (an official draft extension to the standard protocol), and elements of the W3C Webdriver spec (a transport-agnostic automation spec; this is where the MultiAction API is defined). The Appium server itself defines custom extensions to the official protocols, giving Appium users helpful access to various device behaviors (such as installing/uninstalling apps during the course of a test session). This is why we need Appium-specific clients, not just the 'vanilla' Selenium clients. Of course, Appium client libraries only add functionality (in fact, they simply extend the standard Selenium clients), so they can still be used to run regular Selenium sessions. Appium repository Language/Framework Github Repo and Installation Instructions Ruby https://github.com/appium/ruby_lib , https://github.com/appium/ruby_lib_core Python https://github.com/appium/python-client Java https://github.com/appium/java-client C# (.NET) https://github.com/appium/appium-dotnet-driver Community based Language/Framework Github Repo and Installation Instructions JavaScript (Node.js) https://github.com/admc/wd JavaScript (Node.js) https://github.com/webdriverio/webdriverio JavaScript (Browser) https://github.com/projectxyzio/web2driver RobotFramework https://github.com/serhatbolsu/robotframework-appiumlibrary W3C WebDriver protocol compatible clients also work.","title":"The Appium Clients"},{"location":"about-appium/appium-clients/#list-of-client-libraries-with-appium-server-support","text":"These libraries wrap standard Selenium client libraries to provide all the regular selenium commands dictated by the JSON Wire protocol , and add extra commands related to controlling mobile devices, such as multi-touch gestures and screen orientation . Appium client libraries implement the Mobile JSON Wire Protocol (an official draft extension to the standard protocol), and elements of the W3C Webdriver spec (a transport-agnostic automation spec; this is where the MultiAction API is defined). The Appium server itself defines custom extensions to the official protocols, giving Appium users helpful access to various device behaviors (such as installing/uninstalling apps during the course of a test session). This is why we need Appium-specific clients, not just the 'vanilla' Selenium clients. Of course, Appium client libraries only add functionality (in fact, they simply extend the standard Selenium clients), so they can still be used to run regular Selenium sessions.","title":"List of client libraries with Appium server support"},{"location":"about-appium/appium-clients/#appium-repository","text":"Language/Framework Github Repo and Installation Instructions Ruby https://github.com/appium/ruby_lib , https://github.com/appium/ruby_lib_core Python https://github.com/appium/python-client Java https://github.com/appium/java-client C# (.NET) https://github.com/appium/appium-dotnet-driver","title":"Appium repository"},{"location":"about-appium/appium-clients/#community-based","text":"Language/Framework Github Repo and Installation Instructions JavaScript (Node.js) https://github.com/admc/wd JavaScript (Node.js) https://github.com/webdriverio/webdriverio JavaScript (Browser) https://github.com/projectxyzio/web2driver RobotFramework https://github.com/serhatbolsu/robotframework-appiumlibrary W3C WebDriver protocol compatible clients also work.","title":"Community based"},{"location":"about-appium/getting-started/","text":"Getting Started This doc will get you up and running with a simple Appium test and introduce you to some basic Appium ideas. For a more comprehensive introduction to Appium concepts, please check out the conceptual introduction . Installing Appium Appium can be installed in one of two ways: via NPM or by downloading Appium Desktop , which is a graphical, desktop-based way to launch the Appium server. Installation via NPM If you want to run Appium via an npm install , hack with Appium, or contribute to Appium, you will need Node.js and NPM (use nvm , n , or brew install node to install Node.js. Make sure you have not installed Node or Appium with sudo , otherwise you'll run into problems). We recommend the latest stable version, though Appium supports Node 10+. The actual installation is as simple as: npm install -g appium Installation via Desktop App Download Simply download the latest version of Appium Desktop from the releases page . Driver-Specific Setup You probably want to use Appium to automate something specific, like an iOS or Android application. Support for the automation of a particular platform is provided by an Appium \"driver\". There are a number of such drivers that give you access to different kinds of automation technologies, and each come with their own particular setup requirements. Most of these requirements are the same requirements as for app development on a specific platform. For example, to automate Android applications using one of our Android drivers, you'll need the Android SDK configured on your system. At some point, make sure you review the driver documentation for the platform you want to automate, so your system is set up correctly: The XCUITest Driver (for iOS and tvOS apps) The Espresso Driver (for Android apps) The UiAutomator2 Driver (for Android apps) The Windows Driver (for Windows Desktop apps) The Mac Driver (for Mac Desktop apps) Verifying the Installation To verify that all of Appium's dependencies are met you can use appium-doctor . Install it with npm install -g appium-doctor , then run the appium-doctor command, supplying the --ios or --android flags to verify that all of the dependencies are set up correctly. Appium Clients When all is said and done, Appium is just an HTTP server. It sits and waits for connections from a client, which then instructs Appium what kind of session to start and what kind of automation behaviors to enact once a session is started. This means that you never use Appium just by itself. You always have to use it with a client library of some kind (or, if you're adventurous, cURL!). Luckily, Appium speaks the same protocol as Selenium , called the WebDriver Protocol. You can do a lot of things with Appium just by using one of the standard Selenium clients. You may even have one of these on your system already. It's enough to get started, especially if you're using Appium for the purpose of testing web browsers on mobile platforms. Appium can do things that Selenium can't, though, just like mobile devices can do things that web browsers can't. For that reason, we have a set of Appium clients in a variety of programming languages, that extend the regular old Selenium clients with additional functionality. You can see the list of clients and links to download instructions at the Appium clients list . Before moving forward, make sure you have a client downloaded in your favorite language and ready to go. Starting Appium Now we can kick up an Appium server, either by running it from the command line like so (assuming the NPM install was successful): appium Or by clicking the huge Start Server button inside of Appium Desktop. Appium will now show you a little welcome message showing the version of Appium you're running and what port it's listening on (the default is 4723 ). This port information is vital since you will have to direct your test client to make sure to connect to Appium on this port. If you want to change, the port, you can do so by using the -p flag when starting Appium (be sure to check out the full list of server parameters ). Running Your First Test In this section we'll run a basic \"Hello World\" Android test. We've chosen Android because it's available on all platforms. We'll be using the UiAutomator2 Driver so ensure you've read through that doc and gotten your system set up appropriately. We'll also be using JavaScript as the language so that we don't have to deal with additional dependencies. (Chances are, you'll eventually want to automate something other than Android using something other than JavaScript. In that case, check out our sample-code , which has code samples for many languages and platforms.) Prerequisites We'll assume you have an Android 8.0 emulator configured and running (the example will work on lower versions, just fix the version numbers accordingly) We'll assume you have this test APK downloaded and available on your local filesystem Setting up the Appium Client For this example, we'll use Webdriver.io as our Appium client. Create a directory for this example, then run: npm init -y Once the project has been initialized, install webdriverio : npm install webdriverio Session Initialization Now we can create our test file, named index.js , and initialize the client object: // javascript const wdio = require( webdriverio ); The next thing we need to do is to start an Appium session. We do this by defining a set of server options and Desired Capabilities, and calling wdio.remote() with them. Desired Capabilities are just a set of keys and values that get sent to the Appium server during session initialization, that tell Appium what kind of thing we want to automate. The minimum set of required capabilities for any Appium driver should include: platformName : the name of the platform to automate platformVersion : the version of the platform to automate deviceName : the kind of device to automate app : the path to the app you want to automate (but use the browserName capability instead in the case of automating a web browser) automationName : the name of the driver you wish to use For more information on Desired Capabilities and for a list of all the Capabilities you can use in Appium, see our Capabilities doc . So here is how we begin to construct a session in our test file: // javascript const opts = { path: '/wd/hub', port: 4723, capabilities: { platformName: Android , platformVersion: 8 , deviceName: Android Emulator , app: /path/to/the/downloaded/ApiDemos-debug.apk , appPackage: io.appium.android.apis , appActivity: .view.TextFields , automationName: UiAutomator2 } }; async function main () { const client = await wdio.remote(opts); await client.deleteSession(); } main(); Running Test Commands You can see that we've specified our Appium port and also constructed our Desired Capabilities to match our requirements (but don't forget to replace the path with the actual download path for your system). We've registered this fact with webdriverio and now have a client object which will represent the connection to the Appium server. From here, we can go ahead and start the session, perform some test commands, and end the session. In our case, we will simply type into a text field and check that the correct text was entered: // javascript const field = await client.$( android.widget.EditText ); await field.setValue( Hello World! ); const value = await field.getText(); assert.strictEqual(value, Hello World! ); What's going on here is that after creating a session and launching our app, we're instructing Appium to find an element in the app hierarchy and type into it. The same field is then queried for its text, which is asserted to be what we expect. Putting it all together, the file should look like: // javascript const wdio = require( webdriverio ); const assert = require( assert ); const opts = { path: '/wd/hub', port: 4723, capabilities: { platformName: Android , platformVersion: 8 , deviceName: Android Emulator , app: /path/to/the/downloaded/ApiDemos-debug.apk , appPackage: io.appium.android.apis , appActivity: .view.TextFields , automationName: UiAutomator2 } }; async function main () { const client = await wdio.remote(opts); const field = await client.$( android.widget.EditText ); await field.setValue( Hello World! ); const value = await field.getText(); assert.strictEqual(value, Hello World! ); await client.deleteSession(); } main(); You can try and run this test on your own. Simply save it and execute it using node : node index.js If everything is set up correctly, you'll see Appium begin spitting out lots of logs and eventually the app will pop up on the screen and start behaving as if an invisible user were tapping on it! What's Next We've only scratched the surface of what you can do with Appium. Check out these resources to help you on your journey: The Appium command reference - learn about what commands are available, how to use them with specific client libraries, etc... The sample-code directory, where lots more code samples are available discuss.appium.io - this is the Appium community forum, which is a great first place to go for help getting started, or if you think you may have run into a bug The Appium issue tracker - let the Appium maintainers know here if you think you've found a bug","title":"Getting Started"},{"location":"about-appium/getting-started/#getting-started","text":"This doc will get you up and running with a simple Appium test and introduce you to some basic Appium ideas. For a more comprehensive introduction to Appium concepts, please check out the conceptual introduction .","title":"Getting Started"},{"location":"about-appium/getting-started/#installing-appium","text":"Appium can be installed in one of two ways: via NPM or by downloading Appium Desktop , which is a graphical, desktop-based way to launch the Appium server.","title":"Installing Appium"},{"location":"about-appium/getting-started/#installation-via-npm","text":"If you want to run Appium via an npm install , hack with Appium, or contribute to Appium, you will need Node.js and NPM (use nvm , n , or brew install node to install Node.js. Make sure you have not installed Node or Appium with sudo , otherwise you'll run into problems). We recommend the latest stable version, though Appium supports Node 10+. The actual installation is as simple as: npm install -g appium","title":"Installation via NPM"},{"location":"about-appium/getting-started/#installation-via-desktop-app-download","text":"Simply download the latest version of Appium Desktop from the releases page .","title":"Installation via Desktop App Download"},{"location":"about-appium/getting-started/#driver-specific-setup","text":"You probably want to use Appium to automate something specific, like an iOS or Android application. Support for the automation of a particular platform is provided by an Appium \"driver\". There are a number of such drivers that give you access to different kinds of automation technologies, and each come with their own particular setup requirements. Most of these requirements are the same requirements as for app development on a specific platform. For example, to automate Android applications using one of our Android drivers, you'll need the Android SDK configured on your system. At some point, make sure you review the driver documentation for the platform you want to automate, so your system is set up correctly: The XCUITest Driver (for iOS and tvOS apps) The Espresso Driver (for Android apps) The UiAutomator2 Driver (for Android apps) The Windows Driver (for Windows Desktop apps) The Mac Driver (for Mac Desktop apps)","title":"Driver-Specific Setup"},{"location":"about-appium/getting-started/#verifying-the-installation","text":"To verify that all of Appium's dependencies are met you can use appium-doctor . Install it with npm install -g appium-doctor , then run the appium-doctor command, supplying the --ios or --android flags to verify that all of the dependencies are set up correctly.","title":"Verifying the Installation"},{"location":"about-appium/getting-started/#appium-clients","text":"When all is said and done, Appium is just an HTTP server. It sits and waits for connections from a client, which then instructs Appium what kind of session to start and what kind of automation behaviors to enact once a session is started. This means that you never use Appium just by itself. You always have to use it with a client library of some kind (or, if you're adventurous, cURL!). Luckily, Appium speaks the same protocol as Selenium , called the WebDriver Protocol. You can do a lot of things with Appium just by using one of the standard Selenium clients. You may even have one of these on your system already. It's enough to get started, especially if you're using Appium for the purpose of testing web browsers on mobile platforms. Appium can do things that Selenium can't, though, just like mobile devices can do things that web browsers can't. For that reason, we have a set of Appium clients in a variety of programming languages, that extend the regular old Selenium clients with additional functionality. You can see the list of clients and links to download instructions at the Appium clients list . Before moving forward, make sure you have a client downloaded in your favorite language and ready to go.","title":"Appium Clients"},{"location":"about-appium/getting-started/#starting-appium","text":"Now we can kick up an Appium server, either by running it from the command line like so (assuming the NPM install was successful): appium Or by clicking the huge Start Server button inside of Appium Desktop. Appium will now show you a little welcome message showing the version of Appium you're running and what port it's listening on (the default is 4723 ). This port information is vital since you will have to direct your test client to make sure to connect to Appium on this port. If you want to change, the port, you can do so by using the -p flag when starting Appium (be sure to check out the full list of server parameters ).","title":"Starting Appium"},{"location":"about-appium/getting-started/#running-your-first-test","text":"In this section we'll run a basic \"Hello World\" Android test. We've chosen Android because it's available on all platforms. We'll be using the UiAutomator2 Driver so ensure you've read through that doc and gotten your system set up appropriately. We'll also be using JavaScript as the language so that we don't have to deal with additional dependencies. (Chances are, you'll eventually want to automate something other than Android using something other than JavaScript. In that case, check out our sample-code , which has code samples for many languages and platforms.)","title":"Running Your First Test"},{"location":"about-appium/getting-started/#prerequisites","text":"We'll assume you have an Android 8.0 emulator configured and running (the example will work on lower versions, just fix the version numbers accordingly) We'll assume you have this test APK downloaded and available on your local filesystem","title":"Prerequisites"},{"location":"about-appium/getting-started/#setting-up-the-appium-client","text":"For this example, we'll use Webdriver.io as our Appium client. Create a directory for this example, then run: npm init -y Once the project has been initialized, install webdriverio : npm install webdriverio","title":"Setting up the Appium Client"},{"location":"about-appium/getting-started/#session-initialization","text":"Now we can create our test file, named index.js , and initialize the client object: // javascript const wdio = require( webdriverio ); The next thing we need to do is to start an Appium session. We do this by defining a set of server options and Desired Capabilities, and calling wdio.remote() with them. Desired Capabilities are just a set of keys and values that get sent to the Appium server during session initialization, that tell Appium what kind of thing we want to automate. The minimum set of required capabilities for any Appium driver should include: platformName : the name of the platform to automate platformVersion : the version of the platform to automate deviceName : the kind of device to automate app : the path to the app you want to automate (but use the browserName capability instead in the case of automating a web browser) automationName : the name of the driver you wish to use For more information on Desired Capabilities and for a list of all the Capabilities you can use in Appium, see our Capabilities doc . So here is how we begin to construct a session in our test file: // javascript const opts = { path: '/wd/hub', port: 4723, capabilities: { platformName: Android , platformVersion: 8 , deviceName: Android Emulator , app: /path/to/the/downloaded/ApiDemos-debug.apk , appPackage: io.appium.android.apis , appActivity: .view.TextFields , automationName: UiAutomator2 } }; async function main () { const client = await wdio.remote(opts); await client.deleteSession(); } main();","title":"Session Initialization"},{"location":"about-appium/getting-started/#running-test-commands","text":"You can see that we've specified our Appium port and also constructed our Desired Capabilities to match our requirements (but don't forget to replace the path with the actual download path for your system). We've registered this fact with webdriverio and now have a client object which will represent the connection to the Appium server. From here, we can go ahead and start the session, perform some test commands, and end the session. In our case, we will simply type into a text field and check that the correct text was entered: // javascript const field = await client.$( android.widget.EditText ); await field.setValue( Hello World! ); const value = await field.getText(); assert.strictEqual(value, Hello World! ); What's going on here is that after creating a session and launching our app, we're instructing Appium to find an element in the app hierarchy and type into it. The same field is then queried for its text, which is asserted to be what we expect. Putting it all together, the file should look like: // javascript const wdio = require( webdriverio ); const assert = require( assert ); const opts = { path: '/wd/hub', port: 4723, capabilities: { platformName: Android , platformVersion: 8 , deviceName: Android Emulator , app: /path/to/the/downloaded/ApiDemos-debug.apk , appPackage: io.appium.android.apis , appActivity: .view.TextFields , automationName: UiAutomator2 } }; async function main () { const client = await wdio.remote(opts); const field = await client.$( android.widget.EditText ); await field.setValue( Hello World! ); const value = await field.getText(); assert.strictEqual(value, Hello World! ); await client.deleteSession(); } main(); You can try and run this test on your own. Simply save it and execute it using node : node index.js If everything is set up correctly, you'll see Appium begin spitting out lots of logs and eventually the app will pop up on the screen and start behaving as if an invisible user were tapping on it!","title":"Running Test Commands"},{"location":"about-appium/getting-started/#whats-next","text":"We've only scratched the surface of what you can do with Appium. Check out these resources to help you on your journey: The Appium command reference - learn about what commands are available, how to use them with specific client libraries, etc... The sample-code directory, where lots more code samples are available discuss.appium.io - this is the Appium community forum, which is a great first place to go for help getting started, or if you think you may have run into a bug The Appium issue tracker - let the Appium maintainers know here if you think you've found a bug","title":"What's Next"},{"location":"about-appium/intro/","text":"Introduction to Appium Appium is an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms. Native apps are those written using the iOS, Android, or Windows SDKs. Mobile web apps are web apps accessed using a mobile browser (Appium supports Safari on iOS and Chrome or the built-in 'Browser' app on Android). Hybrid apps have a wrapper around a \"webview\" -- a native control that enables interaction with web content. Projects like Apache Cordova make it easy to build apps using web technologies that are then bundled into a native wrapper, creating a hybrid app. Importantly, Appium is \"cross-platform\": it allows you to write tests against multiple platforms (iOS, Android, Windows), using the same API. This enables code reuse between iOS, Android, and Windows testsuites. For specific information about what it means for Appium to \"support\" its platforms, and automation modalities, please see the platform support doc . Appium Philosophy Appium was designed to meet mobile automation needs according to a philosophy outlined by the following four tenets: You shouldn't have to recompile your app or modify it in any way in order to automate it. You shouldn't be locked into a specific language or framework to write and run your tests. A mobile automation framework shouldn't reinvent the wheel when it comes to automation APIs. A mobile automation framework should be open source, in spirit and practice as well as in name! Appium Design So how does the structure of the Appium project live out this philosophy? We meet requirement #1 by using vendor-provided automation frameworks under the hood. That way, we don't need to compile in any Appium-specific or third-party code or frameworks to your app. This means you're testing the same app you're shipping . The vendor-provided frameworks we use are: iOS 9.3 and above: Apple's XCUITest iOS 9.3 and lower: Apple's UIAutomation Android 4.3+: Google's UiAutomator/UiAutomator2 Windows: Microsoft's WinAppDriver We meet requirement #2 by wrapping the vendor-provided frameworks in one API, the WebDriver API. WebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol (known as the JSON Wire Protocol ). Given this client-server architecture, a client written in any language can be used to send the appropriate HTTP requests to the server. There are already clients written in every popular programming language . This also means that you're free to use whatever test runner and test framework you want; the client libraries are simply HTTP clients and can be mixed into your code any way you please. In other words, Appium WebDriver clients are not technically \"test frameworks\" -- they are \"automation libraries\". You can manage your test environment any way you like! We meet requirement #3 in the same way: WebDriver has become the de facto standard for automating web browsers, and is a W3C Working Draft . Why do something totally different for mobile? Instead we have extended the protocol with extra API methods useful for mobile automation. It should be obvious that requirement #4 is a given -- you're reading this because Appium is open source . Appium Concepts Client/Server Architecture Appium is at its heart a webserver that exposes a REST API. It receives connections from a client, listens for commands, executes those commands on a mobile device, and responds with an HTTP response representing the result of the command execution. The fact that we have a client/server architecture opens up a lot of possibilities: we can write our test code in any language that has a http client API, but it is easier to use one of the Appium client libraries . We can put the server on a different machine than our tests are running on. We can write test code and rely on a cloud service like Sauce Labs LambdaTest to receive and interpret the commands. Session Automation is always performed in the context of a session. Clients initiate a session with a server in ways specific to each library, but they all end up sending a POST /session request to the server, with a JSON object called the 'desired capabilities' object. At this point the server will start up the automation session and respond with a session ID which is used for sending further commands. Desired Capabilities Desired capabilities are a set of keys and values (i.e., a map or hash) sent to the Appium server to tell the server what kind of automation session we're interested in starting up. There are also various capabilities which can modify the behavior of the server during automation. For example, we might set the platformName capability to iOS to tell Appium that we want an iOS session, rather than an Android or Windows one. Or we might set the safariAllowPopups capability to true in order to ensure that, during a Safari automation session, we're allowed to use JavaScript to open up new windows. See the capabilities doc for the complete list of capabilities available for Appium. Appium Server Appium is a server written in Node.js. It can be built and installed from source or installed directly from NPM : $ npm install -g appium $ appium The beta of Appium is available via NPM with npm install -g appium@beta . It is the development version so it might have breaking changes. Please uninstall appium@beta ( npm uninstall -g appium@beta ) before installing new versions in order to have a clean set of dependencies. Appium Clients There are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#) which support Appium's extensions to the WebDriver protocol. When using Appium, you want to use these client libraries instead of your regular WebDriver client. You can view the full list of libraries here . Appium Desktop There is a GUI wrapper around the Appium server that can be downloaded for any platform. It comes bundled with everything required to run the Appium server, so you don't need to worry about Node. It also comes with an Inspector, which enables you to check out the hierarchy of your app. This can come in handy when writing tests. Getting Started Congratulations! You are now armed with enough knowledge to begin using Appium. Why not head to the getting started doc for more detailed requirements and instructions?","title":"Introduction"},{"location":"about-appium/intro/#introduction-to-appium","text":"Appium is an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms. Native apps are those written using the iOS, Android, or Windows SDKs. Mobile web apps are web apps accessed using a mobile browser (Appium supports Safari on iOS and Chrome or the built-in 'Browser' app on Android). Hybrid apps have a wrapper around a \"webview\" -- a native control that enables interaction with web content. Projects like Apache Cordova make it easy to build apps using web technologies that are then bundled into a native wrapper, creating a hybrid app. Importantly, Appium is \"cross-platform\": it allows you to write tests against multiple platforms (iOS, Android, Windows), using the same API. This enables code reuse between iOS, Android, and Windows testsuites. For specific information about what it means for Appium to \"support\" its platforms, and automation modalities, please see the platform support doc .","title":"Introduction to Appium"},{"location":"about-appium/intro/#appium-philosophy","text":"Appium was designed to meet mobile automation needs according to a philosophy outlined by the following four tenets: You shouldn't have to recompile your app or modify it in any way in order to automate it. You shouldn't be locked into a specific language or framework to write and run your tests. A mobile automation framework shouldn't reinvent the wheel when it comes to automation APIs. A mobile automation framework should be open source, in spirit and practice as well as in name!","title":"Appium Philosophy"},{"location":"about-appium/intro/#appium-design","text":"So how does the structure of the Appium project live out this philosophy? We meet requirement #1 by using vendor-provided automation frameworks under the hood. That way, we don't need to compile in any Appium-specific or third-party code or frameworks to your app. This means you're testing the same app you're shipping . The vendor-provided frameworks we use are: iOS 9.3 and above: Apple's XCUITest iOS 9.3 and lower: Apple's UIAutomation Android 4.3+: Google's UiAutomator/UiAutomator2 Windows: Microsoft's WinAppDriver We meet requirement #2 by wrapping the vendor-provided frameworks in one API, the WebDriver API. WebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol (known as the JSON Wire Protocol ). Given this client-server architecture, a client written in any language can be used to send the appropriate HTTP requests to the server. There are already clients written in every popular programming language . This also means that you're free to use whatever test runner and test framework you want; the client libraries are simply HTTP clients and can be mixed into your code any way you please. In other words, Appium WebDriver clients are not technically \"test frameworks\" -- they are \"automation libraries\". You can manage your test environment any way you like! We meet requirement #3 in the same way: WebDriver has become the de facto standard for automating web browsers, and is a W3C Working Draft . Why do something totally different for mobile? Instead we have extended the protocol with extra API methods useful for mobile automation. It should be obvious that requirement #4 is a given -- you're reading this because Appium is open source .","title":"Appium Design"},{"location":"about-appium/intro/#appium-concepts","text":"Client/Server Architecture Appium is at its heart a webserver that exposes a REST API. It receives connections from a client, listens for commands, executes those commands on a mobile device, and responds with an HTTP response representing the result of the command execution. The fact that we have a client/server architecture opens up a lot of possibilities: we can write our test code in any language that has a http client API, but it is easier to use one of the Appium client libraries . We can put the server on a different machine than our tests are running on. We can write test code and rely on a cloud service like Sauce Labs LambdaTest to receive and interpret the commands. Session Automation is always performed in the context of a session. Clients initiate a session with a server in ways specific to each library, but they all end up sending a POST /session request to the server, with a JSON object called the 'desired capabilities' object. At this point the server will start up the automation session and respond with a session ID which is used for sending further commands. Desired Capabilities Desired capabilities are a set of keys and values (i.e., a map or hash) sent to the Appium server to tell the server what kind of automation session we're interested in starting up. There are also various capabilities which can modify the behavior of the server during automation. For example, we might set the platformName capability to iOS to tell Appium that we want an iOS session, rather than an Android or Windows one. Or we might set the safariAllowPopups capability to true in order to ensure that, during a Safari automation session, we're allowed to use JavaScript to open up new windows. See the capabilities doc for the complete list of capabilities available for Appium. Appium Server Appium is a server written in Node.js. It can be built and installed from source or installed directly from NPM : $ npm install -g appium $ appium The beta of Appium is available via NPM with npm install -g appium@beta . It is the development version so it might have breaking changes. Please uninstall appium@beta ( npm uninstall -g appium@beta ) before installing new versions in order to have a clean set of dependencies. Appium Clients There are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#) which support Appium's extensions to the WebDriver protocol. When using Appium, you want to use these client libraries instead of your regular WebDriver client. You can view the full list of libraries here . Appium Desktop There is a GUI wrapper around the Appium server that can be downloaded for any platform. It comes bundled with everything required to run the Appium server, so you don't need to worry about Node. It also comes with an Inspector, which enables you to check out the hierarchy of your app. This can come in handy when writing tests.","title":"Appium Concepts"},{"location":"about-appium/intro/#getting-started","text":"Congratulations! You are now armed with enough knowledge to begin using Appium. Why not head to the getting started doc for more detailed requirements and instructions?","title":"Getting Started"},{"location":"about-appium/platform-support/","text":"Appium Platform Support Appium supports a variety of platforms and testing modalities (native, hybrid, web, real devices, simulators, etc...). This document is designed to make explicit the level of support and requirements for each of these, or guide each driver to proper page. Appium team support This section lists drivers that are supported by Appium team. iOS Support iOS automation is supported with two drivers: The XCUITest Driver The (deprecated) UIAutomation Driver The safaridriver for Apple's safaridriver Please refer to these driver docs for setup instructions. Versions: 12.2 and up (as a rule, Appium supports the latest two iOS versions) Devices: Simulator and real device for iPhone, iPad and tvOS Native app support: Yes, with debug version of .app (simulator), or correctly-signed .ipa (real devices). Underlying support is provided by Apple's XCUITest (or UIAutomation for older versions) framework. Mobile web support: Yes, via automation of mobile Safari. See the mobile web doc for instructions. Hybrid support: Yes. See the hybrid doc for instructions. Support for automating multiple apps in one session: No Support for automating multiple devices simultaneously: Yes Support for automating vendor-provided or third-party apps: Yes, apps which are already installed on the device Support for automating custom, non-standard UI controls: Minimal. You need to set accessibility information on the control which enables some basic automation. Android Support Android automation is supported with two drivers: The UiAutomator2 Driver The Espresso Driver The (deprecated) UiAutomator Driver The geckodriver for Firefox and GeckoView Please refer to these driver docs for setup instructions. Versions: 4.3 and up Versions 4.3 and up are supported via Appium's UiAutomator and UiAutomator2 libraries. UiAutomator is the default driver. Devices: Android emulators and real Android devices Native app support: Yes Mobile web support: Yes. Automation is effected using a bundled Chromedriver server as a proxy. With 4.3, automation works on official Chrome browser or Chromium only. With 4.4+, automation also works on the built-in \"Browser\" app. Chrome/Chromium/Browser must already be installed on the device under test. See the mobile web doc for instructions. Hybrid support: Yes. See the hybrid doc for instructions. With default Appium automation backend: versions 4.4 and up Support for automating multiple apps in one session: Yes Support for automating multiple devices simultaneously: Yes, though Appium must be started using different ports for the server parameters --port , --bootstrap-port and/or --chromedriver-port . See the server args doc for more information on these parameters. Support for automating vendor-provided or third-party apps: Yes Support for automating custom, non-standard UI controls: No macOS Support macOS automation is supported with below drivers. The Mac2Driver is for macOS 10.15 or later The (deprecated) MacDriver is for lower macOS versions Windows Desktop Support Windows automation is supported with below drivers. The WinAppDriver The geckodriver for Firefox and GeckoView Vendors/Community based drivers This section lists drivers that are supported by vendors and community. You.i Engine Support The You.i Engine Flutter Support The Flutter Driver Roku Support The Roku Driver WebOS Support The WebOS Driver","title":"Supported Platforms"},{"location":"about-appium/platform-support/#appium-platform-support","text":"Appium supports a variety of platforms and testing modalities (native, hybrid, web, real devices, simulators, etc...). This document is designed to make explicit the level of support and requirements for each of these, or guide each driver to proper page.","title":"Appium Platform Support"},{"location":"about-appium/platform-support/#appium-team-support","text":"This section lists drivers that are supported by Appium team.","title":"Appium team support"},{"location":"about-appium/platform-support/#ios-support","text":"iOS automation is supported with two drivers: The XCUITest Driver The (deprecated) UIAutomation Driver The safaridriver for Apple's safaridriver Please refer to these driver docs for setup instructions. Versions: 12.2 and up (as a rule, Appium supports the latest two iOS versions) Devices: Simulator and real device for iPhone, iPad and tvOS Native app support: Yes, with debug version of .app (simulator), or correctly-signed .ipa (real devices). Underlying support is provided by Apple's XCUITest (or UIAutomation for older versions) framework. Mobile web support: Yes, via automation of mobile Safari. See the mobile web doc for instructions. Hybrid support: Yes. See the hybrid doc for instructions. Support for automating multiple apps in one session: No Support for automating multiple devices simultaneously: Yes Support for automating vendor-provided or third-party apps: Yes, apps which are already installed on the device Support for automating custom, non-standard UI controls: Minimal. You need to set accessibility information on the control which enables some basic automation.","title":"iOS Support"},{"location":"about-appium/platform-support/#android-support","text":"Android automation is supported with two drivers: The UiAutomator2 Driver The Espresso Driver The (deprecated) UiAutomator Driver The geckodriver for Firefox and GeckoView Please refer to these driver docs for setup instructions. Versions: 4.3 and up Versions 4.3 and up are supported via Appium's UiAutomator and UiAutomator2 libraries. UiAutomator is the default driver. Devices: Android emulators and real Android devices Native app support: Yes Mobile web support: Yes. Automation is effected using a bundled Chromedriver server as a proxy. With 4.3, automation works on official Chrome browser or Chromium only. With 4.4+, automation also works on the built-in \"Browser\" app. Chrome/Chromium/Browser must already be installed on the device under test. See the mobile web doc for instructions. Hybrid support: Yes. See the hybrid doc for instructions. With default Appium automation backend: versions 4.4 and up Support for automating multiple apps in one session: Yes Support for automating multiple devices simultaneously: Yes, though Appium must be started using different ports for the server parameters --port , --bootstrap-port and/or --chromedriver-port . See the server args doc for more information on these parameters. Support for automating vendor-provided or third-party apps: Yes Support for automating custom, non-standard UI controls: No","title":"Android Support"},{"location":"about-appium/platform-support/#macos-support","text":"macOS automation is supported with below drivers. The Mac2Driver is for macOS 10.15 or later The (deprecated) MacDriver is for lower macOS versions","title":"macOS Support"},{"location":"about-appium/platform-support/#windows-desktop-support","text":"Windows automation is supported with below drivers. The WinAppDriver The geckodriver for Firefox and GeckoView","title":"Windows Desktop Support"},{"location":"about-appium/platform-support/#vendorscommunity-based-drivers","text":"This section lists drivers that are supported by vendors and community.","title":"Vendors/Community based drivers"},{"location":"about-appium/platform-support/#youi-engine-support","text":"The You.i Engine","title":"You.i Engine Support"},{"location":"about-appium/platform-support/#flutter-support","text":"The Flutter Driver","title":"Flutter Support"},{"location":"about-appium/platform-support/#roku-support","text":"The Roku Driver","title":"Roku Support"},{"location":"about-appium/platform-support/#webos-support","text":"The WebOS Driver","title":"WebOS Support"},{"location":"advanced-concepts/cross-domain-iframes/","text":"Cross-domain iFrame Automation Same-origin policy prevents Appium from automating iFrames that have a different domain to the parent. Subdomain workaround If the parent and the iFrame share the same domain (e.g. site.com and shop.site.com ), you can set document.domain on both the parent and each iFrame to a common domain. This solves the same-origin policy issue and allows automation. For example: Parent: html head script document.domain = 'site.com'; /script /head body iframe src= http://shop.site.com width= 200 height= 200 /iframe /body /html Child iFrame: html head script document.domain = 'site.com'; /script /head body p This is an iFrame! /p /body /html","title":"Cross-domain iframes"},{"location":"advanced-concepts/cross-domain-iframes/#cross-domain-iframe-automation","text":"Same-origin policy prevents Appium from automating iFrames that have a different domain to the parent.","title":"Cross-domain iFrame Automation"},{"location":"advanced-concepts/cross-domain-iframes/#subdomain-workaround","text":"If the parent and the iFrame share the same domain (e.g. site.com and shop.site.com ), you can set document.domain on both the parent and each iFrame to a common domain. This solves the same-origin policy issue and allows automation. For example: Parent: html head script document.domain = 'site.com'; /script /head body iframe src= http://shop.site.com width= 200 height= 200 /iframe /body /html Child iFrame: html head script document.domain = 'site.com'; /script /head body p This is an iFrame! /p /body /html","title":"Subdomain workaround"},{"location":"advanced-concepts/element-finding-plugins/","text":"Element Finding Plugins As of version 1.9.2, Appium supports the use of plugins that can be used to assist in finding elements, via the -custom locator strategy. This is an experimental feature. Usage You install a third-party element finding plugin which has been developed according to the Appium element finding plugin standard (see below). (It must, therefore, be a Node module, whether installed via NPM or referenced locally). You can install this plugin wherever you like on your system, though there are three basic options: A directory you manage separately from Appium (by running npm install plugin in an arbitrary folder) Inside the Appium dependency tree itself (by running npm install plugin inside the Appium root directory) Globally on your system (by running npm install -g plugin ) (Of course, the plugin itself might have its own additional installation or setup instructions, which would be detailed in the plugin's docs.) You add a new capability to your test: customFindModules . This capability must be an object with at least one key and one value. The key is called the \"plugin shortcut\", and the value is called the \"plugin reference\". In this example: { \"customFindModules\": { \"plug\": \"my-element-finding-plugin\" } } \"plug\" is the shortcut, and \"my-element-finding-plugin\" is the reference. You will use the shortcut in your own test code, so it can be any string which is a valid JSON key. The reference must be a reference to the plugin's Node module, and it must be formatted in such a way that Appium can require it using Node's module resolution . Once you've started a session with this capability, we say that the plugin (or plugins---multiple plugins are of course supported) are registered . You can find an element using a registered plugin by doing two things: Using the -custom locator strategy Prefixing your selector with shortcut : So with the example plugin above, if I wanted to find an element using the selector \"foo\", it would look like this (in imaginary client code): driver.findElement('-custom', 'plug:foo'); In other words, I'm using the -custom locator strategy, and sending in the selector foo , making sure Appium knows that it is specifically the plug plugin which should handle the find request. In the case where only one plugin is registered, you can omit the shortcut in the selector (since Appium will not be confused about which plugin you want to use): driver.findElement('-custom', 'foo'); The -custom locator strategy is not well supported in all Appium clients at this point; check client documentation for the correct invocation for this strategy. Developing a Plugin Anyone can develop an element finding plugin for Appium. The only rules are as follows: The plugin must be a Node module which has a named export called find This method, when called, must return a (possibly empty) array of element objects When Appium calls your find method, it will pass the following parameters: An instance of the driver object representing the current session (this would be, for example an instance of XCUITestDriver ) A logging object which you can use to write logs into the Appium log The selector (a string) the user of your plugin has sent for the purpose of finding the element A boolean value: whether the user is looking for multiple elements (true) or not (false). Note that you must always return an array, regardless of whether the user needs more than one element. This flag is passed in case it is useful for optimizing searches that do not require multiple elements returned. That's all there is to it! See the list of known plugins below for concrete examples. List of Known Plugins Test.ai Classifier","title":"Using Element Finding Plugins"},{"location":"advanced-concepts/element-finding-plugins/#element-finding-plugins","text":"As of version 1.9.2, Appium supports the use of plugins that can be used to assist in finding elements, via the -custom locator strategy. This is an experimental feature.","title":"Element Finding Plugins"},{"location":"advanced-concepts/element-finding-plugins/#usage","text":"You install a third-party element finding plugin which has been developed according to the Appium element finding plugin standard (see below). (It must, therefore, be a Node module, whether installed via NPM or referenced locally). You can install this plugin wherever you like on your system, though there are three basic options: A directory you manage separately from Appium (by running npm install plugin in an arbitrary folder) Inside the Appium dependency tree itself (by running npm install plugin inside the Appium root directory) Globally on your system (by running npm install -g plugin ) (Of course, the plugin itself might have its own additional installation or setup instructions, which would be detailed in the plugin's docs.) You add a new capability to your test: customFindModules . This capability must be an object with at least one key and one value. The key is called the \"plugin shortcut\", and the value is called the \"plugin reference\". In this example: { \"customFindModules\": { \"plug\": \"my-element-finding-plugin\" } } \"plug\" is the shortcut, and \"my-element-finding-plugin\" is the reference. You will use the shortcut in your own test code, so it can be any string which is a valid JSON key. The reference must be a reference to the plugin's Node module, and it must be formatted in such a way that Appium can require it using Node's module resolution . Once you've started a session with this capability, we say that the plugin (or plugins---multiple plugins are of course supported) are registered . You can find an element using a registered plugin by doing two things: Using the -custom locator strategy Prefixing your selector with shortcut : So with the example plugin above, if I wanted to find an element using the selector \"foo\", it would look like this (in imaginary client code): driver.findElement('-custom', 'plug:foo'); In other words, I'm using the -custom locator strategy, and sending in the selector foo , making sure Appium knows that it is specifically the plug plugin which should handle the find request. In the case where only one plugin is registered, you can omit the shortcut in the selector (since Appium will not be confused about which plugin you want to use): driver.findElement('-custom', 'foo'); The -custom locator strategy is not well supported in all Appium clients at this point; check client documentation for the correct invocation for this strategy.","title":"Usage"},{"location":"advanced-concepts/element-finding-plugins/#developing-a-plugin","text":"Anyone can develop an element finding plugin for Appium. The only rules are as follows: The plugin must be a Node module which has a named export called find This method, when called, must return a (possibly empty) array of element objects When Appium calls your find method, it will pass the following parameters: An instance of the driver object representing the current session (this would be, for example an instance of XCUITestDriver ) A logging object which you can use to write logs into the Appium log The selector (a string) the user of your plugin has sent for the purpose of finding the element A boolean value: whether the user is looking for multiple elements (true) or not (false). Note that you must always return an array, regardless of whether the user needs more than one element. This flag is passed in case it is useful for optimizing searches that do not require multiple elements returned. That's all there is to it! See the list of known plugins below for concrete examples.","title":"Developing a Plugin"},{"location":"advanced-concepts/element-finding-plugins/#list-of-known-plugins","text":"Test.ai Classifier","title":"List of Known Plugins"},{"location":"advanced-concepts/event-timings/","text":"Appium Event Timing Appium comes with the ability to retrieve timing information about startup information and command length. This is an advanced feature that is controlled by the use of the eventTimings capability (set it to true to log event timings). With this capability turned on, the GET /session/:id response (i.e., the response to driver.getSessionDetails() or similar, depending on client) will be decorated with an events property. This is the structure of that events property: { event_type : [ occurence_timestamp_1 , ...], commands : [ { cmd : command_name , startTime : js_timestamp , endTime : js_timestamp }, ... ] } In other words, the events property has 2 kinds of properties of its own: Properties which are the names of event types The commands property Properties which are names of event types correspond to an array of timestamps when that event happened. It's an array because events might happen multiple times in the course of a session. Examples of event types include: newSessionRequested newSessionStarted (Individual drivers will define their own event types, so we do not have an exhaustive list to share here. It's best to actually get one of these responses from a real session to inspect the possible event types.) The commands property is an array of objects. Each object has the name of the Appium-internal command (for example click ), as well as the time the command started processing and the time it finished processing. With this data, you can calculate the time between events, or a strict timeline of events, or statistical information about average length of a certain type of command, and so on. You can only receive data about events that have happened when you make the call to /session/:id , so the best time to get data about an entire session is right before quitting it. The Appium team maintains an event timings parser tool that can be used to generate various kinds of reports from event timings output: appium/appium-event-parser . Add a custom event Since Appium 1.16.0, you can add a custom event. You can send a custom event name to the Appium server using the Log Event API , and the server will store the timestamp. The Get events command can be used to retrieve named events' timestamps later on.","title":"The Event Timings API"},{"location":"advanced-concepts/event-timings/#appium-event-timing","text":"Appium comes with the ability to retrieve timing information about startup information and command length. This is an advanced feature that is controlled by the use of the eventTimings capability (set it to true to log event timings). With this capability turned on, the GET /session/:id response (i.e., the response to driver.getSessionDetails() or similar, depending on client) will be decorated with an events property. This is the structure of that events property: { event_type : [ occurence_timestamp_1 , ...], commands : [ { cmd : command_name , startTime : js_timestamp , endTime : js_timestamp }, ... ] } In other words, the events property has 2 kinds of properties of its own: Properties which are the names of event types The commands property Properties which are names of event types correspond to an array of timestamps when that event happened. It's an array because events might happen multiple times in the course of a session. Examples of event types include: newSessionRequested newSessionStarted (Individual drivers will define their own event types, so we do not have an exhaustive list to share here. It's best to actually get one of these responses from a real session to inspect the possible event types.) The commands property is an array of objects. Each object has the name of the Appium-internal command (for example click ), as well as the time the command started processing and the time it finished processing. With this data, you can calculate the time between events, or a strict timeline of events, or statistical information about average length of a certain type of command, and so on. You can only receive data about events that have happened when you make the call to /session/:id , so the best time to get data about an entire session is right before quitting it. The Appium team maintains an event timings parser tool that can be used to generate various kinds of reports from event timings output: appium/appium-event-parser .","title":"Appium Event Timing"},{"location":"advanced-concepts/event-timings/#add-a-custom-event","text":"Since Appium 1.16.0, you can add a custom event. You can send a custom event name to the Appium server using the Log Event API , and the server will store the timestamp. The Get events command can be used to retrieve named events' timestamps later on.","title":"Add a custom event"},{"location":"advanced-concepts/grid/","text":"Selenium Grid You are able to register your appium server with a local Selenium grid ( setup docs ) by using the --nodeconfig server parameter. appium --nodeconfig /path/to/nodeconfig.json # or, if running from source: node . --nodeconfig /path/to/nodeconfig.json In the node config file you have to define the browserName , version and platform and based on these parameters the grid will re-direct your test to the right device. You will also need to configure your host details and the selenium grid details. For a full list of all parameters and descriptions look here Once you start the appium server and it registers with the grid, you will see your device on the grid console page: \"http:// \\ grid-ip-adress> : \\ grid-port> /grid/console\" Grid Node Configuration Example json file { capabilities : [ { browserName : e.g._iPhone5_or_iPad4 , version : version_of_iOS_e.g._7.1 , maxInstances : 1, platform : platform_e.g._MAC_or_ANDROID } ], configuration : { cleanUpCycle :2000, timeout :30000, proxy : org.openqa.grid.selenium.proxy.DefaultRemoteProxy , url : http:// host_name_appium_server_or_ip-address_appium_server : appium_port /wd/hub , host : host_name_appium_server_or_ip-address_appium_server , port : appium_port , maxSession : 1, register : true, registerCycle : 5000, hubPort : grid_port , hubHost : Grid_host_name_or_grid_ip-address hubProtocol : Protocol_of_Grid_defaults_to_http } } Valid platforms are listed here If url , host , and port are not given, the config will be auto updated to point to localhost:whatever-port-Appium-started-on. If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your host url docs; localhost and 127.0.0.1 will prevent Selenium Grid from connecting correctly.","title":"Using Selenium Grid with Appium"},{"location":"advanced-concepts/grid/#selenium-grid","text":"You are able to register your appium server with a local Selenium grid ( setup docs ) by using the --nodeconfig server parameter. appium --nodeconfig /path/to/nodeconfig.json # or, if running from source: node . --nodeconfig /path/to/nodeconfig.json In the node config file you have to define the browserName , version and platform and based on these parameters the grid will re-direct your test to the right device. You will also need to configure your host details and the selenium grid details. For a full list of all parameters and descriptions look here Once you start the appium server and it registers with the grid, you will see your device on the grid console page: \"http:// \\ grid-ip-adress> : \\ grid-port> /grid/console\"","title":"Selenium Grid"},{"location":"advanced-concepts/grid/#grid-node-configuration-example-json-file","text":"{ capabilities : [ { browserName : e.g._iPhone5_or_iPad4 , version : version_of_iOS_e.g._7.1 , maxInstances : 1, platform : platform_e.g._MAC_or_ANDROID } ], configuration : { cleanUpCycle :2000, timeout :30000, proxy : org.openqa.grid.selenium.proxy.DefaultRemoteProxy , url : http:// host_name_appium_server_or_ip-address_appium_server : appium_port /wd/hub , host : host_name_appium_server_or_ip-address_appium_server , port : appium_port , maxSession : 1, register : true, registerCycle : 5000, hubPort : grid_port , hubHost : Grid_host_name_or_grid_ip-address hubProtocol : Protocol_of_Grid_defaults_to_http } } Valid platforms are listed here If url , host , and port are not given, the config will be auto updated to point to localhost:whatever-port-Appium-started-on. If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your host url docs; localhost and 127.0.0.1 will prevent Selenium Grid from connecting correctly.","title":"Grid Node Configuration Example json file"},{"location":"advanced-concepts/image-elements/","text":"Finding and Interacting with Image Elements Using the experimental -image locator strategy, it is possible to send an Appium an image file representing an element you want to tap. If Appium can find a screen region matching your template, it will wrap up information about this region as a standard WebElement and send it back to your Appium client. The strategy will be made available differently for each Appium client, for example: driver.findElementByImage() . Image Selectors In conjunction with any locator strategy, you need to use a \"selector\" which details the specific nature of your find request. In the case of the -image strategy, the selector must be a string which is a base64-encoded image file representing the template you want to use for matching. Image Elements If the image match is successful, Appium will cache information about the match and create a standard response for your client to consume, resulting in the instantiation of a standard element object in your test script. Using this element object, you are able to call a small number of methods on the \"Image Element\", as if it were a bona-fide WebElement : click isDisplayed getSize getLocation getLocationInView getElementRect getAttribute visual returns matched image as base64 data if getMatchedImageResult is true score returns the similarity score as a float number in range [0.0, 1.0] sine Appium 1.18.0 These actions are supported on \"Image Elements\" because they are the actions which involve only use of screen position for their functioning. Other actions (like sendKeys , for example) are not supported, because all Appium can know based on your template image is whether or not there is a screen region which visually matches it--Appium has no way of turning that information into a driver-specific UI element object, which would be necessary for the use of other actions. It's important to keep this important point in mind: there is nothing \"magic\" about Image Elements---they merely reference screen coordinates, and thus \"tapping\" an Image Element is internally nothing more than Appium constructing a tap at a point in the center of the Image Element's screen bounds (and in fact you can tell Appium which API to use to perform that tap---see below). Related Settings Because finding elements by image relies on image analysis software in conjunction with Appium's screenshot functionality and the reference images you yourself provide, we provide a number of settings that help you modulate this feature, in some cases potentially speeding up the match or making it more accurate. To access these settings, you should use the Appium Settings API . These are the settings that are available: Setting Name Description Possible Values Default Value imageMatchThreshold The OpenCV match threshold below which to consider the find a failure. Basically the range of possibilities is between 0 (which means no threshold should be used) and 1 (which means that the reference image must be an exact pixel-for-pixel match). The exact values in between have no absolute meaning. For example a match that requires drastic resizing of a reference image will come out as a lower match strength than otherwise. It's recommended you try the default setting, and then incrementally lower the threshold if you're not finding matching elements. If you're matching the wrong element, try increasing the threshold value. Numbers from 0 to 1 0.4 fixImageFindScreenshotDims Appium knows the screen dimensions, and ultimately these are the dimensions which are relevant for deciding where to tap on the screen. If the screenshot retrieved (via Appium's native methods, or an external source) does not match the screen dimensions, this setting dictates that Appium will adjust the size of the screenshot to match, ensuring that matched elements are found at the correct coordinates. Turn this setting off if you know it's not necessary, and Appium will forego the check, potentially speeding things up a bit. true or false true fixImageTemplateSize OpenCV will not allow the matching of a reference image / template if that image is larger than the base image to match against. It can happen that the reference image you send in has dimensions which are larger than the screenshot Appium retrieves. In this case the match will automatically fail. If you set this setting to true , Appium will resize the template to ensure it is at least smaller than the size of the screenshot. true or false false fixImageTemplateScale Appium resizes a base image to fit its window size before matching them with OpenCV. If you set this setting to true , Appium scales a reference image you send in as the same scale Appium scales the base image to fit the window size. e.g. iOS screenshot is 750 \u00d7 1334 pixels base image. The window size is 375 x 667 . Appium rescale the base image to window size scaling it with 0.5 . A reference image is based on the screenshot size, never the image matches with the window size scale. This settings allow Appium to scale the reference image with 0.5 . appium-base-driver#306 true or false false defaultImageTemplateScale Appium does not resize template images by default (the value of 1.0). Although, storing scaled template images might help to save size of the storage. E.g. One has could represent 1080 \u00d7 126 pixels area by 270 \u00d7 32 pixels template image (the value of defaultImageTemplateScale is expected to be set to 4.0). Check appium-base-driver#307 for more details. e.g., 0.5 , 10.0 , 100 1.0 checkForImageElementStaleness It can happen that, in between the time you have matched an image element and the time you choose to tap on it, the element is no longer present. The only way for Appium to determine this is to attempt to re-match the template immediately before tapping. If that re-match fails, you will get a StaleElementException , as you would expect. Turn this to false to skip the check, potentially speeding things up, but potentially running into stale element issues without the benefit of an exception to let you know you did. true or false true autoUpdateImageElementPosition It can happen that a matched image changes position in between the time it is found and the time you tap on it. As with the previous setting, Appium can automatically adjust its position if it determines in a re-match that the position changed. true or false false imageElementTapStrategy In order to tap on a found image element, Appium has to use one of its touch action strategies. The available strategies are the W3C Actions API, or the older MJSONWP TouchActions API. Stick to the default unless the driver you are using does not support the W3C Actions API for some reason. \"w3cActions\" or \"touchActions\" \"w3cActions\" getMatchedImageResult Appium does not store the matched image result. Although, storing the result in memory might help for debugging whether which area is matched by find by image. Appium returns the image against attribute API as visual . true or false false imageMatchMethod The name of the template matching method for find element by image since Appium 1.22.0. Please read py_template_matching for more details about the meaning of each value. TM_CCOEFF , TM_CCOEFF_NORMED , TM_CCORR , TM_CCORR_NORMED , TM_SQDIFF , TM_SQDIFF_NORMED TM_CCOEFF_NORMED Note that each language-specific Appium client may make these settings available via special constants which could differ slightly from the exact setting names mentioned above. Debug getMatchedImageResult might help for debugging if Appium found the provided image expectedly. visual attribute returns base64 data if getMatchedImageResult is true . # Ruby core @driver.update_settings({ getMatchedImageResult: true }) el = @driver.find_element_by_image 'path/to/img.ong' img_el.visual # returns base64 encoded string # Python self.driver.update_settings({ getMatchedImageResult : True}) el = self.driver.find_element_by_image('path/to/img.ong') el.get_attribute('visual') # returns base64 encoded string reference: https://github.com/appium/appium-base-driver/pull/327","title":"Finding Image Elements"},{"location":"advanced-concepts/image-elements/#finding-and-interacting-with-image-elements","text":"Using the experimental -image locator strategy, it is possible to send an Appium an image file representing an element you want to tap. If Appium can find a screen region matching your template, it will wrap up information about this region as a standard WebElement and send it back to your Appium client. The strategy will be made available differently for each Appium client, for example: driver.findElementByImage() .","title":"Finding and Interacting with Image Elements"},{"location":"advanced-concepts/image-elements/#image-selectors","text":"In conjunction with any locator strategy, you need to use a \"selector\" which details the specific nature of your find request. In the case of the -image strategy, the selector must be a string which is a base64-encoded image file representing the template you want to use for matching.","title":"Image Selectors"},{"location":"advanced-concepts/image-elements/#image-elements","text":"If the image match is successful, Appium will cache information about the match and create a standard response for your client to consume, resulting in the instantiation of a standard element object in your test script. Using this element object, you are able to call a small number of methods on the \"Image Element\", as if it were a bona-fide WebElement : click isDisplayed getSize getLocation getLocationInView getElementRect getAttribute visual returns matched image as base64 data if getMatchedImageResult is true score returns the similarity score as a float number in range [0.0, 1.0] sine Appium 1.18.0 These actions are supported on \"Image Elements\" because they are the actions which involve only use of screen position for their functioning. Other actions (like sendKeys , for example) are not supported, because all Appium can know based on your template image is whether or not there is a screen region which visually matches it--Appium has no way of turning that information into a driver-specific UI element object, which would be necessary for the use of other actions. It's important to keep this important point in mind: there is nothing \"magic\" about Image Elements---they merely reference screen coordinates, and thus \"tapping\" an Image Element is internally nothing more than Appium constructing a tap at a point in the center of the Image Element's screen bounds (and in fact you can tell Appium which API to use to perform that tap---see below).","title":"Image Elements"},{"location":"advanced-concepts/image-elements/#related-settings","text":"Because finding elements by image relies on image analysis software in conjunction with Appium's screenshot functionality and the reference images you yourself provide, we provide a number of settings that help you modulate this feature, in some cases potentially speeding up the match or making it more accurate. To access these settings, you should use the Appium Settings API . These are the settings that are available: Setting Name Description Possible Values Default Value imageMatchThreshold The OpenCV match threshold below which to consider the find a failure. Basically the range of possibilities is between 0 (which means no threshold should be used) and 1 (which means that the reference image must be an exact pixel-for-pixel match). The exact values in between have no absolute meaning. For example a match that requires drastic resizing of a reference image will come out as a lower match strength than otherwise. It's recommended you try the default setting, and then incrementally lower the threshold if you're not finding matching elements. If you're matching the wrong element, try increasing the threshold value. Numbers from 0 to 1 0.4 fixImageFindScreenshotDims Appium knows the screen dimensions, and ultimately these are the dimensions which are relevant for deciding where to tap on the screen. If the screenshot retrieved (via Appium's native methods, or an external source) does not match the screen dimensions, this setting dictates that Appium will adjust the size of the screenshot to match, ensuring that matched elements are found at the correct coordinates. Turn this setting off if you know it's not necessary, and Appium will forego the check, potentially speeding things up a bit. true or false true fixImageTemplateSize OpenCV will not allow the matching of a reference image / template if that image is larger than the base image to match against. It can happen that the reference image you send in has dimensions which are larger than the screenshot Appium retrieves. In this case the match will automatically fail. If you set this setting to true , Appium will resize the template to ensure it is at least smaller than the size of the screenshot. true or false false fixImageTemplateScale Appium resizes a base image to fit its window size before matching them with OpenCV. If you set this setting to true , Appium scales a reference image you send in as the same scale Appium scales the base image to fit the window size. e.g. iOS screenshot is 750 \u00d7 1334 pixels base image. The window size is 375 x 667 . Appium rescale the base image to window size scaling it with 0.5 . A reference image is based on the screenshot size, never the image matches with the window size scale. This settings allow Appium to scale the reference image with 0.5 . appium-base-driver#306 true or false false defaultImageTemplateScale Appium does not resize template images by default (the value of 1.0). Although, storing scaled template images might help to save size of the storage. E.g. One has could represent 1080 \u00d7 126 pixels area by 270 \u00d7 32 pixels template image (the value of defaultImageTemplateScale is expected to be set to 4.0). Check appium-base-driver#307 for more details. e.g., 0.5 , 10.0 , 100 1.0 checkForImageElementStaleness It can happen that, in between the time you have matched an image element and the time you choose to tap on it, the element is no longer present. The only way for Appium to determine this is to attempt to re-match the template immediately before tapping. If that re-match fails, you will get a StaleElementException , as you would expect. Turn this to false to skip the check, potentially speeding things up, but potentially running into stale element issues without the benefit of an exception to let you know you did. true or false true autoUpdateImageElementPosition It can happen that a matched image changes position in between the time it is found and the time you tap on it. As with the previous setting, Appium can automatically adjust its position if it determines in a re-match that the position changed. true or false false imageElementTapStrategy In order to tap on a found image element, Appium has to use one of its touch action strategies. The available strategies are the W3C Actions API, or the older MJSONWP TouchActions API. Stick to the default unless the driver you are using does not support the W3C Actions API for some reason. \"w3cActions\" or \"touchActions\" \"w3cActions\" getMatchedImageResult Appium does not store the matched image result. Although, storing the result in memory might help for debugging whether which area is matched by find by image. Appium returns the image against attribute API as visual . true or false false imageMatchMethod The name of the template matching method for find element by image since Appium 1.22.0. Please read py_template_matching for more details about the meaning of each value. TM_CCOEFF , TM_CCOEFF_NORMED , TM_CCORR , TM_CCORR_NORMED , TM_SQDIFF , TM_SQDIFF_NORMED TM_CCOEFF_NORMED Note that each language-specific Appium client may make these settings available via special constants which could differ slightly from the exact setting names mentioned above.","title":"Related Settings"},{"location":"advanced-concepts/image-elements/#debug","text":"getMatchedImageResult might help for debugging if Appium found the provided image expectedly. visual attribute returns base64 data if getMatchedImageResult is true . # Ruby core @driver.update_settings({ getMatchedImageResult: true }) el = @driver.find_element_by_image 'path/to/img.ong' img_el.visual # returns base64 encoded string # Python self.driver.update_settings({ getMatchedImageResult : True}) el = self.driver.find_element_by_image('path/to/img.ong') el.get_attribute('visual') # returns base64 encoded string reference: https://github.com/appium/appium-base-driver/pull/327","title":"Debug"},{"location":"advanced-concepts/log-filters/","text":"Appium Logs Filtering Sometimes it might be necessary to hide sensitive information, like passwords, identifiers, hashes, etc from the server log. Since version 1.18.0 Appium supports --log-filters command line argument. This argument allows to provide the path to a special config file, containing one or more log obfuscation rules. Config Format The filtering config must be a valid JSON file containing array of filtering rules. Each rule is an object with a set of predefined properties. The following rule properties are supported: pattern : A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern. text : A simple non-empty exact text match to replace. Either this property or the above one must be provided. pattern has priority over text if both are provided. flags : Regular expression flags for the given pattern. Supported flags are the same as for the standard JavaScript RegExp constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2. The 'g' (global matching) flag is always enabled though. replacer : The replacer value to use. By default equals to **SECURE** . Could also be an empty value. Config Examples Replace all occurrences of my.magic.app string with the default replacer: [ { text : my.magic.app } ] Replace all occurrences of my.magic. any char string with a custom replacer (case insensitive): [ { pattern : my\\\\.magic\\\\.\\\\w , flags : i , replacer : *** } ] Replace all occurrences of my.magic. any chars and/or your.magic strings with a custom replacer (case insensitive): [ { pattern : my\\\\.magic\\\\.\\\\w+ , flags : i , replacer : *** }, { pattern : your\\\\.magic , flags : i , replacer : *** } ] Cut off all log lines to max 15 chars (advanced): [ { pattern : (.{1,15}).* , flags : s , replacer : $1 } ] Config Errors Handling If any of config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.","title":"Appium Logs Filtering"},{"location":"advanced-concepts/log-filters/#appium-logs-filtering","text":"Sometimes it might be necessary to hide sensitive information, like passwords, identifiers, hashes, etc from the server log. Since version 1.18.0 Appium supports --log-filters command line argument. This argument allows to provide the path to a special config file, containing one or more log obfuscation rules.","title":"Appium Logs Filtering"},{"location":"advanced-concepts/log-filters/#config-format","text":"The filtering config must be a valid JSON file containing array of filtering rules. Each rule is an object with a set of predefined properties. The following rule properties are supported: pattern : A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern. text : A simple non-empty exact text match to replace. Either this property or the above one must be provided. pattern has priority over text if both are provided. flags : Regular expression flags for the given pattern. Supported flags are the same as for the standard JavaScript RegExp constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2. The 'g' (global matching) flag is always enabled though. replacer : The replacer value to use. By default equals to **SECURE** . Could also be an empty value.","title":"Config Format"},{"location":"advanced-concepts/log-filters/#config-examples","text":"Replace all occurrences of my.magic.app string with the default replacer: [ { text : my.magic.app } ] Replace all occurrences of my.magic. any char string with a custom replacer (case insensitive): [ { pattern : my\\\\.magic\\\\.\\\\w , flags : i , replacer : *** } ] Replace all occurrences of my.magic. any chars and/or your.magic strings with a custom replacer (case insensitive): [ { pattern : my\\\\.magic\\\\.\\\\w+ , flags : i , replacer : *** }, { pattern : your\\\\.magic , flags : i , replacer : *** } ] Cut off all log lines to max 15 chars (advanced): [ { pattern : (.{1,15}).* , flags : s , replacer : $1 } ]","title":"Config Examples"},{"location":"advanced-concepts/log-filters/#config-errors-handling","text":"If any of config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.","title":"Config Errors Handling"},{"location":"advanced-concepts/memory-collection/","text":"Memory Collection Since Node v. 12 it is possible to collect the dumps of Appium's memory usage to be analyzed for problems. This is extremely useful for finding memory leaks. Creating a dump file To create a dump file at any given time, add the following command line parameter to node process, which executes the appium.js script: --heapsnapshot-signal= lt;signal gt; where signal can be one of available custom signals, for example SIGUSR2 . Then you will be able to kill -SIGUSR2 lt;nodePID gt; Dump files are created in the same folder where the main Appium script has been executed. They have the .heapsnapshot extension, and can be loaded into the Chrome Inspector for further investigation. Examples # 1. Go to the directory where appium is installed via NPM using one of the two cd command below, depending on appium # is installed globally or locally ## if your appium is globally installed via NPM with command npm install -g appium : cd $(npm -g root)/appium/ ## else if your appium is locally installed via NPM: cd $(npm root)/appium/ # 2. Start appium server with heapsnapshot signal # at the end puts the process at background, so we can continue working on the same terminal node --heapsnapshot-signal=SIGUSR2 . # 3. Get the PID of previous node process pid=$! # 4. When it's time to dump the heap, issue a SIGUSR2 signal to the PID got above kill -SIGUSR2 $pid # Then the heap dump file is created in current directory Dump file analysis Read the Rising Stack article for more details.","title":"Memory Collection"},{"location":"advanced-concepts/memory-collection/#memory-collection","text":"Since Node v. 12 it is possible to collect the dumps of Appium's memory usage to be analyzed for problems. This is extremely useful for finding memory leaks.","title":"Memory Collection"},{"location":"advanced-concepts/memory-collection/#creating-a-dump-file","text":"To create a dump file at any given time, add the following command line parameter to node process, which executes the appium.js script: --heapsnapshot-signal= lt;signal gt; where signal can be one of available custom signals, for example SIGUSR2 . Then you will be able to kill -SIGUSR2 lt;nodePID gt; Dump files are created in the same folder where the main Appium script has been executed. They have the .heapsnapshot extension, and can be loaded into the Chrome Inspector for further investigation.","title":"Creating a dump file"},{"location":"advanced-concepts/memory-collection/#examples","text":"# 1. Go to the directory where appium is installed via NPM using one of the two cd command below, depending on appium # is installed globally or locally ## if your appium is globally installed via NPM with command npm install -g appium : cd $(npm -g root)/appium/ ## else if your appium is locally installed via NPM: cd $(npm root)/appium/ # 2. Start appium server with heapsnapshot signal # at the end puts the process at background, so we can continue working on the same terminal node --heapsnapshot-signal=SIGUSR2 . # 3. Get the PID of previous node process pid=$! # 4. When it's time to dump the heap, issue a SIGUSR2 signal to the PID got above kill -SIGUSR2 $pid # Then the heap dump file is created in current directory","title":"Examples"},{"location":"advanced-concepts/memory-collection/#dump-file-analysis","text":"Read the Rising Stack article for more details.","title":"Dump file analysis"},{"location":"advanced-concepts/migrating-to-xcuitest/","text":"Migrating your iOS tests from UIAutomation (iOS 9.3 and below) to XCUITest (iOS 9.3 and up) For iOS automation, Appium relies on system frameworks provided by Apple. For iOS 9.2 and below, Apple's only automation technology was called UIAutomation, and it ran in the context of a process called \"Instruments\". As of iOS 10, Apple has completely removed the UIAutomation instrument, thus making it impossible for Appium to allow testing in the way it used to. Fortunately, Apple introduced a new automation technology, called XCUITest, beginning with iOS 9.3. For iOS 10 and up, this will be the only supported automation framework from Apple. Appium has built in support for XCUITest beginning with Appium 1.6. For the most part, the capabilities of XCUITest match those of UIAutomation, and so the Appium team was able to ensure that test behavior will stay the same. This is one of the great things about using Appium! Even with Apple completely changing the technology your tests are using, your scripts can stay mostly the same! That being said, there are some differences you'll need to be aware of which might require modification of your test scripts if you want to run them under our XCUITest automation backend. This document will help you with those differences. Element class name schema With XCUITest, Apple has given different class names to the UI elements which make up the view hierarchy. For example, UIAButton is now XCUIElementTypeButton . In many cases, there is a direct mapping between these two classes. If you use the class name locator strategy to find elements, Appium 1.6 will rewrite the selector for you. Likewise, if you use the xpath locator strategy, Appium 1.6 will find any UIA* elements in your XPath string and rewrite them appropriately. This does not however guarantee that your tests will work exactly the same, for two reasons: The application hierarchy reported to Appium will not necessarily be identical within XCUITest to what it was within UIAutomation. If you have a path-based XPath selector, it may need to be adjusted. The list of class names is not entirely identical either. Many elements are returned by XCUITest as belonging to the XCUIElementTypeOther class, a sort of catch-all container. Page source As mentioned just above, if you rely on the app source XML from the page source command, the XML output will now differ significantly from what it was under UIAutomation. -ios uiautomation locator strategy This locator strategy was specifically built on UIAutomation, so it is not included in the XCUITest automation backend. We will be working on a similar \"native\"-type locator strategy in coming releases. xpath locator strategy Try not to use XPath locators unless there is absolutely no other alternative. In general, xpath locators might be many times slower than other types of locators like accessibility id, class name and predicate (up to 100 times slower in some special cases). They are so slow, because xpath location is not natively supported by Apple's XCTest framework. Use driver.findElement(x) call instead of driver.findElements(x)[0] to lookup single element by xpath. The more possible UI elements are matched by your locator the slower it is. 3. Be very specific when locating elements by xpath. Such locators like //* may take minutes to complete depending on how many UI elements your application has (e. g. driver.findElement(By.xpath( //XCUIElementTypeButton[@value='blabla'] )) is faster than driver.findElement(By.xpath( //*[@value='blabla'] )) or driver.findElement(By.xpath( //XCUIElementTypeButton ))) In most cases it would be faster to perform multiple nested findElement calls than to perform a single call by xpath (e.g. driver.findElement(x).findElement(y) is usually faster than driver.findElement(z) where x and y are non-xpath locators and z is a xpath locator). API differences Unfortunately, the XCUITest API and the UIAutomation API are not equivalent. In many cases (like with tap/click ), the behavior is identical. But some features that were available in the UIAutomation backend are not yet available in the new XCUITest backend. These known lacking features include: * Geolocation support (e.g., driver.location ) * Shaking the device * Locking the device * Rotating the device (note that this is NOT device orientation , which is supported) We will endeavor to add these features back in future releases of Appium. Scrolling and clicking In the previous UIAutomation-based driver, if you tried to click on an element that wasn't in view, UIAutomation would scroll to the element automatically and then tap it. With XCUITest, this is no longer the case. You are now responsible for ensuring your element is in view before interacting with it (the same way a user would be responsible for the same). Other known issues Finally, a list of known issues with the initial 1.6 release (we'll strike through issues which have been resolved): Unable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994). shake is not implemented due to lack of support from Apple. lock is not implemented due to lack of support from Apple. Setting geo-location not supported due to lack of support from Apple. Through the TouchAction/MultiAction API, zoom gestures work but pinch gestures do not, due to an Apple issue. Through the TouchAction/MultiAction API, swipe gestures are currently not supported, though they should be soon (https://github.com/appium/appium/issues/7573). The capabilities autoAcceptAlerts and autoDismissAlerts do not currently work, and there is continued debate about whether we will be able to implement them in the future. There is an issue with the iOS SDK such that PickerWheels built using certain API methods are not automatable by XCUITest. See https://github.com/appium/appium/issues/6962 for the workaround, to ensure your PickerWheels are built properly. As far as possible, we will add the missing features and fix other known issues in future versions of Appium.","title":"Migrating to XCUITest"},{"location":"advanced-concepts/migrating-to-xcuitest/#migrating-your-ios-tests-from-uiautomation-ios-93-and-below-to-xcuitest-ios-93-and-up","text":"For iOS automation, Appium relies on system frameworks provided by Apple. For iOS 9.2 and below, Apple's only automation technology was called UIAutomation, and it ran in the context of a process called \"Instruments\". As of iOS 10, Apple has completely removed the UIAutomation instrument, thus making it impossible for Appium to allow testing in the way it used to. Fortunately, Apple introduced a new automation technology, called XCUITest, beginning with iOS 9.3. For iOS 10 and up, this will be the only supported automation framework from Apple. Appium has built in support for XCUITest beginning with Appium 1.6. For the most part, the capabilities of XCUITest match those of UIAutomation, and so the Appium team was able to ensure that test behavior will stay the same. This is one of the great things about using Appium! Even with Apple completely changing the technology your tests are using, your scripts can stay mostly the same! That being said, there are some differences you'll need to be aware of which might require modification of your test scripts if you want to run them under our XCUITest automation backend. This document will help you with those differences.","title":"Migrating your iOS tests from UIAutomation (iOS 9.3 and below) to XCUITest (iOS 9.3 and up)"},{"location":"advanced-concepts/migrating-to-xcuitest/#element-class-name-schema","text":"With XCUITest, Apple has given different class names to the UI elements which make up the view hierarchy. For example, UIAButton is now XCUIElementTypeButton . In many cases, there is a direct mapping between these two classes. If you use the class name locator strategy to find elements, Appium 1.6 will rewrite the selector for you. Likewise, if you use the xpath locator strategy, Appium 1.6 will find any UIA* elements in your XPath string and rewrite them appropriately. This does not however guarantee that your tests will work exactly the same, for two reasons: The application hierarchy reported to Appium will not necessarily be identical within XCUITest to what it was within UIAutomation. If you have a path-based XPath selector, it may need to be adjusted. The list of class names is not entirely identical either. Many elements are returned by XCUITest as belonging to the XCUIElementTypeOther class, a sort of catch-all container.","title":"Element class name schema"},{"location":"advanced-concepts/migrating-to-xcuitest/#page-source","text":"As mentioned just above, if you rely on the app source XML from the page source command, the XML output will now differ significantly from what it was under UIAutomation.","title":"Page source"},{"location":"advanced-concepts/migrating-to-xcuitest/#-ios-uiautomation-locator-strategy","text":"This locator strategy was specifically built on UIAutomation, so it is not included in the XCUITest automation backend. We will be working on a similar \"native\"-type locator strategy in coming releases.","title":"-ios uiautomation locator strategy"},{"location":"advanced-concepts/migrating-to-xcuitest/#xpath-locator-strategy","text":"Try not to use XPath locators unless there is absolutely no other alternative. In general, xpath locators might be many times slower than other types of locators like accessibility id, class name and predicate (up to 100 times slower in some special cases). They are so slow, because xpath location is not natively supported by Apple's XCTest framework. Use driver.findElement(x) call instead of driver.findElements(x)[0] to lookup single element by xpath. The more possible UI elements are matched by your locator the slower it is. 3. Be very specific when locating elements by xpath. Such locators like //* may take minutes to complete depending on how many UI elements your application has (e. g. driver.findElement(By.xpath( //XCUIElementTypeButton[@value='blabla'] )) is faster than driver.findElement(By.xpath( //*[@value='blabla'] )) or driver.findElement(By.xpath( //XCUIElementTypeButton ))) In most cases it would be faster to perform multiple nested findElement calls than to perform a single call by xpath (e.g. driver.findElement(x).findElement(y) is usually faster than driver.findElement(z) where x and y are non-xpath locators and z is a xpath locator).","title":"xpath locator strategy"},{"location":"advanced-concepts/migrating-to-xcuitest/#api-differences","text":"Unfortunately, the XCUITest API and the UIAutomation API are not equivalent. In many cases (like with tap/click ), the behavior is identical. But some features that were available in the UIAutomation backend are not yet available in the new XCUITest backend. These known lacking features include: * Geolocation support (e.g., driver.location ) * Shaking the device * Locking the device * Rotating the device (note that this is NOT device orientation , which is supported) We will endeavor to add these features back in future releases of Appium.","title":"API differences"},{"location":"advanced-concepts/migrating-to-xcuitest/#scrolling-and-clicking","text":"In the previous UIAutomation-based driver, if you tried to click on an element that wasn't in view, UIAutomation would scroll to the element automatically and then tap it. With XCUITest, this is no longer the case. You are now responsible for ensuring your element is in view before interacting with it (the same way a user would be responsible for the same).","title":"Scrolling and clicking"},{"location":"advanced-concepts/migrating-to-xcuitest/#other-known-issues","text":"Finally, a list of known issues with the initial 1.6 release (we'll strike through issues which have been resolved): Unable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994). shake is not implemented due to lack of support from Apple. lock is not implemented due to lack of support from Apple. Setting geo-location not supported due to lack of support from Apple. Through the TouchAction/MultiAction API, zoom gestures work but pinch gestures do not, due to an Apple issue. Through the TouchAction/MultiAction API, swipe gestures are currently not supported, though they should be soon (https://github.com/appium/appium/issues/7573). The capabilities autoAcceptAlerts and autoDismissAlerts do not currently work, and there is continued debate about whether we will be able to implement them in the future. There is an issue with the iOS SDK such that PickerWheels built using certain API methods are not automatable by XCUITest. See https://github.com/appium/appium/issues/6962 for the workaround, to ensure your PickerWheels are built properly. As far as possible, we will add the missing features and fix other known issues in future versions of Appium.","title":"Other known issues"},{"location":"advanced-concepts/multiple-xcode-versions/","text":"Running Appium with multiple Xcode versions installed If you have multiple Xcode installations you may choose which toolset Appium should use with one of two ways: xcode-select tool Only available with sudo privileges, affects the whole system. Assuming you want to choose /Applications/Xcode7.app : 1. Set default Xcode. sudo xcode-select -s /Applications/Xcode7.app/Contents/Developer 2. Run Appium (from command line or with GUI). appium Environment variable No privileges needed, affects only the current shell, so Appium should be started within that shell. Assuming you want to choose /Applications/Xcode9.app : 1. Set DEVELOPER_DIR environment variable. export DEVELOPER_DIR=/Applications/Xcode9.app/Contents/Developer 2. Run Appium from the same shell. appium","title":"Running with multiple versions of Xcode"},{"location":"advanced-concepts/multiple-xcode-versions/#running-appium-with-multiple-xcode-versions-installed","text":"If you have multiple Xcode installations you may choose which toolset Appium should use with one of two ways:","title":"Running Appium with multiple Xcode versions installed"},{"location":"advanced-concepts/multiple-xcode-versions/#xcode-select-tool","text":"Only available with sudo privileges, affects the whole system. Assuming you want to choose /Applications/Xcode7.app : 1. Set default Xcode. sudo xcode-select -s /Applications/Xcode7.app/Contents/Developer 2. Run Appium (from command line or with GUI). appium","title":"xcode-select tool"},{"location":"advanced-concepts/multiple-xcode-versions/#environment-variable","text":"No privileges needed, affects only the current shell, so Appium should be started within that shell. Assuming you want to choose /Applications/Xcode9.app : 1. Set DEVELOPER_DIR environment variable. export DEVELOPER_DIR=/Applications/Xcode9.app/Contents/Developer 2. Run Appium from the same shell. appium","title":"Environment variable"},{"location":"advanced-concepts/parallel-tests/","text":"Parallel Android Tests Appium provides a way for users to automate multiple Android sessions on a single machine on single server instance. All it involves is starting Appium server on any available port. Note, that it is not possible to have more than one session running on the same device. The important capabilities: udid the device id chromedriverPort the chromedriver port (if using webviews or chrome) mjpegServerPort If you are using appium-uiautomator2-driver , set a unique MJPEG server port for each parallel session. Otherwise you might get a port conflict such as in this issue . systemPort If you are using appium-uiautomator2-driver , set a unique system port for each parallel session. Otherwise you might get a port conflict such as in this issue . Parallel iOS Tests Since Xcode9, Appium supports parallel RealDevice and Simulator testing. Start your Appium Server on any available port. The important capabilities: RealDevice udid must be a unique device UDID for each parallel session wdaLocalPort must be a unique port number for each parallel session. The default value is 8100 derivedDataPath set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution. Simulator Either udid , which is the unique simulator UDID for each parallel session(this can be retrieved from xcrun simctl list) or a unique combination of deviceName and platformVersion to identify the appropriate simulator with the given name and version number for each parallel session wdaLocalPort must be a unique port number for each parallel session. The default value is 8100 derivedDataPath set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution. Troubleshooting When running on Jenkins, watch out for the ProcessTreeKiller when running multiple parallel test jobs on the same machine. If you are spawning simulators in one test job, Jenkins might kill all your simulators when the first test ends - causing errors in the remaining test jobs! Use BUILD_ID=dontKillMe to prevent this from happening.","title":"Setup for Parallel Testing"},{"location":"advanced-concepts/parallel-tests/#parallel-android-tests","text":"Appium provides a way for users to automate multiple Android sessions on a single machine on single server instance. All it involves is starting Appium server on any available port. Note, that it is not possible to have more than one session running on the same device. The important capabilities: udid the device id chromedriverPort the chromedriver port (if using webviews or chrome) mjpegServerPort If you are using appium-uiautomator2-driver , set a unique MJPEG server port for each parallel session. Otherwise you might get a port conflict such as in this issue . systemPort If you are using appium-uiautomator2-driver , set a unique system port for each parallel session. Otherwise you might get a port conflict such as in this issue .","title":"Parallel Android Tests"},{"location":"advanced-concepts/parallel-tests/#parallel-ios-tests","text":"Since Xcode9, Appium supports parallel RealDevice and Simulator testing. Start your Appium Server on any available port. The important capabilities:","title":"Parallel iOS Tests"},{"location":"advanced-concepts/parallel-tests/#realdevice","text":"udid must be a unique device UDID for each parallel session wdaLocalPort must be a unique port number for each parallel session. The default value is 8100 derivedDataPath set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.","title":"RealDevice"},{"location":"advanced-concepts/parallel-tests/#simulator","text":"Either udid , which is the unique simulator UDID for each parallel session(this can be retrieved from xcrun simctl list) or a unique combination of deviceName and platformVersion to identify the appropriate simulator with the given name and version number for each parallel session wdaLocalPort must be a unique port number for each parallel session. The default value is 8100 derivedDataPath set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.","title":"Simulator"},{"location":"advanced-concepts/parallel-tests/#troubleshooting","text":"When running on Jenkins, watch out for the ProcessTreeKiller when running multiple parallel test jobs on the same machine. If you are spawning simulators in one test job, Jenkins might kill all your simulators when the first test ends - causing errors in the remaining test jobs! Use BUILD_ID=dontKillMe to prevent this from happening.","title":"Troubleshooting"},{"location":"advanced-concepts/settings/","text":"Settings Settings are a new concept introduced by Appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec. Settings are a way to specify the behavior of the appium server. Settings are: - Mutable, they can be changed during a session - Only relevant during the session they are applied. They are reset for each new session. - Control the way the appium server behaves during test automation. They do not apply to controlling the app or device under test. An example of a setting would be ignoreUnimportantViews for Android. Android can be set to ignore elements in the View Hierarchy which it deems irrelevant. Setting this can cause tests to run faster. A user who wants to access the ignored elements however, would want to disable ignoreUnimportantViews , and reenable it afterwards. Another example of a use-case for settings would be telling appium to ignore elements which are not visible. Settings are implemented via the following API endpoints: Update Device Settings POST /session/:sessionId/appium/settings Expects a JSON hash of settings, where keys correspond to setting names, and values to the value of the setting. { settings: { ignoreUnimportantViews : true } } Retrieve Device Settings GET /session/:sessionId/appium/settings Returns a JSON hash of all the currently specified settings. { ignoreUnimportantViews : true } General Supported Settings Name Description Values shouldUseCompactResponses Returns compact (standards-compliant) faster responses in find element/s. Defaults to true false or true elementResponseAttributes The comma-separated list of fields to return with each element. It works only shouldUseCompactResponses is false . Defaults to \"type,label\" in iOS, \"\" in Android. e.g., \"name,text,rect,attribute/name,attribute/value\" Image Elements also has image elements specific settings. UiAutomator2 Please refer to the documentation on the UiAutomator2 Driver repository XCUITest Please refer to the documentation on the XCUITest Driver repository Mac2 Please refer to the documentation on the Mac2Driver repository","title":"The Settings API"},{"location":"advanced-concepts/settings/#settings","text":"Settings are a new concept introduced by Appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec. Settings are a way to specify the behavior of the appium server. Settings are: - Mutable, they can be changed during a session - Only relevant during the session they are applied. They are reset for each new session. - Control the way the appium server behaves during test automation. They do not apply to controlling the app or device under test. An example of a setting would be ignoreUnimportantViews for Android. Android can be set to ignore elements in the View Hierarchy which it deems irrelevant. Setting this can cause tests to run faster. A user who wants to access the ignored elements however, would want to disable ignoreUnimportantViews , and reenable it afterwards. Another example of a use-case for settings would be telling appium to ignore elements which are not visible. Settings are implemented via the following API endpoints:","title":"Settings"},{"location":"advanced-concepts/settings/#update-device-settings","text":"POST /session/:sessionId/appium/settings Expects a JSON hash of settings, where keys correspond to setting names, and values to the value of the setting. { settings: { ignoreUnimportantViews : true } }","title":"Update Device Settings"},{"location":"advanced-concepts/settings/#retrieve-device-settings","text":"GET /session/:sessionId/appium/settings Returns a JSON hash of all the currently specified settings. { ignoreUnimportantViews : true }","title":"Retrieve Device Settings"},{"location":"advanced-concepts/settings/#general-supported-settings","text":"Name Description Values shouldUseCompactResponses Returns compact (standards-compliant) faster responses in find element/s. Defaults to true false or true elementResponseAttributes The comma-separated list of fields to return with each element. It works only shouldUseCompactResponses is false . Defaults to \"type,label\" in iOS, \"\" in Android. e.g., \"name,text,rect,attribute/name,attribute/value\" Image Elements also has image elements specific settings.","title":"General Supported Settings"},{"location":"advanced-concepts/settings/#uiautomator2","text":"Please refer to the documentation on the UiAutomator2 Driver repository","title":"UiAutomator2"},{"location":"advanced-concepts/settings/#xcuitest","text":"Please refer to the documentation on the XCUITest Driver repository","title":"XCUITest"},{"location":"advanced-concepts/settings/#mac2","text":"Please refer to the documentation on the Mac2Driver repository","title":"Mac2"},{"location":"advanced-concepts/wda-custom-server/","text":"How To Set Up And Customize WebDriverAgent Server Appium for iOS uses WebDriverAgent as the automation backend. This backend is based on Apple's XCTest framework and shares all the known problem that are present in XCTest. For some of them we have workarounds, but there are some that are hardly possible to workaround, for example https://github.com/facebookarchive/WebDriverAgent/issues/507. The approach described in this article enables you to have full control over how WDA is built, managed, and run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in long-running perspective. Important points: * The steps below are not necessary if default Appium capabilities are used. The server will do everything for you, however you won't have so much control over WDA. * It is mandatory to have SSH or physical access to the machine to which the device under test is connected. WDA Setup WebDriverAgent source is automatically downloaded with Appium. The usual folder location in case Appium is installed via npm tool ( npm install -g appium ) is /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent cd /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent ./Scripts/bootstrap.sh -d Also, it might be necessary to create an empty folder for WDA resources: mkdir -p /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/Resources/WebDriverAgent.bundle No further configuration steps are needed if you're going to execute your automated tests on iOS Simulator. Real device, however, requires some more work to be done. Follow real device configuration documentation to setup code signing. In order to make sure that WDA source is configured properly: Open /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj in Xcode Select WebDriverAgentRunner project Select your real phone/Simulator you'd like to run automated tests on as build target Select Product- Test from the main menu Xcode should successfully build the project and install it on the real device/Simulator, so you'll see the icon of WebDriverAgentRunner application on the springboard. WDA Startup WebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls for your application under test. The server address will be localhost if you run your tests on Simulator or the actual phone IP address in case of real device. Appium uses appium-ios-device to route network requests to a real device from localhost via USB, which means one can use this tool to unify WDA network address for Simulator and for real device. You can use appium-ios-device to connect to a remote device requiring the module from your JavaScript code as same as Appium. Alternatively, you can also use iproxy , go-ios or tidevice to handle WebDriverAgent process outside Appium. For instance, iproxy could be installed using npm: npm install -g iproxy . This helper class written in Java illustrates the main implementation details wit iproxy : public class WDAServer { private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName()); private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1; private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4); private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1); // These settings are needed to properly sign WDA for real device tests // See https://github.com/appium/appium-xcuitest-driver for more details private static final File KEYCHAIN = new File(String.format( %s/%s , System.getProperty( user.home ), /Library/Keychains/MyKeychain.keychain )); private static final String KEYCHAIN_PASSWORD = ****** ; private static final File IPROXY_EXECUTABLE = new File( /usr/local/bin/iproxy ); private static final File XCODEBUILD_EXECUTABLE = new File( /usr/bin/xcodebuild ); private static final File WDA_PROJECT = new File( /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent + /WebDriverAgent.xcodeproj ); private static final String WDA_SCHEME = WebDriverAgentRunner ; private static final String WDA_CONFIGURATION = Debug ; private static final File XCODEBUILD_LOG = new File( /usr/local/var/log/appium/build.log ); private static final File IPROXY_LOG = new File( /usr/local/var/log/appium/iproxy.log ); private static final int PORT = 8100; public static final String SERVER_URL = String.format( http://127.0.0.1:%d , PORT); private static final String[] IPROXY_CMDLINE = new String[]{ IPROXY_EXECUTABLE.getAbsolutePath(), Integer.toString(PORT), Integer.toString(PORT), String.format( %s 2 1 , IPROXY_LOG.getAbsolutePath()) }; private static WDAServer instance = null; private final boolean isRealDevice; private final String deviceId; private final String platformVersion; private int failedRestartRetriesCount = 0; private WDAServer() { try { this.isRealDevice = !getIsSimulatorFromConfig(getClass()); final String udid; if (isRealDevice) { udid = IOSRealDeviceHelpers.getUDID(); } else { udid = IOSSimulatorHelpers.getId(); } this.deviceId = udid; this.platformVersion = getPlatformVersionFromConfig(getClass()); } catch (Exception e) { throw new RuntimeException(e); } ensureToolsExistence(); ensureParentDirExistence(); } public synchronized static WDAServer getInstance() { if (instance == null) { instance = new WDAServer(); } return instance; } private boolean waitUntilIsRunning(Timedelta timeout) throws Exception { final URL status = new URL(SERVER_URL + /status ); try { if (timeout.asSeconds() 5) { log.debug(String.format( Waiting max %s until WDA server starts responding... , timeout)); } new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status); return true; } catch (UrlChecker.TimeoutException e) { return false; } } private static void ensureParentDirExistence() { if (!XCODEBUILD_LOG.getParentFile().exists()) { if (!XCODEBUILD_LOG.getParentFile().mkdirs()) { throw new IllegalStateException(String.format( The script has failed to create '%s' folder for Appium logs. + Please make sure your account has correct access permissions on the parent folder(s) , XCODEBUILD_LOG.getParentFile().getAbsolutePath())); } } } private void ensureToolsExistence() { if (isRealDevice !IPROXY_EXECUTABLE.exists()) { throw new IllegalStateException(String.format( %s tool is expected to be installed (`npm install -g iproxy`) , IPROXY_EXECUTABLE.getAbsolutePath())); } if (!XCODEBUILD_EXECUTABLE.exists()) { throw new IllegalStateException(String.format( xcodebuild tool is not detected on the current system at %s , XCODEBUILD_EXECUTABLE.getAbsolutePath())); } if (!WDA_PROJECT.exists()) { throw new IllegalStateException(String.format( WDA project is expected to exist at %s , WDA_PROJECT.getAbsolutePath())); } } private List String generateXcodebuildCmdline() { final List String result = new ArrayList (); result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath()); result.add( clean build test ); result.add(String.format( -project %s , WDA_PROJECT.getAbsolutePath())); result.add(String.format( -scheme %s , WDA_SCHEME)); result.add(String.format( -destination id=%s , deviceId)); result.add(String.format( -configuration %s , WDA_CONFIGURATION)); result.add(String.format( IPHONEOS_DEPLOYMENT_TARGET=%s , platformVersion)); result.add(String.format( %s 2 1 , XCODEBUILD_LOG.getAbsolutePath())); return result; } private static List String generateKeychainUnlockCmdlines() throws Exception { final List String result = new ArrayList (); result.add(String.format( /usr/bin/security -v list-keychains -s %s , KEYCHAIN.getAbsolutePath())); result.add(String.format( /usr/bin/security -v unlock-keychain -p %s %s , KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath())); result.add(String.format( /usr/bin/security set-keychain-settings -t 3600 %s , KEYCHAIN.getAbsolutePath())); return result; } public synchronized void restart() throws Exception { if (isRealDevice failedRestartRetriesCount = MAX_REAL_DEVICE_RESTART_RETRIES) { throw new IllegalStateException(String.format( WDA server cannot start on the connected device with udid %s after %s retries. + Reboot the device manually and try again , deviceId, MAX_REAL_DEVICE_RESTART_RETRIES)); } final String hostname = InetAddress.getLocalHost().getHostName(); log.info(String.format( Trying to (re)start WDA server on %s:%s... , hostname, PORT)); UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName()); final File scriptFile = File.createTempFile( script , .sh ); try { final List String scriptContent = new ArrayList (); scriptContent.add( #!/bin/bash ); if (isRealDevice isRunningInJenkinsNetwork()) { scriptContent.add(String.join( \\n , generateKeychainUnlockCmdlines())); } if (isRealDevice) { scriptContent.add(String.join( , IPROXY_CMDLINE)); } final String wdaBuildCmdline = String.join( , generateXcodebuildCmdline()); log.debug(String.format( Building WDA with command line:\\n%s\\n , wdaBuildCmdline)); scriptContent.add(wdaBuildCmdline); try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) { output.write(String.join( \\n , scriptContent)); } new ProcessBuilder( /bin/chmod , u+x , scriptFile.getCanonicalPath()) .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS); final ProcessBuilder pb = new ProcessBuilder( /bin/bash , scriptFile.getCanonicalPath()); final Map String, String env = pb.environment(); // This is needed for Jenkins env.put( BUILD_ID , dontKillMe ); // This line is important. If USE_PORT environment variable is not set then WDA // takes port number zero by default and won't accept any incoming requests env.put( USE_PORT , Integer.toString(PORT)); log.info(String.format( Waiting max %s for WDA to be (re)started on %s:%s... , RESTART_TIMEOUT.toString(), hostname, PORT)); final Timedelta started = Timedelta.now(); pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS); if (!waitUntilIsRunning(RESTART_TIMEOUT)) { ++failedRestartRetriesCount; throw new IllegalStateException( String.format( WDA server has failed to start after %s timeout on server '%s'.\\n + Please make sure that iDevice is properly connected and you can build + WDA manually from XCode.\\n + Xcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n , RESTART_TIMEOUT, hostname, getLog(XCODEBUILD_LOG).orElse( EMPTY ), getLog(IPROXY_LOG).orElse( EMPTY )) ); } log.info(String.format( WDA server has been successfully (re)started after %s + and now is listening on %s:%s , Timedelta.now().diff(started).toString(), hostname, PORT)); } finally { scriptFile.delete(); } } public boolean isRunning() throws Exception { if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName()) || (isRealDevice !isProcessRunning(IPROXY_EXECUTABLE.getName()))) { return false; } return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3)); } public Optional String getLog(File logFile) { if (logFile.exists()) { try { return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName( UTF-8 ))); } catch (IOException e) { e.printStackTrace(); } } return Optional.empty(); } } One should call this piece of code before to start Appium iOS driver, for example, in setUp method: if (!WDAServer.getInstance().isRunning()) { WDAServer.getInstance().restart(); } It is important to set webDriverAgentUrl capability for Appium driver to let it know that our WDA driver is ready for use: capabilities.setCapability( webDriverAgentUrl , WDAServer.SERVER_URL); Important Notes The process does not have direct access to keychain if it is executed by Jenkins agent, so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail We kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even if these are frozen We prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue running in background even after the actual code execution is finished. This is extremely important if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum human interaction The value of BUILD_ID environment variable is changed to avoid killing of the background process by Jenkins agent after the job is finished isRunning check is done by verifying the actual network endpoint The output of daemonized processes is logged, so it is possible to track errors and unexpected failures. The content of the log files is automatically added to the actual error message if the server fails to (re)start. Real device id can be parsed from system_profiler SPUSBDataType output Simulator id can be parsed from xcrun simctl list output UrlChecker class is imported from org.openqa.selenium.net package","title":"Using a custom WDA server"},{"location":"advanced-concepts/wda-custom-server/#how-to-set-up-and-customize-webdriveragent-server","text":"Appium for iOS uses WebDriverAgent as the automation backend. This backend is based on Apple's XCTest framework and shares all the known problem that are present in XCTest. For some of them we have workarounds, but there are some that are hardly possible to workaround, for example https://github.com/facebookarchive/WebDriverAgent/issues/507. The approach described in this article enables you to have full control over how WDA is built, managed, and run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in long-running perspective. Important points: * The steps below are not necessary if default Appium capabilities are used. The server will do everything for you, however you won't have so much control over WDA. * It is mandatory to have SSH or physical access to the machine to which the device under test is connected.","title":"How To Set Up And Customize WebDriverAgent Server"},{"location":"advanced-concepts/wda-custom-server/#wda-setup","text":"WebDriverAgent source is automatically downloaded with Appium. The usual folder location in case Appium is installed via npm tool ( npm install -g appium ) is /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent cd /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent ./Scripts/bootstrap.sh -d Also, it might be necessary to create an empty folder for WDA resources: mkdir -p /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/Resources/WebDriverAgent.bundle No further configuration steps are needed if you're going to execute your automated tests on iOS Simulator. Real device, however, requires some more work to be done. Follow real device configuration documentation to setup code signing. In order to make sure that WDA source is configured properly: Open /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj in Xcode Select WebDriverAgentRunner project Select your real phone/Simulator you'd like to run automated tests on as build target Select Product- Test from the main menu Xcode should successfully build the project and install it on the real device/Simulator, so you'll see the icon of WebDriverAgentRunner application on the springboard.","title":"WDA Setup"},{"location":"advanced-concepts/wda-custom-server/#wda-startup","text":"WebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls for your application under test. The server address will be localhost if you run your tests on Simulator or the actual phone IP address in case of real device. Appium uses appium-ios-device to route network requests to a real device from localhost via USB, which means one can use this tool to unify WDA network address for Simulator and for real device. You can use appium-ios-device to connect to a remote device requiring the module from your JavaScript code as same as Appium. Alternatively, you can also use iproxy , go-ios or tidevice to handle WebDriverAgent process outside Appium. For instance, iproxy could be installed using npm: npm install -g iproxy . This helper class written in Java illustrates the main implementation details wit iproxy : public class WDAServer { private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName()); private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1; private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4); private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1); // These settings are needed to properly sign WDA for real device tests // See https://github.com/appium/appium-xcuitest-driver for more details private static final File KEYCHAIN = new File(String.format( %s/%s , System.getProperty( user.home ), /Library/Keychains/MyKeychain.keychain )); private static final String KEYCHAIN_PASSWORD = ****** ; private static final File IPROXY_EXECUTABLE = new File( /usr/local/bin/iproxy ); private static final File XCODEBUILD_EXECUTABLE = new File( /usr/bin/xcodebuild ); private static final File WDA_PROJECT = new File( /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent + /WebDriverAgent.xcodeproj ); private static final String WDA_SCHEME = WebDriverAgentRunner ; private static final String WDA_CONFIGURATION = Debug ; private static final File XCODEBUILD_LOG = new File( /usr/local/var/log/appium/build.log ); private static final File IPROXY_LOG = new File( /usr/local/var/log/appium/iproxy.log ); private static final int PORT = 8100; public static final String SERVER_URL = String.format( http://127.0.0.1:%d , PORT); private static final String[] IPROXY_CMDLINE = new String[]{ IPROXY_EXECUTABLE.getAbsolutePath(), Integer.toString(PORT), Integer.toString(PORT), String.format( %s 2 1 , IPROXY_LOG.getAbsolutePath()) }; private static WDAServer instance = null; private final boolean isRealDevice; private final String deviceId; private final String platformVersion; private int failedRestartRetriesCount = 0; private WDAServer() { try { this.isRealDevice = !getIsSimulatorFromConfig(getClass()); final String udid; if (isRealDevice) { udid = IOSRealDeviceHelpers.getUDID(); } else { udid = IOSSimulatorHelpers.getId(); } this.deviceId = udid; this.platformVersion = getPlatformVersionFromConfig(getClass()); } catch (Exception e) { throw new RuntimeException(e); } ensureToolsExistence(); ensureParentDirExistence(); } public synchronized static WDAServer getInstance() { if (instance == null) { instance = new WDAServer(); } return instance; } private boolean waitUntilIsRunning(Timedelta timeout) throws Exception { final URL status = new URL(SERVER_URL + /status ); try { if (timeout.asSeconds() 5) { log.debug(String.format( Waiting max %s until WDA server starts responding... , timeout)); } new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status); return true; } catch (UrlChecker.TimeoutException e) { return false; } } private static void ensureParentDirExistence() { if (!XCODEBUILD_LOG.getParentFile().exists()) { if (!XCODEBUILD_LOG.getParentFile().mkdirs()) { throw new IllegalStateException(String.format( The script has failed to create '%s' folder for Appium logs. + Please make sure your account has correct access permissions on the parent folder(s) , XCODEBUILD_LOG.getParentFile().getAbsolutePath())); } } } private void ensureToolsExistence() { if (isRealDevice !IPROXY_EXECUTABLE.exists()) { throw new IllegalStateException(String.format( %s tool is expected to be installed (`npm install -g iproxy`) , IPROXY_EXECUTABLE.getAbsolutePath())); } if (!XCODEBUILD_EXECUTABLE.exists()) { throw new IllegalStateException(String.format( xcodebuild tool is not detected on the current system at %s , XCODEBUILD_EXECUTABLE.getAbsolutePath())); } if (!WDA_PROJECT.exists()) { throw new IllegalStateException(String.format( WDA project is expected to exist at %s , WDA_PROJECT.getAbsolutePath())); } } private List String generateXcodebuildCmdline() { final List String result = new ArrayList (); result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath()); result.add( clean build test ); result.add(String.format( -project %s , WDA_PROJECT.getAbsolutePath())); result.add(String.format( -scheme %s , WDA_SCHEME)); result.add(String.format( -destination id=%s , deviceId)); result.add(String.format( -configuration %s , WDA_CONFIGURATION)); result.add(String.format( IPHONEOS_DEPLOYMENT_TARGET=%s , platformVersion)); result.add(String.format( %s 2 1 , XCODEBUILD_LOG.getAbsolutePath())); return result; } private static List String generateKeychainUnlockCmdlines() throws Exception { final List String result = new ArrayList (); result.add(String.format( /usr/bin/security -v list-keychains -s %s , KEYCHAIN.getAbsolutePath())); result.add(String.format( /usr/bin/security -v unlock-keychain -p %s %s , KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath())); result.add(String.format( /usr/bin/security set-keychain-settings -t 3600 %s , KEYCHAIN.getAbsolutePath())); return result; } public synchronized void restart() throws Exception { if (isRealDevice failedRestartRetriesCount = MAX_REAL_DEVICE_RESTART_RETRIES) { throw new IllegalStateException(String.format( WDA server cannot start on the connected device with udid %s after %s retries. + Reboot the device manually and try again , deviceId, MAX_REAL_DEVICE_RESTART_RETRIES)); } final String hostname = InetAddress.getLocalHost().getHostName(); log.info(String.format( Trying to (re)start WDA server on %s:%s... , hostname, PORT)); UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName()); final File scriptFile = File.createTempFile( script , .sh ); try { final List String scriptContent = new ArrayList (); scriptContent.add( #!/bin/bash ); if (isRealDevice isRunningInJenkinsNetwork()) { scriptContent.add(String.join( \\n , generateKeychainUnlockCmdlines())); } if (isRealDevice) { scriptContent.add(String.join( , IPROXY_CMDLINE)); } final String wdaBuildCmdline = String.join( , generateXcodebuildCmdline()); log.debug(String.format( Building WDA with command line:\\n%s\\n , wdaBuildCmdline)); scriptContent.add(wdaBuildCmdline); try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) { output.write(String.join( \\n , scriptContent)); } new ProcessBuilder( /bin/chmod , u+x , scriptFile.getCanonicalPath()) .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS); final ProcessBuilder pb = new ProcessBuilder( /bin/bash , scriptFile.getCanonicalPath()); final Map String, String env = pb.environment(); // This is needed for Jenkins env.put( BUILD_ID , dontKillMe ); // This line is important. If USE_PORT environment variable is not set then WDA // takes port number zero by default and won't accept any incoming requests env.put( USE_PORT , Integer.toString(PORT)); log.info(String.format( Waiting max %s for WDA to be (re)started on %s:%s... , RESTART_TIMEOUT.toString(), hostname, PORT)); final Timedelta started = Timedelta.now(); pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS); if (!waitUntilIsRunning(RESTART_TIMEOUT)) { ++failedRestartRetriesCount; throw new IllegalStateException( String.format( WDA server has failed to start after %s timeout on server '%s'.\\n + Please make sure that iDevice is properly connected and you can build + WDA manually from XCode.\\n + Xcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n , RESTART_TIMEOUT, hostname, getLog(XCODEBUILD_LOG).orElse( EMPTY ), getLog(IPROXY_LOG).orElse( EMPTY )) ); } log.info(String.format( WDA server has been successfully (re)started after %s + and now is listening on %s:%s , Timedelta.now().diff(started).toString(), hostname, PORT)); } finally { scriptFile.delete(); } } public boolean isRunning() throws Exception { if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName()) || (isRealDevice !isProcessRunning(IPROXY_EXECUTABLE.getName()))) { return false; } return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3)); } public Optional String getLog(File logFile) { if (logFile.exists()) { try { return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName( UTF-8 ))); } catch (IOException e) { e.printStackTrace(); } } return Optional.empty(); } } One should call this piece of code before to start Appium iOS driver, for example, in setUp method: if (!WDAServer.getInstance().isRunning()) { WDAServer.getInstance().restart(); } It is important to set webDriverAgentUrl capability for Appium driver to let it know that our WDA driver is ready for use: capabilities.setCapability( webDriverAgentUrl , WDAServer.SERVER_URL);","title":"WDA Startup"},{"location":"advanced-concepts/wda-custom-server/#important-notes","text":"The process does not have direct access to keychain if it is executed by Jenkins agent, so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail We kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even if these are frozen We prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue running in background even after the actual code execution is finished. This is extremely important if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum human interaction The value of BUILD_ID environment variable is changed to avoid killing of the background process by Jenkins agent after the job is finished isRunning check is done by verifying the actual network endpoint The output of daemonized processes is logged, so it is possible to track errors and unexpected failures. The content of the log files is automatically added to the actual error message if the server fails to (re)start. Real device id can be parsed from system_profiler SPUSBDataType output Simulator id can be parsed from xcrun simctl list output UrlChecker class is imported from org.openqa.selenium.net package","title":"Important Notes"},{"location":"commands/","text":"Appium API Documentation Status Execute Mobile Command Session Create End Get Session Capabilities Go Back Screenshot Source Timeouts Timeouts Implicit Wait Async Script Orientation Get Orientation Set Orientation Geolocation Get Geolocation Set Geolocation Logs Get Log Types Get Logs Events Log event Get events Settings Update Settings Get Device Settings Execute Driver Script Device Activity Start Activity Current Activity Current Package App Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage Clipboard Get Clipboard Set Clipboard Emulator Power AC Power Capacity Files Push File Pull File Pull Folder Interactions Shake Lock Unlock Is Locked Rotate Keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown Network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed Performance Data Get Performance Data Performance Data Types Screen Recording Start Screen Recording Stop Screen Recording Simulator Perform Touch ID Toggle Touch ID Enrollment System Open Notifications System Bars System Time Display density Authentication Finger Print Element Find Element Find Elements Actions Click Send Keys Clear Attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View Other Submit Active Element Equals Element Context Get Context Get All Contexts Set Context Interactions Mouse Move To Click Double Click Button Down Button Up Touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform W3C Actions Web Window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window Navigation Go to URL Get URL Back Forward Refresh Storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies Frame Switch to Frame Switch to Parent Frame Execute Async Execute","title":"Home"},{"location":"commands/#appium-api-documentation","text":"Status Execute Mobile Command Session Create End Get Session Capabilities Go Back Screenshot Source Timeouts Timeouts Implicit Wait Async Script Orientation Get Orientation Set Orientation Geolocation Get Geolocation Set Geolocation Logs Get Log Types Get Logs Events Log event Get events Settings Update Settings Get Device Settings Execute Driver Script Device Activity Start Activity Current Activity Current Package App Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage Clipboard Get Clipboard Set Clipboard Emulator Power AC Power Capacity Files Push File Pull File Pull Folder Interactions Shake Lock Unlock Is Locked Rotate Keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown Network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed Performance Data Get Performance Data Performance Data Types Screen Recording Start Screen Recording Stop Screen Recording Simulator Perform Touch ID Toggle Touch ID Enrollment System Open Notifications System Bars System Time Display density Authentication Finger Print Element Find Element Find Elements Actions Click Send Keys Clear Attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View Other Submit Active Element Equals Element Context Get Context Get All Contexts Set Context Interactions Mouse Move To Click Double Click Button Down Button Up Touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform W3C Actions Web Window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window Navigation Go to URL Get URL Back Forward Refresh Storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies Frame Switch to Frame Switch to Parent Frame Execute Async Execute","title":"Appium API Documentation"},{"location":"commands/example/","text":"Template Brief description Example Usage // Java MobileElement el = driver.findElementByAccessibilityId( SomeId ); el.click(); # Python el = self.driver.find_element_by_accessibility_id('SomeId') el.click(); // Javascript // webdriver.io example await driver.status(); // wd example await driver.status(); # Ruby # ruby_lib example # Ruby Code in ruby_lib here # ruby_lib_core example # Ruby Code in ruby_lib_core here // C# driver.FindElementById( elementId ).Click(); Description An indepth description of what this command does Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 1.2 to 9.3 1.7 to 1.9 1.1 to 9.9 UIAutomation 1.0 to 9.3 All All Android UiAutomator2 8.0+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby All github.com C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/element/:element_id/click URL Parameters name description session_id ID of the session element_id ID of the element to blah blah blah JSON Parameters name type description item Object Description of Item item.1 String Item One description Response A generic release label (i.e. \"2.0rc3\") ( string ) See Also W3C Specification JSONWP Specification Google","title":"Example"},{"location":"commands/example/#template","text":"Brief description","title":"Template"},{"location":"commands/example/#example-usage","text":"// Java MobileElement el = driver.findElementByAccessibilityId( SomeId ); el.click(); # Python el = self.driver.find_element_by_accessibility_id('SomeId') el.click(); // Javascript // webdriver.io example await driver.status(); // wd example await driver.status(); # Ruby # ruby_lib example # Ruby Code in ruby_lib here # ruby_lib_core example # Ruby Code in ruby_lib_core here // C# driver.FindElementById( elementId ).Click();","title":"Example Usage"},{"location":"commands/example/#description","text":"An indepth description of what this command does","title":"Description"},{"location":"commands/example/#support","text":"","title":"Support"},{"location":"commands/example/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 1.2 to 9.3 1.7 to 1.9 1.1 to 9.9 UIAutomation 1.0 to 9.3 All All Android UiAutomator2 8.0+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All","title":"Appium Server"},{"location":"commands/example/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby All github.com C# None github.com","title":"Appium Clients"},{"location":"commands/example/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/example/#endpoint","text":"POST /session/:session_id/element/:element_id/click","title":"Endpoint"},{"location":"commands/example/#url-parameters","text":"name description session_id ID of the session element_id ID of the element to blah blah blah","title":"URL Parameters"},{"location":"commands/example/#json-parameters","text":"name type description item Object Description of Item item.1 String Item One description","title":"JSON Parameters"},{"location":"commands/example/#response","text":"A generic release label (i.e. \"2.0rc3\") ( string )","title":"Response"},{"location":"commands/example/#see-also","text":"W3C Specification JSONWP Specification Google","title":"See Also"},{"location":"commands/mobile-command/","text":"Execute Mobile Command Execute a native mobile command Example Usage // Java driver.executeScript( mobile: scroll , ImmutableMap.of( direction , down )); # Python self.driver.execute_script( mobile: scroll , {'direction': 'down'}) // Javascript // webdriver.io example var result = browser.execute('mobile: scroll', {direction: 'down'}) // wd example await driver.execute('mobile: scroll', {direction: 'down'}); # Ruby # ruby_lib example execute_script( mobile: scroll , { direction = down }) # ruby_lib_core example @driver.execute_script( mobile: scroll , { direction = down }) // C# driver.ExecuteScript( mobile:scroll , new Dictionary string, string { { direction , down } }); Description Execute a variety of native, mobile commands that aren't associated with a specific endpoint Syntax is execute(\"mobile: commandName \", JSON serializable argument ) (see Execute Script for more details on syntax). Android UiAutomator2 Please refer to mobile commands section in UiAutomator2 driver repository. Espresso Please refer to mobile commands section in Espresso driver repository. IOS XCUITest Please refer to mobile commands section in XCUITest driver repository. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/execute URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description script string The mobile command to execute args array The JSON serializable arguments Response The command result ( any ) See Also W3C Specification JSONWP Specification","title":"Execute Mobile Command"},{"location":"commands/mobile-command/#execute-mobile-command","text":"Execute a native mobile command","title":"Execute Mobile Command"},{"location":"commands/mobile-command/#example-usage","text":"// Java driver.executeScript( mobile: scroll , ImmutableMap.of( direction , down )); # Python self.driver.execute_script( mobile: scroll , {'direction': 'down'}) // Javascript // webdriver.io example var result = browser.execute('mobile: scroll', {direction: 'down'}) // wd example await driver.execute('mobile: scroll', {direction: 'down'}); # Ruby # ruby_lib example execute_script( mobile: scroll , { direction = down }) # ruby_lib_core example @driver.execute_script( mobile: scroll , { direction = down }) // C# driver.ExecuteScript( mobile:scroll , new Dictionary string, string { { direction , down } });","title":"Example Usage"},{"location":"commands/mobile-command/#description","text":"Execute a variety of native, mobile commands that aren't associated with a specific endpoint Syntax is execute(\"mobile: commandName \", JSON serializable argument ) (see Execute Script for more details on syntax).","title":"Description"},{"location":"commands/mobile-command/#android","text":"","title":"Android"},{"location":"commands/mobile-command/#uiautomator2","text":"Please refer to mobile commands section in UiAutomator2 driver repository.","title":"UiAutomator2"},{"location":"commands/mobile-command/#espresso","text":"Please refer to mobile commands section in Espresso driver repository.","title":"Espresso"},{"location":"commands/mobile-command/#ios","text":"","title":"IOS"},{"location":"commands/mobile-command/#xcuitest","text":"Please refer to mobile commands section in XCUITest driver repository.","title":"XCUITest"},{"location":"commands/mobile-command/#support","text":"","title":"Support"},{"location":"commands/mobile-command/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/mobile-command/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/mobile-command/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/mobile-command/#endpoint","text":"POST /session/:session_id/execute","title":"Endpoint"},{"location":"commands/mobile-command/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/mobile-command/#json-parameters","text":"name type description script string The mobile command to execute args array The JSON serializable arguments","title":"JSON Parameters"},{"location":"commands/mobile-command/#response","text":"The command result ( any )","title":"Response"},{"location":"commands/mobile-command/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/status/","text":"Status Retrieve the server\u2019s current status Example Usage // Java driver.getStatus(); # Python selenium.webdriver.common.utils.is_url_connectable(port) // Javascript // webdriver.io example driver.status(); // wd example await driver.status(); # Ruby # ruby_lib example remote_status # ruby_lib_core example @driver.remote_status // C# // TODO Description Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation. The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed. Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All javadoc.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /status URL Parameters None JSON Parameters None Response name type description build.version string A generic release label (i.e. \"2.0rc3\") build.revision string The revision of the local source control client from which the server was built See Also W3C Specification JSONWP Specification","title":"Status"},{"location":"commands/status/#status","text":"Retrieve the server\u2019s current status","title":"Status"},{"location":"commands/status/#example-usage","text":"// Java driver.getStatus(); # Python selenium.webdriver.common.utils.is_url_connectable(port) // Javascript // webdriver.io example driver.status(); // wd example await driver.status(); # Ruby # ruby_lib example remote_status # ruby_lib_core example @driver.remote_status // C# // TODO","title":"Example Usage"},{"location":"commands/status/#description","text":"Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation. The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed. Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.","title":"Description"},{"location":"commands/status/#support","text":"","title":"Support"},{"location":"commands/status/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/status/#appium-clients","text":"Language Support Documentation Java All javadoc.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/status/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/status/#endpoint","text":"GET /status","title":"Endpoint"},{"location":"commands/status/#url-parameters","text":"None","title":"URL Parameters"},{"location":"commands/status/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/status/#response","text":"name type description build.version string A generic release label (i.e. \"2.0rc3\") build.revision string The revision of the local source control client from which the server was built","title":"Response"},{"location":"commands/status/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/context/","text":"Appium API Documentation ### /docs/en/commands/context Get Context Get All Contexts Set Context","title":"Home"},{"location":"commands/context/#appium-api-documentation","text":"### /docs/en/commands/context Get Context Get All Contexts Set Context","title":"Appium API Documentation"},{"location":"commands/context/get-context/","text":"Get Current Context Get the current context in which Appium is running Example Usage // Java String context = driver.getContext(); # Python context = driver.current_context # or context = driver.context // Javascript // webdriver.io example let context = driver.getContext(); // wd example let context = await driver.currentContext(); # Ruby # ruby_lib example context = current_context # ruby_lib_core example context = @driver.current_context // C# string Context = driver.Context; Description Retrieve the current context. This can be either NATIVE_APP for the native context, or a web view context, which will be: iOS - WEBVIEW_ id Android - WEBVIEW_ package name For information on contexts, see Appium's hybrid automation docs . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/context URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The name of the current context ( String ) See Also JSONWP Specification","title":"Get Context"},{"location":"commands/context/get-context/#get-current-context","text":"Get the current context in which Appium is running","title":"Get Current Context"},{"location":"commands/context/get-context/#example-usage","text":"// Java String context = driver.getContext(); # Python context = driver.current_context # or context = driver.context // Javascript // webdriver.io example let context = driver.getContext(); // wd example let context = await driver.currentContext(); # Ruby # ruby_lib example context = current_context # ruby_lib_core example context = @driver.current_context // C# string Context = driver.Context;","title":"Example Usage"},{"location":"commands/context/get-context/#description","text":"Retrieve the current context. This can be either NATIVE_APP for the native context, or a web view context, which will be: iOS - WEBVIEW_ id Android - WEBVIEW_ package name For information on contexts, see Appium's hybrid automation docs .","title":"Description"},{"location":"commands/context/get-context/#support","text":"","title":"Support"},{"location":"commands/context/get-context/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/context/get-context/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/context/get-context/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/context/get-context/#endpoint","text":"GET /session/:session_id/context","title":"Endpoint"},{"location":"commands/context/get-context/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/context/get-context/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/context/get-context/#response","text":"The name of the current context ( String )","title":"Response"},{"location":"commands/context/get-context/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/context/get-contexts/","text":"Get All Contexts Get all the contexts available to automate Example Usage // Java Set String contextNames = driver.getContextHandles(); # Python contexts = driver.contexts // Javascript // webdriver.io example let contexts = driver.getContexts(); // wd example let contexts = await driver.contexts(); # Ruby # ruby_lib example context = available_contexts # ruby_lib_core example context = @driver.available_contexts // C# List string AllContexts = new List string (); foreach (var context in (driver.Contexts)) { AllContexts.Add(context); } Description Retrieve all the contexts available to be automated. This will include, at least, the native context. There can also be zero or more web view contexts. For information on the format of the context names, see the get context documentation . mobile command mobile: getContexts is available on iOS (XCUITest) and Android (UIAutomator2 and Espresso) to get more detailed contexts. For information on contexts, see Appium's hybrid automation docs . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/contexts URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response Array of the names of all available contexts ( Array String ) See Also JSONWP Specification","title":"Get All Contexts"},{"location":"commands/context/get-contexts/#get-all-contexts","text":"Get all the contexts available to automate","title":"Get All Contexts"},{"location":"commands/context/get-contexts/#example-usage","text":"// Java Set String contextNames = driver.getContextHandles(); # Python contexts = driver.contexts // Javascript // webdriver.io example let contexts = driver.getContexts(); // wd example let contexts = await driver.contexts(); # Ruby # ruby_lib example context = available_contexts # ruby_lib_core example context = @driver.available_contexts // C# List string AllContexts = new List string (); foreach (var context in (driver.Contexts)) { AllContexts.Add(context); }","title":"Example Usage"},{"location":"commands/context/get-contexts/#description","text":"Retrieve all the contexts available to be automated. This will include, at least, the native context. There can also be zero or more web view contexts. For information on the format of the context names, see the get context documentation . mobile command mobile: getContexts is available on iOS (XCUITest) and Android (UIAutomator2 and Espresso) to get more detailed contexts. For information on contexts, see Appium's hybrid automation docs .","title":"Description"},{"location":"commands/context/get-contexts/#support","text":"","title":"Support"},{"location":"commands/context/get-contexts/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/context/get-contexts/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/context/get-contexts/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/context/get-contexts/#endpoint","text":"GET /session/:session_id/contexts","title":"Endpoint"},{"location":"commands/context/get-contexts/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/context/get-contexts/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/context/get-contexts/#response","text":"Array of the names of all available contexts ( Array String )","title":"Response"},{"location":"commands/context/get-contexts/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/context/set-context/","text":"Set Current Context Set the context being automated Example Usage // Java Set String contextNames = driver.getContextHandles(); driver.context(contextNames.toArray()[1]); // ... driver.context( NATIVE_APP ); # Python webview = driver.contexts[1] driver.switch_to.context(webview) # ... driver.switch_to.context('NATIVE_APP') // Javascript // webdriver.io example let contexts = driver.getContexts(); driver.switchContext(contexts[1]); // ... driver.switchContext('NATIVE_APP'); // wd example let contexts = await driver.contexts(); await driver.context(contexts[1]); // ... await driver.context('NATIVE_APP'); # Ruby # ruby_lib example webview = available_contexts[1] set_context(webview) # ... set_context('NATIVE_APP') # ruby_lib_core example webview = @driver.available_contexts[1] @driver.set_context(webview) # ... @driver.set_context('NATIVE_APP') // C# // Switch to specific webview List string AllContexts = new List string (); foreach (var context in (driver.Contexts)) { AllContexts.Add(context); } driver.Context = (AllContexts[1]); // Switch to NATIVE_APP driver.Context = ( NATIVE_APP ); Description Set the current context to that passed in. If this is moving into a web view context it will involve attempting to connect to that web view: iOS - attempt to connect to the application through the remote debugger Android - start a Chromedriver process and begin a session to connect to the web view For information on contexts, see Appium's hybrid automation docs . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/context URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description name String The name of the context to which to change Response null See Also JSONWP Specification","title":"Set Context"},{"location":"commands/context/set-context/#set-current-context","text":"Set the context being automated","title":"Set Current Context"},{"location":"commands/context/set-context/#example-usage","text":"// Java Set String contextNames = driver.getContextHandles(); driver.context(contextNames.toArray()[1]); // ... driver.context( NATIVE_APP ); # Python webview = driver.contexts[1] driver.switch_to.context(webview) # ... driver.switch_to.context('NATIVE_APP') // Javascript // webdriver.io example let contexts = driver.getContexts(); driver.switchContext(contexts[1]); // ... driver.switchContext('NATIVE_APP'); // wd example let contexts = await driver.contexts(); await driver.context(contexts[1]); // ... await driver.context('NATIVE_APP'); # Ruby # ruby_lib example webview = available_contexts[1] set_context(webview) # ... set_context('NATIVE_APP') # ruby_lib_core example webview = @driver.available_contexts[1] @driver.set_context(webview) # ... @driver.set_context('NATIVE_APP') // C# // Switch to specific webview List string AllContexts = new List string (); foreach (var context in (driver.Contexts)) { AllContexts.Add(context); } driver.Context = (AllContexts[1]); // Switch to NATIVE_APP driver.Context = ( NATIVE_APP );","title":"Example Usage"},{"location":"commands/context/set-context/#description","text":"Set the current context to that passed in. If this is moving into a web view context it will involve attempting to connect to that web view: iOS - attempt to connect to the application through the remote debugger Android - start a Chromedriver process and begin a session to connect to the web view For information on contexts, see Appium's hybrid automation docs .","title":"Description"},{"location":"commands/context/set-context/#support","text":"","title":"Support"},{"location":"commands/context/set-context/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/context/set-context/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/context/set-context/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/context/set-context/#endpoint","text":"POST /session/:session_id/context","title":"Endpoint"},{"location":"commands/context/set-context/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/context/set-context/#json-parameters","text":"name type description name String The name of the context to which to change","title":"JSON Parameters"},{"location":"commands/context/set-context/#response","text":"null","title":"Response"},{"location":"commands/context/set-context/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/","text":"Appium API Documentation ### /docs/en/commands/device Activity Start Activity Current Activity Current Package App Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage Clipboard Get Clipboard Set Clipboard Emulator Power AC Power Capacity Files Push File Pull File Pull Folder Interactions Shake Lock Unlock Is Locked Rotate Keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown Network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed Performance Data Get Performance Data Performance Data Types Screen Recording Start Screen Recording Stop Screen Recording Simulator Perform Touch ID Toggle Touch ID Enrollment System Open Notifications System Bars System Time Display density Authentication Finger Print","title":"Home"},{"location":"commands/device/#appium-api-documentation","text":"### /docs/en/commands/device Activity Start Activity Current Activity Current Package App Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage Clipboard Get Clipboard Set Clipboard Emulator Power AC Power Capacity Files Push File Pull File Pull Folder Interactions Shake Lock Unlock Is Locked Rotate Keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown Network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed Performance Data Get Performance Data Performance Data Types Screen Recording Start Screen Recording Stop Screen Recording Simulator Perform Touch ID Toggle Touch ID Enrollment System Open Notifications System Bars System Time Display density Authentication Finger Print","title":"Appium API Documentation"},{"location":"commands/device/activity/","text":"Appium API Documentation ### /docs/en/commands/device/activity Start Activity Current Activity Current Package","title":"Home"},{"location":"commands/device/activity/#appium-api-documentation","text":"### /docs/en/commands/device/activity Start Activity Current Activity Current Package","title":"Appium API Documentation"},{"location":"commands/device/activity/current-activity/","text":"Get Current Activity Get the name of the current Android activity Example Usage // Java String activity = driver.currentActivity(); # Python activity = self.driver.current_activity; // Javascript // webdriver.io example let activity = driver.getCurrentActivity(); // wd example let activity = await driver.getCurrentActivity(); # Ruby # ruby_lib example current_activity # ruby_lib_core example @driver.current_activity // C# string activity = driver.CurrentActivity; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/appium/device/current_activity URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response Name of the current activity ( string ) See Also JSONWP Specification","title":"Current Activity"},{"location":"commands/device/activity/current-activity/#get-current-activity","text":"Get the name of the current Android activity","title":"Get Current Activity"},{"location":"commands/device/activity/current-activity/#example-usage","text":"// Java String activity = driver.currentActivity(); # Python activity = self.driver.current_activity; // Javascript // webdriver.io example let activity = driver.getCurrentActivity(); // wd example let activity = await driver.getCurrentActivity(); # Ruby # ruby_lib example current_activity # ruby_lib_core example @driver.current_activity // C# string activity = driver.CurrentActivity;","title":"Example Usage"},{"location":"commands/device/activity/current-activity/#support","text":"","title":"Support"},{"location":"commands/device/activity/current-activity/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/activity/current-activity/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/activity/current-activity/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/activity/current-activity/#endpoint","text":"GET /session/:session_id/appium/device/current_activity","title":"Endpoint"},{"location":"commands/device/activity/current-activity/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/activity/current-activity/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/activity/current-activity/#response","text":"Name of the current activity ( string )","title":"Response"},{"location":"commands/device/activity/current-activity/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/activity/current-package/","text":"Get Current Package Get the name of the current Android package Example Usage // Java String package = driver.getCurrentPackage(); # Python package = self.driver.current_package; // Javascript // webdriver.io example let package = driver.getCurrentPackage(); // wd example let package = await driver.getCurrentPackage(); # Ruby # ruby_lib example current_package # ruby_lib_core example @driver.current_package // C# string package = driver.CurrentPackage; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/appium/device/current_package URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response Name of the current package ( string ) See Also JSONWP Specification","title":"Current Package"},{"location":"commands/device/activity/current-package/#get-current-package","text":"Get the name of the current Android package","title":"Get Current Package"},{"location":"commands/device/activity/current-package/#example-usage","text":"// Java String package = driver.getCurrentPackage(); # Python package = self.driver.current_package; // Javascript // webdriver.io example let package = driver.getCurrentPackage(); // wd example let package = await driver.getCurrentPackage(); # Ruby # ruby_lib example current_package # ruby_lib_core example @driver.current_package // C# string package = driver.CurrentPackage;","title":"Example Usage"},{"location":"commands/device/activity/current-package/#support","text":"","title":"Support"},{"location":"commands/device/activity/current-package/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/activity/current-package/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/activity/current-package/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/activity/current-package/#endpoint","text":"GET /session/:session_id/appium/device/current_package","title":"Endpoint"},{"location":"commands/device/activity/current-package/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/activity/current-package/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/activity/current-package/#response","text":"Name of the current package ( string )","title":"Response"},{"location":"commands/device/activity/current-package/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/activity/start-activity/","text":"Start Activity Start an Android activity by providing package name and activity name Example Usage // Java driver.startActivity(new Activity( com.example , ActivityName )); # Python self.driver.start_activity( com.example , ActivityName ); // Javascript // webdriver.io example driver.startActivity( com.example , ActivityName ); // wd example await driver.startActivity({ appPackage: com.example , appActivity: ActivityName }); # Ruby # ruby_lib example start_activity app_package: com.example , app_activity: ActivityName # ruby_lib_core example @driver.start_activity app_package: com.example , app_activity: ActivityName // C# driver.StartActivity( com.example , ActivityName ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/start_activity URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description appPackage string Name of the package appActivity string Name of the activity appWaitPackage string Automation will begin after this package starts intentAction string Intent action which will be used to start activity intentCategory string Intent category which will be used to start activity intentFlags string Flags that will be used to start activity optionalIntentArguments string Additional intent arguments that will be used to start activity dontStopAppOnReset boolean Should the app stop on reset Response null See Also JSONWP Specification","title":"Start Activity"},{"location":"commands/device/activity/start-activity/#start-activity","text":"Start an Android activity by providing package name and activity name","title":"Start Activity"},{"location":"commands/device/activity/start-activity/#example-usage","text":"// Java driver.startActivity(new Activity( com.example , ActivityName )); # Python self.driver.start_activity( com.example , ActivityName ); // Javascript // webdriver.io example driver.startActivity( com.example , ActivityName ); // wd example await driver.startActivity({ appPackage: com.example , appActivity: ActivityName }); # Ruby # ruby_lib example start_activity app_package: com.example , app_activity: ActivityName # ruby_lib_core example @driver.start_activity app_package: com.example , app_activity: ActivityName // C# driver.StartActivity( com.example , ActivityName );","title":"Example Usage"},{"location":"commands/device/activity/start-activity/#support","text":"","title":"Support"},{"location":"commands/device/activity/start-activity/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/activity/start-activity/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/activity/start-activity/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/activity/start-activity/#endpoint","text":"POST /session/:session_id/appium/device/start_activity","title":"Endpoint"},{"location":"commands/device/activity/start-activity/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/activity/start-activity/#json-parameters","text":"name type description appPackage string Name of the package appActivity string Name of the activity appWaitPackage string Automation will begin after this package starts intentAction string Intent action which will be used to start activity intentCategory string Intent category which will be used to start activity intentFlags string Flags that will be used to start activity optionalIntentArguments string Additional intent arguments that will be used to start activity dontStopAppOnReset boolean Should the app stop on reset","title":"JSON Parameters"},{"location":"commands/device/activity/start-activity/#response","text":"null","title":"Response"},{"location":"commands/device/activity/start-activity/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/","text":"Appium API Documentation ### /docs/en/commands/device/app Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage","title":"Home"},{"location":"commands/device/app/#appium-api-documentation","text":"### /docs/en/commands/device/app Install App Is App Installed Launch App Background App Close App Reset App Remove App Activate App Terminate App Get App State Get App Strings End Test Coverage","title":"Appium API Documentation"},{"location":"commands/device/app/activate-app/","text":"Activate App Activate the given app onto the device Example Usage // Java driver.activateApp('com.apple.Preferences'); driver.activateApp('io.appium.android.apis'); # Python driver.activate_app('com.apple.Preferences') driver.activate_app('io.appium.android.apis') // Javascript // webdriver.io example driver.activateApp(null, 'com.apple.Preferences') driver.activateApp('io.appium.android.apis') // wd example // Supports only `mobile: queryAppState` for iOS, XCUITest # Ruby # ruby_lib example activate_app('com.apple.Preferences') activate_app('io.appium.android.apis') # ruby_lib_core example @driver.activate_app('com.apple.Preferences') @driver.activate_app('io.appium.android.apis') // C# driver.activateApp('com.apple.Preferences'); driver.activateApp('io.appium.android.apis'); Description iOS tests with XCUITest can also use the mobile: activateApp method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/activate_app URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description bundleId or appId string BundleId for iOS. Package name for Android. Response null See Also JSONWP Specification","title":"Activate App"},{"location":"commands/device/app/activate-app/#activate-app","text":"Activate the given app onto the device","title":"Activate App"},{"location":"commands/device/app/activate-app/#example-usage","text":"// Java driver.activateApp('com.apple.Preferences'); driver.activateApp('io.appium.android.apis'); # Python driver.activate_app('com.apple.Preferences') driver.activate_app('io.appium.android.apis') // Javascript // webdriver.io example driver.activateApp(null, 'com.apple.Preferences') driver.activateApp('io.appium.android.apis') // wd example // Supports only `mobile: queryAppState` for iOS, XCUITest # Ruby # ruby_lib example activate_app('com.apple.Preferences') activate_app('io.appium.android.apis') # ruby_lib_core example @driver.activate_app('com.apple.Preferences') @driver.activate_app('io.appium.android.apis') // C# driver.activateApp('com.apple.Preferences'); driver.activateApp('io.appium.android.apis');","title":"Example Usage"},{"location":"commands/device/app/activate-app/#description","text":"iOS tests with XCUITest can also use the mobile: activateApp method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/activate-app/#support","text":"","title":"Support"},{"location":"commands/device/app/activate-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/activate-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/activate-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/activate-app/#endpoint","text":"POST /session/:session_id/appium/device/activate_app","title":"Endpoint"},{"location":"commands/device/app/activate-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/activate-app/#json-parameters","text":"name type description bundleId or appId string BundleId for iOS. Package name for Android.","title":"JSON Parameters"},{"location":"commands/device/app/activate-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/activate-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/app-state/","text":"Get app state Get the given app status on the device Example Usage // Java driver.queryAppState('com.apple.Preferences'); driver.queryAppState('io.appium.android.apis'); # Python driver.query_app_state('com.apple.Preferences') driver.query_app_state('io.appium.android.apis') // Javascript // webdriver.io example driver.queryAppState(null, 'com.apple.Preferences') driver.queryAppState('io.appium.android.apis') // wd example // Supports only `mobile: queryAppState` for iOS, XCUITest # Ruby # ruby_lib example app_state('com.apple.Preferences') query_app_state('io.appium.android.apis') # `query_` prefix is also available # ruby_lib_core example @driver.app_state('com.apple.Preferences') @driver.query_app_state('io.appium.android.apis') # `query_` prefix is also available // C# // Supports only `mobile: queryAppState` for iOS, XCUITest Description iOS tests with XCUITest can also use the mobile: queryAppState method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/app_state URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description bundleId or appId string BundleId for iOS. Package name for Android. Response Current the target app status. (Clients wrap the response properly) 0 is not installed. 1 is not running. 2 is running in background or suspended. 3 is running in background. 4 is running in foreground. ( number ) See Also JSONWP Specification","title":"Get App State"},{"location":"commands/device/app/app-state/#get-app-state","text":"Get the given app status on the device","title":"Get app state"},{"location":"commands/device/app/app-state/#example-usage","text":"// Java driver.queryAppState('com.apple.Preferences'); driver.queryAppState('io.appium.android.apis'); # Python driver.query_app_state('com.apple.Preferences') driver.query_app_state('io.appium.android.apis') // Javascript // webdriver.io example driver.queryAppState(null, 'com.apple.Preferences') driver.queryAppState('io.appium.android.apis') // wd example // Supports only `mobile: queryAppState` for iOS, XCUITest # Ruby # ruby_lib example app_state('com.apple.Preferences') query_app_state('io.appium.android.apis') # `query_` prefix is also available # ruby_lib_core example @driver.app_state('com.apple.Preferences') @driver.query_app_state('io.appium.android.apis') # `query_` prefix is also available // C# // Supports only `mobile: queryAppState` for iOS, XCUITest","title":"Example Usage"},{"location":"commands/device/app/app-state/#description","text":"iOS tests with XCUITest can also use the mobile: queryAppState method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/app-state/#support","text":"","title":"Support"},{"location":"commands/device/app/app-state/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/app-state/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/app-state/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/app-state/#endpoint","text":"POST /session/:session_id/appium/device/app_state","title":"Endpoint"},{"location":"commands/device/app/app-state/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/app-state/#json-parameters","text":"name type description bundleId or appId string BundleId for iOS. Package name for Android.","title":"JSON Parameters"},{"location":"commands/device/app/app-state/#response","text":"Current the target app status. (Clients wrap the response properly) 0 is not installed. 1 is not running. 2 is running in background or suspended. 3 is running in background. 4 is running in foreground. ( number )","title":"Response"},{"location":"commands/device/app/app-state/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/background-app/","text":"Background App Send the currently running app for this session to the background Example Usage // Java driver.runAppInBackground(Duration.ofSeconds(10)); # Python self.driver.background_app(10) // Javascript // webdriver.io example driver.background(10); // wd example await driver.backgroundApp(10); # Ruby # ruby_lib example background_app(10) # ruby_lib_core example @driver.background_app(10) // C# driver.BackgroundApp(10) Description Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. There are 3 types of parameters which may be passed to this method: An object that looks like {\"seconds\": secs} , where secs is an integer designating how long, in seconds, to background the app for. -1 means to deactivate the app entirely. null , which means to deactivate the app entirely. Deprecated An integer: how long, in seconds, to background the app for. -1 means to deactivate the app entirely. iOS tests with XCUITest can also use the mobile: terminateApp method to terminate the current app (see detailed documentation ), and the mobile: activateApp to activate an existing application on the device under test and moves it to the foreground (see detailed documentation ). Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/app/background URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description seconds number How long to run app in background. Response null See Also JSONWP Specification","title":"Background App"},{"location":"commands/device/app/background-app/#background-app","text":"Send the currently running app for this session to the background","title":"Background App"},{"location":"commands/device/app/background-app/#example-usage","text":"// Java driver.runAppInBackground(Duration.ofSeconds(10)); # Python self.driver.background_app(10) // Javascript // webdriver.io example driver.background(10); // wd example await driver.backgroundApp(10); # Ruby # ruby_lib example background_app(10) # ruby_lib_core example @driver.background_app(10) // C# driver.BackgroundApp(10)","title":"Example Usage"},{"location":"commands/device/app/background-app/#description","text":"Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. There are 3 types of parameters which may be passed to this method: An object that looks like {\"seconds\": secs} , where secs is an integer designating how long, in seconds, to background the app for. -1 means to deactivate the app entirely. null , which means to deactivate the app entirely. Deprecated An integer: how long, in seconds, to background the app for. -1 means to deactivate the app entirely. iOS tests with XCUITest can also use the mobile: terminateApp method to terminate the current app (see detailed documentation ), and the mobile: activateApp to activate an existing application on the device under test and moves it to the foreground (see detailed documentation ).","title":"Description"},{"location":"commands/device/app/background-app/#support","text":"","title":"Support"},{"location":"commands/device/app/background-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/background-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/background-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/background-app/#endpoint","text":"POST /session/:session_id/appium/app/background","title":"Endpoint"},{"location":"commands/device/app/background-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/background-app/#json-parameters","text":"name type description seconds number How long to run app in background.","title":"JSON Parameters"},{"location":"commands/device/app/background-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/background-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/close-app/","text":"Close an App Close an app on device Example Usage // Java driver.closeApp(); # Python self.driver.close_app() // Javascript // webdriver.io example driver.closeApp(); // wd example await driver.closeApp(); # Ruby # ruby_lib example close_app # ruby_lib_core example @driver.close_app // C# driver.CloseApp(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/app/close URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Close App"},{"location":"commands/device/app/close-app/#close-an-app","text":"Close an app on device","title":"Close an App"},{"location":"commands/device/app/close-app/#example-usage","text":"// Java driver.closeApp(); # Python self.driver.close_app() // Javascript // webdriver.io example driver.closeApp(); // wd example await driver.closeApp(); # Ruby # ruby_lib example close_app # ruby_lib_core example @driver.close_app // C# driver.CloseApp();","title":"Example Usage"},{"location":"commands/device/app/close-app/#support","text":"","title":"Support"},{"location":"commands/device/app/close-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/close-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/close-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/close-app/#endpoint","text":"POST /session/:session_id/appium/app/close","title":"Endpoint"},{"location":"commands/device/app/close-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/close-app/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/app/close-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/close-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/end-test-coverage/","text":"End Test Coverage Get test coverage data Example Usage // Java driver.endTestCoverage( Intent , /path ); # Python self.driver.end_test_coverage( Intent , /path ) // Javascript // webdriver.io example driver.endCoverage( Intent , /path ); // wd example await driver.endTestCoverageForApp( Intent , /path ); # Ruby # ruby_lib example end_coverage( Intent , /path ) # ruby_lib_core example @driver.end_coverage( Intent , /path ) // C# driver.EndTestCoverage( Intent , /path ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby None www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/app/end_test_coverage URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description intent string Intent to broadcast path string Path to .ec file Response null See Also JSONWP Specification","title":"End Test Coverage"},{"location":"commands/device/app/end-test-coverage/#end-test-coverage","text":"Get test coverage data","title":"End Test Coverage"},{"location":"commands/device/app/end-test-coverage/#example-usage","text":"// Java driver.endTestCoverage( Intent , /path ); # Python self.driver.end_test_coverage( Intent , /path ) // Javascript // webdriver.io example driver.endCoverage( Intent , /path ); // wd example await driver.endTestCoverageForApp( Intent , /path ); # Ruby # ruby_lib example end_coverage( Intent , /path ) # ruby_lib_core example @driver.end_coverage( Intent , /path ) // C# driver.EndTestCoverage( Intent , /path );","title":"Example Usage"},{"location":"commands/device/app/end-test-coverage/#support","text":"","title":"Support"},{"location":"commands/device/app/end-test-coverage/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/end-test-coverage/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby None www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/end-test-coverage/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/end-test-coverage/#endpoint","text":"POST /session/:session_id/appium/app/end_test_coverage","title":"Endpoint"},{"location":"commands/device/app/end-test-coverage/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/end-test-coverage/#json-parameters","text":"name type description intent string Intent to broadcast path string Path to .ec file","title":"JSON Parameters"},{"location":"commands/device/app/end-test-coverage/#response","text":"null","title":"Response"},{"location":"commands/device/app/end-test-coverage/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/get-app-strings/","text":"Get App Strings Get app strings Example Usage // Java Map String, String appStrings = driver.getAppStringMap( en , /path/to/file ); # Python appStrings = self.driver.app_strings( en , /path/to/file ) // Javascript // webdriver.io example let appStrings = driver.getStrings( en ); // wd example let appStrings = await driver.getAppStrings(); # Ruby # ruby_lib example app_strings( en ) # ruby_lib_core example @driver.app_strings( en ) // C# Dictionary string, object appStrings = driver.GetAppStringDictionary( end , /path/to/file ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/app/strings URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description language string Language code (optional) stringFile string Path to the string file (optional) Response null See Also JSONWP Specification","title":"Get App Strings"},{"location":"commands/device/app/get-app-strings/#get-app-strings","text":"Get app strings","title":"Get App Strings"},{"location":"commands/device/app/get-app-strings/#example-usage","text":"// Java Map String, String appStrings = driver.getAppStringMap( en , /path/to/file ); # Python appStrings = self.driver.app_strings( en , /path/to/file ) // Javascript // webdriver.io example let appStrings = driver.getStrings( en ); // wd example let appStrings = await driver.getAppStrings(); # Ruby # ruby_lib example app_strings( en ) # ruby_lib_core example @driver.app_strings( en ) // C# Dictionary string, object appStrings = driver.GetAppStringDictionary( end , /path/to/file );","title":"Example Usage"},{"location":"commands/device/app/get-app-strings/#support","text":"","title":"Support"},{"location":"commands/device/app/get-app-strings/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/get-app-strings/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/get-app-strings/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/get-app-strings/#endpoint","text":"POST /session/:session_id/appium/app/strings","title":"Endpoint"},{"location":"commands/device/app/get-app-strings/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/get-app-strings/#json-parameters","text":"name type description language string Language code (optional) stringFile string Path to the string file (optional)","title":"JSON Parameters"},{"location":"commands/device/app/get-app-strings/#response","text":"null","title":"Response"},{"location":"commands/device/app/get-app-strings/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/install-app/","text":"Install App Install the given app onto the device Example Usage // Java driver.installApp( /Users/johndoe/path/to/app.apk ); # Python self.driver.install_app('/Users/johndoe/path/to/app.apk'); // Javascript // webdriver.io example driver.installApp('/Users/johndoe/path/to/app.apk') // wd example await driver.installAppOnDevice('/Users/johndoe/path/to/app.apk'); # Ruby # ruby_lib example install_app('/Users/johndoe/path/to/app.apk') # ruby_lib_core example @driver.install_app('/Users/johndoe/path/to/app.apk') // C# driver.InstallApp( /Users/johndoe/path/to/app.apk ) Description iOS tests with XCUITest can also use the mobile: installApp method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/install_app URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description appPath string Path of the app being installed Response null See Also JSONWP Specification","title":"Install App"},{"location":"commands/device/app/install-app/#install-app","text":"Install the given app onto the device","title":"Install App"},{"location":"commands/device/app/install-app/#example-usage","text":"// Java driver.installApp( /Users/johndoe/path/to/app.apk ); # Python self.driver.install_app('/Users/johndoe/path/to/app.apk'); // Javascript // webdriver.io example driver.installApp('/Users/johndoe/path/to/app.apk') // wd example await driver.installAppOnDevice('/Users/johndoe/path/to/app.apk'); # Ruby # ruby_lib example install_app('/Users/johndoe/path/to/app.apk') # ruby_lib_core example @driver.install_app('/Users/johndoe/path/to/app.apk') // C# driver.InstallApp( /Users/johndoe/path/to/app.apk )","title":"Example Usage"},{"location":"commands/device/app/install-app/#description","text":"iOS tests with XCUITest can also use the mobile: installApp method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/install-app/#support","text":"","title":"Support"},{"location":"commands/device/app/install-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/install-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/install-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/install-app/#endpoint","text":"POST /session/:session_id/appium/device/install_app","title":"Endpoint"},{"location":"commands/device/app/install-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/install-app/#json-parameters","text":"name type description appPath string Path of the app being installed","title":"JSON Parameters"},{"location":"commands/device/app/install-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/install-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/is-app-installed/","text":"Is App Installed Check whether the specified app is installed on the device Example Usage // Java driver.isAppInstalled( com.example.AppName ); # Python self.driver.is_app_installed('com.example.AppName'); // Javascript // webdriver.io example driver.isAppInstalled('com.example.AppName') // wd example await driver.isAppInstalledOnDevice('com.example.AppName'); # Ruby # ruby_lib example app_installed?('com.example.AppName') # ruby_lib_core example @driver.app_installed?('com.example.AppName') // C# driver.IsAppInstalled( com.example.AppName ); Description iOS tests with XCUITest can also use the mobile: isAppInstalled method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/app_installed URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description bundleId string iOS bundleID or Android package name Response Return true if installed, false if not ( boolean ) See Also JSONWP Specification","title":"Is App Installed"},{"location":"commands/device/app/is-app-installed/#is-app-installed","text":"Check whether the specified app is installed on the device","title":"Is App Installed"},{"location":"commands/device/app/is-app-installed/#example-usage","text":"// Java driver.isAppInstalled( com.example.AppName ); # Python self.driver.is_app_installed('com.example.AppName'); // Javascript // webdriver.io example driver.isAppInstalled('com.example.AppName') // wd example await driver.isAppInstalledOnDevice('com.example.AppName'); # Ruby # ruby_lib example app_installed?('com.example.AppName') # ruby_lib_core example @driver.app_installed?('com.example.AppName') // C# driver.IsAppInstalled( com.example.AppName );","title":"Example Usage"},{"location":"commands/device/app/is-app-installed/#description","text":"iOS tests with XCUITest can also use the mobile: isAppInstalled method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/is-app-installed/#support","text":"","title":"Support"},{"location":"commands/device/app/is-app-installed/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/is-app-installed/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/is-app-installed/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/is-app-installed/#endpoint","text":"POST /session/:session_id/appium/device/app_installed","title":"Endpoint"},{"location":"commands/device/app/is-app-installed/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/is-app-installed/#json-parameters","text":"name type description bundleId string iOS bundleID or Android package name","title":"JSON Parameters"},{"location":"commands/device/app/is-app-installed/#response","text":"Return true if installed, false if not ( boolean )","title":"Response"},{"location":"commands/device/app/is-app-installed/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/launch-app/","text":"Launch App Launch the app-under-test on the device Example Usage // Java driver.launchApp(); # Python self.driver.launch_app() // Javascript // webdriver.io example driver.launchApp(); // wd example await driver.launchApp(); # Ruby # ruby_lib example launch_app # ruby_lib_core example @driver.launch_app // C# driver.LaunchApp(); Description If the app-under-test (AUT) is closed, or backgrounded, it will launch it. If the AUT is already open, it will background it and re-launch it. iOS tests with XCUITest can also use the mobile: launchApp method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/app/launch URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Launch App"},{"location":"commands/device/app/launch-app/#launch-app","text":"Launch the app-under-test on the device","title":"Launch App"},{"location":"commands/device/app/launch-app/#example-usage","text":"// Java driver.launchApp(); # Python self.driver.launch_app() // Javascript // webdriver.io example driver.launchApp(); // wd example await driver.launchApp(); # Ruby # ruby_lib example launch_app # ruby_lib_core example @driver.launch_app // C# driver.LaunchApp();","title":"Example Usage"},{"location":"commands/device/app/launch-app/#description","text":"If the app-under-test (AUT) is closed, or backgrounded, it will launch it. If the AUT is already open, it will background it and re-launch it. iOS tests with XCUITest can also use the mobile: launchApp method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/launch-app/#support","text":"","title":"Support"},{"location":"commands/device/app/launch-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/launch-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/launch-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/launch-app/#endpoint","text":"POST /session/:session_id/appium/app/launch","title":"Endpoint"},{"location":"commands/device/app/launch-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/launch-app/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/app/launch-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/launch-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/remove-app/","text":"Remove App Remove an app from the device Example Usage // Java driver.removeApp( com.example.AppName ); # Python self.driver.remove_app('com.example.AppName'); // Javascript // webdriver.io example driver.removeApp('com.example.AppName') // wd example await driver.removeAppFromDevice('com.example.AppName'); # Ruby # ruby_lib example remove_app('com.example.AppName') # ruby_lib_core example @driver.remove_app('com.example.AppName') // C# driver.RemoveApp( com.example.AppName ); Description iOS tests with XCUITest can also use the mobile: removeApp method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/remove_app URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description appId string The iOS App ID bundleId string iOS bundleID or Android package name Response null See Also JSONWP Specification","title":"Remove App"},{"location":"commands/device/app/remove-app/#remove-app","text":"Remove an app from the device","title":"Remove App"},{"location":"commands/device/app/remove-app/#example-usage","text":"// Java driver.removeApp( com.example.AppName ); # Python self.driver.remove_app('com.example.AppName'); // Javascript // webdriver.io example driver.removeApp('com.example.AppName') // wd example await driver.removeAppFromDevice('com.example.AppName'); # Ruby # ruby_lib example remove_app('com.example.AppName') # ruby_lib_core example @driver.remove_app('com.example.AppName') // C# driver.RemoveApp( com.example.AppName );","title":"Example Usage"},{"location":"commands/device/app/remove-app/#description","text":"iOS tests with XCUITest can also use the mobile: removeApp method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/remove-app/#support","text":"","title":"Support"},{"location":"commands/device/app/remove-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/remove-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/remove-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/remove-app/#endpoint","text":"POST /session/:session_id/appium/device/remove_app","title":"Endpoint"},{"location":"commands/device/app/remove-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/remove-app/#json-parameters","text":"name type description appId string The iOS App ID bundleId string iOS bundleID or Android package name","title":"JSON Parameters"},{"location":"commands/device/app/remove-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/remove-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/reset-app/","text":"Reset App Reset the currently running app for this session Example Usage // Java driver.resetApp(); # Python self.driver.reset() // Javascript // webdriver.io example driver.reset(); // wd example await driver.resetApp(); # Ruby # ruby_lib example reset # ruby_lib_core example @driver.reset // C# driver.ResetApp(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/app/reset URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Reset App"},{"location":"commands/device/app/reset-app/#reset-app","text":"Reset the currently running app for this session","title":"Reset App"},{"location":"commands/device/app/reset-app/#example-usage","text":"// Java driver.resetApp(); # Python self.driver.reset() // Javascript // webdriver.io example driver.reset(); // wd example await driver.resetApp(); # Ruby # ruby_lib example reset # ruby_lib_core example @driver.reset // C# driver.ResetApp();","title":"Example Usage"},{"location":"commands/device/app/reset-app/#support","text":"","title":"Support"},{"location":"commands/device/app/reset-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/reset-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/reset-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/reset-app/#endpoint","text":"POST /session/:session_id/appium/app/reset","title":"Endpoint"},{"location":"commands/device/app/reset-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/reset-app/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/app/reset-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/reset-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/app/terminate-app/","text":"Terminate App Terminate the given app on the device Example Usage // Java driver.terminateApp('com.apple.Preferences'); driver.terminateApp('io.appium.android.apis'); # Python driver.terminate_app('com.apple.Preferences') driver.terminate_app('io.appium.android.apis') // Javascript // webdriver.io example driver.terminateApp(null, 'com.apple.Preferences') driver.terminateApp('io.appium.android.apis') // wd example // Supports only `mobile: queryAppState` for iOS, XCUITest # Ruby # ruby_lib example terminate_app('com.apple.Preferences') terminate_app('io.appium.android.apis') # ruby_lib_core example @driver.terminate_app('com.apple.Preferences') @driver.terminate_app('io.appium.android.apis') // C# // Supports only `mobile: queryAppState` for iOS, XCUITest Description iOS tests with XCUITest can also use the mobile: terminateApp method. See detailed documentation . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/terminate_app URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description bundleId or appId string BundleId for iOS. Package name for Android. options.timeout number (Only Android) Timeout to retry terminate the app. Response null See Also JSONWP Specification","title":"Terminate App"},{"location":"commands/device/app/terminate-app/#terminate-app","text":"Terminate the given app on the device","title":"Terminate App"},{"location":"commands/device/app/terminate-app/#example-usage","text":"// Java driver.terminateApp('com.apple.Preferences'); driver.terminateApp('io.appium.android.apis'); # Python driver.terminate_app('com.apple.Preferences') driver.terminate_app('io.appium.android.apis') // Javascript // webdriver.io example driver.terminateApp(null, 'com.apple.Preferences') driver.terminateApp('io.appium.android.apis') // wd example // Supports only `mobile: queryAppState` for iOS, XCUITest # Ruby # ruby_lib example terminate_app('com.apple.Preferences') terminate_app('io.appium.android.apis') # ruby_lib_core example @driver.terminate_app('com.apple.Preferences') @driver.terminate_app('io.appium.android.apis') // C# // Supports only `mobile: queryAppState` for iOS, XCUITest","title":"Example Usage"},{"location":"commands/device/app/terminate-app/#description","text":"iOS tests with XCUITest can also use the mobile: terminateApp method. See detailed documentation .","title":"Description"},{"location":"commands/device/app/terminate-app/#support","text":"","title":"Support"},{"location":"commands/device/app/terminate-app/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/app/terminate-app/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/app/terminate-app/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/app/terminate-app/#endpoint","text":"POST /session/:session_id/appium/device/terminate_app","title":"Endpoint"},{"location":"commands/device/app/terminate-app/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/app/terminate-app/#json-parameters","text":"name type description bundleId or appId string BundleId for iOS. Package name for Android. options.timeout number (Only Android) Timeout to retry terminate the app.","title":"JSON Parameters"},{"location":"commands/device/app/terminate-app/#response","text":"null","title":"Response"},{"location":"commands/device/app/terminate-app/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/authentication/","text":"Appium API Documentation ### /docs/en/commands/device/authentication Finger Print","title":"Home"},{"location":"commands/device/authentication/#appium-api-documentation","text":"### /docs/en/commands/device/authentication Finger Print","title":"Appium API Documentation"},{"location":"commands/device/authentication/finger-print/","text":"Finger print Authenticate users by using their finger print scans on supported emulators. Example Usage // Java driver.fingerPrint(1); # Python self.driver.finger_print(1) // Javascript // webdriver.io example await driver.fingerPrint(1); // wd example await driver.fingerprint(1); # Ruby # ruby_lib example finger_print 1 # ruby_lib_core example @driver.finger_print 1 // C# // CSharp Code here Description For Android emulator. Authenticate users by using their finger print scans. Touch ID by iOS is here Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None HTTP API Specifications Endpoint POST /session/:session_id/appium/device/finger_print URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description fingerprintId number finger prints stored in Android Keystore system (from 1 to 10) Response null See Also JSONWP Specification","title":"Finger Print"},{"location":"commands/device/authentication/finger-print/#finger-print","text":"Authenticate users by using their finger print scans on supported emulators.","title":"Finger print"},{"location":"commands/device/authentication/finger-print/#example-usage","text":"// Java driver.fingerPrint(1); # Python self.driver.finger_print(1) // Javascript // webdriver.io example await driver.fingerPrint(1); // wd example await driver.fingerprint(1); # Ruby # ruby_lib example finger_print 1 # ruby_lib_core example @driver.finger_print 1 // C# // CSharp Code here","title":"Example Usage"},{"location":"commands/device/authentication/finger-print/#description","text":"For Android emulator. Authenticate users by using their finger print scans. Touch ID by iOS is here","title":"Description"},{"location":"commands/device/authentication/finger-print/#support","text":"","title":"Support"},{"location":"commands/device/authentication/finger-print/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/authentication/finger-print/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/device/authentication/finger-print/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/authentication/finger-print/#endpoint","text":"POST /session/:session_id/appium/device/finger_print","title":"Endpoint"},{"location":"commands/device/authentication/finger-print/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/authentication/finger-print/#json-parameters","text":"name type description fingerprintId number finger prints stored in Android Keystore system (from 1 to 10)","title":"JSON Parameters"},{"location":"commands/device/authentication/finger-print/#response","text":"null","title":"Response"},{"location":"commands/device/authentication/finger-print/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/clipboard/","text":"Appium API Documentation ### /docs/en/commands/device/clipboard Get Clipboard Set Clipboard","title":"Home"},{"location":"commands/device/clipboard/#appium-api-documentation","text":"### /docs/en/commands/device/clipboard Get Clipboard Set Clipboard","title":"Appium API Documentation"},{"location":"commands/device/clipboard/get-clipboard/","text":"Get Clipboard Get the content of the system clipboard Example Usage // Java driver.getClipboard(ClipboardContentType.PLAINTEXT); // get plaintext driver.getClipboardText(); # Python self.driver.get_clipboard() self.driver.get_clipboard_text() // Javascript // webdriver.io example driver.getClipboard(); // wd example await driver.getClipboard(); # Ruby # ruby_lib example get_clipboard # ruby_lib_core example @driver.get_clipboard // C# // CSharp Code here Description Get the content of the system clipboard (For iOS real devices) Apple security preferences require the WebDriverAgentRunner application to be in foreground in order to be able to receive the system clipboard content. Otherwise an empty string is always returned. Consider using Activate App and Background App to change the foreground application. Activate App command cannot launch the WebDriverAgent properly on some environments. It depends on XCTest framework by Apple. Then, you should launch the WebDriverAgent using its Springboard's application icon. Follow the example below. 1. Open springboard, @driver.activate_app 'com.apple.springboard' . 2. Find the WDA icon with @driver.find_element :accessibility_id, 'WebDriverAgentRunner-Runner' (It should be visible on the screen) and click it. 3. Call the get clipboard API. 4. Open the application under test with the Activate App . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All Android iOS C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/get_clipboard URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description contentType string The type of the content to get. Plaintext, Image, URL. Android supports only plaintext. Response Clipboard content as base64-encoded string or an empty string if the clipboard is empty ( string ) See Also","title":"Get Clipboard"},{"location":"commands/device/clipboard/get-clipboard/#get-clipboard","text":"Get the content of the system clipboard","title":"Get Clipboard"},{"location":"commands/device/clipboard/get-clipboard/#example-usage","text":"// Java driver.getClipboard(ClipboardContentType.PLAINTEXT); // get plaintext driver.getClipboardText(); # Python self.driver.get_clipboard() self.driver.get_clipboard_text() // Javascript // webdriver.io example driver.getClipboard(); // wd example await driver.getClipboard(); # Ruby # ruby_lib example get_clipboard # ruby_lib_core example @driver.get_clipboard // C# // CSharp Code here","title":"Example Usage"},{"location":"commands/device/clipboard/get-clipboard/#description","text":"Get the content of the system clipboard (For iOS real devices) Apple security preferences require the WebDriverAgentRunner application to be in foreground in order to be able to receive the system clipboard content. Otherwise an empty string is always returned. Consider using Activate App and Background App to change the foreground application. Activate App command cannot launch the WebDriverAgent properly on some environments. It depends on XCTest framework by Apple. Then, you should launch the WebDriverAgent using its Springboard's application icon. Follow the example below. 1. Open springboard, @driver.activate_app 'com.apple.springboard' . 2. Find the WDA icon with @driver.find_element :accessibility_id, 'WebDriverAgentRunner-Runner' (It should be visible on the screen) and click it. 3. Call the get clipboard API. 4. Open the application under test with the Activate App .","title":"Description"},{"location":"commands/device/clipboard/get-clipboard/#support","text":"","title":"Support"},{"location":"commands/device/clipboard/get-clipboard/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/clipboard/get-clipboard/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All Android iOS C# None github.com","title":"Appium Clients"},{"location":"commands/device/clipboard/get-clipboard/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/clipboard/get-clipboard/#endpoint","text":"POST /session/:session_id/appium/device/get_clipboard","title":"Endpoint"},{"location":"commands/device/clipboard/get-clipboard/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/clipboard/get-clipboard/#json-parameters","text":"name type description contentType string The type of the content to get. Plaintext, Image, URL. Android supports only plaintext.","title":"JSON Parameters"},{"location":"commands/device/clipboard/get-clipboard/#response","text":"Clipboard content as base64-encoded string or an empty string if the clipboard is empty ( string )","title":"Response"},{"location":"commands/device/clipboard/get-clipboard/#see-also","text":"","title":"See Also"},{"location":"commands/device/clipboard/set-clipboard/","text":"Set Clipboard Set the content of the system clipboard Example Usage // Java // base64Content is Base64-encoded content driver.setClipboard( label , ClipboardContentType.PLAINTEXT, base64Content); driver.setClipboardText( happy testing ); # Python self.driver.set_clipboard('happy testing') self.driver.set_clipboard_text('happy testing') // Javascript // webdriver.io example driver.setClipboard('happy testing', 'plaintext') // wd example await driver.setClipboard('happy testing', 'plaintext') # Ruby # ruby_lib example set_clipboard content: 'happy testing' # ruby_lib_core example @driver.set_clipboard content: 'happy testing' // C# // CSharp Code here Description Set the content of the system clipboard Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All iOS Android C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/set_clipboard URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description content String The actual base64 encoded clipboard content. contentType string The type of the content to get. Plaintext, Image, URL. Android supports only plaintext. label string Clipboard data label for Android. Response Response from Appium server ( string ) See Also","title":"Set Clipboard"},{"location":"commands/device/clipboard/set-clipboard/#set-clipboard","text":"Set the content of the system clipboard","title":"Set Clipboard"},{"location":"commands/device/clipboard/set-clipboard/#example-usage","text":"// Java // base64Content is Base64-encoded content driver.setClipboard( label , ClipboardContentType.PLAINTEXT, base64Content); driver.setClipboardText( happy testing ); # Python self.driver.set_clipboard('happy testing') self.driver.set_clipboard_text('happy testing') // Javascript // webdriver.io example driver.setClipboard('happy testing', 'plaintext') // wd example await driver.setClipboard('happy testing', 'plaintext') # Ruby # ruby_lib example set_clipboard content: 'happy testing' # ruby_lib_core example @driver.set_clipboard content: 'happy testing' // C# // CSharp Code here","title":"Example Usage"},{"location":"commands/device/clipboard/set-clipboard/#description","text":"Set the content of the system clipboard","title":"Description"},{"location":"commands/device/clipboard/set-clipboard/#support","text":"","title":"Support"},{"location":"commands/device/clipboard/set-clipboard/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/clipboard/set-clipboard/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All iOS Android C# None github.com","title":"Appium Clients"},{"location":"commands/device/clipboard/set-clipboard/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/clipboard/set-clipboard/#endpoint","text":"POST /session/:session_id/appium/device/set_clipboard","title":"Endpoint"},{"location":"commands/device/clipboard/set-clipboard/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/clipboard/set-clipboard/#json-parameters","text":"name type description content String The actual base64 encoded clipboard content. contentType string The type of the content to get. Plaintext, Image, URL. Android supports only plaintext. label string Clipboard data label for Android.","title":"JSON Parameters"},{"location":"commands/device/clipboard/set-clipboard/#response","text":"Response from Appium server ( string )","title":"Response"},{"location":"commands/device/clipboard/set-clipboard/#see-also","text":"","title":"See Also"},{"location":"commands/device/emulator/","text":"Appium API Documentation ### /docs/en/commands/device/emulator Power AC Power Capacity","title":"Home"},{"location":"commands/device/emulator/#appium-api-documentation","text":"### /docs/en/commands/device/emulator Power AC Power Capacity","title":"Appium API Documentation"},{"location":"commands/device/emulator/power_ac/","text":"Emulate power state Emulate power state change on the connected emulator. Example Usage // Java driver.setPowerAC(PowerACState.OFF); # Python self.driver.set_power_ac(Power.AC_OFF) // Javascript // webdriver.io example driver.powerAC('on') // Not supported # Ruby # ruby_lib example set_power_ac :on # ruby_lib_core example @driver.set_power_ac :on // Not supported Description For Android emulator. To set the state of the battery charger to connected or not. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None Ruby All www.rubydoc.info C# None HTTP API Specifications Endpoint POST /session/:session_id/appium/device/power_ac URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description state string set the state. on or off Response null See Also JSONWP Specification","title":"Power AC"},{"location":"commands/device/emulator/power_ac/#emulate-power-state","text":"Emulate power state change on the connected emulator.","title":"Emulate power state"},{"location":"commands/device/emulator/power_ac/#example-usage","text":"// Java driver.setPowerAC(PowerACState.OFF); # Python self.driver.set_power_ac(Power.AC_OFF) // Javascript // webdriver.io example driver.powerAC('on') // Not supported # Ruby # ruby_lib example set_power_ac :on # ruby_lib_core example @driver.set_power_ac :on // Not supported","title":"Example Usage"},{"location":"commands/device/emulator/power_ac/#description","text":"For Android emulator. To set the state of the battery charger to connected or not.","title":"Description"},{"location":"commands/device/emulator/power_ac/#support","text":"","title":"Support"},{"location":"commands/device/emulator/power_ac/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/emulator/power_ac/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None Ruby All www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/device/emulator/power_ac/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/emulator/power_ac/#endpoint","text":"POST /session/:session_id/appium/device/power_ac","title":"Endpoint"},{"location":"commands/device/emulator/power_ac/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/emulator/power_ac/#json-parameters","text":"name type description state string set the state. on or off","title":"JSON Parameters"},{"location":"commands/device/emulator/power_ac/#response","text":"null","title":"Response"},{"location":"commands/device/emulator/power_ac/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/emulator/power_capacity/","text":"Emulate power capacity Emulate power capacity change on the connected emulator. Example Usage // Java driver.setPowerCapacity(100); # Python self.driver.set_power_capacity(50) // Javascript // webdriver.io example driver.powerCapacity(50) // Not supported # Ruby # ruby_lib example set_power_capacity 50 # ruby_lib_core example @driver.set_power_capacity 50 // Not supported Description For Android emulator. To set the battery percentage. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None Ruby All www.rubydoc.info C# None HTTP API Specifications Endpoint POST /session/:session_id/appium/device/power_capacity URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description percent integer ercentage value in range [0, 100] Response null See Also JSONWP Specification","title":"Power Capacity"},{"location":"commands/device/emulator/power_capacity/#emulate-power-capacity","text":"Emulate power capacity change on the connected emulator.","title":"Emulate power capacity"},{"location":"commands/device/emulator/power_capacity/#example-usage","text":"// Java driver.setPowerCapacity(100); # Python self.driver.set_power_capacity(50) // Javascript // webdriver.io example driver.powerCapacity(50) // Not supported # Ruby # ruby_lib example set_power_capacity 50 # ruby_lib_core example @driver.set_power_capacity 50 // Not supported","title":"Example Usage"},{"location":"commands/device/emulator/power_capacity/#description","text":"For Android emulator. To set the battery percentage.","title":"Description"},{"location":"commands/device/emulator/power_capacity/#support","text":"","title":"Support"},{"location":"commands/device/emulator/power_capacity/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/emulator/power_capacity/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None Ruby All www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/device/emulator/power_capacity/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/emulator/power_capacity/#endpoint","text":"POST /session/:session_id/appium/device/power_capacity","title":"Endpoint"},{"location":"commands/device/emulator/power_capacity/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/emulator/power_capacity/#json-parameters","text":"name type description percent integer ercentage value in range [0, 100]","title":"JSON Parameters"},{"location":"commands/device/emulator/power_capacity/#response","text":"null","title":"Response"},{"location":"commands/device/emulator/power_capacity/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/files/","text":"Appium API Documentation ### /docs/en/commands/device/files Push File Pull File Pull Folder","title":"Home"},{"location":"commands/device/files/#appium-api-documentation","text":"### /docs/en/commands/device/files Push File Pull File Pull Folder","title":"Appium API Documentation"},{"location":"commands/device/files/pull-file/","text":"Pull File Retrieve a file from the device's file system Example Usage // Java byte[] fileBase64 = driver.pullFile( /path/to/device/foo.bar ); # Python file_base64 = self.driver.pull_file('/path/to/device/foo.bar'); // Javascript // webdriver.io example let data = driver.pullFile('/data/local/tmp/file.txt'); // wd example let fileBase64 = await driver.pullFile('/path/to/device/foo.bar'); # Ruby # ruby_lib example pull_file('/data/local/tmp/file.txt') # ruby_lib_core example @driver.pull_file('/data/local/tmp/file.txt') // C# byte[] fileBase64 = driver.PullFile( /path/to/device/foo.bar ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/pull_file URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description path string Path on the device to pull file from Response Contents of file in base64 ( string ) See Also JSONWP Specification","title":"Pull File"},{"location":"commands/device/files/pull-file/#pull-file","text":"Retrieve a file from the device's file system","title":"Pull File"},{"location":"commands/device/files/pull-file/#example-usage","text":"// Java byte[] fileBase64 = driver.pullFile( /path/to/device/foo.bar ); # Python file_base64 = self.driver.pull_file('/path/to/device/foo.bar'); // Javascript // webdriver.io example let data = driver.pullFile('/data/local/tmp/file.txt'); // wd example let fileBase64 = await driver.pullFile('/path/to/device/foo.bar'); # Ruby # ruby_lib example pull_file('/data/local/tmp/file.txt') # ruby_lib_core example @driver.pull_file('/data/local/tmp/file.txt') // C# byte[] fileBase64 = driver.PullFile( /path/to/device/foo.bar );","title":"Example Usage"},{"location":"commands/device/files/pull-file/#support","text":"","title":"Support"},{"location":"commands/device/files/pull-file/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/files/pull-file/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/files/pull-file/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/files/pull-file/#endpoint","text":"POST /session/:session_id/appium/device/pull_file","title":"Endpoint"},{"location":"commands/device/files/pull-file/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/files/pull-file/#json-parameters","text":"name type description path string Path on the device to pull file from","title":"JSON Parameters"},{"location":"commands/device/files/pull-file/#response","text":"Contents of file in base64 ( string )","title":"Response"},{"location":"commands/device/files/pull-file/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/files/pull-folder/","text":"Pull Folder Retrieve a folder from the device's file system Example Usage // Java byte[] folder = driver.pullFolder( /path/to/device/foo.bar ); # Python folder_base64 = self.driver.pull_folder('/path/to/device/foo.bar'); // Javascript // webdriver.io example let data = driver.pullFolder('/data/local/tmp/file.txt'); // wd example let folderBase64 = await driver.pullFolder('/path/to/device/foo.bar'); # Ruby # ruby_lib example pull_folder('/data/local/tmp/file.txt') # ruby_lib_core example @driver.pull_folder('/data/local/tmp/file.txt') // C# byte[] folder = driver.PullFolder( /path/to/device ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/pull_folder URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description path string Path to an entire folder on the device Response A string of Base64 encoded data, representing a zip archive of the contents of the requested folder. ( string ) See Also JSONWP Specification","title":"Pull Folder"},{"location":"commands/device/files/pull-folder/#pull-folder","text":"Retrieve a folder from the device's file system","title":"Pull Folder"},{"location":"commands/device/files/pull-folder/#example-usage","text":"// Java byte[] folder = driver.pullFolder( /path/to/device/foo.bar ); # Python folder_base64 = self.driver.pull_folder('/path/to/device/foo.bar'); // Javascript // webdriver.io example let data = driver.pullFolder('/data/local/tmp/file.txt'); // wd example let folderBase64 = await driver.pullFolder('/path/to/device/foo.bar'); # Ruby # ruby_lib example pull_folder('/data/local/tmp/file.txt') # ruby_lib_core example @driver.pull_folder('/data/local/tmp/file.txt') // C# byte[] folder = driver.PullFolder( /path/to/device );","title":"Example Usage"},{"location":"commands/device/files/pull-folder/#support","text":"","title":"Support"},{"location":"commands/device/files/pull-folder/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/files/pull-folder/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/files/pull-folder/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/files/pull-folder/#endpoint","text":"POST /session/:session_id/appium/device/pull_folder","title":"Endpoint"},{"location":"commands/device/files/pull-folder/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/files/pull-folder/#json-parameters","text":"name type description path string Path to an entire folder on the device","title":"JSON Parameters"},{"location":"commands/device/files/pull-folder/#response","text":"A string of Base64 encoded data, representing a zip archive of the contents of the requested folder. ( string )","title":"Response"},{"location":"commands/device/files/pull-folder/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/files/push-file/","text":"Push File Place a file onto the device in a particular place Example Usage // Java driver.pushFile( /data/local/tmp/foo.bar , new File( /Users/johndoe/files/foo.bar )); # Python dest_path = '/data/local/tmp/test_push_file.txt' data = bytes('This is the contents of the file to push to the device.', 'utf-8') self.driver.push_file(dest_path, base64.b64encode(data).decode('utf-8')) // Javascript // webdriver.io example let data = new Buffer( Hello World ).toString('base64'); driver.pushFile('/data/local/tmp/file.txt', data); // wd example await driver.pushFileToDevice('/data/local/tmp/foo.bar', 'QXJlIHlvdXIgYmVlcnMgb2theT8='); # Ruby # ruby_lib example push_file('/data/local/tmp/foo.bar', File.read('path/to/file.png')) # ruby_lib_core example @driver.push_file('/data/local/tmp/foo.bar', File.read('path/to/file.png')) // C# driver.PushFile( /data/local/tmp/foo.bar , new FileInfo( /Users/johndoe/files/foo.bar )) Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/push_file URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description path string Path to install the data to data string Contents of file in base64 Response null See Also JSONWP Specification","title":"Push File"},{"location":"commands/device/files/push-file/#push-file","text":"Place a file onto the device in a particular place","title":"Push File"},{"location":"commands/device/files/push-file/#example-usage","text":"// Java driver.pushFile( /data/local/tmp/foo.bar , new File( /Users/johndoe/files/foo.bar )); # Python dest_path = '/data/local/tmp/test_push_file.txt' data = bytes('This is the contents of the file to push to the device.', 'utf-8') self.driver.push_file(dest_path, base64.b64encode(data).decode('utf-8')) // Javascript // webdriver.io example let data = new Buffer( Hello World ).toString('base64'); driver.pushFile('/data/local/tmp/file.txt', data); // wd example await driver.pushFileToDevice('/data/local/tmp/foo.bar', 'QXJlIHlvdXIgYmVlcnMgb2theT8='); # Ruby # ruby_lib example push_file('/data/local/tmp/foo.bar', File.read('path/to/file.png')) # ruby_lib_core example @driver.push_file('/data/local/tmp/foo.bar', File.read('path/to/file.png')) // C# driver.PushFile( /data/local/tmp/foo.bar , new FileInfo( /Users/johndoe/files/foo.bar ))","title":"Example Usage"},{"location":"commands/device/files/push-file/#support","text":"","title":"Support"},{"location":"commands/device/files/push-file/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/files/push-file/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/files/push-file/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/files/push-file/#endpoint","text":"POST /session/:session_id/appium/device/push_file","title":"Endpoint"},{"location":"commands/device/files/push-file/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/files/push-file/#json-parameters","text":"name type description path string Path to install the data to data string Contents of file in base64","title":"JSON Parameters"},{"location":"commands/device/files/push-file/#response","text":"null","title":"Response"},{"location":"commands/device/files/push-file/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/interactions/","text":"Appium API Documentation ### /docs/en/commands/device/interactions Shake Lock Unlock Is Locked Rotate","title":"Home"},{"location":"commands/device/interactions/#appium-api-documentation","text":"### /docs/en/commands/device/interactions Shake Lock Unlock Is Locked Rotate","title":"Appium API Documentation"},{"location":"commands/device/interactions/is-locked/","text":"Is Device Locked Check whether the device is locked or not Example Usage // Java boolean isLocked = driver.isDeviceLocked(); # Python self.driver.is_locked() // Javascript // webdriver.io example driver.isLocked(); // wd example let isLocked = await driver.isLocked(); # Ruby # ruby_lib example device_locked? # ruby_lib_core example @driver.device_locked? // C# bool isLocked = driver.IsLocked(); // Supported by IOSDriver AndroidDriver Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/is_locked URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response True if the device is locked, false if not ( boolean ) See Also JSONWP Specification","title":"Is Locked"},{"location":"commands/device/interactions/is-locked/#is-device-locked","text":"Check whether the device is locked or not","title":"Is Device Locked"},{"location":"commands/device/interactions/is-locked/#example-usage","text":"// Java boolean isLocked = driver.isDeviceLocked(); # Python self.driver.is_locked() // Javascript // webdriver.io example driver.isLocked(); // wd example let isLocked = await driver.isLocked(); # Ruby # ruby_lib example device_locked? # ruby_lib_core example @driver.device_locked? // C# bool isLocked = driver.IsLocked(); // Supported by IOSDriver AndroidDriver","title":"Example Usage"},{"location":"commands/device/interactions/is-locked/#support","text":"","title":"Support"},{"location":"commands/device/interactions/is-locked/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/interactions/is-locked/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/interactions/is-locked/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/interactions/is-locked/#endpoint","text":"POST /session/:session_id/appium/device/is_locked","title":"Endpoint"},{"location":"commands/device/interactions/is-locked/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/interactions/is-locked/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/interactions/is-locked/#response","text":"True if the device is locked, false if not ( boolean )","title":"Response"},{"location":"commands/device/interactions/is-locked/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/interactions/lock/","text":"Lock Lock the device Example Usage // Java driver.lockDevice(); # Python self.driver.lock(); // Javascript // webdriver.io example driver.lock(); // wd example await driver.lock(); # Ruby # ruby_lib example lock lock(5) # lock 5 seconds # ruby_lib_core example @driver.lock @driver.lock(5) # lock 5 seconds // C# driver.Lock(); // Supported by IOSDriver AndroidDriver Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/lock URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description seconds number How long to lock the screen (iOS only). Response null See Also JSONWP Specification","title":"Lock"},{"location":"commands/device/interactions/lock/#lock","text":"Lock the device","title":"Lock"},{"location":"commands/device/interactions/lock/#example-usage","text":"// Java driver.lockDevice(); # Python self.driver.lock(); // Javascript // webdriver.io example driver.lock(); // wd example await driver.lock(); # Ruby # ruby_lib example lock lock(5) # lock 5 seconds # ruby_lib_core example @driver.lock @driver.lock(5) # lock 5 seconds // C# driver.Lock(); // Supported by IOSDriver AndroidDriver","title":"Example Usage"},{"location":"commands/device/interactions/lock/#support","text":"","title":"Support"},{"location":"commands/device/interactions/lock/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/interactions/lock/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/interactions/lock/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/interactions/lock/#endpoint","text":"POST /session/:session_id/appium/device/lock","title":"Endpoint"},{"location":"commands/device/interactions/lock/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/interactions/lock/#json-parameters","text":"name type description seconds number How long to lock the screen (iOS only).","title":"JSON Parameters"},{"location":"commands/device/interactions/lock/#response","text":"null","title":"Response"},{"location":"commands/device/interactions/lock/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/interactions/rotate/","text":"Rotate Rotate the device in three dimensions Example Usage // Java driver.rotate(new DeviceRotation(10, 10, 10)); # Not supported // Javascript // webdriver.io example driver.rotateDevice(100, 100); // wd example driver.rotateDevice({x: 114, y: 198, duration: 5, radius: 3, rotation: 220, touchCount: 2}); # Not supported # Not supported // C# driver.Rotate(new Dictionary string, int { { x , 114 }, { y , 198 }, { duration , 5 }, { radius , 3 }, { rotation , 220 }, { touchCount , 2 } }); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation 8.0 to 9.3 All All Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/rotate URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description x number x offset to use for the center of the rotate gesture y number y offset to use for the center of the rotate gesture radius number The distance in points from the center to the edge of the circular path rotation number The length of rotation in radians touchCount number The number of touches to use in the specified gesture. (Effectively, the number of fingers a user would use to make the specified gesture.) Valid values are 1 to 5. duration number The length of hold time for the specified gesture, in seconds. Response null See Also JSONWP Specification","title":"Rotate"},{"location":"commands/device/interactions/rotate/#rotate","text":"Rotate the device in three dimensions","title":"Rotate"},{"location":"commands/device/interactions/rotate/#example-usage","text":"// Java driver.rotate(new DeviceRotation(10, 10, 10)); # Not supported // Javascript // webdriver.io example driver.rotateDevice(100, 100); // wd example driver.rotateDevice({x: 114, y: 198, duration: 5, radius: 3, rotation: 220, touchCount: 2}); # Not supported # Not supported // C# driver.Rotate(new Dictionary string, int { { x , 114 }, { y , 198 }, { duration , 5 }, { radius , 3 }, { rotation , 220 }, { touchCount , 2 } });","title":"Example Usage"},{"location":"commands/device/interactions/rotate/#support","text":"","title":"Support"},{"location":"commands/device/interactions/rotate/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation 8.0 to 9.3 All All Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/interactions/rotate/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All C# All github.com","title":"Appium Clients"},{"location":"commands/device/interactions/rotate/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/interactions/rotate/#endpoint","text":"POST /session/:session_id/appium/device/rotate","title":"Endpoint"},{"location":"commands/device/interactions/rotate/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/interactions/rotate/#json-parameters","text":"name type description x number x offset to use for the center of the rotate gesture y number y offset to use for the center of the rotate gesture radius number The distance in points from the center to the edge of the circular path rotation number The length of rotation in radians touchCount number The number of touches to use in the specified gesture. (Effectively, the number of fingers a user would use to make the specified gesture.) Valid values are 1 to 5. duration number The length of hold time for the specified gesture, in seconds.","title":"JSON Parameters"},{"location":"commands/device/interactions/rotate/#response","text":"null","title":"Response"},{"location":"commands/device/interactions/rotate/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/interactions/shake/","text":"Shake Perform a shake action on the device Example Usage // Java driver.shake(); # Python self.driver.shake(); // Javascript // webdriver.io example driver.shake(); // wd example await driver.shake(); # Ruby # ruby_lib example shake # ruby_lib_core example @driver.shake // C# driver.ShakeDevice(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/shake URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Shake"},{"location":"commands/device/interactions/shake/#shake","text":"Perform a shake action on the device","title":"Shake"},{"location":"commands/device/interactions/shake/#example-usage","text":"// Java driver.shake(); # Python self.driver.shake(); // Javascript // webdriver.io example driver.shake(); // wd example await driver.shake(); # Ruby # ruby_lib example shake # ruby_lib_core example @driver.shake // C# driver.ShakeDevice();","title":"Example Usage"},{"location":"commands/device/interactions/shake/#support","text":"","title":"Support"},{"location":"commands/device/interactions/shake/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/interactions/shake/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/interactions/shake/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/interactions/shake/#endpoint","text":"POST /session/:session_id/appium/device/shake","title":"Endpoint"},{"location":"commands/device/interactions/shake/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/interactions/shake/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/interactions/shake/#response","text":"null","title":"Response"},{"location":"commands/device/interactions/shake/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/interactions/unlock/","text":"Unlock Unlock the device Example Usage // Java driver.lockDevice(); driver.unlockDevice(); # Python self.driver.lock(); self.driver.unlock(); // Javascript // webdriver.io example driver.lock() .unlock(); // wd example await driver.lock(); await driver.unlock(); # Ruby # ruby_lib example unlock # ruby_lib_core example @driver.unlock // C# driver.Unlock(); // Supported by IOSDriver AndroidDriver Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/unlock URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Unlock"},{"location":"commands/device/interactions/unlock/#unlock","text":"Unlock the device","title":"Unlock"},{"location":"commands/device/interactions/unlock/#example-usage","text":"// Java driver.lockDevice(); driver.unlockDevice(); # Python self.driver.lock(); self.driver.unlock(); // Javascript // webdriver.io example driver.lock() .unlock(); // wd example await driver.lock(); await driver.unlock(); # Ruby # ruby_lib example unlock # ruby_lib_core example @driver.unlock // C# driver.Unlock(); // Supported by IOSDriver AndroidDriver","title":"Example Usage"},{"location":"commands/device/interactions/unlock/#support","text":"","title":"Support"},{"location":"commands/device/interactions/unlock/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/interactions/unlock/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/interactions/unlock/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/interactions/unlock/#endpoint","text":"POST /session/:session_id/appium/device/unlock","title":"Endpoint"},{"location":"commands/device/interactions/unlock/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/interactions/unlock/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/interactions/unlock/#response","text":"null","title":"Response"},{"location":"commands/device/interactions/unlock/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/keys/","text":"Appium API Documentation ### /docs/en/commands/device/keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown","title":"Home"},{"location":"commands/device/keys/#appium-api-documentation","text":"### /docs/en/commands/device/keys Press keycode Long press keycode Hide Keyboard Is Keyboard Shown","title":"Appium API Documentation"},{"location":"commands/device/keys/hide-keyboard/","text":"Hide Keyboard Hide soft keyboard Example Usage // Java driver.hideKeyboard(); # Python self.driver.hide_keyboard() // Javascript // webdriver.io example driver.hideKeyboard(); // wd example await driver.hideDeviceKeyboard(); # Ruby # ruby_lib example hide_keyboard # ruby_lib_core example @driver.hide_keyboard // C# driver.HideKeyboard(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/hide_keyboard URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description strategy string Hide keyboard strategy (optional, UIAutomation only). Available strategies - 'press', 'pressKey', 'swipeDown', 'tapOut', 'tapOutside', 'default'. key string Key (optional) keyCode string Key code (optional) keyName string Key name (optional) Response null See Also JSONWP Specification","title":"Hide Keyboard"},{"location":"commands/device/keys/hide-keyboard/#hide-keyboard","text":"Hide soft keyboard","title":"Hide Keyboard"},{"location":"commands/device/keys/hide-keyboard/#example-usage","text":"// Java driver.hideKeyboard(); # Python self.driver.hide_keyboard() // Javascript // webdriver.io example driver.hideKeyboard(); // wd example await driver.hideDeviceKeyboard(); # Ruby # ruby_lib example hide_keyboard # ruby_lib_core example @driver.hide_keyboard // C# driver.HideKeyboard();","title":"Example Usage"},{"location":"commands/device/keys/hide-keyboard/#support","text":"","title":"Support"},{"location":"commands/device/keys/hide-keyboard/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/keys/hide-keyboard/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/keys/hide-keyboard/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/keys/hide-keyboard/#endpoint","text":"POST /session/:session_id/appium/device/hide_keyboard","title":"Endpoint"},{"location":"commands/device/keys/hide-keyboard/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/keys/hide-keyboard/#json-parameters","text":"name type description strategy string Hide keyboard strategy (optional, UIAutomation only). Available strategies - 'press', 'pressKey', 'swipeDown', 'tapOut', 'tapOutside', 'default'. key string Key (optional) keyCode string Key code (optional) keyName string Key name (optional)","title":"JSON Parameters"},{"location":"commands/device/keys/hide-keyboard/#response","text":"null","title":"Response"},{"location":"commands/device/keys/hide-keyboard/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/keys/is-keyboard-shown/","text":"Is Keyboard Shown Whether or not the soft keyboard is shown Example Usage // Java boolean isKeyboardShown = driver.isKeyboardShown(); # Python driver.is_keyboard_shown() // Javascript // webdriver.io example driver.isKeyboardShown(); // wd example await driver.isKeyboardShown(); # Ruby # ruby_lib example is_keyboard_shown # ruby_lib_core example @driver.is_keyboard_shown // Not supported Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) All github.com Ruby All www.rubydoc.info C# None HTTP API Specifications Endpoint GET /session/:session_id/appium/device/is_keyboard_shown URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response True if the keyboard is shown. ( boolean ) See Also JSONWP Specification","title":"Is Keyboard Shown"},{"location":"commands/device/keys/is-keyboard-shown/#is-keyboard-shown","text":"Whether or not the soft keyboard is shown","title":"Is Keyboard Shown"},{"location":"commands/device/keys/is-keyboard-shown/#example-usage","text":"// Java boolean isKeyboardShown = driver.isKeyboardShown(); # Python driver.is_keyboard_shown() // Javascript // webdriver.io example driver.isKeyboardShown(); // wd example await driver.isKeyboardShown(); # Ruby # ruby_lib example is_keyboard_shown # ruby_lib_core example @driver.is_keyboard_shown // Not supported","title":"Example Usage"},{"location":"commands/device/keys/is-keyboard-shown/#support","text":"","title":"Support"},{"location":"commands/device/keys/is-keyboard-shown/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/keys/is-keyboard-shown/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) All github.com Ruby All www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/device/keys/is-keyboard-shown/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/keys/is-keyboard-shown/#endpoint","text":"GET /session/:session_id/appium/device/is_keyboard_shown","title":"Endpoint"},{"location":"commands/device/keys/is-keyboard-shown/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/keys/is-keyboard-shown/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/keys/is-keyboard-shown/#response","text":"True if the keyboard is shown. ( boolean )","title":"Response"},{"location":"commands/device/keys/is-keyboard-shown/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/keys/long-press-keycode/","text":"Long Press Key Code Press and hold a particular key code on an Android device Example Usage // Java driver.longPressKeyCode(AndroidKeyCode.HOME); # Python self.driver.long_press_keycode(10); // Javascript // webdriver.io example driver.longPressKeyCode(10); // wd example await driver.longPressKeycode(10); # Ruby # ruby_lib example long_press_keycode(10) # ruby_lib_core example @driver.long_press_keycode(10) // C# driver.LongPressKeyCode(WindowsKeyCode.Back); Description See https://developer.android.com/reference/android/view/KeyEvent.html# for reference of available Android key codes Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/long_press_keycode URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description keycode number Key code pressed on the device. See Key Event . metastate number Metastate for the keypress. See Key Event . flags number Flags for the keypress. See Key Event . Response null See Also JSONWP Specification","title":"Long press keycode"},{"location":"commands/device/keys/long-press-keycode/#long-press-key-code","text":"Press and hold a particular key code on an Android device","title":"Long Press Key Code"},{"location":"commands/device/keys/long-press-keycode/#example-usage","text":"// Java driver.longPressKeyCode(AndroidKeyCode.HOME); # Python self.driver.long_press_keycode(10); // Javascript // webdriver.io example driver.longPressKeyCode(10); // wd example await driver.longPressKeycode(10); # Ruby # ruby_lib example long_press_keycode(10) # ruby_lib_core example @driver.long_press_keycode(10) // C# driver.LongPressKeyCode(WindowsKeyCode.Back);","title":"Example Usage"},{"location":"commands/device/keys/long-press-keycode/#description","text":"See https://developer.android.com/reference/android/view/KeyEvent.html# for reference of available Android key codes","title":"Description"},{"location":"commands/device/keys/long-press-keycode/#support","text":"","title":"Support"},{"location":"commands/device/keys/long-press-keycode/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/keys/long-press-keycode/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/keys/long-press-keycode/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/keys/long-press-keycode/#endpoint","text":"POST /session/:session_id/appium/device/long_press_keycode","title":"Endpoint"},{"location":"commands/device/keys/long-press-keycode/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/keys/long-press-keycode/#json-parameters","text":"name type description keycode number Key code pressed on the device. See Key Event . metastate number Metastate for the keypress. See Key Event . flags number Flags for the keypress. See Key Event .","title":"JSON Parameters"},{"location":"commands/device/keys/long-press-keycode/#response","text":"null","title":"Response"},{"location":"commands/device/keys/long-press-keycode/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/keys/press-keycode/","text":"Press Key Code Press a particular key on an Android Device Example Usage // Java driver.pressKeyCode(AndroidKeyCode.SPACE, AndroidKeyMetastate.META_SHIFT_ON); # Python self.driver.press_keycode(10); // Javascript // webdriver.io example driver.pressKeyCode(10); // wd example await driver.pressKeycode(10); # Ruby # ruby_lib example press_keycode(10) # ruby_lib_core example @driver.press_keycode(10) // C# driver.PressKeyCode(WindowsKeyCode.Windows); Description See https://developer.android.com/reference/android/view/KeyEvent.html for reference of available Android key code values Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/press_keycode URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description keycode number Key code pressed on the device. See Key Event . metastate number Metastate for the keypress. See Key Event . flags number Flags for the keypress. See Key Event . Response null See Also JSONWP Specification","title":"Press keycode"},{"location":"commands/device/keys/press-keycode/#press-key-code","text":"Press a particular key on an Android Device","title":"Press Key Code"},{"location":"commands/device/keys/press-keycode/#example-usage","text":"// Java driver.pressKeyCode(AndroidKeyCode.SPACE, AndroidKeyMetastate.META_SHIFT_ON); # Python self.driver.press_keycode(10); // Javascript // webdriver.io example driver.pressKeyCode(10); // wd example await driver.pressKeycode(10); # Ruby # ruby_lib example press_keycode(10) # ruby_lib_core example @driver.press_keycode(10) // C# driver.PressKeyCode(WindowsKeyCode.Windows);","title":"Example Usage"},{"location":"commands/device/keys/press-keycode/#description","text":"See https://developer.android.com/reference/android/view/KeyEvent.html for reference of available Android key code values","title":"Description"},{"location":"commands/device/keys/press-keycode/#support","text":"","title":"Support"},{"location":"commands/device/keys/press-keycode/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/device/keys/press-keycode/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/keys/press-keycode/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/keys/press-keycode/#endpoint","text":"POST /session/:session_id/appium/device/press_keycode","title":"Endpoint"},{"location":"commands/device/keys/press-keycode/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/keys/press-keycode/#json-parameters","text":"name type description keycode number Key code pressed on the device. See Key Event . metastate number Metastate for the keypress. See Key Event . flags number Flags for the keypress. See Key Event .","title":"JSON Parameters"},{"location":"commands/device/keys/press-keycode/#response","text":"null","title":"Response"},{"location":"commands/device/keys/press-keycode/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/","text":"Appium API Documentation ### /docs/en/commands/device/network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed","title":"Home"},{"location":"commands/device/network/#appium-api-documentation","text":"### /docs/en/commands/device/network Toggle Airplane Mode Toggle Data Toggle WiFi Toggle Location Services Send SMS GSM Call GSM Signal GSM Voice Network Speed","title":"Appium API Documentation"},{"location":"commands/device/network/gsm-call/","text":"GSM Call Make GSM call (Emulator only) Example Usage // Java driver.makeGsmCall( 5551234567 , GsmCallActions.CALL); # Python self.driver.make_gsm_call('5551234567', GsmCallActions.CALL) // Javascript // webdriver.io example driver.gsmCall('555-123-4567', 'call'); // wd example await driver.gsmCall('555-123-4567', 'Phone'); # Ruby # ruby_lib example gsm_call(phone_number: '5551234567', action: :call) # ruby_lib_core example @driver.gsm_call(phone_number: '5551234567', action: :call) // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/gsm_call URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description phoneNumber string The phone number to call to action string The action - 'call', 'accept', 'cancel', 'hold'. Response null See Also JSONWP Specification","title":"GSM Call"},{"location":"commands/device/network/gsm-call/#gsm-call","text":"Make GSM call (Emulator only)","title":"GSM Call"},{"location":"commands/device/network/gsm-call/#example-usage","text":"// Java driver.makeGsmCall( 5551234567 , GsmCallActions.CALL); # Python self.driver.make_gsm_call('5551234567', GsmCallActions.CALL) // Javascript // webdriver.io example driver.gsmCall('555-123-4567', 'call'); // wd example await driver.gsmCall('555-123-4567', 'Phone'); # Ruby # ruby_lib example gsm_call(phone_number: '5551234567', action: :call) # ruby_lib_core example @driver.gsm_call(phone_number: '5551234567', action: :call) // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/gsm-call/#support","text":"","title":"Support"},{"location":"commands/device/network/gsm-call/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/gsm-call/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/network/gsm-call/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/gsm-call/#endpoint","text":"POST /session/:session_id/appium/device/gsm_call","title":"Endpoint"},{"location":"commands/device/network/gsm-call/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/gsm-call/#json-parameters","text":"name type description phoneNumber string The phone number to call to action string The action - 'call', 'accept', 'cancel', 'hold'.","title":"JSON Parameters"},{"location":"commands/device/network/gsm-call/#response","text":"null","title":"Response"},{"location":"commands/device/network/gsm-call/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/gsm-signal/","text":"GSM Signal Set GSM signal strength (Emulator only) Example Usage // Java driver.setGsmSignalStrength(GsmSignalStrength.GOOD); # Python self.driver.set_gsm_signal(GsmSignalStrength.GOOD) // Javascript // webdriver.io example driver.gsmSignal(3); // wd example await driver.gsmSignal(3); # Ruby # ruby_lib example gsm_signal :good # ruby_lib_core example @driver.gsm_signal :good // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/gsm_signal URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description signalStrength string Signal strength in the range [0, 4] Response null See Also JSONWP Specification","title":"GSM Signal"},{"location":"commands/device/network/gsm-signal/#gsm-signal","text":"Set GSM signal strength (Emulator only)","title":"GSM Signal"},{"location":"commands/device/network/gsm-signal/#example-usage","text":"// Java driver.setGsmSignalStrength(GsmSignalStrength.GOOD); # Python self.driver.set_gsm_signal(GsmSignalStrength.GOOD) // Javascript // webdriver.io example driver.gsmSignal(3); // wd example await driver.gsmSignal(3); # Ruby # ruby_lib example gsm_signal :good # ruby_lib_core example @driver.gsm_signal :good // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/gsm-signal/#support","text":"","title":"Support"},{"location":"commands/device/network/gsm-signal/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/gsm-signal/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/network/gsm-signal/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/gsm-signal/#endpoint","text":"POST /session/:session_id/appium/device/gsm_signal","title":"Endpoint"},{"location":"commands/device/network/gsm-signal/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/gsm-signal/#json-parameters","text":"name type description signalStrength string Signal strength in the range [0, 4]","title":"JSON Parameters"},{"location":"commands/device/network/gsm-signal/#response","text":"null","title":"Response"},{"location":"commands/device/network/gsm-signal/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/gsm-voice/","text":"GSM Voice Set GSM voice state (Emulator only) Example Usage // Java driver.setGsmVoice(GsmVoiceState.HOME); # Python self.driver.set_gsm_voice(GsmVoiceState.HOME) // Javascript // webdriver.io example driver.gsmVoice('home'); // wd example await driver.gsmVoice('Voice state'); # Ruby # ruby_lib example gsm_voice :home # ruby_lib_core example @driver.gsm_voice :home // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/gsm_voice URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description state string State of GSM voice - 'unregistered', 'home', 'roaming', 'searching', 'denied', 'off', 'on'. Response null See Also JSONWP Specification","title":"GSM Voice"},{"location":"commands/device/network/gsm-voice/#gsm-voice","text":"Set GSM voice state (Emulator only)","title":"GSM Voice"},{"location":"commands/device/network/gsm-voice/#example-usage","text":"// Java driver.setGsmVoice(GsmVoiceState.HOME); # Python self.driver.set_gsm_voice(GsmVoiceState.HOME) // Javascript // webdriver.io example driver.gsmVoice('home'); // wd example await driver.gsmVoice('Voice state'); # Ruby # ruby_lib example gsm_voice :home # ruby_lib_core example @driver.gsm_voice :home // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/gsm-voice/#support","text":"","title":"Support"},{"location":"commands/device/network/gsm-voice/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/gsm-voice/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/network/gsm-voice/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/gsm-voice/#endpoint","text":"POST /session/:session_id/appium/device/gsm_voice","title":"Endpoint"},{"location":"commands/device/network/gsm-voice/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/gsm-voice/#json-parameters","text":"name type description state string State of GSM voice - 'unregistered', 'home', 'roaming', 'searching', 'denied', 'off', 'on'.","title":"JSON Parameters"},{"location":"commands/device/network/gsm-voice/#response","text":"null","title":"Response"},{"location":"commands/device/network/gsm-voice/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/network-speed/","text":"Network speed Set network speed (Emulator only) Example Usage // Java driver.setNetworkSpeed(NetworkSpeed.LTE); # Python self.driver.set_network_speed(NetSpeed.LTE) // Javascript // webdriver.io example driver.toggleNetworkSpeed('lte'); // wd example await driver.networkSpeed('Network type'); # Ruby # ruby_lib example set_network_speed :lte # ruby_lib_core example @driver.set_network_speed :lte // Not supported Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None HTTP API Specifications Endpoint POST /session/:session_id/appium/device/network_speed URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description netspeed string Network type - 'full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo' Response null See Also JSONWP Specification","title":"Network Speed"},{"location":"commands/device/network/network-speed/#network-speed","text":"Set network speed (Emulator only)","title":"Network speed"},{"location":"commands/device/network/network-speed/#example-usage","text":"// Java driver.setNetworkSpeed(NetworkSpeed.LTE); # Python self.driver.set_network_speed(NetSpeed.LTE) // Javascript // webdriver.io example driver.toggleNetworkSpeed('lte'); // wd example await driver.networkSpeed('Network type'); # Ruby # ruby_lib example set_network_speed :lte # ruby_lib_core example @driver.set_network_speed :lte // Not supported","title":"Example Usage"},{"location":"commands/device/network/network-speed/#support","text":"","title":"Support"},{"location":"commands/device/network/network-speed/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/network-speed/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/device/network/network-speed/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/network-speed/#endpoint","text":"POST /session/:session_id/appium/device/network_speed","title":"Endpoint"},{"location":"commands/device/network/network-speed/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/network-speed/#json-parameters","text":"name type description netspeed string Network type - 'full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo'","title":"JSON Parameters"},{"location":"commands/device/network/network-speed/#response","text":"null","title":"Response"},{"location":"commands/device/network/network-speed/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/send-sms/","text":"Send SMS Simulate an SMS message (Emulator only) Example Usage // Java driver.sendSMS( 555-123-4567 , Hey lol ); # Python self.driver.send_sms('555-123-4567', 'Hey lol') // Javascript // webdriver.io example driver.sendSms('555-123-4567', 'Hey lol'); // wd example await driver.sendSms('555-123-4567', 'Hey lol'); # Ruby # ruby_lib example send_sms(phone_number: '555-123-4567', message: 'Hey lol') # ruby_lib_core example @driver.send_sms(phone_number: '555-123-4567', message: 'Hey lol') // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/send_sms URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description phoneNumber string The phone number to send the SMS too message string The SMS message Response null See Also JSONWP Specification","title":"Send SMS"},{"location":"commands/device/network/send-sms/#send-sms","text":"Simulate an SMS message (Emulator only)","title":"Send SMS"},{"location":"commands/device/network/send-sms/#example-usage","text":"// Java driver.sendSMS( 555-123-4567 , Hey lol ); # Python self.driver.send_sms('555-123-4567', 'Hey lol') // Javascript // webdriver.io example driver.sendSms('555-123-4567', 'Hey lol'); // wd example await driver.sendSms('555-123-4567', 'Hey lol'); # Ruby # ruby_lib example send_sms(phone_number: '555-123-4567', message: 'Hey lol') # ruby_lib_core example @driver.send_sms(phone_number: '555-123-4567', message: 'Hey lol') // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/send-sms/#support","text":"","title":"Support"},{"location":"commands/device/network/send-sms/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/send-sms/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/network/send-sms/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/send-sms/#endpoint","text":"POST /session/:session_id/appium/device/send_sms","title":"Endpoint"},{"location":"commands/device/network/send-sms/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/send-sms/#json-parameters","text":"name type description phoneNumber string The phone number to send the SMS too message string The SMS message","title":"JSON Parameters"},{"location":"commands/device/network/send-sms/#response","text":"null","title":"Response"},{"location":"commands/device/network/send-sms/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/toggle-airplane-mode/","text":"Toggle Airplane Mode Toggle airplane mode on device Example Usage // Java driver.toggleAirplaneMode(); # Not supported // Javascript // webdriver.io example driver.toggleAirplaneMode(); // wd example await driver.toggleAirplaneMode(); # Ruby # ruby_lib example toggle_flight_mode # ruby_lib_core example @driver.toggle_flight_mode // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python None Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/toggle_airplane_mode URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Toggle Airplane Mode"},{"location":"commands/device/network/toggle-airplane-mode/#toggle-airplane-mode","text":"Toggle airplane mode on device","title":"Toggle Airplane Mode"},{"location":"commands/device/network/toggle-airplane-mode/#example-usage","text":"// Java driver.toggleAirplaneMode(); # Not supported // Javascript // webdriver.io example driver.toggleAirplaneMode(); // wd example await driver.toggleAirplaneMode(); # Ruby # ruby_lib example toggle_flight_mode # ruby_lib_core example @driver.toggle_flight_mode // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/toggle-airplane-mode/#support","text":"","title":"Support"},{"location":"commands/device/network/toggle-airplane-mode/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/toggle-airplane-mode/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python None Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/network/toggle-airplane-mode/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/toggle-airplane-mode/#endpoint","text":"POST /session/:session_id/appium/device/toggle_airplane_mode","title":"Endpoint"},{"location":"commands/device/network/toggle-airplane-mode/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/toggle-airplane-mode/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/network/toggle-airplane-mode/#response","text":"null","title":"Response"},{"location":"commands/device/network/toggle-airplane-mode/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/toggle-data/","text":"Toggle Data Switch the state of data service Example Usage // Java driver.toggleData(); # Not supported // Javascript // webdriver.io example driver.toggleData(); // wd example await driver.toggleData(); # Ruby # ruby_lib example toggle_data # ruby_lib_core example @driver.toggle_data // C# // TODO Description Switch the state of data service. (For Android) This API does not work for Android API level 21+ because it requires system or carrier privileged permission, and Android = 21 does not support granting permissions. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python None Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/toggle_data URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Toggle Data"},{"location":"commands/device/network/toggle-data/#toggle-data","text":"Switch the state of data service","title":"Toggle Data"},{"location":"commands/device/network/toggle-data/#example-usage","text":"// Java driver.toggleData(); # Not supported // Javascript // webdriver.io example driver.toggleData(); // wd example await driver.toggleData(); # Ruby # ruby_lib example toggle_data # ruby_lib_core example @driver.toggle_data // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/toggle-data/#description","text":"Switch the state of data service. (For Android) This API does not work for Android API level 21+ because it requires system or carrier privileged permission, and Android = 21 does not support granting permissions.","title":"Description"},{"location":"commands/device/network/toggle-data/#support","text":"","title":"Support"},{"location":"commands/device/network/toggle-data/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/toggle-data/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python None Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/network/toggle-data/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/toggle-data/#endpoint","text":"POST /session/:session_id/appium/device/toggle_data","title":"Endpoint"},{"location":"commands/device/network/toggle-data/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/toggle-data/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/network/toggle-data/#response","text":"null","title":"Response"},{"location":"commands/device/network/toggle-data/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/toggle-location-services/","text":"Toggle Location Services Switch the state of the location service Example Usage // Java driver.toggleLocationServices(); # Python self.driver.toggle_location_services(); // Javascript // webdriver.io example driver.toggleLocationServices(); // wd example await driver.toggleLocationServices(); # Ruby # ruby_lib example toggle_location_services # ruby_lib_core example @driver.toggle_location_services // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/toggle_location_services URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Toggle Location Services"},{"location":"commands/device/network/toggle-location-services/#toggle-location-services","text":"Switch the state of the location service","title":"Toggle Location Services"},{"location":"commands/device/network/toggle-location-services/#example-usage","text":"// Java driver.toggleLocationServices(); # Python self.driver.toggle_location_services(); // Javascript // webdriver.io example driver.toggleLocationServices(); // wd example await driver.toggleLocationServices(); # Ruby # ruby_lib example toggle_location_services # ruby_lib_core example @driver.toggle_location_services // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/toggle-location-services/#support","text":"","title":"Support"},{"location":"commands/device/network/toggle-location-services/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/toggle-location-services/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/network/toggle-location-services/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/toggle-location-services/#endpoint","text":"POST /session/:session_id/appium/device/toggle_location_services","title":"Endpoint"},{"location":"commands/device/network/toggle-location-services/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/toggle-location-services/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/network/toggle-location-services/#response","text":"null","title":"Response"},{"location":"commands/device/network/toggle-location-services/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/network/toggle-wifi/","text":"Toggle WiFi Switch the state of the WiFi service Example Usage // Java driver.toggleWifi(); # Python driver.toggle_wifi() // Javascript // webdriver.io example driver.toggleWiFi(); // wd example await driver.toggleWiFi(); # Ruby # ruby_lib example toggle_wifi # ruby_lib_core example @driver.toggle_wifi // C# // TODO Description Switch the state of the WiFi service. Since Android Q, a method to change the WiFi service state has been restricted. #12327 Please toggle the state via UI instead of this method. The UI flow depends on devices. Please make sure to encode the correct UI flow on your target device under test. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/toggle_wifi URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Toggle WiFi"},{"location":"commands/device/network/toggle-wifi/#toggle-wifi","text":"Switch the state of the WiFi service","title":"Toggle WiFi"},{"location":"commands/device/network/toggle-wifi/#example-usage","text":"// Java driver.toggleWifi(); # Python driver.toggle_wifi() // Javascript // webdriver.io example driver.toggleWiFi(); // wd example await driver.toggleWiFi(); # Ruby # ruby_lib example toggle_wifi # ruby_lib_core example @driver.toggle_wifi // C# // TODO","title":"Example Usage"},{"location":"commands/device/network/toggle-wifi/#description","text":"Switch the state of the WiFi service. Since Android Q, a method to change the WiFi service state has been restricted. #12327 Please toggle the state via UI instead of this method. The UI flow depends on devices. Please make sure to encode the correct UI flow on your target device under test.","title":"Description"},{"location":"commands/device/network/toggle-wifi/#support","text":"","title":"Support"},{"location":"commands/device/network/toggle-wifi/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/network/toggle-wifi/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/network/toggle-wifi/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/network/toggle-wifi/#endpoint","text":"POST /session/:session_id/appium/device/toggle_wifi","title":"Endpoint"},{"location":"commands/device/network/toggle-wifi/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/network/toggle-wifi/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/network/toggle-wifi/#response","text":"null","title":"Response"},{"location":"commands/device/network/toggle-wifi/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/performance-data/","text":"Appium API Documentation ### /docs/en/commands/device/performance-data Get Performance Data Performance Data Types","title":"Home"},{"location":"commands/device/performance-data/#appium-api-documentation","text":"### /docs/en/commands/device/performance-data Get Performance Data Performance Data Types","title":"Appium API Documentation"},{"location":"commands/device/performance-data/get-performance-data/","text":"Get Performance Data Returns the information of the system state which is supported to read as like cpu, memory, network traffic, and battery Example Usage // Java List List Object performanceData = driver.getPerformanceData( my.app.package , cpuinfo , 5); # Python self.driver.get_performance_data('my.app.package', 'cpuinfo', 5) // Javascript // webdriver.io example driver.getPerformanceData('my.app.package', 'cpuinfo', 5); // wd example await driver.getPerformanceData('my.app.package', 'cpuinfo', 5); # Ruby # ruby_lib example get_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10 # ruby_lib_core example @driver.get_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10 // C# // Not supported Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python None appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/getPerformanceData URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description packageName string The package name of the application dataType string The type of system state which wants to read. It should be one of the supported performance data types. dataReadTimeout number The number of attempts to read (optional) Response The information type of the system state which is supported to read as like cpu, memory, network traffic, and battery ( array string ) See Also JSONWP Specification","title":"Get Performance Data"},{"location":"commands/device/performance-data/get-performance-data/#get-performance-data","text":"Returns the information of the system state which is supported to read as like cpu, memory, network traffic, and battery","title":"Get Performance Data"},{"location":"commands/device/performance-data/get-performance-data/#example-usage","text":"// Java List List Object performanceData = driver.getPerformanceData( my.app.package , cpuinfo , 5); # Python self.driver.get_performance_data('my.app.package', 'cpuinfo', 5) // Javascript // webdriver.io example driver.getPerformanceData('my.app.package', 'cpuinfo', 5); // wd example await driver.getPerformanceData('my.app.package', 'cpuinfo', 5); # Ruby # ruby_lib example get_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10 # ruby_lib_core example @driver.get_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10 // C# // Not supported","title":"Example Usage"},{"location":"commands/device/performance-data/get-performance-data/#support","text":"","title":"Support"},{"location":"commands/device/performance-data/get-performance-data/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/performance-data/get-performance-data/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python None appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/performance-data/get-performance-data/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/performance-data/get-performance-data/#endpoint","text":"POST /session/:session_id/appium/getPerformanceData","title":"Endpoint"},{"location":"commands/device/performance-data/get-performance-data/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/performance-data/get-performance-data/#json-parameters","text":"name type description packageName string The package name of the application dataType string The type of system state which wants to read. It should be one of the supported performance data types. dataReadTimeout number The number of attempts to read (optional)","title":"JSON Parameters"},{"location":"commands/device/performance-data/get-performance-data/#response","text":"The information type of the system state which is supported to read as like cpu, memory, network traffic, and battery ( array string )","title":"Response"},{"location":"commands/device/performance-data/get-performance-data/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/performance-data/performance-data-types/","text":"Get Performance Data Types Returns the information types of the system state which is supported to read as like cpu, memory, network traffic, and battery Example Usage // Java List String performanceTypes = driver.getSupportedPerformanceDataTypes(); # Python self.driver.get_performance_data_types() // Javascript // webdriver.io example driver.getPerformanceDataTypes(); // wd example await driver.getSupportedPerformanceDataTypes(); # Ruby # ruby_lib example get_performance_data_types # ruby_lib_core example @driver.get_performance_data_types // C# // Not supported Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python None appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/performanceData/types URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The available performance data types (cpuinfo|batteryinfo|networkinfo|memoryinfo) ( array string ) See Also JSONWP Specification","title":"Performance Data Types"},{"location":"commands/device/performance-data/performance-data-types/#get-performance-data-types","text":"Returns the information types of the system state which is supported to read as like cpu, memory, network traffic, and battery","title":"Get Performance Data Types"},{"location":"commands/device/performance-data/performance-data-types/#example-usage","text":"// Java List String performanceTypes = driver.getSupportedPerformanceDataTypes(); # Python self.driver.get_performance_data_types() // Javascript // webdriver.io example driver.getPerformanceDataTypes(); // wd example await driver.getSupportedPerformanceDataTypes(); # Ruby # ruby_lib example get_performance_data_types # ruby_lib_core example @driver.get_performance_data_types // C# // Not supported","title":"Example Usage"},{"location":"commands/device/performance-data/performance-data-types/#support","text":"","title":"Support"},{"location":"commands/device/performance-data/performance-data-types/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/performance-data/performance-data-types/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python None appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/performance-data/performance-data-types/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/performance-data/performance-data-types/#endpoint","text":"POST /session/:session_id/appium/performanceData/types","title":"Endpoint"},{"location":"commands/device/performance-data/performance-data-types/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/performance-data/performance-data-types/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/performance-data/performance-data-types/#response","text":"The available performance data types (cpuinfo|batteryinfo|networkinfo|memoryinfo) ( array string )","title":"Response"},{"location":"commands/device/performance-data/performance-data-types/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/recording-screen/","text":"Appium API Documentation ### /docs/en/commands/device/recording-screen Start Screen Recording Stop Screen Recording","title":"Home"},{"location":"commands/device/recording-screen/#appium-api-documentation","text":"### /docs/en/commands/device/recording-screen Start Screen Recording Stop Screen Recording","title":"Appium API Documentation"},{"location":"commands/device/recording-screen/start-recording-screen/","text":"Start Recording Screen Start recording screen Example Usage // Java driver.startRecordingScreen(); driver.startRecordingScreen(new BaseStartScreenRecordingOptions(....)); # Python self.driver.start_recording_screen() // Javascript // webdriver.io example driver.startRecordingScreen(); // wd example await driver.startRecordingScreen(); # Ruby # ruby_lib example start_recording_screen start_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android start_recording_screen video_type: 'h264', time_limit: '260' # iOS # ruby_lib_core example @driver.start_recording_screen @driver.start_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android @driver.start_recording_screen video_type: 'h264', time_limit: '260' # iOS // C# driver.StartRecordingScreen( AndroidStartScreenRecordingOptions.GetAndroidStartScreenRecordingOptions() .WithTimeLimit(TimeSpan.FromSeconds(10)) .WithBitRate(500000) .WithVideoSize( 720x1280 )); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All static.javadoc.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All Android iOS C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/start_recording_screen URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description options object The following parameters of the action options.remotePath string The path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory. This option only has an effect if there is screen recording process in progress and forceRestart parameter is not set to true . options.username string The name of the user for the remote authentication. options.password string The password for the remote authentication. options.method string The http multipart upload method name. The 'PUT' one is used by default. options.forceRestart boolean Whether to try to catch and upload/return the currently running screen recording ( false , the default setting on server) or ignore the result of it and start a new recording immediately ( true ). options.timeLimit string Recording time. 180 seconds is by default. options.videoType string (iOS Only) The format of the screen capture to be recorded. Available formats are the output of ffmpeg -codecs such as libx264 and mpeg4 . Defaults to mjpeg . options.videoQuality string (iOS Only) The video encoding quality (low, medium, high, photo - defaults to medium). options.videoFps string (iOS Only) The Frames Per Second rate of the recorded video. Change this value if the resulting video is too slow or too fast. Defaults to 10. This can decrease the resulting file size. options.videoScale string (iOS Only) The scaling value to apply. Read https://trac.ffmpeg.org/wiki/Scaling for possible values. Example value of 720p scaling is '1280:720'. This can decrease/increase the resulting file size. No scale is applied by default. options.bitRate string (Android Only) The video bit rate for the video, in megabits per second. 4 Mbp/s(4000000) is by default for Android API level below 27. 20 Mb/s(20000000) for API level 27 and above. options.videoSize string (Android Only) The format is widthxheight. The default value is the device's native display resolution (if supported), 1280x720 if not. For best results, use a size supported by your device's Advanced Video Coding (AVC) encoder. For example, \"1280x720\" options.bugReport string (Android Only) Set it to true in order to display additional information on the video overlay, such as a timestamp, that is helpful in videos captured to illustrate bugs. This option is only supported since API level 27 (Android O). Response null See Also JSONWP Specification","title":"Start Screen Recording"},{"location":"commands/device/recording-screen/start-recording-screen/#start-recording-screen","text":"Start recording screen","title":"Start Recording Screen"},{"location":"commands/device/recording-screen/start-recording-screen/#example-usage","text":"// Java driver.startRecordingScreen(); driver.startRecordingScreen(new BaseStartScreenRecordingOptions(....)); # Python self.driver.start_recording_screen() // Javascript // webdriver.io example driver.startRecordingScreen(); // wd example await driver.startRecordingScreen(); # Ruby # ruby_lib example start_recording_screen start_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android start_recording_screen video_type: 'h264', time_limit: '260' # iOS # ruby_lib_core example @driver.start_recording_screen @driver.start_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android @driver.start_recording_screen video_type: 'h264', time_limit: '260' # iOS // C# driver.StartRecordingScreen( AndroidStartScreenRecordingOptions.GetAndroidStartScreenRecordingOptions() .WithTimeLimit(TimeSpan.FromSeconds(10)) .WithBitRate(500000) .WithVideoSize( 720x1280 ));","title":"Example Usage"},{"location":"commands/device/recording-screen/start-recording-screen/#support","text":"","title":"Support"},{"location":"commands/device/recording-screen/start-recording-screen/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/recording-screen/start-recording-screen/#appium-clients","text":"Language Support Documentation Java All static.javadoc.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All Android iOS C# None github.com","title":"Appium Clients"},{"location":"commands/device/recording-screen/start-recording-screen/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/recording-screen/start-recording-screen/#endpoint","text":"POST /session/:session_id/appium/start_recording_screen","title":"Endpoint"},{"location":"commands/device/recording-screen/start-recording-screen/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/recording-screen/start-recording-screen/#json-parameters","text":"name type description options object The following parameters of the action options.remotePath string The path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory. This option only has an effect if there is screen recording process in progress and forceRestart parameter is not set to true . options.username string The name of the user for the remote authentication. options.password string The password for the remote authentication. options.method string The http multipart upload method name. The 'PUT' one is used by default. options.forceRestart boolean Whether to try to catch and upload/return the currently running screen recording ( false , the default setting on server) or ignore the result of it and start a new recording immediately ( true ). options.timeLimit string Recording time. 180 seconds is by default. options.videoType string (iOS Only) The format of the screen capture to be recorded. Available formats are the output of ffmpeg -codecs such as libx264 and mpeg4 . Defaults to mjpeg . options.videoQuality string (iOS Only) The video encoding quality (low, medium, high, photo - defaults to medium). options.videoFps string (iOS Only) The Frames Per Second rate of the recorded video. Change this value if the resulting video is too slow or too fast. Defaults to 10. This can decrease the resulting file size. options.videoScale string (iOS Only) The scaling value to apply. Read https://trac.ffmpeg.org/wiki/Scaling for possible values. Example value of 720p scaling is '1280:720'. This can decrease/increase the resulting file size. No scale is applied by default. options.bitRate string (Android Only) The video bit rate for the video, in megabits per second. 4 Mbp/s(4000000) is by default for Android API level below 27. 20 Mb/s(20000000) for API level 27 and above. options.videoSize string (Android Only) The format is widthxheight. The default value is the device's native display resolution (if supported), 1280x720 if not. For best results, use a size supported by your device's Advanced Video Coding (AVC) encoder. For example, \"1280x720\" options.bugReport string (Android Only) Set it to true in order to display additional information on the video overlay, such as a timestamp, that is helpful in videos captured to illustrate bugs. This option is only supported since API level 27 (Android O).","title":"JSON Parameters"},{"location":"commands/device/recording-screen/start-recording-screen/#response","text":"null","title":"Response"},{"location":"commands/device/recording-screen/start-recording-screen/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/recording-screen/stop-recording-screen/","text":"Stop Recording Screen Stop recording screen Example Usage // Java driver.stopRecordingScreen(); driver.stopRecordingScreen(new BaseStopScreenRecordingOptions(....)); # Python self.driver.stop_recording_screen() // Javascript // webdriver.io example driver.stopRecordingScreen(); // wd example await driver.stopRecordingScreen(); # Ruby # ruby_lib example stop_recording_screen stop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST' # ruby_lib_core example @driver.stop_recording_screen @driver.stop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST' // C# driver.StopRecordingScreen(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All static.javadoc.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/stop_recording_screen URL Parameters name description remotePath The path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory. username The name of the user for the remote authentication. password The password for the remote authentication. method The http multipart upload method name. The 'PUT' one is used by default. JSON Parameters None Response Base64 encoded string. If remote_path is set, the response is empty string. ( string ) See Also JSONWP Specification","title":"Stop Screen Recording"},{"location":"commands/device/recording-screen/stop-recording-screen/#stop-recording-screen","text":"Stop recording screen","title":"Stop Recording Screen"},{"location":"commands/device/recording-screen/stop-recording-screen/#example-usage","text":"// Java driver.stopRecordingScreen(); driver.stopRecordingScreen(new BaseStopScreenRecordingOptions(....)); # Python self.driver.stop_recording_screen() // Javascript // webdriver.io example driver.stopRecordingScreen(); // wd example await driver.stopRecordingScreen(); # Ruby # ruby_lib example stop_recording_screen stop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST' # ruby_lib_core example @driver.stop_recording_screen @driver.stop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST' // C# driver.StopRecordingScreen();","title":"Example Usage"},{"location":"commands/device/recording-screen/stop-recording-screen/#support","text":"","title":"Support"},{"location":"commands/device/recording-screen/stop-recording-screen/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/recording-screen/stop-recording-screen/#appium-clients","text":"Language Support Documentation Java All static.javadoc.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/recording-screen/stop-recording-screen/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/recording-screen/stop-recording-screen/#endpoint","text":"POST /session/:session_id/appium/stop_recording_screen","title":"Endpoint"},{"location":"commands/device/recording-screen/stop-recording-screen/#url-parameters","text":"name description remotePath The path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory. username The name of the user for the remote authentication. password The password for the remote authentication. method The http multipart upload method name. The 'PUT' one is used by default.","title":"URL Parameters"},{"location":"commands/device/recording-screen/stop-recording-screen/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/recording-screen/stop-recording-screen/#response","text":"Base64 encoded string. If remote_path is set, the response is empty string. ( string )","title":"Response"},{"location":"commands/device/recording-screen/stop-recording-screen/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/simulator/","text":"Appium API Documentation ### /docs/en/commands/device/simulator Perform Touch ID Toggle Touch ID Enrollment","title":"Home"},{"location":"commands/device/simulator/#appium-api-documentation","text":"### /docs/en/commands/device/simulator Perform Touch ID Toggle Touch ID Enrollment","title":"Appium API Documentation"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/","text":"Toggle Touch ID Enrollment Toggle the simulator being enrolled to accept touchId (iOS Simulator only) Example Usage // Java driver.toggleTouchIDEnrollment(true); # Python self.driver.toggle_touch_id_enrollment() // Javascript // webdriver.io example driver.toggleEnrollTouchId(true); // wd example await driver.toggleTouchIdEnrollment(); # Ruby # ruby_lib example toggle_touch_id_enrollment # ruby_lib_core example @driver.toggle_touch_id_enrollment // C# // TODO C# sample Description To enable this feature, the allowTouchIdEnroll desired capability must be set to true. When allowTouchIdEnroll is set to true the Simulator will be enrolled by default, and the 'Toggle Touch ID Enrollment' changes the enrollment state. This call will only work if the Appium process or its parent application (e.g., Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences Security Privacy Privacy Accessibility list Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/simulator/toggle_touch_id_enrollment URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description enabled boolean If true, enable, if falsey disable, otherwise toggle (optional) Response null See Also JSONWP Specification","title":"Toggle Touch ID Enrollment"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#toggle-touch-id-enrollment","text":"Toggle the simulator being enrolled to accept touchId (iOS Simulator only)","title":"Toggle Touch ID Enrollment"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#example-usage","text":"// Java driver.toggleTouchIDEnrollment(true); # Python self.driver.toggle_touch_id_enrollment() // Javascript // webdriver.io example driver.toggleEnrollTouchId(true); // wd example await driver.toggleTouchIdEnrollment(); # Ruby # ruby_lib example toggle_touch_id_enrollment # ruby_lib_core example @driver.toggle_touch_id_enrollment // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#description","text":"To enable this feature, the allowTouchIdEnroll desired capability must be set to true. When allowTouchIdEnroll is set to true the Simulator will be enrolled by default, and the 'Toggle Touch ID Enrollment' changes the enrollment state. This call will only work if the Appium process or its parent application (e.g., Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences Security Privacy Privacy Accessibility list","title":"Description"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#support","text":"","title":"Support"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#endpoint","text":"POST /session/:session_id/appium/simulator/toggle_touch_id_enrollment","title":"Endpoint"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#json-parameters","text":"name type description enabled boolean If true, enable, if falsey disable, otherwise toggle (optional)","title":"JSON Parameters"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#response","text":"null","title":"Response"},{"location":"commands/device/simulator/toggle-touch-id-enrollment/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/simulator/touch-id/","text":"Perform Touch ID Simulate a touch id event (iOS Simulator only) Example Usage // Java driver.performTouchID(false); // Simulates a failed touch driver.performTouchID(true); // Simulates a passing touch # Python self.driver.touch_id(false); # Simulates a failed touch self.driver.touch_id(true); # Simulates a passing touch // Javascript // webdriver.io example driver.touchId(false); // Simulates a failed touch driver.touchId(true); // Simulates a passing touch // wd example await driver.touchId(false); // Simulates a failed touch await driver.touchId(true); // Simulates a failed touch # Ruby # ruby_lib example touch_id(false) touch_id(true) # ruby_lib_core example @driver.touch_id(false) # Simulates a failed touch @driver.touch_id(true) # Simulates a passing touch // C# driver.PerformTouchID(false); // Simulates a failed touch driver.PerformTouchID(true); // Simulates a passing touch Description To enable this feature, the allowTouchIdEnroll desired capability must be set to true and the Simulator must be enrolled . When you set allowTouchIdEnroll to true, it will set the Simulator to be enrolled by default. The enrollment state can be toggled This call will only work if Appium process or its parent application (e.g. Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences Security Privacy Privacy Accessibility list Finger Print by Android is here Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/simulator/touch_id URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description match boolean Are we simulating a successful touch (true) or a failed touch (false) Response null See Also JSONWP Specification Appium Docs","title":"Perform Touch ID"},{"location":"commands/device/simulator/touch-id/#perform-touch-id","text":"Simulate a touch id event (iOS Simulator only)","title":"Perform Touch ID"},{"location":"commands/device/simulator/touch-id/#example-usage","text":"// Java driver.performTouchID(false); // Simulates a failed touch driver.performTouchID(true); // Simulates a passing touch # Python self.driver.touch_id(false); # Simulates a failed touch self.driver.touch_id(true); # Simulates a passing touch // Javascript // webdriver.io example driver.touchId(false); // Simulates a failed touch driver.touchId(true); // Simulates a passing touch // wd example await driver.touchId(false); // Simulates a failed touch await driver.touchId(true); // Simulates a failed touch # Ruby # ruby_lib example touch_id(false) touch_id(true) # ruby_lib_core example @driver.touch_id(false) # Simulates a failed touch @driver.touch_id(true) # Simulates a passing touch // C# driver.PerformTouchID(false); // Simulates a failed touch driver.PerformTouchID(true); // Simulates a passing touch","title":"Example Usage"},{"location":"commands/device/simulator/touch-id/#description","text":"To enable this feature, the allowTouchIdEnroll desired capability must be set to true and the Simulator must be enrolled . When you set allowTouchIdEnroll to true, it will set the Simulator to be enrolled by default. The enrollment state can be toggled This call will only work if Appium process or its parent application (e.g. Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences Security Privacy Privacy Accessibility list Finger Print by Android is here","title":"Description"},{"location":"commands/device/simulator/touch-id/#support","text":"","title":"Support"},{"location":"commands/device/simulator/touch-id/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/simulator/touch-id/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/simulator/touch-id/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/simulator/touch-id/#endpoint","text":"POST /session/:session_id/appium/simulator/touch_id","title":"Endpoint"},{"location":"commands/device/simulator/touch-id/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/simulator/touch-id/#json-parameters","text":"name type description match boolean Are we simulating a successful touch (true) or a failed touch (false)","title":"JSON Parameters"},{"location":"commands/device/simulator/touch-id/#response","text":"null","title":"Response"},{"location":"commands/device/simulator/touch-id/#see-also","text":"JSONWP Specification Appium Docs","title":"See Also"},{"location":"commands/device/system/","text":"Appium API Documentation ### /docs/en/commands/device/system Open Notifications System Bars System Time Display density","title":"Home"},{"location":"commands/device/system/#appium-api-documentation","text":"### /docs/en/commands/device/system Open Notifications System Bars System Time Display density","title":"Appium API Documentation"},{"location":"commands/device/system/display-density/","text":"Get Display Density Retrieve display density(dpi) of the Android device Example Usage // Java driver.getDeviceDensity(); # Python self.driver.get_display_density() // Javascript // webdriver.io example driver.getDisplayDensity(); // Not supported # Ruby # ruby_lib example get_device_density # ruby_lib_core example @driver.get_device_density // Not supported Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) None Ruby All www.rubydoc.info C# None HTTP API Specifications Endpoint GET /session/:session_id/appium/device/display_density URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The device density(dpi) of the Android device ( number ) See Also JSONWP Specification","title":"Display density"},{"location":"commands/device/system/display-density/#get-display-density","text":"Retrieve display density(dpi) of the Android device","title":"Get Display Density"},{"location":"commands/device/system/display-density/#example-usage","text":"// Java driver.getDeviceDensity(); # Python self.driver.get_display_density() // Javascript // webdriver.io example driver.getDisplayDensity(); // Not supported # Ruby # ruby_lib example get_device_density # ruby_lib_core example @driver.get_device_density // Not supported","title":"Example Usage"},{"location":"commands/device/system/display-density/#support","text":"","title":"Support"},{"location":"commands/device/system/display-density/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/system/display-density/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) None Ruby All www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/device/system/display-density/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/system/display-density/#endpoint","text":"GET /session/:session_id/appium/device/display_density","title":"Endpoint"},{"location":"commands/device/system/display-density/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/system/display-density/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/system/display-density/#response","text":"The device density(dpi) of the Android device ( number )","title":"Response"},{"location":"commands/device/system/display-density/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/system/open-notifications/","text":"Open Notifications Open Android notifications (Emulator only) Example Usage // Java driver.openNotifications(); # Python self.driver.open_notifications(); // Javascript // webdriver.io example driver.openNotifications(); // wd example await driver.openNotifications(); # Ruby # ruby_lib example open_notifications(); # ruby_lib_core example @driver.open_notifications(); // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/device/open_notifications URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Open Notifications"},{"location":"commands/device/system/open-notifications/#open-notifications","text":"Open Android notifications (Emulator only)","title":"Open Notifications"},{"location":"commands/device/system/open-notifications/#example-usage","text":"// Java driver.openNotifications(); # Python self.driver.open_notifications(); // Javascript // webdriver.io example driver.openNotifications(); // wd example await driver.openNotifications(); # Ruby # ruby_lib example open_notifications(); # ruby_lib_core example @driver.open_notifications(); // C# // TODO","title":"Example Usage"},{"location":"commands/device/system/open-notifications/#support","text":"","title":"Support"},{"location":"commands/device/system/open-notifications/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/system/open-notifications/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/system/open-notifications/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/system/open-notifications/#endpoint","text":"POST /session/:session_id/appium/device/open_notifications","title":"Endpoint"},{"location":"commands/device/system/open-notifications/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/system/open-notifications/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/system/open-notifications/#response","text":"null","title":"Response"},{"location":"commands/device/system/open-notifications/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/system/system-bars/","text":"Get System Bars Retrieve visibility and bounds information of the status and navigation bars Example Usage // Java Map String, String systemBars = driver.getSystemBars(); # Python self.driver.get_system_bars() // Javascript // webdriver.io example driver.getSystemBars(); // Not supported # Ruby # ruby_lib example get_system_bars # ruby_lib_core example @driver.get_system_bars // C# // TODO Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) None Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint GET /session/:session_id/appium/device/system_bars URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response Information about visibility and bounds of status and navigation bar ( array object ) See Also JSONWP Specification","title":"System Bars"},{"location":"commands/device/system/system-bars/#get-system-bars","text":"Retrieve visibility and bounds information of the status and navigation bars","title":"Get System Bars"},{"location":"commands/device/system/system-bars/#example-usage","text":"// Java Map String, String systemBars = driver.getSystemBars(); # Python self.driver.get_system_bars() // Javascript // webdriver.io example driver.getSystemBars(); // Not supported # Ruby # ruby_lib example get_system_bars # ruby_lib_core example @driver.get_system_bars // C# // TODO","title":"Example Usage"},{"location":"commands/device/system/system-bars/#support","text":"","title":"Support"},{"location":"commands/device/system/system-bars/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/system/system-bars/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) None Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/device/system/system-bars/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/system/system-bars/#endpoint","text":"GET /session/:session_id/appium/device/system_bars","title":"Endpoint"},{"location":"commands/device/system/system-bars/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/system/system-bars/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/system/system-bars/#response","text":"Information about visibility and bounds of status and navigation bar ( array object )","title":"Response"},{"location":"commands/device/system/system-bars/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/device/system/system-time/","text":"Get System Time Get the time on the device Example Usage // Java String time = driver.getDeviceTime(); # Python time = self.driver.device_time time = self.driver.get_device_time() time = self.driver.get_device_time( YYYY-MM-DD ) // Javascript // webdriver.io example let time = driver.getDeviceTime(); // wd example let time = await driver.getDeviceTime(); # Ruby # ruby_lib example device_time # ruby_lib_core example @driver.device_time // C# string result = driver.DeviceTime; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/appium/device/system_time URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response Time on the device ( string ) See Also JSONWP Specification","title":"System Time"},{"location":"commands/device/system/system-time/#get-system-time","text":"Get the time on the device","title":"Get System Time"},{"location":"commands/device/system/system-time/#example-usage","text":"// Java String time = driver.getDeviceTime(); # Python time = self.driver.device_time time = self.driver.get_device_time() time = self.driver.get_device_time( YYYY-MM-DD ) // Javascript // webdriver.io example let time = driver.getDeviceTime(); // wd example let time = await driver.getDeviceTime(); # Ruby # ruby_lib example device_time # ruby_lib_core example @driver.device_time // C# string result = driver.DeviceTime;","title":"Example Usage"},{"location":"commands/device/system/system-time/#support","text":"","title":"Support"},{"location":"commands/device/system/system-time/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/device/system/system-time/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/device/system/system-time/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/device/system/system-time/#endpoint","text":"GET /session/:session_id/appium/device/system_time","title":"Endpoint"},{"location":"commands/device/system/system-time/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/device/system/system-time/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/device/system/system-time/#response","text":"Time on the device ( string )","title":"Response"},{"location":"commands/device/system/system-time/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/","text":"Appium API Documentation ### /docs/en/commands/element Find Element Find Elements Actions Click Send Keys Clear Attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View Other Submit Active Element Equals Element","title":"Home"},{"location":"commands/element/#appium-api-documentation","text":"### /docs/en/commands/element Find Element Find Elements Actions Click Send Keys Clear Attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View Other Submit Active Element Equals Element","title":"Appium API Documentation"},{"location":"commands/element/find-element/","text":"Find Element Search for an element on the page Example Usage // Java MobileElement elementOne = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); MobileElement elementTwo = (MobileElement) driver.findElementByClassName( SomeClassName ); # Python el = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') // Javascript // webdriver.io example $( ~SomeAccessibilityId ); // wd example let elementOne = await driver.elementByAccessibilityId( SomeAccessibilityID ); let elementTwo = await driver.element( id , SomeID ); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID') # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID') // C# AndroidElement elementOne = driver.FindElementByAccessibilityID( Some ID ); AndroidElement elementTwo = driver.FindElementByClassName( Some class ); Description Get the first element that matches a locator strategy Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/element URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description using string The locator strategy to use value string The search target Response A JSON object for the located element ( object ) See Also W3C Specification JSONWP Specification","title":"Find Element"},{"location":"commands/element/find-element/#find-element","text":"Search for an element on the page","title":"Find Element"},{"location":"commands/element/find-element/#example-usage","text":"// Java MobileElement elementOne = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); MobileElement elementTwo = (MobileElement) driver.findElementByClassName( SomeClassName ); # Python el = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') // Javascript // webdriver.io example $( ~SomeAccessibilityId ); // wd example let elementOne = await driver.elementByAccessibilityId( SomeAccessibilityID ); let elementTwo = await driver.element( id , SomeID ); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID') # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID') // C# AndroidElement elementOne = driver.FindElementByAccessibilityID( Some ID ); AndroidElement elementTwo = driver.FindElementByClassName( Some class );","title":"Example Usage"},{"location":"commands/element/find-element/#description","text":"Get the first element that matches a locator strategy","title":"Description"},{"location":"commands/element/find-element/#support","text":"","title":"Support"},{"location":"commands/element/find-element/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/find-element/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/find-element/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/find-element/#endpoint","text":"POST /session/:session_id/element","title":"Endpoint"},{"location":"commands/element/find-element/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/element/find-element/#json-parameters","text":"name type description using string The locator strategy to use value string The search target","title":"JSON Parameters"},{"location":"commands/element/find-element/#response","text":"A JSON object for the located element ( object )","title":"Response"},{"location":"commands/element/find-element/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/find-elements/","text":"Find Elements Search for multiple elements Example Usage // Java List MobileElement elementsOne = (List MobileElement ) driver.findElementsByAccessibilityId( SomeAccessibilityID ); List MobileElement elementsTwo = (List MobileElement ) driver.findElementsByClassName( SomeClassName ); # Python el = self.driver.find_elements_by_accessibility_id('SomeAccessibilityID') // Javascript // webdriver.io example $$( ~SomeAccessibilityId ); // wd example let elementsOne = await driver.elementsByAccessibilityId( SomeAccessibilityID ); let elementsTwo = await driver.elements( id , SomeID ); # Ruby # ruby_lib example find_elements(:accessibility_id, ~SomeAccessibilityID ) # ruby_lib_core example @driver.find_elements(:accessibility_id, ~SomeAccessibilityID ) // C# IEnumerable AppiumWebElement elementsOne = driver.FindElementsByAccessibilityId( SomeAccessibilityID ); IEnumerable AppiumWebElement elementsTwo = driver.FindElementsByClassName( SomeClassName ); Selector Strategies Strategy Description Accessibility ID Read a unique identifier for a UI element. For XCUITest it is the element's accessibility-id attribute. For Android it is the element's content-desc attribute. Class name For IOS it is the full name of the XCUI element and begins with XCUIElementType. For Android it is the full name of the UIAutomator2 class (e.g.: android.widget.TextView) ID Native element identifier. resource-id for android; name for iOS. Name Name of element XPath Search the app XML source using xpath (not recommended, has performance issues) Image Locate an element by matching it with a base 64 encoded image file Android UiAutomator (UiAutomator2 only) Use the UI Automator API, in particular the UiSelector class to locate elements. In Appium you send the Java code, as a string, to the server, which executes it in the application\u2019s environment, returning the element or elements. Android View Tag (Espresso only) Locate an element by its view tag Android Data Matcher (Espresso only) Locate an element using Espresso DataMatcher IOS UIAutomation When automating an iOS application, Apple\u2019s Instruments framework can be used to find elements Description Get a list of elements that match the locator selector . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/elements URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description using string The locator strategy to use value string The search target Response A list of of JSON objects for the located elements ( Array String ) See Also W3C Specification JSONWP Specification","title":"Find Elements"},{"location":"commands/element/find-elements/#find-elements","text":"Search for multiple elements","title":"Find Elements"},{"location":"commands/element/find-elements/#example-usage","text":"// Java List MobileElement elementsOne = (List MobileElement ) driver.findElementsByAccessibilityId( SomeAccessibilityID ); List MobileElement elementsTwo = (List MobileElement ) driver.findElementsByClassName( SomeClassName ); # Python el = self.driver.find_elements_by_accessibility_id('SomeAccessibilityID') // Javascript // webdriver.io example $$( ~SomeAccessibilityId ); // wd example let elementsOne = await driver.elementsByAccessibilityId( SomeAccessibilityID ); let elementsTwo = await driver.elements( id , SomeID ); # Ruby # ruby_lib example find_elements(:accessibility_id, ~SomeAccessibilityID ) # ruby_lib_core example @driver.find_elements(:accessibility_id, ~SomeAccessibilityID ) // C# IEnumerable AppiumWebElement elementsOne = driver.FindElementsByAccessibilityId( SomeAccessibilityID ); IEnumerable AppiumWebElement elementsTwo = driver.FindElementsByClassName( SomeClassName );","title":"Example Usage"},{"location":"commands/element/find-elements/#selector-strategies","text":"Strategy Description Accessibility ID Read a unique identifier for a UI element. For XCUITest it is the element's accessibility-id attribute. For Android it is the element's content-desc attribute. Class name For IOS it is the full name of the XCUI element and begins with XCUIElementType. For Android it is the full name of the UIAutomator2 class (e.g.: android.widget.TextView) ID Native element identifier. resource-id for android; name for iOS. Name Name of element XPath Search the app XML source using xpath (not recommended, has performance issues) Image Locate an element by matching it with a base 64 encoded image file Android UiAutomator (UiAutomator2 only) Use the UI Automator API, in particular the UiSelector class to locate elements. In Appium you send the Java code, as a string, to the server, which executes it in the application\u2019s environment, returning the element or elements. Android View Tag (Espresso only) Locate an element by its view tag Android Data Matcher (Espresso only) Locate an element using Espresso DataMatcher IOS UIAutomation When automating an iOS application, Apple\u2019s Instruments framework can be used to find elements","title":"Selector Strategies"},{"location":"commands/element/find-elements/#description","text":"Get a list of elements that match the locator selector .","title":"Description"},{"location":"commands/element/find-elements/#support","text":"","title":"Support"},{"location":"commands/element/find-elements/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/find-elements/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/find-elements/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/find-elements/#endpoint","text":"POST /session/:session_id/elements","title":"Endpoint"},{"location":"commands/element/find-elements/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/element/find-elements/#json-parameters","text":"name type description using string The locator strategy to use value string The search target","title":"JSON Parameters"},{"location":"commands/element/find-elements/#response","text":"A list of of JSON objects for the located elements ( Array String )","title":"Response"},{"location":"commands/element/find-elements/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/actions/","text":"Appium API Documentation ### /docs/en/commands/element/actions Click Send Keys Clear","title":"Home"},{"location":"commands/element/actions/#appium-api-documentation","text":"### /docs/en/commands/element/actions Click Send Keys Clear","title":"Appium API Documentation"},{"location":"commands/element/actions/clear/","text":"Clear Element Clear an element's value Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); element.clear(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').clear() // Javascript // webdriver.io example $( ~SomeAccessibilityId ).clearValue(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.clear(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).clear # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).clear // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); element.Clear(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/element/:element_id/clear URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to clear. JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Clear"},{"location":"commands/element/actions/clear/#clear-element","text":"Clear an element's value","title":"Clear Element"},{"location":"commands/element/actions/clear/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); element.clear(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').clear() // Javascript // webdriver.io example $( ~SomeAccessibilityId ).clearValue(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.clear(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).clear # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).clear // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); element.Clear();","title":"Example Usage"},{"location":"commands/element/actions/clear/#support","text":"","title":"Support"},{"location":"commands/element/actions/clear/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/actions/clear/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/actions/clear/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/actions/clear/#endpoint","text":"POST /session/:session_id/element/:element_id/clear","title":"Endpoint"},{"location":"commands/element/actions/clear/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to clear.","title":"URL Parameters"},{"location":"commands/element/actions/clear/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/actions/clear/#response","text":"null","title":"Response"},{"location":"commands/element/actions/clear/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/actions/click/","text":"Click Click element at its center point. Example Usage // Java MobileElement el = driver.findElementByAccessibilityId( SomeId ); el.click(); # Python el = self.driver.find_element_by_accessibility_id('SomeId') el.click(); // Javascript // webdriver.io example $('#SomeId').click(); // wd example let element = await driver.elementByAccessibilityId('id', 'SomeId'); await element.click(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeId').click # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeId').click // C# MobileElement el = driver.FindElement(MobileByAccessibilityID( Some ID ); el.click(); //Example MobileElement el = driver.FindElement(MobileById( Some ID ); el.click(); Description Clicks element at its center point. If the element's center point is obscured by another element, an element click intercepted error is returned. If the element is outside the viewport, an element not interactable error is returned. Not all drivers automatically scroll the element into view and may need to be scrolled to in order to interact with it. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/element/:element_id/click URL Parameters name description session_id UUID of the session element_id UUID of the element JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Click"},{"location":"commands/element/actions/click/#click","text":"Click element at its center point.","title":"Click"},{"location":"commands/element/actions/click/#example-usage","text":"// Java MobileElement el = driver.findElementByAccessibilityId( SomeId ); el.click(); # Python el = self.driver.find_element_by_accessibility_id('SomeId') el.click(); // Javascript // webdriver.io example $('#SomeId').click(); // wd example let element = await driver.elementByAccessibilityId('id', 'SomeId'); await element.click(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeId').click # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeId').click // C# MobileElement el = driver.FindElement(MobileByAccessibilityID( Some ID ); el.click(); //Example MobileElement el = driver.FindElement(MobileById( Some ID ); el.click();","title":"Example Usage"},{"location":"commands/element/actions/click/#description","text":"Clicks element at its center point. If the element's center point is obscured by another element, an element click intercepted error is returned. If the element is outside the viewport, an element not interactable error is returned. Not all drivers automatically scroll the element into view and may need to be scrolled to in order to interact with it.","title":"Description"},{"location":"commands/element/actions/click/#support","text":"","title":"Support"},{"location":"commands/element/actions/click/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/actions/click/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/actions/click/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/actions/click/#endpoint","text":"POST /session/:session_id/element/:element_id/click","title":"Endpoint"},{"location":"commands/element/actions/click/#url-parameters","text":"name description session_id UUID of the session element_id UUID of the element","title":"URL Parameters"},{"location":"commands/element/actions/click/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/actions/click/#response","text":"null","title":"Response"},{"location":"commands/element/actions/click/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/actions/send-keys/","text":"Send Keys Send a sequence of key strokes to an element Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); element.sendKeys( Hello world! ); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').send_keys('Hello world!') // Javascript // webdriver.io example $( ~SomeAccessibilityId ).addValue( Enter ); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.type( Hello world! ) # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).send_keys( Hello World! ) # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).send_keys( Hello World! ) // C# MobileElement el = driver.FindElement(MobileByAccessibilityID( Some ID ); el.SendKeys( Some Text ); //Example MobileElement el = driver.FindElement(MobileById( Some ID ); el.SendKeys( Hello World ); Description Any UTF-8 character may be specified, however, if the server does not support native key events, it should simulate key strokes for a standard US keyboard layout. The Unicode Private Use Area code points, 0xE000-0xF8FF, are used to represent pressable, non-text keys (see table below). (See Unicode document for information on Unicode characters) Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/element/:element_id/value URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to send keys to. JSON Parameters name type description value array string (MJSONWP) The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed text string (W3C) A single string to be typed Response null See Also W3C Specification JSONWP Specification","title":"Send Keys"},{"location":"commands/element/actions/send-keys/#send-keys","text":"Send a sequence of key strokes to an element","title":"Send Keys"},{"location":"commands/element/actions/send-keys/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); element.sendKeys( Hello world! ); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').send_keys('Hello world!') // Javascript // webdriver.io example $( ~SomeAccessibilityId ).addValue( Enter ); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.type( Hello world! ) # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).send_keys( Hello World! ) # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).send_keys( Hello World! ) // C# MobileElement el = driver.FindElement(MobileByAccessibilityID( Some ID ); el.SendKeys( Some Text ); //Example MobileElement el = driver.FindElement(MobileById( Some ID ); el.SendKeys( Hello World );","title":"Example Usage"},{"location":"commands/element/actions/send-keys/#description","text":"Any UTF-8 character may be specified, however, if the server does not support native key events, it should simulate key strokes for a standard US keyboard layout. The Unicode Private Use Area code points, 0xE000-0xF8FF, are used to represent pressable, non-text keys (see table below). (See Unicode document for information on Unicode characters)","title":"Description"},{"location":"commands/element/actions/send-keys/#support","text":"","title":"Support"},{"location":"commands/element/actions/send-keys/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/actions/send-keys/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/actions/send-keys/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/actions/send-keys/#endpoint","text":"POST /session/:session_id/element/:element_id/value","title":"Endpoint"},{"location":"commands/element/actions/send-keys/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to send keys to.","title":"URL Parameters"},{"location":"commands/element/actions/send-keys/#json-parameters","text":"name type description value array string (MJSONWP) The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed text string (W3C) A single string to be typed","title":"JSON Parameters"},{"location":"commands/element/actions/send-keys/#response","text":"null","title":"Response"},{"location":"commands/element/actions/send-keys/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/","text":"Appium API Documentation ### /docs/en/commands/element/attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View","title":"Home"},{"location":"commands/element/attributes/#appium-api-documentation","text":"### /docs/en/commands/element/attributes Text Name Attribute Selected Enabled Displayed Location Size Rect CSS Property Location in View","title":"Appium API Documentation"},{"location":"commands/element/attributes/attribute/","text":"Get Element Attribute Get the value of an element's attribute Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); String tagName = element.getAttribute( content-desc ); # Python tagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').get_attribute('content-desc') // Javascript // webdriver.io example let attribute = $( ~SomeAccessibilityId ).getAttribute( content-desc ); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let tagName = await element.getAttribute( content-desc ); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').attribute( content-desc ) # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').attribute( content-desc ) // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); string tagName = element.GetAttribute( content-desc ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/attribute/:name URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the attribute from name The name of the attribute JSON Parameters None Response The value of the attribute or null if not set ( string ) See Also W3C Specification JSONWP Specification","title":"Attribute"},{"location":"commands/element/attributes/attribute/#get-element-attribute","text":"Get the value of an element's attribute","title":"Get Element Attribute"},{"location":"commands/element/attributes/attribute/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); String tagName = element.getAttribute( content-desc ); # Python tagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').get_attribute('content-desc') // Javascript // webdriver.io example let attribute = $( ~SomeAccessibilityId ).getAttribute( content-desc ); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let tagName = await element.getAttribute( content-desc ); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').attribute( content-desc ) # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').attribute( content-desc ) // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); string tagName = element.GetAttribute( content-desc );","title":"Example Usage"},{"location":"commands/element/attributes/attribute/#support","text":"","title":"Support"},{"location":"commands/element/attributes/attribute/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/attribute/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/attribute/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/attribute/#endpoint","text":"GET /session/:session_id/elements/:element_id/attribute/:name","title":"Endpoint"},{"location":"commands/element/attributes/attribute/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the attribute from name The name of the attribute","title":"URL Parameters"},{"location":"commands/element/attributes/attribute/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/attribute/#response","text":"The value of the attribute or null if not set ( string )","title":"Response"},{"location":"commands/element/attributes/attribute/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/css-property/","text":"Get Element CSS Value Query the value of a web element's computed CSS property Example Usage // Java MobileElement element = (MobileElement) driver.findElementById( SomeId ); String cssProperty = element.getCssValue( style ); # Python cssProperty = self.driver.find_element_by_accessibility_id('SomeId').value_of_css_property( style ) // Javascript // webdriver.io example let cssProperty = $( ~SomeId ).getCSSProperty( style ); // wd example let element = await driver.elementById( SomeId ); let cssProperty = await element.getComputedCss(); # Ruby # ruby_lib example find_element(:id, 'SomeId').css_value # ruby_lib_core example @driver.find_element(:id, 'SomeId').css_value // C# var element = driver.FindElementById( SomeId ); string cssProperty = element.GetCssValue( style ); Description The CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor). This command only applies to webview contexts Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/css/:property_name URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the property from property_name Name of the CSS property JSON Parameters None Response Value of the CSS property ( string ) See Also W3C Specification JSONWP Specification","title":"CSS Property"},{"location":"commands/element/attributes/css-property/#get-element-css-value","text":"Query the value of a web element's computed CSS property","title":"Get Element CSS Value"},{"location":"commands/element/attributes/css-property/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementById( SomeId ); String cssProperty = element.getCssValue( style ); # Python cssProperty = self.driver.find_element_by_accessibility_id('SomeId').value_of_css_property( style ) // Javascript // webdriver.io example let cssProperty = $( ~SomeId ).getCSSProperty( style ); // wd example let element = await driver.elementById( SomeId ); let cssProperty = await element.getComputedCss(); # Ruby # ruby_lib example find_element(:id, 'SomeId').css_value # ruby_lib_core example @driver.find_element(:id, 'SomeId').css_value // C# var element = driver.FindElementById( SomeId ); string cssProperty = element.GetCssValue( style );","title":"Example Usage"},{"location":"commands/element/attributes/css-property/#description","text":"The CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor). This command only applies to webview contexts","title":"Description"},{"location":"commands/element/attributes/css-property/#support","text":"","title":"Support"},{"location":"commands/element/attributes/css-property/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/css-property/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/css-property/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/css-property/#endpoint","text":"GET /session/:session_id/elements/:element_id/css/:property_name","title":"Endpoint"},{"location":"commands/element/attributes/css-property/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the property from property_name Name of the CSS property","title":"URL Parameters"},{"location":"commands/element/attributes/css-property/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/css-property/#response","text":"Value of the CSS property ( string )","title":"Response"},{"location":"commands/element/attributes/css-property/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/displayed/","text":"Is Element Displayed Determine if an element is currently displayed Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); boolean isDisplayed = element.isDisplayed(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_displayed() // Javascript // webdriver.io example let isDisplayed = $( ~SomeAccessibilityId ).isDisplayed(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let isDisplayed = await element.isDisplayed(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).displayed? # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).displayed? // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); bool isDisplayed = element.Displayed; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/element/:element_id/displayed URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to check if it is displayed JSON Parameters None Response Whether the element is displayed ( boolean ) See Also JSONWP Specification","title":"Displayed"},{"location":"commands/element/attributes/displayed/#is-element-displayed","text":"Determine if an element is currently displayed","title":"Is Element Displayed"},{"location":"commands/element/attributes/displayed/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); boolean isDisplayed = element.isDisplayed(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_displayed() // Javascript // webdriver.io example let isDisplayed = $( ~SomeAccessibilityId ).isDisplayed(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let isDisplayed = await element.isDisplayed(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).displayed? # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).displayed? // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); bool isDisplayed = element.Displayed;","title":"Example Usage"},{"location":"commands/element/attributes/displayed/#support","text":"","title":"Support"},{"location":"commands/element/attributes/displayed/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/displayed/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/displayed/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/displayed/#endpoint","text":"GET /session/:session_id/element/:element_id/displayed","title":"Endpoint"},{"location":"commands/element/attributes/displayed/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to check if it is displayed","title":"URL Parameters"},{"location":"commands/element/attributes/displayed/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/displayed/#response","text":"Whether the element is displayed ( boolean )","title":"Response"},{"location":"commands/element/attributes/displayed/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/enabled/","text":"Is Element Enabled Determine if an element is currently enabled Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); boolean isEnabled = element.isEnabled(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_enabled() // Javascript // webdriver.io example let isEnabled = $( ~SomeAccessibilityId ).isEnabled(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let isEnabled = await element.isEnabled(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).enabled? # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).enabled? // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); bool isEnabled = element.Enabled; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/element/:element_id/enabled URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to check if it is enabled JSON Parameters None Response Whether the element is enabled ( boolean ) See Also W3C Specification JSONWP Specification","title":"Enabled"},{"location":"commands/element/attributes/enabled/#is-element-enabled","text":"Determine if an element is currently enabled","title":"Is Element Enabled"},{"location":"commands/element/attributes/enabled/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); boolean isEnabled = element.isEnabled(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_enabled() // Javascript // webdriver.io example let isEnabled = $( ~SomeAccessibilityId ).isEnabled(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let isEnabled = await element.isEnabled(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).enabled? # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).enabled? // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); bool isEnabled = element.Enabled;","title":"Example Usage"},{"location":"commands/element/attributes/enabled/#support","text":"","title":"Support"},{"location":"commands/element/attributes/enabled/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/enabled/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/enabled/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/enabled/#endpoint","text":"GET /session/:session_id/element/:element_id/enabled","title":"Endpoint"},{"location":"commands/element/attributes/enabled/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to check if it is enabled","title":"URL Parameters"},{"location":"commands/element/attributes/enabled/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/enabled/#response","text":"Whether the element is enabled ( boolean )","title":"Response"},{"location":"commands/element/attributes/enabled/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/location-in-view/","text":"Get Element Location in View Determine an element's location on the screen once it has been scrolled into view (mainly an internal command and not supported by all clients) Example Usage // Not supported # Python element = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') element.location_in_view // Javascript // webdriver.io example let element = $( ~SomeAccessibilityId ) let location = driver.getElementLocationInView(element.elementId); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let location = await element.getLocationInView(); # Not supported # Not supported // Not supported Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All Python All Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All C# All HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/location_in_view URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the location-in-view of JSON Parameters None Response name type description x number X coordinate y number Y coordinate See Also JSONWP Specification","title":"Location in View"},{"location":"commands/element/attributes/location-in-view/#get-element-location-in-view","text":"Determine an element's location on the screen once it has been scrolled into view (mainly an internal command and not supported by all clients)","title":"Get Element Location in View"},{"location":"commands/element/attributes/location-in-view/#example-usage","text":"// Not supported # Python element = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') element.location_in_view // Javascript // webdriver.io example let element = $( ~SomeAccessibilityId ) let location = driver.getElementLocationInView(element.elementId); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let location = await element.getLocationInView(); # Not supported # Not supported // Not supported","title":"Example Usage"},{"location":"commands/element/attributes/location-in-view/#support","text":"","title":"Support"},{"location":"commands/element/attributes/location-in-view/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/location-in-view/#appium-clients","text":"Language Support Documentation Java All Python All Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All C# All","title":"Appium Clients"},{"location":"commands/element/attributes/location-in-view/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/location-in-view/#endpoint","text":"GET /session/:session_id/elements/:element_id/location_in_view","title":"Endpoint"},{"location":"commands/element/attributes/location-in-view/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the location-in-view of","title":"URL Parameters"},{"location":"commands/element/attributes/location-in-view/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/location-in-view/#response","text":"name type description x number X coordinate y number Y coordinate","title":"Response"},{"location":"commands/element/attributes/location-in-view/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/location/","text":"Get Element Location Determine an element's location on the page or screen Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); Point location = element.getLocation(); # Python location = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').location // Javascript // webdriver.io example let location = $( ~SomeAccessibilityId ).getLocation(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let location = await element.getLocation(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').location # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').location // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); Point location = element.Location; Description The point (0, 0) refers to the upper-left corner of the page. The element's coordinates are returned as a JSON object with x and y properties Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/location URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the location of JSON Parameters None Response name type description x number X coordinate y number Y coordinate See Also JSONWP Specification","title":"Location"},{"location":"commands/element/attributes/location/#get-element-location","text":"Determine an element's location on the page or screen","title":"Get Element Location"},{"location":"commands/element/attributes/location/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); Point location = element.getLocation(); # Python location = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').location // Javascript // webdriver.io example let location = $( ~SomeAccessibilityId ).getLocation(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let location = await element.getLocation(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').location # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').location // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); Point location = element.Location;","title":"Example Usage"},{"location":"commands/element/attributes/location/#description","text":"The point (0, 0) refers to the upper-left corner of the page. The element's coordinates are returned as a JSON object with x and y properties","title":"Description"},{"location":"commands/element/attributes/location/#support","text":"","title":"Support"},{"location":"commands/element/attributes/location/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/location/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/location/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/location/#endpoint","text":"GET /session/:session_id/elements/:element_id/location","title":"Endpoint"},{"location":"commands/element/attributes/location/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the location of","title":"URL Parameters"},{"location":"commands/element/attributes/location/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/location/#response","text":"name type description x number X coordinate y number Y coordinate","title":"Response"},{"location":"commands/element/attributes/location/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/name/","text":"Get Tag Name Get an element's tag name Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); String tagName = element.getTagName(); # Python tagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').tag_name // Javascript // webdriver.io example let tagName = $( ~SomeAccessibilityId ).getTagName(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let tagName = await element.getTagName(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').tag_name # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').tag_name // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); string tagName = element.TagName; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/name URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the name from JSON Parameters None Response The tag name of the element ( string ) See Also W3C Specification JSONWP Specification","title":"Name"},{"location":"commands/element/attributes/name/#get-tag-name","text":"Get an element's tag name","title":"Get Tag Name"},{"location":"commands/element/attributes/name/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); String tagName = element.getTagName(); # Python tagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').tag_name // Javascript // webdriver.io example let tagName = $( ~SomeAccessibilityId ).getTagName(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let tagName = await element.getTagName(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').tag_name # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').tag_name // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); string tagName = element.TagName;","title":"Example Usage"},{"location":"commands/element/attributes/name/#support","text":"","title":"Support"},{"location":"commands/element/attributes/name/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/name/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/name/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/name/#endpoint","text":"GET /session/:session_id/elements/:element_id/name","title":"Endpoint"},{"location":"commands/element/attributes/name/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the name from","title":"URL Parameters"},{"location":"commands/element/attributes/name/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/name/#response","text":"The tag name of the element ( string )","title":"Response"},{"location":"commands/element/attributes/name/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/page-index/","text":"Get Tag Name Get an element's tag name Example Usage // Java // TODO Java sample # Python // TODO Python sample // Javascript // webdriver.io example driver.getPageIndex() // wd example // TODO javascript_wd sample # Ruby # ruby_lib example // TODO Ruby sample # Not supported // C# // TODO C# sample Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/element/:element_id/pageIndex URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the name from JSON Parameters None Response The tag name of the element ( string ) See Also JSONWP Specification","title":"Page index"},{"location":"commands/element/attributes/page-index/#get-tag-name","text":"Get an element's tag name","title":"Get Tag Name"},{"location":"commands/element/attributes/page-index/#example-usage","text":"// Java // TODO Java sample # Python // TODO Python sample // Javascript // webdriver.io example driver.getPageIndex() // wd example // TODO javascript_wd sample # Ruby # ruby_lib example // TODO Ruby sample # Not supported // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/element/attributes/page-index/#support","text":"","title":"Support"},{"location":"commands/element/attributes/page-index/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/page-index/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/page-index/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/page-index/#endpoint","text":"GET /session/:session_id/element/:element_id/pageIndex","title":"Endpoint"},{"location":"commands/element/attributes/page-index/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the name from","title":"URL Parameters"},{"location":"commands/element/attributes/page-index/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/page-index/#response","text":"The tag name of the element ( string )","title":"Response"},{"location":"commands/element/attributes/page-index/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/rect/","text":"Get Element Rect Gets dimensions and coordinates of an element Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); Rectangle rect = element.getRect(); # Python element = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') element.rect // Javascript // webdriver.io example let element = $( ~SomeAccessibilityId ) let rect = driver.getElementRect(element.elementId); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let rect = await element.getRect(); # Ruby # ruby_lib example element = find_element :accessibility_id, SomeAccessibilityID element.rect # ruby_lib_core example element = @driver.find_element :accessibility_id, SomeAccessibilityID element.rect // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); Rectangle rect = element.Rect; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All Javascript (WebdriverIO) All Javascript (WD) All Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/rect URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the rect of JSON Parameters None Response name type description x number X coordinate y number Y coordinate height number Height of the bounding rectangle width number Width of the bounding rectangle See Also W3C Specification","title":"Rect"},{"location":"commands/element/attributes/rect/#get-element-rect","text":"Gets dimensions and coordinates of an element","title":"Get Element Rect"},{"location":"commands/element/attributes/rect/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); Rectangle rect = element.getRect(); # Python element = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') element.rect // Javascript // webdriver.io example let element = $( ~SomeAccessibilityId ) let rect = driver.getElementRect(element.elementId); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let rect = await element.getRect(); # Ruby # ruby_lib example element = find_element :accessibility_id, SomeAccessibilityID element.rect # ruby_lib_core example element = @driver.find_element :accessibility_id, SomeAccessibilityID element.rect // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); Rectangle rect = element.Rect;","title":"Example Usage"},{"location":"commands/element/attributes/rect/#support","text":"","title":"Support"},{"location":"commands/element/attributes/rect/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/rect/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All Javascript (WebdriverIO) All Javascript (WD) All Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/rect/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/rect/#endpoint","text":"GET /session/:session_id/elements/:element_id/rect","title":"Endpoint"},{"location":"commands/element/attributes/rect/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the rect of","title":"URL Parameters"},{"location":"commands/element/attributes/rect/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/rect/#response","text":"name type description x number X coordinate y number Y coordinate height number Height of the bounding rectangle width number Width of the bounding rectangle","title":"Response"},{"location":"commands/element/attributes/rect/#see-also","text":"W3C Specification","title":"See Also"},{"location":"commands/element/attributes/replace-value/","text":"Replace the value Replace the value to element directly Example Usage // Java // TODO Java sample # Python self.driver.set_value('some') // Javascript // webdriver.io example let element = $( ~SomeAccessibilityId ) driver.replaceValue(element.elementId, 'some') // wd example // TODO JavaScript sample # Ruby # ruby_lib example element = find_element :accessibility_id, SomeAccessibilityID replace_value element, 'some' # ruby_lib_core example element = @driver.find_element :accessibility_id, SomeAccessibilityID @driver.replace_value element, 'some' // C# // TODO C# sample Description Replace the value to element directly. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/element/:element_id/replace_value URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the text from JSON Parameters name type description value array string (MJSONWP) The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed text string (W3C) A single string to be typed Response null See Also JSONWP Specification","title":"Replace value"},{"location":"commands/element/attributes/replace-value/#replace-the-value","text":"Replace the value to element directly","title":"Replace the value"},{"location":"commands/element/attributes/replace-value/#example-usage","text":"// Java // TODO Java sample # Python self.driver.set_value('some') // Javascript // webdriver.io example let element = $( ~SomeAccessibilityId ) driver.replaceValue(element.elementId, 'some') // wd example // TODO JavaScript sample # Ruby # ruby_lib example element = find_element :accessibility_id, SomeAccessibilityID replace_value element, 'some' # ruby_lib_core example element = @driver.find_element :accessibility_id, SomeAccessibilityID @driver.replace_value element, 'some' // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/element/attributes/replace-value/#description","text":"Replace the value to element directly.","title":"Description"},{"location":"commands/element/attributes/replace-value/#support","text":"","title":"Support"},{"location":"commands/element/attributes/replace-value/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/replace-value/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/replace-value/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/replace-value/#endpoint","text":"POST /session/:session_id/appium/element/:element_id/replace_value","title":"Endpoint"},{"location":"commands/element/attributes/replace-value/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the text from","title":"URL Parameters"},{"location":"commands/element/attributes/replace-value/#json-parameters","text":"name type description value array string (MJSONWP) The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed text string (W3C) A single string to be typed","title":"JSON Parameters"},{"location":"commands/element/attributes/replace-value/#response","text":"null","title":"Response"},{"location":"commands/element/attributes/replace-value/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/selected/","text":"Is Element Selected Determine if a form or form-like element (checkbox, select, etc...) is selected Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); boolean isSelected = element.isSelected(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_selected() // Javascript // webdriver.io example let isSelected = $( ~SomeAccessibilityId ).isSelected(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let isSelected = await element.isSelected(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).selected? # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).selected? // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); bool isSelected = element.Selected; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/element/:element_id/selected URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to check if it is selected JSON Parameters None Response Whether the element is selected ( boolean ) See Also W3C Specification JSONWP Specification","title":"Selected"},{"location":"commands/element/attributes/selected/#is-element-selected","text":"Determine if a form or form-like element (checkbox, select, etc...) is selected","title":"Is Element Selected"},{"location":"commands/element/attributes/selected/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); boolean isSelected = element.isSelected(); # Python self.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_selected() // Javascript // webdriver.io example let isSelected = $( ~SomeAccessibilityId ).isSelected(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let isSelected = await element.isSelected(); # Ruby # ruby_lib example find_element(:accessibility_id, SomeAccessibilityID ).selected? # ruby_lib_core example @driver.find_element(:accessibility_id, SomeAccessibilityID ).selected? // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); bool isSelected = element.Selected;","title":"Example Usage"},{"location":"commands/element/attributes/selected/#support","text":"","title":"Support"},{"location":"commands/element/attributes/selected/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/selected/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/selected/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/selected/#endpoint","text":"GET /session/:session_id/element/:element_id/selected","title":"Endpoint"},{"location":"commands/element/attributes/selected/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to check if it is selected","title":"URL Parameters"},{"location":"commands/element/attributes/selected/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/selected/#response","text":"Whether the element is selected ( boolean )","title":"Response"},{"location":"commands/element/attributes/selected/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/size/","text":"Get Element Size Determine an element's size in pixels Example Usage // Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); Dimension elementSize = element.getSize(); # Python size = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').size // Javascript // webdriver.io example let size = $( ~SomeAccessibilityId ).getSize(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let size = await element.getSize(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').size # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').size // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); Size elementSize = element.Size; Description The size will be returned as an object with width and height properties. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/elements/:element_id/size URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the size of JSON Parameters None Response name type description width number Width of the element height number Height of the element See Also JSONWP Specification","title":"Size"},{"location":"commands/element/attributes/size/#get-element-size","text":"Determine an element's size in pixels","title":"Get Element Size"},{"location":"commands/element/attributes/size/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID ); Dimension elementSize = element.getSize(); # Python size = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').size // Javascript // webdriver.io example let size = $( ~SomeAccessibilityId ).getSize(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); let size = await element.getSize(); # Ruby # ruby_lib example find_element(:accessibility_id, 'SomeAccessibilityID').size # ruby_lib_core example @driver.find_element(:accessibility_id, 'SomeAccessibilityID').size // C# var element = driver.FindElementByAccessibilityId( SomeAccessibilityID ); Size elementSize = element.Size;","title":"Example Usage"},{"location":"commands/element/attributes/size/#description","text":"The size will be returned as an object with width and height properties.","title":"Description"},{"location":"commands/element/attributes/size/#support","text":"","title":"Support"},{"location":"commands/element/attributes/size/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/size/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/size/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/size/#endpoint","text":"GET /session/:session_id/elements/:element_id/size","title":"Endpoint"},{"location":"commands/element/attributes/size/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the size of","title":"URL Parameters"},{"location":"commands/element/attributes/size/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/size/#response","text":"name type description width number Width of the element height number Height of the element","title":"Response"},{"location":"commands/element/attributes/size/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/attributes/text/","text":"Get Element Text Returns visible text for element Example Usage // Java MobileElement element = (MobileElement) driver.findElementByClassName( SomeClassName ); String elText = element.getText(); # Python el = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') text = el.text // Javascript // webdriver.io example $( ~SomeAccessibilityId ).getText(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.text(); # Ruby # ruby_lib example element = find_element :accessibility_id, SomeAccessibilityID element.text # ruby_lib_core example element = @driver.find_element :accessibility_id, SomeAccessibilityID element.text // C# var element = driver.FindElementByClassName( SomeClassName ); string elText = element.Text; Description Returns the visible text for the element. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/element/:element_id/text URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to get the text from JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Text"},{"location":"commands/element/attributes/text/#get-element-text","text":"Returns visible text for element","title":"Get Element Text"},{"location":"commands/element/attributes/text/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByClassName( SomeClassName ); String elText = element.getText(); # Python el = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') text = el.text // Javascript // webdriver.io example $( ~SomeAccessibilityId ).getText(); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.text(); # Ruby # ruby_lib example element = find_element :accessibility_id, SomeAccessibilityID element.text # ruby_lib_core example element = @driver.find_element :accessibility_id, SomeAccessibilityID element.text // C# var element = driver.FindElementByClassName( SomeClassName ); string elText = element.Text;","title":"Example Usage"},{"location":"commands/element/attributes/text/#description","text":"Returns the visible text for the element.","title":"Description"},{"location":"commands/element/attributes/text/#support","text":"","title":"Support"},{"location":"commands/element/attributes/text/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/attributes/text/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/attributes/text/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/attributes/text/#endpoint","text":"GET /session/:session_id/element/:element_id/text","title":"Endpoint"},{"location":"commands/element/attributes/text/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to get the text from","title":"URL Parameters"},{"location":"commands/element/attributes/text/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/attributes/text/#response","text":"null","title":"Response"},{"location":"commands/element/attributes/text/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/other/","text":"Appium API Documentation ### /docs/en/commands/element/other Submit Active Element Equals Element","title":"Home"},{"location":"commands/element/other/#appium-api-documentation","text":"### /docs/en/commands/element/other Submit Active Element Equals Element","title":"Appium API Documentation"},{"location":"commands/element/other/active/","text":"Get Active Element Gets the active element of the current session Example Usage // Java WebElement currentElement = driver.switchTo().activeElement(); # Python element = driver.switch_to.active_element // Javascript // webdriver.io example driver.getActiveElement(); // wd example let element = await driver.active(); # Ruby # ruby_lib example switch_to.active_element # ruby_lib_core example @driver.switch_to.active_element // C# IWebElement currentElement = driver.SwitchTo().ActiveElement(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint 'GET'(W3C), 'POST'(JSONWP) /session/:session_id/element/active URL Parameters None JSON Parameters None Response A JSON object for the located element ( object ) See Also W3C Specification JSONWP Specification","title":"Active Element"},{"location":"commands/element/other/active/#get-active-element","text":"Gets the active element of the current session","title":"Get Active Element"},{"location":"commands/element/other/active/#example-usage","text":"// Java WebElement currentElement = driver.switchTo().activeElement(); # Python element = driver.switch_to.active_element // Javascript // webdriver.io example driver.getActiveElement(); // wd example let element = await driver.active(); # Ruby # ruby_lib example switch_to.active_element # ruby_lib_core example @driver.switch_to.active_element // C# IWebElement currentElement = driver.SwitchTo().ActiveElement();","title":"Example Usage"},{"location":"commands/element/other/active/#support","text":"","title":"Support"},{"location":"commands/element/other/active/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/element/other/active/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/other/active/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/other/active/#endpoint","text":"'GET'(W3C), 'POST'(JSONWP) /session/:session_id/element/active","title":"Endpoint"},{"location":"commands/element/other/active/#url-parameters","text":"None","title":"URL Parameters"},{"location":"commands/element/other/active/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/other/active/#response","text":"A JSON object for the located element ( object )","title":"Response"},{"location":"commands/element/other/active/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/element/other/equals-element/","text":"Are Elements Equal Test if two element IDs refer to the same element Example Usage // Java // Overrides the Java Object .equals method MobileElement elementOne = (MobileElement) driver.findElementByClassName( SomeClassName ); MobileElement elementTwo = (MobileElement) driver.findElementByClassName( SomeOtherClassName ); boolean isEqual = elementOne.equals(elementTwo); # Python # TODO Python sample // Javascript // webdriver.io example let elementOne = $( someClass ); let elementTwo = $( someOtherClass ); let isEqual = elementOne.isEqual(elementTwo); // wd example let elementOne = await driver.elementByClassName( someClass ); let elementTwo = await driver.elementByClassName( someOtherClass ); let isEqual = await elementOne.equalsElement(elementTwo); # Ruby # ruby_lib example element1 = find_element :class_name, someClass element2 = find_element :class_name, someOtherClass element1 == element2 # ruby_lib_core example element1 = @driver.find_element :class_name, someClass element2 = @driver.find_element :class_name, someOtherClass element1 == element2 // C# var elementOne = driver.FindElementByClassName( SomeClassName ); var elementTwo = driver.FindElementByClassName( SomeOtherClassName ); bool isEqual = elementOne.Equals(elementTwo); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/element/:element_id/equals/:other_element_id URL Parameters name description session_id ID of the session to route the command to element_id ID of the element element_id ID of the other element to check if they're equal JSON Parameters None Response Whether the two ID's refer to the same element ( boolean ) See Also JSONWP Specification","title":"Equals Element"},{"location":"commands/element/other/equals-element/#are-elements-equal","text":"Test if two element IDs refer to the same element","title":"Are Elements Equal"},{"location":"commands/element/other/equals-element/#example-usage","text":"// Java // Overrides the Java Object .equals method MobileElement elementOne = (MobileElement) driver.findElementByClassName( SomeClassName ); MobileElement elementTwo = (MobileElement) driver.findElementByClassName( SomeOtherClassName ); boolean isEqual = elementOne.equals(elementTwo); # Python # TODO Python sample // Javascript // webdriver.io example let elementOne = $( someClass ); let elementTwo = $( someOtherClass ); let isEqual = elementOne.isEqual(elementTwo); // wd example let elementOne = await driver.elementByClassName( someClass ); let elementTwo = await driver.elementByClassName( someOtherClass ); let isEqual = await elementOne.equalsElement(elementTwo); # Ruby # ruby_lib example element1 = find_element :class_name, someClass element2 = find_element :class_name, someOtherClass element1 == element2 # ruby_lib_core example element1 = @driver.find_element :class_name, someClass element2 = @driver.find_element :class_name, someOtherClass element1 == element2 // C# var elementOne = driver.FindElementByClassName( SomeClassName ); var elementTwo = driver.FindElementByClassName( SomeOtherClassName ); bool isEqual = elementOne.Equals(elementTwo);","title":"Example Usage"},{"location":"commands/element/other/equals-element/#support","text":"","title":"Support"},{"location":"commands/element/other/equals-element/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/other/equals-element/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/other/equals-element/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/other/equals-element/#endpoint","text":"GET /session/:session_id/element/:element_id/equals/:other_element_id","title":"Endpoint"},{"location":"commands/element/other/equals-element/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element element_id ID of the other element to check if they're equal","title":"URL Parameters"},{"location":"commands/element/other/equals-element/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/other/equals-element/#response","text":"Whether the two ID's refer to the same element ( boolean )","title":"Response"},{"location":"commands/element/other/equals-element/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/element/other/submit/","text":"Submit Form Submit a FORM element Example Usage // Java MobileElement element = (MobileElement) driver.findElementByClassName( SomeClassName ); element.submit(); # Python el = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') el.submit(); // Javascript // webdriver.io example let formElement = $( ~SomeAccessibilityId ); driver.elementSubmit(formElement.elementId); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.submit(); # Ruby # ruby_lib example element = find_element :class_name, someClass element.submit element # ruby_lib_core example element = @driver.find_element :class_name, someClass element.submit element // C# var element = driver.FindElementByClassName( SomeClassName ); element.Submit(); Description The submit command may also be applied to any element that is a descendant of a FORM element (Web only) Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/element/:element_id/submit URL Parameters name description session_id ID of the session to route the command to element_id ID of the element to submit JSON Parameters None Response null See Also JSONWP Specification","title":"Submit"},{"location":"commands/element/other/submit/#submit-form","text":"Submit a FORM element","title":"Submit Form"},{"location":"commands/element/other/submit/#example-usage","text":"// Java MobileElement element = (MobileElement) driver.findElementByClassName( SomeClassName ); element.submit(); # Python el = self.driver.find_element_by_accessibility_id('SomeAccessibilityID') el.submit(); // Javascript // webdriver.io example let formElement = $( ~SomeAccessibilityId ); driver.elementSubmit(formElement.elementId); // wd example let element = await driver.elementByAccessibilityId( SomeAccessibilityID ); await element.submit(); # Ruby # ruby_lib example element = find_element :class_name, someClass element.submit element # ruby_lib_core example element = @driver.find_element :class_name, someClass element.submit element // C# var element = driver.FindElementByClassName( SomeClassName ); element.Submit();","title":"Example Usage"},{"location":"commands/element/other/submit/#description","text":"The submit command may also be applied to any element that is a descendant of a FORM element (Web only)","title":"Description"},{"location":"commands/element/other/submit/#support","text":"","title":"Support"},{"location":"commands/element/other/submit/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/element/other/submit/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/element/other/submit/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/element/other/submit/#endpoint","text":"POST /session/:session_id/element/:element_id/submit","title":"Endpoint"},{"location":"commands/element/other/submit/#url-parameters","text":"name description session_id ID of the session to route the command to element_id ID of the element to submit","title":"URL Parameters"},{"location":"commands/element/other/submit/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/element/other/submit/#response","text":"null","title":"Response"},{"location":"commands/element/other/submit/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/","text":"Appium API Documentation ### /docs/en/commands/interactions Mouse Move To Click Double Click Button Down Button Up Touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform W3C Actions","title":"Home"},{"location":"commands/interactions/#appium-api-documentation","text":"### /docs/en/commands/interactions Mouse Move To Click Double Click Button Down Button Up Touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform W3C Actions","title":"Appium API Documentation"},{"location":"commands/interactions/actions/","text":"Actions Perform a chain or multiple chains of keyboard and pointer (touch, mouse, stylus) actions Example Usage // Java WebElement source = (MobileElement) driver.findElementsByAccessibilityId( SomeAccessibilityID ); WebElement target = (MobileElement) driver.findElementsByAccessibilityId( SomeOtherAccessibilityID ); Point source = dragMe.getCenter(); Point target = driver.findElementByAccessibilityId( dropzone ).getCenter(); PointerInput finger = new PointerInput(PointerInput.Kind.TOUCH, finger ); Sequence dragNDrop = new Sequence(finger, 1); dragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(0), PointerInput.Origin.viewport(), source.x, source.y)); dragNDrop.addAction(finger.createPointerDown(PointerInput.MouseButton.LEFT.asArg())); dragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(700), PointerInput.Origin.viewport(),target.x, target.y)); dragNDrop.addAction(finger.createPointerUp(PointerInput.MouseButton.LEFT.asArg())); driver.perform(Arrays.asList(dragNDrop)); # Python element = driver.find_element_by_accessibility_id( elId ) actions = ActionChains(driver) actions.move_to_element(element) actions.click(hidden_submenu) actions.perform() // Javascript // webdriver.io example // Example: expressing a 1-second pinch-and-zoom // with a 500ms wait after the fingers first touch: driver.performActions([{ type : pointer , id : finger1 , parameters : { pointerType : touch }, actions : [ { type : pointerMove , duration : 0, x : 100, y : 100}, { type : pointerDown , button : 0}, { type : pause , duration : 500}, { type : pointerMove , duration : 1000, origin : pointer , x : -50, y : 0}, { type : pointerUp , button : 0} ] }, { type : pointer , id : finger2 , parameters : { pointerType : touch }, actions : [ { type : pointerMove , duration : 0, x : 100, y : 100}, { type : pointerDown , button : 0}, { type : pause , duration : 500}, { type : pointerMove , duration : 1000, origin : pointer , x : 50, y : 0}, { type : pointerUp , button : 0} ] }]); // release an action driver.releaseActions(); // wd example // Performs a 'pinch-and-zoom' var actions = new wd.W3CActions(driver); var touchInput = actions.addTouchInput(); touchInput.pointerMove({duration: 0, x: 100, y: 100}); touchInput.pointerDown({button: 0}); touchInput.pause({duration: 500}); touchInput.pointerMove({duration: 1000, origin: 'pointer', x: -50, y: 100}); touchInput.pointerUp({button: 0}); var secondTouchInput = actions.addTouchInput(); secondTouchInput.pointerMove({duration: 0, x: 200, y: 200}); secondTouchInput.pointerDown({button: 0}); secondTouchInput.pause({duration: 300}); secondTouchInput.pointerMove({duration: 1000, origin: 'pointer', x: 50, y: 100}); secondTouchInput.pointerUp({button: 0}); await actions.perform(); // Releases any previously run actions (e.g.: if a key is 'down' because of /actions, releases it using key up) await driver.releaseW3CActions(); # Ruby # ruby_lib example # Send keys to an element # Build Single action chain action_builder = action keyboard = action_builder.key_inputs el = find_element(id: some_id ) action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform # Build multiple action chains # Example: expressing a 1-second pinch-and-zoom # with a 500ms wait after the fingers first touch: f1 = action.add_pointer_input(:touch, 'finger1') f1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_down(:left) f1.create_pause(0.5) f1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_up(:left) f2 = action.add_pointer_input(:touch, 'finger2') f2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_down(:left) f2.create_pause(0.5) f2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_up(:left) perform_actions [f1, f2] # ruby_lib_core example # Send keys to an element # Build Single action chain action_builder = @driver.action keyboard = action_builder.key_inputs el = @driver.find_element(id: some_id ) @driver.action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform # Build multiple action chains # Example: expressing a 1-second pinch-and-zoom # with a 500ms wait after the fingers first touch: f1 = @driver.action.add_pointer_input(:touch, 'finger1') f1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_down(:left) f1.create_pause(0.5) f1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_up(:left) f2 = @driver.action.add_pointer_input(:touch, 'finger2') f2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_down(:left) f2.create_pause(0.5) f2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_up(:left) @driver.perform_actions [f1, f2] // C# var inputDevice = new PointerInputDevice(PointerKind.Touch); var actionSequence = new ActionSequence(inputDevice, 0); actionSequence.AddAction(inputDevice.CreatePointerMove(element)); actionSequence.AddAction(inputDevice.CreatePointerDown(PointerButton.TouchContact)); actionSequence.AddAction(inputDevice.CreatePause(TimeSpan.FromSeconds(1))); actionSequence.AddAction(inputDevice.CreatePointerUp(PointerButton.TouchContact)); driver.PerformActions(new List ActionSequence {actionSequence}); Description input source: Represents an input device (pointer or key) that a series of actions are dispatched to. The input source has a unique ID. action: An action that is dispatched to an input source. For a keyboard source, this can be 'keyDown' or 'keyUp'. For a pointer event this can be 'pointerMove', 'pointerDown', or 'pointerUp'. 'pause' events can also be sent to the device. The Actions API takes a list of input sources and executes each 'tick'. A 'tick' is a slice of an action chain, so if you have two input sources, the first 'tick' is the 0-indexed action, the second 'tick' is the 1-indexed action, etc.... All of the actions per tick are executed concurrently. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:sessionId/actions URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description actions array array An array of input sources actions[$INDEX] object An object that represents an input source actions[$INDEX].type string The type of input source. Can be 'pointer', 'key' or 'null' actions[$INDEX].id string Unique identifier of the input device which is used for current and future actions actions[$INDEX].parameters object (optional) Set parameters for the input source. Required for 'pointer' inputs actions[$INDEX].parameters.pointerType string Type of pointer. Can be 'touch', 'mouse' or 'pen' actions[$INDEX].actions array object A list of actions to perform on the input source actions[$INDEX].actions array object A list of actions to perform on the input source actions[$INDEX].actions[$INDEX] object The action to perform on the input source actions[$INDEX].actions[$INDEX].type string The type of action. For any input source it can be 'pause'. For 'pointer' input source 'pointerMove', 'pointerUp' or 'pointerDown'. For 'key' it can be 'keyDown' or 'keyUp' actions[$INDEX].actions[$INDEX].value string For a 'keyUp' or 'keyDown' action thevalue to send to the keyboard. Should be a one-character string (\"s\", \"\\uE009\") actions[$INDEX].actions[$INDEX].duration number How long to perform the action in 'ms'. Only applicable to 'pause' and 'pointerMove'. actions[$INDEX].actions[$INDEX].origin string|object For 'pointerMove', this tells the input source what x,y are relative to. Can be 'viewport', 'pointer' or {'element-6066-11e4-a52e-4f735466cecf' ' '} actions[$INDEX].actions[$INDEX].x number X coordinate of pointer move event actions[$INDEX].actions[$INDEX].y number Y coordinate of pointer move event Response null See Also W3C Specification","title":"W3C Actions"},{"location":"commands/interactions/actions/#actions","text":"Perform a chain or multiple chains of keyboard and pointer (touch, mouse, stylus) actions","title":"Actions"},{"location":"commands/interactions/actions/#example-usage","text":"// Java WebElement source = (MobileElement) driver.findElementsByAccessibilityId( SomeAccessibilityID ); WebElement target = (MobileElement) driver.findElementsByAccessibilityId( SomeOtherAccessibilityID ); Point source = dragMe.getCenter(); Point target = driver.findElementByAccessibilityId( dropzone ).getCenter(); PointerInput finger = new PointerInput(PointerInput.Kind.TOUCH, finger ); Sequence dragNDrop = new Sequence(finger, 1); dragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(0), PointerInput.Origin.viewport(), source.x, source.y)); dragNDrop.addAction(finger.createPointerDown(PointerInput.MouseButton.LEFT.asArg())); dragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(700), PointerInput.Origin.viewport(),target.x, target.y)); dragNDrop.addAction(finger.createPointerUp(PointerInput.MouseButton.LEFT.asArg())); driver.perform(Arrays.asList(dragNDrop)); # Python element = driver.find_element_by_accessibility_id( elId ) actions = ActionChains(driver) actions.move_to_element(element) actions.click(hidden_submenu) actions.perform() // Javascript // webdriver.io example // Example: expressing a 1-second pinch-and-zoom // with a 500ms wait after the fingers first touch: driver.performActions([{ type : pointer , id : finger1 , parameters : { pointerType : touch }, actions : [ { type : pointerMove , duration : 0, x : 100, y : 100}, { type : pointerDown , button : 0}, { type : pause , duration : 500}, { type : pointerMove , duration : 1000, origin : pointer , x : -50, y : 0}, { type : pointerUp , button : 0} ] }, { type : pointer , id : finger2 , parameters : { pointerType : touch }, actions : [ { type : pointerMove , duration : 0, x : 100, y : 100}, { type : pointerDown , button : 0}, { type : pause , duration : 500}, { type : pointerMove , duration : 1000, origin : pointer , x : 50, y : 0}, { type : pointerUp , button : 0} ] }]); // release an action driver.releaseActions(); // wd example // Performs a 'pinch-and-zoom' var actions = new wd.W3CActions(driver); var touchInput = actions.addTouchInput(); touchInput.pointerMove({duration: 0, x: 100, y: 100}); touchInput.pointerDown({button: 0}); touchInput.pause({duration: 500}); touchInput.pointerMove({duration: 1000, origin: 'pointer', x: -50, y: 100}); touchInput.pointerUp({button: 0}); var secondTouchInput = actions.addTouchInput(); secondTouchInput.pointerMove({duration: 0, x: 200, y: 200}); secondTouchInput.pointerDown({button: 0}); secondTouchInput.pause({duration: 300}); secondTouchInput.pointerMove({duration: 1000, origin: 'pointer', x: 50, y: 100}); secondTouchInput.pointerUp({button: 0}); await actions.perform(); // Releases any previously run actions (e.g.: if a key is 'down' because of /actions, releases it using key up) await driver.releaseW3CActions(); # Ruby # ruby_lib example # Send keys to an element # Build Single action chain action_builder = action keyboard = action_builder.key_inputs el = find_element(id: some_id ) action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform # Build multiple action chains # Example: expressing a 1-second pinch-and-zoom # with a 500ms wait after the fingers first touch: f1 = action.add_pointer_input(:touch, 'finger1') f1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_down(:left) f1.create_pause(0.5) f1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_up(:left) f2 = action.add_pointer_input(:touch, 'finger2') f2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_down(:left) f2.create_pause(0.5) f2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_up(:left) perform_actions [f1, f2] # ruby_lib_core example # Send keys to an element # Build Single action chain action_builder = @driver.action keyboard = action_builder.key_inputs el = @driver.find_element(id: some_id ) @driver.action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform # Build multiple action chains # Example: expressing a 1-second pinch-and-zoom # with a 500ms wait after the fingers first touch: f1 = @driver.action.add_pointer_input(:touch, 'finger1') f1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_down(:left) f1.create_pause(0.5) f1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f1.create_pointer_up(:left) f2 = @driver.action.add_pointer_input(:touch, 'finger2') f2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_down(:left) f2.create_pause(0.5) f2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT) f2.create_pointer_up(:left) @driver.perform_actions [f1, f2] // C# var inputDevice = new PointerInputDevice(PointerKind.Touch); var actionSequence = new ActionSequence(inputDevice, 0); actionSequence.AddAction(inputDevice.CreatePointerMove(element)); actionSequence.AddAction(inputDevice.CreatePointerDown(PointerButton.TouchContact)); actionSequence.AddAction(inputDevice.CreatePause(TimeSpan.FromSeconds(1))); actionSequence.AddAction(inputDevice.CreatePointerUp(PointerButton.TouchContact)); driver.PerformActions(new List ActionSequence {actionSequence});","title":"Example Usage"},{"location":"commands/interactions/actions/#description","text":"input source: Represents an input device (pointer or key) that a series of actions are dispatched to. The input source has a unique ID. action: An action that is dispatched to an input source. For a keyboard source, this can be 'keyDown' or 'keyUp'. For a pointer event this can be 'pointerMove', 'pointerDown', or 'pointerUp'. 'pause' events can also be sent to the device. The Actions API takes a list of input sources and executes each 'tick'. A 'tick' is a slice of an action chain, so if you have two input sources, the first 'tick' is the 0-indexed action, the second 'tick' is the 1-indexed action, etc.... All of the actions per tick are executed concurrently.","title":"Description"},{"location":"commands/interactions/actions/#support","text":"","title":"Support"},{"location":"commands/interactions/actions/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation None None None Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/actions/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/actions/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/actions/#endpoint","text":"POST /session/:sessionId/actions","title":"Endpoint"},{"location":"commands/interactions/actions/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/actions/#json-parameters","text":"name type description actions array array An array of input sources actions[$INDEX] object An object that represents an input source actions[$INDEX].type string The type of input source. Can be 'pointer', 'key' or 'null' actions[$INDEX].id string Unique identifier of the input device which is used for current and future actions actions[$INDEX].parameters object (optional) Set parameters for the input source. Required for 'pointer' inputs actions[$INDEX].parameters.pointerType string Type of pointer. Can be 'touch', 'mouse' or 'pen' actions[$INDEX].actions array object A list of actions to perform on the input source actions[$INDEX].actions array object A list of actions to perform on the input source actions[$INDEX].actions[$INDEX] object The action to perform on the input source actions[$INDEX].actions[$INDEX].type string The type of action. For any input source it can be 'pause'. For 'pointer' input source 'pointerMove', 'pointerUp' or 'pointerDown'. For 'key' it can be 'keyDown' or 'keyUp' actions[$INDEX].actions[$INDEX].value string For a 'keyUp' or 'keyDown' action thevalue to send to the keyboard. Should be a one-character string (\"s\", \"\\uE009\") actions[$INDEX].actions[$INDEX].duration number How long to perform the action in 'ms'. Only applicable to 'pause' and 'pointerMove'. actions[$INDEX].actions[$INDEX].origin string|object For 'pointerMove', this tells the input source what x,y are relative to. Can be 'viewport', 'pointer' or {'element-6066-11e4-a52e-4f735466cecf' ' '} actions[$INDEX].actions[$INDEX].x number X coordinate of pointer move event actions[$INDEX].actions[$INDEX].y number Y coordinate of pointer move event","title":"JSON Parameters"},{"location":"commands/interactions/actions/#response","text":"null","title":"Response"},{"location":"commands/interactions/actions/#see-also","text":"W3C Specification","title":"See Also"},{"location":"commands/interactions/mouse/","text":"Appium API Documentation ### /docs/en/commands/interactions/mouse Move To Click Double Click Button Down Button Up","title":"Home"},{"location":"commands/interactions/mouse/#appium-api-documentation","text":"### /docs/en/commands/interactions/mouse Move To Click Double Click Button Down Button Up","title":"Appium API Documentation"},{"location":"commands/interactions/mouse/button-down/","text":"Button Down Click and hold the left mouse button at the current mouse coordinates Example Usage // Java Actions action = new Actions(driver); action.moveTo(element); action.clickAndHold(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.click_and_hold() actions.perform() // Javascript // webdriver.io example driver.moveTo(element); driver.buttonDown(); // wd example await driver.moveTo(element); await driver.buttonDown(); # Ruby # ruby_lib example action.move_to(element).click_and_hold.perform # ruby_lib_core example @driver.action.move_to(element).click_and_hold.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.ClickAndHold(); action.Perform(); Description Note that the next mouse-related command that should follow is buttonup . Any other mouse command (such as click or another call to buttondown) will yield undefined behavior Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/buttondown URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description button number Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified Response null See Also JSONWP Specification","title":"Button Down"},{"location":"commands/interactions/mouse/button-down/#button-down","text":"Click and hold the left mouse button at the current mouse coordinates","title":"Button Down"},{"location":"commands/interactions/mouse/button-down/#example-usage","text":"// Java Actions action = new Actions(driver); action.moveTo(element); action.clickAndHold(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.click_and_hold() actions.perform() // Javascript // webdriver.io example driver.moveTo(element); driver.buttonDown(); // wd example await driver.moveTo(element); await driver.buttonDown(); # Ruby # ruby_lib example action.move_to(element).click_and_hold.perform # ruby_lib_core example @driver.action.move_to(element).click_and_hold.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.ClickAndHold(); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/mouse/button-down/#description","text":"Note that the next mouse-related command that should follow is buttonup . Any other mouse command (such as click or another call to buttondown) will yield undefined behavior","title":"Description"},{"location":"commands/interactions/mouse/button-down/#support","text":"","title":"Support"},{"location":"commands/interactions/mouse/button-down/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/mouse/button-down/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/mouse/button-down/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/mouse/button-down/#endpoint","text":"POST /session/:session_id/buttondown","title":"Endpoint"},{"location":"commands/interactions/mouse/button-down/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/mouse/button-down/#json-parameters","text":"name type description button number Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified","title":"JSON Parameters"},{"location":"commands/interactions/mouse/button-down/#response","text":"null","title":"Response"},{"location":"commands/interactions/mouse/button-down/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/mouse/button-up/","text":"Button Up Releases the mouse button previously held Example Usage // Java Actions action = new Actions(driver); action.moveTo(element); action.clickAndHold(); action.moveTo(element, 10, 10); action.release(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.click_and_hold() actions.move_to_element(element, 10, 10) action.release(); actions.perform() // Javascript // webdriver.io example driver.moveTo(element); driver.buttonDown(); driver.moveTo(element, 10, 10); driver.buttonUp(); // wd example await driver.moveTo(element); await driver.buttonDown(); await driver.moveTo(element, 10, 10); await driver.buttonUp(); # Ruby # ruby_lib example action.click_and_hold(el).move_to(el, 10, 10).release.perform # ruby_lib_core example @driver.action.click_and_hold(el).move_to(el, 10, 10).release.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.ClickAndHold(); action.MoveToElement(element, 10, 10); action.Release(); action.Perform(); Description Must be called once for every buttondown command issued. See the note in click and buttondown about implications of out-of-order commands. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/buttonup URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description button number Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified Response null See Also JSONWP Specification","title":"Button Up"},{"location":"commands/interactions/mouse/button-up/#button-up","text":"Releases the mouse button previously held","title":"Button Up"},{"location":"commands/interactions/mouse/button-up/#example-usage","text":"// Java Actions action = new Actions(driver); action.moveTo(element); action.clickAndHold(); action.moveTo(element, 10, 10); action.release(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.click_and_hold() actions.move_to_element(element, 10, 10) action.release(); actions.perform() // Javascript // webdriver.io example driver.moveTo(element); driver.buttonDown(); driver.moveTo(element, 10, 10); driver.buttonUp(); // wd example await driver.moveTo(element); await driver.buttonDown(); await driver.moveTo(element, 10, 10); await driver.buttonUp(); # Ruby # ruby_lib example action.click_and_hold(el).move_to(el, 10, 10).release.perform # ruby_lib_core example @driver.action.click_and_hold(el).move_to(el, 10, 10).release.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.ClickAndHold(); action.MoveToElement(element, 10, 10); action.Release(); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/mouse/button-up/#description","text":"Must be called once for every buttondown command issued. See the note in click and buttondown about implications of out-of-order commands.","title":"Description"},{"location":"commands/interactions/mouse/button-up/#support","text":"","title":"Support"},{"location":"commands/interactions/mouse/button-up/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/mouse/button-up/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/mouse/button-up/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/mouse/button-up/#endpoint","text":"POST /session/:session_id/buttonup","title":"Endpoint"},{"location":"commands/interactions/mouse/button-up/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/mouse/button-up/#json-parameters","text":"name type description button number Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified","title":"JSON Parameters"},{"location":"commands/interactions/mouse/button-up/#response","text":"null","title":"Response"},{"location":"commands/interactions/mouse/button-up/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/mouse/click/","text":"Click Click any mouse button at the current mouse coordinates Example Usage // Java Actions action = new Actions(driver); action.moveTo(element); action.click(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.click() actions.perform() // Javascript // webdriver.io example $( ~SomeId ).click(); // wd example await driver.moveTo(element); await driver.click(); # Ruby # ruby_lib example action.move_to(element).click.perform # ruby_lib_core example @driver.action.move_to(element).click.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.Click(); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/click URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description button number Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified Response null See Also JSONWP Specification","title":"Click"},{"location":"commands/interactions/mouse/click/#click","text":"Click any mouse button at the current mouse coordinates","title":"Click"},{"location":"commands/interactions/mouse/click/#example-usage","text":"// Java Actions action = new Actions(driver); action.moveTo(element); action.click(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.click() actions.perform() // Javascript // webdriver.io example $( ~SomeId ).click(); // wd example await driver.moveTo(element); await driver.click(); # Ruby # ruby_lib example action.move_to(element).click.perform # ruby_lib_core example @driver.action.move_to(element).click.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.Click(); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/mouse/click/#support","text":"","title":"Support"},{"location":"commands/interactions/mouse/click/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/mouse/click/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/mouse/click/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/mouse/click/#endpoint","text":"POST /session/:session_id/click","title":"Endpoint"},{"location":"commands/interactions/mouse/click/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/mouse/click/#json-parameters","text":"name type description button number Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified","title":"JSON Parameters"},{"location":"commands/interactions/mouse/click/#response","text":"null","title":"Response"},{"location":"commands/interactions/mouse/click/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/mouse/doubleclick/","text":"Double Click Double-clicks at the current mouse coordinates (set by moveto). Example Usage // Java Actions action = new Actions(driver); action.moveTo(element); action.doubleClick(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.double_click() actions.perform() // Javascript // webdriver.io example $( ~SomeId ).doubleClick(); // wd example await driver.moveTo(element); await driver.doubleclick(); # Ruby # ruby_lib example action.move_to(element).double_click.perform # ruby_lib_core example @driver.action.move_to(element).double_click.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.DoubleClick(); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/doubleClick URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also JSONWP Specification","title":"Double Click"},{"location":"commands/interactions/mouse/doubleclick/#double-click","text":"Double-clicks at the current mouse coordinates (set by moveto).","title":"Double Click"},{"location":"commands/interactions/mouse/doubleclick/#example-usage","text":"// Java Actions action = new Actions(driver); action.moveTo(element); action.doubleClick(); action.perform(); # Python actions = ActionChains(driver) actions.move_to_element(element) actions.double_click() actions.perform() // Javascript // webdriver.io example $( ~SomeId ).doubleClick(); // wd example await driver.moveTo(element); await driver.doubleclick(); # Ruby # ruby_lib example action.move_to(element).double_click.perform # ruby_lib_core example @driver.action.move_to(element).double_click.perform // C# Actions action = new Actions(driver); action.MoveToElement(element); action.DoubleClick(); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/mouse/doubleclick/#support","text":"","title":"Support"},{"location":"commands/interactions/mouse/doubleclick/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/mouse/doubleclick/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/mouse/doubleclick/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/mouse/doubleclick/#endpoint","text":"POST /session/:session_id/doubleClick","title":"Endpoint"},{"location":"commands/interactions/mouse/doubleclick/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/mouse/doubleclick/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/interactions/mouse/doubleclick/#response","text":"null","title":"Response"},{"location":"commands/interactions/mouse/doubleclick/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/mouse/moveto/","text":"Move Mouse To Move the mouse by an offset of the specificed element Example Usage // Java Actions action = new Actions(driver); action.moveTo(element, 10, 10); action.perform(); # Python actions = ActionChains(driver) actions.move_to(element, 10, 10) actions.perform() // Javascript // webdriver.io example $(element).moveTo(10, 10); // wd example await driver.moveTo(element, 10, 10); # Ruby # ruby_lib example mouse.move_to(element) mouse.move_to(element, 5, 5) # ruby_lib_core example @driver.mouse.move_to(element) @driver.mouse.move_to(element, 5, 5) // C# Actions action = new Actions(driver); action.MoveToElement(element, 10, 10); action.Perform(); Description If no element is specified, the move is relative to the current mouse cursor. If an element is provided but no offset, the mouse will be moved to the center of the element. If the element is not visible, it will be scrolled into view. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/moveto URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description element string The ID of the element to move to. If not specified, relative to mouse position xoffset number X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element yoffset number Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element Response null See Also W3C Specification JSONWP Specification","title":"Move To"},{"location":"commands/interactions/mouse/moveto/#move-mouse-to","text":"Move the mouse by an offset of the specificed element","title":"Move Mouse To"},{"location":"commands/interactions/mouse/moveto/#example-usage","text":"// Java Actions action = new Actions(driver); action.moveTo(element, 10, 10); action.perform(); # Python actions = ActionChains(driver) actions.move_to(element, 10, 10) actions.perform() // Javascript // webdriver.io example $(element).moveTo(10, 10); // wd example await driver.moveTo(element, 10, 10); # Ruby # ruby_lib example mouse.move_to(element) mouse.move_to(element, 5, 5) # ruby_lib_core example @driver.mouse.move_to(element) @driver.mouse.move_to(element, 5, 5) // C# Actions action = new Actions(driver); action.MoveToElement(element, 10, 10); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/mouse/moveto/#description","text":"If no element is specified, the move is relative to the current mouse cursor. If an element is provided but no offset, the mouse will be moved to the center of the element. If the element is not visible, it will be scrolled into view.","title":"Description"},{"location":"commands/interactions/mouse/moveto/#support","text":"","title":"Support"},{"location":"commands/interactions/mouse/moveto/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/mouse/moveto/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/mouse/moveto/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/mouse/moveto/#endpoint","text":"POST /session/:session_id/moveto","title":"Endpoint"},{"location":"commands/interactions/mouse/moveto/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/mouse/moveto/#json-parameters","text":"name type description element string The ID of the element to move to. If not specified, relative to mouse position xoffset number X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element yoffset number Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element","title":"JSON Parameters"},{"location":"commands/interactions/mouse/moveto/#response","text":"null","title":"Response"},{"location":"commands/interactions/mouse/moveto/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/","text":"Appium API Documentation ### /docs/en/commands/interactions/touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform","title":"Home"},{"location":"commands/interactions/touch/#appium-api-documentation","text":"### /docs/en/commands/interactions/touch Single Tap Double Tap Move Touch Down Touch Up Long Press Scroll Flick Multi Touch Perform Touch Perform","title":"Appium API Documentation"},{"location":"commands/interactions/touch/double-tap/","text":"Double Tap Double tap on the touch screen using finger motion events Example Usage // Java TouchActions action = new TouchActions(driver); action.doubleTap(element); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.double_tap(element) actions.perform() // Javascript // webdriver.io example driver.touchDoubleClick(element.elementId); // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.tap({el: element}); await action.perform(); # Ruby # ruby_lib example touch_action.double_tap(element).perform # ruby_lib_core example @driver.touch_action.double_tap(element).perform // C# TouchActions action = new TouchActions(driver); action.DoubleTap(element); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All www.selenium.dev Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/doubleclick URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description element number ID of the element to double tap on Response null See Also JSONWP Specification","title":"Double Tap"},{"location":"commands/interactions/touch/double-tap/#double-tap","text":"Double tap on the touch screen using finger motion events","title":"Double Tap"},{"location":"commands/interactions/touch/double-tap/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.doubleTap(element); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.double_tap(element) actions.perform() // Javascript // webdriver.io example driver.touchDoubleClick(element.elementId); // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.tap({el: element}); await action.perform(); # Ruby # ruby_lib example touch_action.double_tap(element).perform # ruby_lib_core example @driver.touch_action.double_tap(element).perform // C# TouchActions action = new TouchActions(driver); action.DoubleTap(element); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/double-tap/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/double-tap/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/double-tap/#appium-clients","text":"Language Support Documentation Java All www.selenium.dev Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/double-tap/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/double-tap/#endpoint","text":"POST /session/:session_id/touch/doubleclick","title":"Endpoint"},{"location":"commands/interactions/touch/double-tap/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/double-tap/#json-parameters","text":"name type description element number ID of the element to double tap on","title":"JSON Parameters"},{"location":"commands/interactions/touch/double-tap/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/double-tap/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/flick/","text":"Flick Flick on the touch screen using finger motion events Example Usage // Java TouchActions action = new TouchActions(driver); action.flick(element, 1, 10, 10); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.flick_element(element, 1, 10, 10) actions.perform() // Javascript // webdriver.io example driver.touchFlick(10, 10, element, 1); // wd example await element.flick(1, 10, 10); # Ruby # ruby_lib example touch_action.flick(element, 1, 10, 10).perform # ruby_lib_core example @driver.touch_action.flick(element, 1, 10, 10).perform // C# TouchActions action = new TouchActions(driver); action.Flick(element, 10, 10, 1); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/flick URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description element string ID of the element where the flick starts xoffset number The x offset in pixels to flick by yoffset number The y offset in pixels to flick by speed number The speed in pixels per seconds Response null See Also JSONWP Specification","title":"Flick"},{"location":"commands/interactions/touch/flick/#flick","text":"Flick on the touch screen using finger motion events","title":"Flick"},{"location":"commands/interactions/touch/flick/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.flick(element, 1, 10, 10); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.flick_element(element, 1, 10, 10) actions.perform() // Javascript // webdriver.io example driver.touchFlick(10, 10, element, 1); // wd example await element.flick(1, 10, 10); # Ruby # ruby_lib example touch_action.flick(element, 1, 10, 10).perform # ruby_lib_core example @driver.touch_action.flick(element, 1, 10, 10).perform // C# TouchActions action = new TouchActions(driver); action.Flick(element, 10, 10, 1); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/flick/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/flick/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso None None None UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/flick/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/flick/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/flick/#endpoint","text":"POST /session/:session_id/touch/flick","title":"Endpoint"},{"location":"commands/interactions/touch/flick/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/flick/#json-parameters","text":"name type description element string ID of the element where the flick starts xoffset number The x offset in pixels to flick by yoffset number The y offset in pixels to flick by speed number The speed in pixels per seconds","title":"JSON Parameters"},{"location":"commands/interactions/touch/flick/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/flick/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/long-press/","text":"Long Tap Long press on the touch screen using finger motion events Example Usage // Java TouchActions action = new TouchActions(driver); action.longPress(element); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.long_press(element) actions.perform() // Javascript // webdriver.io example driver.touchPerform({ action: 'longPress', options: { element: element } }); // wd example // Using touch actions let action = new wd.TouchAction(); action.longPress({el: element}); await action.perform(); # Ruby # ruby_lib example touch_action.long_press(element).perform # ruby_lib_core example @driver.touch_action.long_press(element).perform // C# var touchAction = new TouchAction(Driver); touchAction.LongPress(element).Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/longclick URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description element number ID of the element to double tap on Response null See Also JSONWP Specification","title":"Long Press"},{"location":"commands/interactions/touch/long-press/#long-tap","text":"Long press on the touch screen using finger motion events","title":"Long Tap"},{"location":"commands/interactions/touch/long-press/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.longPress(element); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.long_press(element) actions.perform() // Javascript // webdriver.io example driver.touchPerform({ action: 'longPress', options: { element: element } }); // wd example // Using touch actions let action = new wd.TouchAction(); action.longPress({el: element}); await action.perform(); # Ruby # ruby_lib example touch_action.long_press(element).perform # ruby_lib_core example @driver.touch_action.long_press(element).perform // C# var touchAction = new TouchAction(Driver); touchAction.LongPress(element).Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/long-press/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/long-press/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/long-press/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/long-press/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/long-press/#endpoint","text":"POST /session/:session_id/touch/longclick","title":"Endpoint"},{"location":"commands/interactions/touch/long-press/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/long-press/#json-parameters","text":"name type description element number ID of the element to double tap on","title":"JSON Parameters"},{"location":"commands/interactions/touch/long-press/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/long-press/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/move/","text":"Move To Finger move on the screen Example Usage // Java TouchActions action = new TouchActions(driver); action.down(10, 10); action.moveTo(50, 50); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap_and_hold(element) actions.move_to(element, 50, 50) actions.perform() // Javascript // webdriver.io example driver.multiTouchPerform([ { action: 'press', options: { x: 100, y: 250 }}, { action: 'moveTo', options: { x: 300, y: 100 }}, { action: 'release' } ]); // wd example let action = new wd.TouchAction(driver); action.press({x: 10, y: 10}) .wait(1000) .moveTo({x: 50, y: 50}) .release(); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).move_to().perform # ruby_lib_core example @driver.touch_action.down(element).move_to().perform // C# TouchActions action = new TouchActions(driver); action.Down(10, 10); action.Move(50, 50); action.Perform(); Description As of Appium 1.8.0 all move actions take coordinates that are absolute. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/move URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description x number X coordinate on the screen y number Y coordinate on the screen Response null See Also JSONWP Specification","title":"Move"},{"location":"commands/interactions/touch/move/#move-to","text":"Finger move on the screen","title":"Move To"},{"location":"commands/interactions/touch/move/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.down(10, 10); action.moveTo(50, 50); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap_and_hold(element) actions.move_to(element, 50, 50) actions.perform() // Javascript // webdriver.io example driver.multiTouchPerform([ { action: 'press', options: { x: 100, y: 250 }}, { action: 'moveTo', options: { x: 300, y: 100 }}, { action: 'release' } ]); // wd example let action = new wd.TouchAction(driver); action.press({x: 10, y: 10}) .wait(1000) .moveTo({x: 50, y: 50}) .release(); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).move_to().perform # ruby_lib_core example @driver.touch_action.down(element).move_to().perform // C# TouchActions action = new TouchActions(driver); action.Down(10, 10); action.Move(50, 50); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/move/#description","text":"As of Appium 1.8.0 all move actions take coordinates that are absolute.","title":"Description"},{"location":"commands/interactions/touch/move/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/move/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/move/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/move/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/move/#endpoint","text":"POST /session/:session_id/touch/move","title":"Endpoint"},{"location":"commands/interactions/touch/move/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/move/#json-parameters","text":"name type description x number X coordinate on the screen y number Y coordinate on the screen","title":"JSON Parameters"},{"location":"commands/interactions/touch/move/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/move/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/multi-touch-perform/","text":"Multi Touch Perform Perform a multi touch action sequence Example Usage // Java TouchActions actionOne = new TouchAction(); actionOne.press(10, 10); actionOne.moveTo(10, 100); actionOne.release(); TouchActions actionTwo = new TouchAction(); actionTwo.press(20, 20); actionTwo.moveTo(20, 200); actionTwo.release(); MultiTouchAction action = new MultiTouchAction(); action.add(actionOne); action.add(actionTwo); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction from appium.webdriver.common.multi_action import MultiAction # ... a1 = TouchAction() a1.press(10, 20) a1.move_to(10, 200) a1.release() a2 = TouchAction() a2.press(10, 10) a2.move_to(10, 100) a2.release() ma = MultiAction(self.driver) ma.add(a1, a2) ma.perform() // Javascript // webdriver.io example driver.multiTouchPerform([ { action: 'press', options: { x: 100, y: 250 }}, { action: 'moveTo', options: { x: 300, y: 100 }}, { action: 'release' } ]); // wd example let action = new wd.MultiTouchAction(); action.press({x: 10, y: 10}); action.moveTo({x: 10, y: 100}); action.release(); await action.perform(); # Ruby # ruby_lib example multi_touch.down(element).move_to(10, 100).up(50, 50).perform # ruby_lib_core example @driver.multi_touch.down(element).move_to(10, 100).up(50, 50).perform // C# // TODO C# sample Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/multi/perform URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description action string The type of action to perform (moveTo|release|press|tap|wait) options object The parameters of the action opts.element string The ID of the element opts.x number The X coordinate of the operation (relative to top left corner) opts.y number The Y coordinate of the operation (relative to top left corner) opts.count number Tap count Response null See Also JSONWP Specification","title":"Multi Touch Perform"},{"location":"commands/interactions/touch/multi-touch-perform/#multi-touch-perform","text":"Perform a multi touch action sequence","title":"Multi Touch Perform"},{"location":"commands/interactions/touch/multi-touch-perform/#example-usage","text":"// Java TouchActions actionOne = new TouchAction(); actionOne.press(10, 10); actionOne.moveTo(10, 100); actionOne.release(); TouchActions actionTwo = new TouchAction(); actionTwo.press(20, 20); actionTwo.moveTo(20, 200); actionTwo.release(); MultiTouchAction action = new MultiTouchAction(); action.add(actionOne); action.add(actionTwo); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction from appium.webdriver.common.multi_action import MultiAction # ... a1 = TouchAction() a1.press(10, 20) a1.move_to(10, 200) a1.release() a2 = TouchAction() a2.press(10, 10) a2.move_to(10, 100) a2.release() ma = MultiAction(self.driver) ma.add(a1, a2) ma.perform() // Javascript // webdriver.io example driver.multiTouchPerform([ { action: 'press', options: { x: 100, y: 250 }}, { action: 'moveTo', options: { x: 300, y: 100 }}, { action: 'release' } ]); // wd example let action = new wd.MultiTouchAction(); action.press({x: 10, y: 10}); action.moveTo({x: 10, y: 100}); action.release(); await action.perform(); # Ruby # ruby_lib example multi_touch.down(element).move_to(10, 100).up(50, 50).perform # ruby_lib_core example @driver.multi_touch.down(element).move_to(10, 100).up(50, 50).perform // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/interactions/touch/multi-touch-perform/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/multi-touch-perform/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/multi-touch-perform/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/multi-touch-perform/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/multi-touch-perform/#endpoint","text":"POST /session/:session_id/touch/multi/perform","title":"Endpoint"},{"location":"commands/interactions/touch/multi-touch-perform/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/multi-touch-perform/#json-parameters","text":"name type description action string The type of action to perform (moveTo|release|press|tap|wait) options object The parameters of the action opts.element string The ID of the element opts.x number The X coordinate of the operation (relative to top left corner) opts.y number The Y coordinate of the operation (relative to top left corner) opts.count number Tap count","title":"JSON Parameters"},{"location":"commands/interactions/touch/multi-touch-perform/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/multi-touch-perform/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/scroll/","text":"Scroll Scroll on the touch screen using finger based motion events Example Usage // Java TouchActions action = new TouchActions(driver); action.scroll(element, 10, 100); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.scroll_from_element(element, 10, 100) actions.scroll(10, 100) actions.perform() // Javascript // webdriver.io example driver.touchScroll(10, 100, element); // wd example await driver.scroll(10, 100); # Ruby # ruby_lib example touch_actions.scroll(element, 10, 100).perform # ruby_lib_core example @driver.touch_actions.scroll(element, 10, 100).perform // C# TouchActions action = new TouchActions(driver); action.Scroll(element, 10, 100); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/scroll URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description x number X coordinate on the screen y number Y coordinate on the screen Response null See Also JSONWP Specification","title":"Scroll"},{"location":"commands/interactions/touch/scroll/#scroll","text":"Scroll on the touch screen using finger based motion events","title":"Scroll"},{"location":"commands/interactions/touch/scroll/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.scroll(element, 10, 100); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.scroll_from_element(element, 10, 100) actions.scroll(10, 100) actions.perform() // Javascript // webdriver.io example driver.touchScroll(10, 100, element); // wd example await driver.scroll(10, 100); # Ruby # ruby_lib example touch_actions.scroll(element, 10, 100).perform # ruby_lib_core example @driver.touch_actions.scroll(element, 10, 100).perform // C# TouchActions action = new TouchActions(driver); action.Scroll(element, 10, 100); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/scroll/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/scroll/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/scroll/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/scroll/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/scroll/#endpoint","text":"POST /session/:session_id/touch/scroll","title":"Endpoint"},{"location":"commands/interactions/touch/scroll/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/scroll/#json-parameters","text":"name type description x number X coordinate on the screen y number Y coordinate on the screen","title":"JSON Parameters"},{"location":"commands/interactions/touch/scroll/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/scroll/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/tap/","text":"Tap Single tap on the touch enabled device Example Usage // Java TouchActions action = new TouchActions(driver); action.singleTap(element); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap(element) actions.perform() // Javascript // webdriver.io example browser.touchAction({ action: 'tap', x: 30, y: 20 }) // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.tap({el: element}); await action.perform(); # Ruby # ruby_lib example touch_action.single_tap(element).perform # ruby_lib_core example @driver.touch_action.single_tap(element).perform // C# TouchAction touchAction = new TouchAction(driver); touchAction.Tap(element).Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All seleniumhq.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/click URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description element number ID of the element to double tap on Response null See Also JSONWP Specification","title":"Single Tap"},{"location":"commands/interactions/touch/tap/#tap","text":"Single tap on the touch enabled device","title":"Tap"},{"location":"commands/interactions/touch/tap/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.singleTap(element); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap(element) actions.perform() // Javascript // webdriver.io example browser.touchAction({ action: 'tap', x: 30, y: 20 }) // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.tap({el: element}); await action.perform(); # Ruby # ruby_lib example touch_action.single_tap(element).perform # ruby_lib_core example @driver.touch_action.single_tap(element).perform // C# TouchAction touchAction = new TouchAction(driver); touchAction.Tap(element).Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/tap/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/tap/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/tap/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All seleniumhq.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/tap/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/tap/#endpoint","text":"POST /session/:session_id/touch/click","title":"Endpoint"},{"location":"commands/interactions/touch/tap/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/tap/#json-parameters","text":"name type description element number ID of the element to double tap on","title":"JSON Parameters"},{"location":"commands/interactions/touch/tap/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/tap/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/touch-down/","text":"Touch Down Finger down on the screen Example Usage // Java TouchActions action = new TouchActions(driver); action.down(10, 10); action.move(50, 50); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap_and_hold(element) actions.move(50, 50) actions.perform() // Javascript // webdriver.io example driver.touchDown(10, 10); // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.press({x: 10, y: 10}); action.moveTo({x: 50, y: 50}); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).move().perform # ruby_lib_core example @driver.touch_action.down(element).move().perform // C# TouchActions action = new TouchActions(driver); action.Down(10, 10); action.Move(50, 50); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/down URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description x number X coordinate on the screen y number Y coordinate on the screen Response null See Also JSONWP Specification","title":"Touch Down"},{"location":"commands/interactions/touch/touch-down/#touch-down","text":"Finger down on the screen","title":"Touch Down"},{"location":"commands/interactions/touch/touch-down/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.down(10, 10); action.move(50, 50); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap_and_hold(element) actions.move(50, 50) actions.perform() // Javascript // webdriver.io example driver.touchDown(10, 10); // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.press({x: 10, y: 10}); action.moveTo({x: 50, y: 50}); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).move().perform # ruby_lib_core example @driver.touch_action.down(element).move().perform // C# TouchActions action = new TouchActions(driver); action.Down(10, 10); action.Move(50, 50); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/touch-down/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/touch-down/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/touch-down/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/touch-down/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/touch-down/#endpoint","text":"POST /session/:session_id/touch/down","title":"Endpoint"},{"location":"commands/interactions/touch/touch-down/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/touch-down/#json-parameters","text":"name type description x number X coordinate on the screen y number Y coordinate on the screen","title":"JSON Parameters"},{"location":"commands/interactions/touch/touch-down/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/touch-down/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/touch-perform/","text":"Touch Perform Perform a touch action sequence Example Usage // Java TouchAction action = new TouchAction(driver); action.press(10, 10); action.moveTo(10, 100); action.release(); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction // ... actions = TouchAction(driver) actions.tap_and_hold(20, 20) actions.move_to(10, 100) actions.release() actions.perform() // Javascript // webdriver.io example driver.touchPerform([ { action: 'press', options: { x: 100, y: 250 }}, { action: 'moveTo', options: { x: 300, y: 100 }}, { action: 'release' } ]); // wd example let action = new wd.TouchAction(); action.press({x: 10, y: 10}); action.moveTo({x: 10, y: 100}); action.release(); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).move_to(10, 100).up(50, 50).perform # ruby_lib_core example @driver.touch_action.down(element).move_to(10, 100).up(50, 50).perform // C# TouchAction action = new TouchAction(driver); action.Press(10, 10); action.MoveTo(10, 100); action.Release(); action.Perform(); Description This functionality is only available from within a native context 'Touch Perform' works similarly to the other singular touch interactions, except that this allows you to chain together more than one touch action as one command. This is useful because Appium commands are sent over the network and there's latency between commands. This latency can make certain touch interactions impossible because some interactions need to be performed in one sequence. Vertical, for example, requires pressing down, moving to a different y coordinate, and then releasing. For it to work, there can't be a delay between the interactions. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/perform URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description action string The type of action to perform (moveTo|release|press|tap|wait) options object The parameters of the action opts.element string The ID of the element opts.x number The X coordinate of the operation (relative to top left corner) opts.y number The Y coordinate of the operation (relative to top left corner) opts.count number Tap count Response null See Also JSONWP Specification","title":"Touch Perform"},{"location":"commands/interactions/touch/touch-perform/#touch-perform","text":"Perform a touch action sequence","title":"Touch Perform"},{"location":"commands/interactions/touch/touch-perform/#example-usage","text":"// Java TouchAction action = new TouchAction(driver); action.press(10, 10); action.moveTo(10, 100); action.release(); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction // ... actions = TouchAction(driver) actions.tap_and_hold(20, 20) actions.move_to(10, 100) actions.release() actions.perform() // Javascript // webdriver.io example driver.touchPerform([ { action: 'press', options: { x: 100, y: 250 }}, { action: 'moveTo', options: { x: 300, y: 100 }}, { action: 'release' } ]); // wd example let action = new wd.TouchAction(); action.press({x: 10, y: 10}); action.moveTo({x: 10, y: 100}); action.release(); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).move_to(10, 100).up(50, 50).perform # ruby_lib_core example @driver.touch_action.down(element).move_to(10, 100).up(50, 50).perform // C# TouchAction action = new TouchAction(driver); action.Press(10, 10); action.MoveTo(10, 100); action.Release(); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/touch-perform/#description","text":"This functionality is only available from within a native context 'Touch Perform' works similarly to the other singular touch interactions, except that this allows you to chain together more than one touch action as one command. This is useful because Appium commands are sent over the network and there's latency between commands. This latency can make certain touch interactions impossible because some interactions need to be performed in one sequence. Vertical, for example, requires pressing down, moving to a different y coordinate, and then releasing. For it to work, there can't be a delay between the interactions.","title":"Description"},{"location":"commands/interactions/touch/touch-perform/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/touch-perform/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/touch-perform/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/touch-perform/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/touch-perform/#endpoint","text":"POST /session/:session_id/touch/perform","title":"Endpoint"},{"location":"commands/interactions/touch/touch-perform/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/touch-perform/#json-parameters","text":"name type description action string The type of action to perform (moveTo|release|press|tap|wait) options object The parameters of the action opts.element string The ID of the element opts.x number The X coordinate of the operation (relative to top left corner) opts.y number The Y coordinate of the operation (relative to top left corner) opts.count number Tap count","title":"JSON Parameters"},{"location":"commands/interactions/touch/touch-perform/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/touch-perform/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/interactions/touch/touch-up/","text":"Touch Up Finger up on the screen Example Usage // Java TouchActions action = new TouchActions(driver); action.down(10, 10); action.up(20, 20); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap_and_hold(20, 20) actions.release(50, 50) actions.perform() // Javascript // webdriver.io example driver.touchUp(10, 10); // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.press({x: 10, y: 10}); action.release({x: 20, y: 20}); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).up(50, 50).perform # ruby_lib_core example @driver.touch_action.down(element).up(50, 50).perform // C# TouchActions action = new TouchActions(driver); action.Down(10, 10); action.Up(20, 20); action.Perform(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/touch/up URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description x number X coordinate on the screen y number Y coordinate on the screen Response null See Also JSONWP Specification","title":"Touch Up"},{"location":"commands/interactions/touch/touch-up/#touch-up","text":"Finger up on the screen","title":"Touch Up"},{"location":"commands/interactions/touch/touch-up/#example-usage","text":"// Java TouchActions action = new TouchActions(driver); action.down(10, 10); action.up(20, 20); action.perform(); # Python from appium.webdriver.common.touch_action import TouchAction # ... actions = TouchAction(driver) actions.tap_and_hold(20, 20) actions.release(50, 50) actions.perform() // Javascript // webdriver.io example driver.touchUp(10, 10); // wd example // Using tapElement method await driver.tapElement(elementOne); // Using touch actions let action = new wd.TouchAction(); action.press({x: 10, y: 10}); action.release({x: 20, y: 20}); await action.perform(); # Ruby # ruby_lib example touch_action.down(element).up(50, 50).perform # ruby_lib_core example @driver.touch_action.down(element).up(50, 50).perform // C# TouchActions action = new TouchActions(driver); action.Down(10, 10); action.Up(20, 20); action.Perform();","title":"Example Usage"},{"location":"commands/interactions/touch/touch-up/#support","text":"","title":"Support"},{"location":"commands/interactions/touch/touch-up/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/interactions/touch/touch-up/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/interactions/touch/touch-up/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/interactions/touch/touch-up/#endpoint","text":"POST /session/:session_id/touch/up","title":"Endpoint"},{"location":"commands/interactions/touch/touch-up/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/interactions/touch/touch-up/#json-parameters","text":"name type description x number X coordinate on the screen y number Y coordinate on the screen","title":"JSON Parameters"},{"location":"commands/interactions/touch/touch-up/#response","text":"null","title":"Response"},{"location":"commands/interactions/touch/touch-up/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/","text":"Appium API Documentation ### /docs/en/commands/session Create End Get Session Capabilities Go Back Screenshot Source Timeouts Timeouts Implicit Wait Async Script Orientation Get Orientation Set Orientation Geolocation Get Geolocation Set Geolocation Logs Get Log Types Get Logs Events Log event Get events Settings Update Settings Get Device Settings Execute Driver Script","title":"Home"},{"location":"commands/session/#appium-api-documentation","text":"### /docs/en/commands/session Create End Get Session Capabilities Go Back Screenshot Source Timeouts Timeouts Implicit Wait Async Script Orientation Get Orientation Set Orientation Geolocation Get Geolocation Set Geolocation Logs Get Log Types Get Logs Events Log event Get events Settings Update Settings Get Device Settings Execute Driver Script","title":"Appium API Documentation"},{"location":"commands/session/back/","text":"Go Back Navigate backwards in the browser history, if possible (Web context only) Example Usage // Java driver.back(); # Python self.driver.back() // Javascript // webdriver.io example driver.back(); // wd example await driver.back(); # Ruby # ruby_lib example back # ruby_lib_core example @driver.back // C# driver.Navigate().Back(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/back URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Go Back"},{"location":"commands/session/back/#go-back","text":"Navigate backwards in the browser history, if possible (Web context only)","title":"Go Back"},{"location":"commands/session/back/#example-usage","text":"// Java driver.back(); # Python self.driver.back() // Javascript // webdriver.io example driver.back(); // wd example await driver.back(); # Ruby # ruby_lib example back # ruby_lib_core example @driver.back // C# driver.Navigate().Back();","title":"Example Usage"},{"location":"commands/session/back/#support","text":"","title":"Support"},{"location":"commands/session/back/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/back/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/back/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/back/#endpoint","text":"POST /session/:session_id/back","title":"Endpoint"},{"location":"commands/session/back/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/back/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/back/#response","text":"null","title":"Response"},{"location":"commands/session/back/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/session/create/","text":"Create New Session Create a new session Example Usage // Java DesiredCapabilities desiredCapabilities = new DesiredCapabilities(); desiredCapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 10.3 ); desiredCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, iPhone Simulator ); desiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, XCUITest ); desiredCapabilities.setCapability(MobileCapabilityType.APP, /path/to/ios/app.zip ); URL url = new URL( http://127.0.0.1:4723/wd/hub ); IOSDriver driver = new IOSDriver(url, desiredCapabilities); String sessionId = driver.getSessionId().toString(); # Python desired_caps = { 'platformName': 'Android', 'platformVersion': '7.0', 'deviceName': 'Android Emulator', 'automationName': 'UiAutomator2', 'app': PATH('/path/to/app') } self.driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps) // Javascript // webdriver.io example let options = { desiredCapabilities: { platformName: 'Android', platformVersion: '7.0', automationName: 'UiAutomator2', app: path.resolve('path', 'to', 'app.apk') }}; let client = driver.newSession(options); // wd example let driver = await wd.promiseChainRemote({ host: '127.0.0.1', port: 4723 }); let desiredCaps = { platformName: 'Android', platformVersion: '7.0', deviceName: 'Android Emulator', app: path.resolve('path', 'to', 'app.apk') }; await driver.init(desiredCaps); # Ruby # ruby_lib example APP_PATH = '../../path/to/app.app' desired_caps = { caps: { platformName: 'iOS', platformVersion: '10.2', deviceName: 'iPhone 6', app: APP_PATH, automationName: XCUITest } } Appium::Driver.new(desired_caps).start_driver # ruby_lib_core example ::Appium::Core.for(desired_caps).start_driver // C# AppiumOptions capabilities = new AppiumOptions(); appiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformName, Android ); appiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformVersion, 7.1.1 ); appiumOptions.AddAdditionalCapability(MobileCapabilityType.DeviceName, Android Device ); appiumOptions.AddAdditionalCapability( appPackage , com.instagram.android ); appiumOptions.AddAdditionalCapability( appActivity , com.instagram.android.activity.MainTabActivity ); AndroidDriver AndroidElement driver = new AndroidDriver AndroidElement (new Uri( http://127.0.0.1:4723/wd/hub ), appiumOptions); Description The server should attempt to create a session that most closely matches the desired and required capabilities. JSONWP Spec Required capabilities have higher priority than desired capabilities and must be set for the session to be created W3C Spec capabilities.alwaysMatch must be set for session to be created; capabilities.firstMatch must match at least one (the first one to match will be used) Please do not forget to call delete command at the end of the session so that Appium could cleanup the downstream resources properly. Refusing to do so could corrupt the following session creation attempts or to break the stability of your tests in general. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All www.selenium.dev Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session URL Parameters None JSON Parameters name type description desiredCapabilities object ( JSONWP specification ) Object describing session's desired capabilities requiredCapabilities object ( JSONWP specification ) Object describing session's required capabilities that must be applied by remote end capabilities object ( W3C specification ) object containing 'alwaysMatch' and 'firstMatch' properties capabilities.alwaysMatch object The desired capabilities that the remote end must match capabilities.firstMatch array object List of capabilities that the remote end tries to match. Matches the first in the list Response An object describing the session's capabilities ( object ) See Also W3C Specification JSONWP Specification","title":"Create"},{"location":"commands/session/create/#create-new-session","text":"Create a new session","title":"Create New Session"},{"location":"commands/session/create/#example-usage","text":"// Java DesiredCapabilities desiredCapabilities = new DesiredCapabilities(); desiredCapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 10.3 ); desiredCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, iPhone Simulator ); desiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, XCUITest ); desiredCapabilities.setCapability(MobileCapabilityType.APP, /path/to/ios/app.zip ); URL url = new URL( http://127.0.0.1:4723/wd/hub ); IOSDriver driver = new IOSDriver(url, desiredCapabilities); String sessionId = driver.getSessionId().toString(); # Python desired_caps = { 'platformName': 'Android', 'platformVersion': '7.0', 'deviceName': 'Android Emulator', 'automationName': 'UiAutomator2', 'app': PATH('/path/to/app') } self.driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps) // Javascript // webdriver.io example let options = { desiredCapabilities: { platformName: 'Android', platformVersion: '7.0', automationName: 'UiAutomator2', app: path.resolve('path', 'to', 'app.apk') }}; let client = driver.newSession(options); // wd example let driver = await wd.promiseChainRemote({ host: '127.0.0.1', port: 4723 }); let desiredCaps = { platformName: 'Android', platformVersion: '7.0', deviceName: 'Android Emulator', app: path.resolve('path', 'to', 'app.apk') }; await driver.init(desiredCaps); # Ruby # ruby_lib example APP_PATH = '../../path/to/app.app' desired_caps = { caps: { platformName: 'iOS', platformVersion: '10.2', deviceName: 'iPhone 6', app: APP_PATH, automationName: XCUITest } } Appium::Driver.new(desired_caps).start_driver # ruby_lib_core example ::Appium::Core.for(desired_caps).start_driver // C# AppiumOptions capabilities = new AppiumOptions(); appiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformName, Android ); appiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformVersion, 7.1.1 ); appiumOptions.AddAdditionalCapability(MobileCapabilityType.DeviceName, Android Device ); appiumOptions.AddAdditionalCapability( appPackage , com.instagram.android ); appiumOptions.AddAdditionalCapability( appActivity , com.instagram.android.activity.MainTabActivity ); AndroidDriver AndroidElement driver = new AndroidDriver AndroidElement (new Uri( http://127.0.0.1:4723/wd/hub ), appiumOptions);","title":"Example Usage"},{"location":"commands/session/create/#description","text":"The server should attempt to create a session that most closely matches the desired and required capabilities. JSONWP Spec Required capabilities have higher priority than desired capabilities and must be set for the session to be created W3C Spec capabilities.alwaysMatch must be set for session to be created; capabilities.firstMatch must match at least one (the first one to match will be used) Please do not forget to call delete command at the end of the session so that Appium could cleanup the downstream resources properly. Refusing to do so could corrupt the following session creation attempts or to break the stability of your tests in general.","title":"Description"},{"location":"commands/session/create/#support","text":"","title":"Support"},{"location":"commands/session/create/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/create/#appium-clients","text":"Language Support Documentation Java All www.selenium.dev Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/create/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/create/#endpoint","text":"POST /session","title":"Endpoint"},{"location":"commands/session/create/#url-parameters","text":"None","title":"URL Parameters"},{"location":"commands/session/create/#json-parameters","text":"name type description desiredCapabilities object ( JSONWP specification ) Object describing session's desired capabilities requiredCapabilities object ( JSONWP specification ) Object describing session's required capabilities that must be applied by remote end capabilities object ( W3C specification ) object containing 'alwaysMatch' and 'firstMatch' properties capabilities.alwaysMatch object The desired capabilities that the remote end must match capabilities.firstMatch array object List of capabilities that the remote end tries to match. Matches the first in the list","title":"JSON Parameters"},{"location":"commands/session/create/#response","text":"An object describing the session's capabilities ( object )","title":"Response"},{"location":"commands/session/create/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/session/delete/","text":"End Session End the running session Example Usage // Java driver.quit(); # Python self.driver.quit() // Javascript // webdriver.io example driver.deleteSession(); // wd example await driver.quit(); # Ruby # ruby_lib example quit # ruby_lib_core example @driver.quit // C# driver.Quit(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint DELETE /session/:session_id URL Parameters name description session_id ID of the session to delete JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"End"},{"location":"commands/session/delete/#end-session","text":"End the running session","title":"End Session"},{"location":"commands/session/delete/#example-usage","text":"// Java driver.quit(); # Python self.driver.quit() // Javascript // webdriver.io example driver.deleteSession(); // wd example await driver.quit(); # Ruby # ruby_lib example quit # ruby_lib_core example @driver.quit // C# driver.Quit();","title":"Example Usage"},{"location":"commands/session/delete/#support","text":"","title":"Support"},{"location":"commands/session/delete/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/delete/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/delete/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/delete/#endpoint","text":"DELETE /session/:session_id","title":"Endpoint"},{"location":"commands/session/delete/#url-parameters","text":"name description session_id ID of the session to delete","title":"URL Parameters"},{"location":"commands/session/delete/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/delete/#response","text":"null","title":"Response"},{"location":"commands/session/delete/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/session/execute-driver/","text":"Execute Driver Script Run a WebdriverIO script against the current session, allowing execution of many commands in one Appium request. Example Usage // Java String script = const el = await driver.$('~foo');\\n + await el.click(); driver.executeDriverScript(script, new ScriptOptions().withTimeout(200)); # Python import textwrap script = const el = await driver.$('~foo'); await el.click(); response = driver.execute_driver(script=textwrap.dedent(script)) // Javascript // webdriver.io example const script = ` const el = await driver.$('~foo'); await el.click(); `; await driver.executeDriver(script); // wd example const script = ` const el = await driver.$('~foo'); await el.click(); `; await driver.executeDriver(script, {timeout: 200}); # Ruby # ruby_lib example script = -SCRIPT const status = await driver.status(); return status; SCRIPT driver.execute_driver script: script # ruby_lib_core example script = -SCRIPT const status = await driver.status(); return status; SCRIPT @driver.execute_driver script: script // C# // TODO C# sample Description One downside of Appium's client-server architecture is that each command must travel across a network with potentially high latency. This is especially the case in situations where the Appium session takes place on a service provider's host machine rather than locally. This command enables the batching of many commands together, to be executed in one go on the Appium server. The way this is accomplished is on the model of executeScript : the client will send in a string representing code to be executed. The Appium server will execute that code in the context of the current session, and return any values specified by the script. There are three parameters accepted by this command (which may be collected by each client in its own way): * script : the string consisting of the script itself * timeout : a number representing the number of milliseconds to wait before killing the process running the driver script. Default is equivalent to 1 hour. * type : a string representing the script language/API. Currently only one type, webdriverio , is supported (and it is the default). Not just any code can run in this context. The code must be written in Javascript, and it will have access to a context with three objects * driver : a WebdriverIO driver object. It may be assumed this driver has already connected with the Appium server and is ready to run commands. The version of WebdriverIO used is the one installed according to the specification in appium-base-driver 's package.json file. * console : a custom console object, with methods log , warn , and error , so that logging may take place. * Promise : a Promise library ( Bluebird ), to make asynchronous work easier. The code will be placed inside an async function, as below, so you are free to use await : (async function (driver, console, Promise) { // -- your script here -- })() Any errors will result in an error response to the call to this command. Any return values will be wrapped up and sent back to your client in the following form: {result: return value , logs: {log: [], warn: [], error: []}} Using this response object you can gather the return value as well as the output of any log statements you made. The advantage of this approach of using WebdriverIO code is that you have access to a full programming language and Appium API, and can use any language or API features you need, including loops, conditionals, and explicit waits. The WebdriverIO API cannot be enumerated here, so visit the WebdriverIO documentation for more info. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All javadoc.io Python None appium.github.io Javascript (WebdriverIO) None Javascript (WD) None Ruby None www.rubydoc.info C# None HTTP API Specifications Endpoint POST /session/:session_id/appium/execute_driver URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description script string The webdriverio script to execute type string The name of the script type. Currently only 'webdriverio' is supported timeout number The number of ms Appium should wait for the script to finish before killing it due to timeout Response The script result. It will have two fields: result and logs . Result will be the return value of the script. Logs will contain the content of anything logged from the console object by the script. ( any ) See Also","title":"Execute Driver Script"},{"location":"commands/session/execute-driver/#execute-driver-script","text":"Run a WebdriverIO script against the current session, allowing execution of many commands in one Appium request.","title":"Execute Driver Script"},{"location":"commands/session/execute-driver/#example-usage","text":"// Java String script = const el = await driver.$('~foo');\\n + await el.click(); driver.executeDriverScript(script, new ScriptOptions().withTimeout(200)); # Python import textwrap script = const el = await driver.$('~foo'); await el.click(); response = driver.execute_driver(script=textwrap.dedent(script)) // Javascript // webdriver.io example const script = ` const el = await driver.$('~foo'); await el.click(); `; await driver.executeDriver(script); // wd example const script = ` const el = await driver.$('~foo'); await el.click(); `; await driver.executeDriver(script, {timeout: 200}); # Ruby # ruby_lib example script = -SCRIPT const status = await driver.status(); return status; SCRIPT driver.execute_driver script: script # ruby_lib_core example script = -SCRIPT const status = await driver.status(); return status; SCRIPT @driver.execute_driver script: script // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/session/execute-driver/#description","text":"One downside of Appium's client-server architecture is that each command must travel across a network with potentially high latency. This is especially the case in situations where the Appium session takes place on a service provider's host machine rather than locally. This command enables the batching of many commands together, to be executed in one go on the Appium server. The way this is accomplished is on the model of executeScript : the client will send in a string representing code to be executed. The Appium server will execute that code in the context of the current session, and return any values specified by the script. There are three parameters accepted by this command (which may be collected by each client in its own way): * script : the string consisting of the script itself * timeout : a number representing the number of milliseconds to wait before killing the process running the driver script. Default is equivalent to 1 hour. * type : a string representing the script language/API. Currently only one type, webdriverio , is supported (and it is the default). Not just any code can run in this context. The code must be written in Javascript, and it will have access to a context with three objects * driver : a WebdriverIO driver object. It may be assumed this driver has already connected with the Appium server and is ready to run commands. The version of WebdriverIO used is the one installed according to the specification in appium-base-driver 's package.json file. * console : a custom console object, with methods log , warn , and error , so that logging may take place. * Promise : a Promise library ( Bluebird ), to make asynchronous work easier. The code will be placed inside an async function, as below, so you are free to use await : (async function (driver, console, Promise) { // -- your script here -- })() Any errors will result in an error response to the call to this command. Any return values will be wrapped up and sent back to your client in the following form: {result: return value , logs: {log: [], warn: [], error: []}} Using this response object you can gather the return value as well as the output of any log statements you made. The advantage of this approach of using WebdriverIO code is that you have access to a full programming language and Appium API, and can use any language or API features you need, including loops, conditionals, and explicit waits. The WebdriverIO API cannot be enumerated here, so visit the WebdriverIO documentation for more info.","title":"Description"},{"location":"commands/session/execute-driver/#support","text":"","title":"Support"},{"location":"commands/session/execute-driver/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/execute-driver/#appium-clients","text":"Language Support Documentation Java All javadoc.io Python None appium.github.io Javascript (WebdriverIO) None Javascript (WD) None Ruby None www.rubydoc.info C# None","title":"Appium Clients"},{"location":"commands/session/execute-driver/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/execute-driver/#endpoint","text":"POST /session/:session_id/appium/execute_driver","title":"Endpoint"},{"location":"commands/session/execute-driver/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/execute-driver/#json-parameters","text":"name type description script string The webdriverio script to execute type string The name of the script type. Currently only 'webdriverio' is supported timeout number The number of ms Appium should wait for the script to finish before killing it due to timeout","title":"JSON Parameters"},{"location":"commands/session/execute-driver/#response","text":"The script result. It will have two fields: result and logs . Result will be the return value of the script. Logs will contain the content of anything logged from the console object by the script. ( any )","title":"Response"},{"location":"commands/session/execute-driver/#see-also","text":"","title":"See Also"},{"location":"commands/session/get/","text":"Get Session Capabilities Retrieve the capabilities of the specified session Example Usage // Java Map String, Object caps = driver.getSessionDetails(); # Python desired_caps = self.driver.session // Javascript // webdriver.io example let caps = driver.capabilities; // wd example let caps = await driver.sessionCapabilities(); # Ruby # ruby_lib example session_capabilities # ruby_lib_core example @driver.session_capabilities // C# ICapabilities caps = driver.Capabilities; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All www.selenium.dev Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response An object describing the session's capabilities ( object ) See Also JSONWP Specification","title":"Get Session Capabilities"},{"location":"commands/session/get/#get-session-capabilities","text":"Retrieve the capabilities of the specified session","title":"Get Session Capabilities"},{"location":"commands/session/get/#example-usage","text":"// Java Map String, Object caps = driver.getSessionDetails(); # Python desired_caps = self.driver.session // Javascript // webdriver.io example let caps = driver.capabilities; // wd example let caps = await driver.sessionCapabilities(); # Ruby # ruby_lib example session_capabilities # ruby_lib_core example @driver.session_capabilities // C# ICapabilities caps = driver.Capabilities;","title":"Example Usage"},{"location":"commands/session/get/#support","text":"","title":"Support"},{"location":"commands/session/get/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/get/#appium-clients","text":"Language Support Documentation Java All www.selenium.dev Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/get/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/get/#endpoint","text":"GET /session/:session_id","title":"Endpoint"},{"location":"commands/session/get/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/get/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/get/#response","text":"An object describing the session's capabilities ( object )","title":"Response"},{"location":"commands/session/get/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/screenshot/","text":"Take Screenshot Take a screenshot of the current viewport/window/page Example Usage // Java File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); # Python screenshotBase64 = self.driver.get_screenshot_as_base64() // Javascript // webdriver.io example let screenshot = driver.takeScreenshot(); // wd example let screenshot = await driver.takeScreenshot(); # Ruby # ruby_lib example driver.screenshot_as(:base64) # via core_lib # ruby_lib_core example @driver.screenshot_as(:base64) // C# Screenshot screenshot = driver.GetScreenshot(); Description Takes a screenshot of the viewport in a native context (iOS, Android) and takes a screenshot of the window in web context Note that some platforms may have settings that prevent screenshots from being taken, for security reason. One such feature is the Android FLAG_SECURE layout parameter Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/screenshot URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The screenshot as a base64 encoded PNG ( string ) See Also W3C Specification JSONWP Specification","title":"Screenshot"},{"location":"commands/session/screenshot/#take-screenshot","text":"Take a screenshot of the current viewport/window/page","title":"Take Screenshot"},{"location":"commands/session/screenshot/#example-usage","text":"// Java File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE); # Python screenshotBase64 = self.driver.get_screenshot_as_base64() // Javascript // webdriver.io example let screenshot = driver.takeScreenshot(); // wd example let screenshot = await driver.takeScreenshot(); # Ruby # ruby_lib example driver.screenshot_as(:base64) # via core_lib # ruby_lib_core example @driver.screenshot_as(:base64) // C# Screenshot screenshot = driver.GetScreenshot();","title":"Example Usage"},{"location":"commands/session/screenshot/#description","text":"Takes a screenshot of the viewport in a native context (iOS, Android) and takes a screenshot of the window in web context Note that some platforms may have settings that prevent screenshots from being taken, for security reason. One such feature is the Android FLAG_SECURE layout parameter","title":"Description"},{"location":"commands/session/screenshot/#support","text":"","title":"Support"},{"location":"commands/session/screenshot/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/screenshot/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/screenshot/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/screenshot/#endpoint","text":"GET /session/:session_id/screenshot","title":"Endpoint"},{"location":"commands/session/screenshot/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/screenshot/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/screenshot/#response","text":"The screenshot as a base64 encoded PNG ( string )","title":"Response"},{"location":"commands/session/screenshot/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/session/source/","text":"Get Page Source Get the current application hierarchy XML (app) or page source (web) Example Usage // Java String pageSource = driver.getPageSource(); # Python source = self.driver.page_source // Javascript // webdriver.io example let source = driver.getPageSource(); // wd example let pageSource = await driver.source(); # Ruby # ruby_lib example page_source # ruby_lib_core example @driver.page_source // C# string pageSource = driver.PageSource; Description In a web context, the source returns the source HTML of the current window. In a native context (iOS, Android, etc...) it will return the application hierarchy XML. This method is useful for inspecting your application hierarchy and using that to write selectors (NOTE: iOS and Android don't have standard ways of defining their application source, so on calls to 'Get Page Source' Appium traverses the app hierarchy and creates an XML document. Thus, getting the source can often be an expensive and time-consuming operation) Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/source URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The sources of current context. ( string ) See Also W3C Specification JSONWP Specification","title":"Source"},{"location":"commands/session/source/#get-page-source","text":"Get the current application hierarchy XML (app) or page source (web)","title":"Get Page Source"},{"location":"commands/session/source/#example-usage","text":"// Java String pageSource = driver.getPageSource(); # Python source = self.driver.page_source // Javascript // webdriver.io example let source = driver.getPageSource(); // wd example let pageSource = await driver.source(); # Ruby # ruby_lib example page_source # ruby_lib_core example @driver.page_source // C# string pageSource = driver.PageSource;","title":"Example Usage"},{"location":"commands/session/source/#description","text":"In a web context, the source returns the source HTML of the current window. In a native context (iOS, Android, etc...) it will return the application hierarchy XML. This method is useful for inspecting your application hierarchy and using that to write selectors (NOTE: iOS and Android don't have standard ways of defining their application source, so on calls to 'Get Page Source' Appium traverses the app hierarchy and creates an XML document. Thus, getting the source can often be an expensive and time-consuming operation)","title":"Description"},{"location":"commands/session/source/#support","text":"","title":"Support"},{"location":"commands/session/source/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/source/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/source/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/source/#endpoint","text":"GET /session/:session_id/source","title":"Endpoint"},{"location":"commands/session/source/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/source/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/source/#response","text":"The sources of current context. ( string )","title":"Response"},{"location":"commands/session/source/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/session/events/","text":"Appium API Documentation ### /docs/en/commands/session/events Log event Get events","title":"Home"},{"location":"commands/session/events/#appium-api-documentation","text":"### /docs/en/commands/session/events Log event Get events","title":"Appium API Documentation"},{"location":"commands/session/events/get-events/","text":"Get events Get events stored in appium server Example Usage // Java driver.getEvents(); # Python driver.get_events() driver.get_events(['event1', 'event2']) // Javascript // webdriver.io example browser.getEvents(['event']) // wd example // WD code here # Ruby # ruby_lib example driver.log_events driver.log_events('event') driver.log_events(['event1', 'event2']) # ruby_lib_core example @driver.logs.events @driver.logs.events('event') @driver.logs.events(['event1', 'event2']) // C# // csharp code here Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.16.0+ All UIAutomation 8.0 to 9.3 1.16.0+ All Android Espresso ?+ 1.16.0+ All UiAutomator2 ?+ 1.16.0+ All UiAutomator 4.3+ 1.16.0+ All Mac Mac ?+ 1.16.0+ All Windows Windows 10+ 1.16.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/events URL Parameters None JSON Parameters name type description type string|array string (Option) Get events which are filtered with the type if the type is provided Response A JSON hash of events like {'commands' = [{'cmd' = 123455, ....}], 'startTime' = 1572954894127, } . A filtered by type item if it is provided. ( object ) See Also JSONWP Specification add ability to retrieve log events as a new api route","title":"Get events"},{"location":"commands/session/events/get-events/#get-events","text":"Get events stored in appium server","title":"Get events"},{"location":"commands/session/events/get-events/#example-usage","text":"// Java driver.getEvents(); # Python driver.get_events() driver.get_events(['event1', 'event2']) // Javascript // webdriver.io example browser.getEvents(['event']) // wd example // WD code here # Ruby # ruby_lib example driver.log_events driver.log_events('event') driver.log_events(['event1', 'event2']) # ruby_lib_core example @driver.logs.events @driver.logs.events('event') @driver.logs.events(['event1', 'event2']) // C# // csharp code here","title":"Example Usage"},{"location":"commands/session/events/get-events/#support","text":"","title":"Support"},{"location":"commands/session/events/get-events/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.16.0+ All UIAutomation 8.0 to 9.3 1.16.0+ All Android Espresso ?+ 1.16.0+ All UiAutomator2 ?+ 1.16.0+ All UiAutomator 4.3+ 1.16.0+ All Mac Mac ?+ 1.16.0+ All Windows Windows 10+ 1.16.0+ All","title":"Appium Server"},{"location":"commands/session/events/get-events/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/session/events/get-events/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/events/get-events/#endpoint","text":"POST /session/:session_id/appium/events","title":"Endpoint"},{"location":"commands/session/events/get-events/#url-parameters","text":"None","title":"URL Parameters"},{"location":"commands/session/events/get-events/#json-parameters","text":"name type description type string|array string (Option) Get events which are filtered with the type if the type is provided","title":"JSON Parameters"},{"location":"commands/session/events/get-events/#response","text":"A JSON hash of events like {'commands' = [{'cmd' = 123455, ....}], 'startTime' = 1572954894127, } . A filtered by type item if it is provided. ( object )","title":"Response"},{"location":"commands/session/events/get-events/#see-also","text":"JSONWP Specification add ability to retrieve log events as a new api route","title":"See Also"},{"location":"commands/session/events/log-event/","text":"Log event Store a custom event Example Usage // Java CustomEvent evt = new CustomEvent(); evt.setEventName( funEvent ); evt.setVendor( appium ); driver.logEvent(evt); # Python driver.log_event('appium', 'funEvent') // Javascript // webdriver.io example driver.logEvent('appium', 'funEvent') // wd example // WD code here # Ruby # ruby_lib example driver.log_event vendor: 'appium', event: 'funEvent' # ruby_lib_core example @driver.logs.event vendor: 'appium', event: 'funEvent' @driver.logs.event = { vendor: 'appium', event: 'anotherEvent' } // C# // csharp Code here Description This API allows us to store a custom event. Appium provides Appium Event Timing to track when events happen. This custom event feature allow users to store a custom event as the feature. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.16.0+ All UIAutomation 8.0 to 9.3 1.16.0+ All Android Espresso ?+ 1.16.0+ All UiAutomator2 ?+ 1.16.0+ All UiAutomator 4.3+ 1.16.0+ All Mac Mac ?+ 1.16.0+ All Windows Windows 10+ 1.16.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby All www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/log_event URL Parameters None JSON Parameters name type description vendor string The name of vendor. It will be vendor in vendor:event . event string The name of event. It will be event in vendor:event . Response null See Also JSONWP Specification add new route to allow logging of custom events","title":"Log event"},{"location":"commands/session/events/log-event/#log-event","text":"Store a custom event","title":"Log event"},{"location":"commands/session/events/log-event/#example-usage","text":"// Java CustomEvent evt = new CustomEvent(); evt.setEventName( funEvent ); evt.setVendor( appium ); driver.logEvent(evt); # Python driver.log_event('appium', 'funEvent') // Javascript // webdriver.io example driver.logEvent('appium', 'funEvent') // wd example // WD code here # Ruby # ruby_lib example driver.log_event vendor: 'appium', event: 'funEvent' # ruby_lib_core example @driver.logs.event vendor: 'appium', event: 'funEvent' @driver.logs.event = { vendor: 'appium', event: 'anotherEvent' } // C# // csharp Code here","title":"Example Usage"},{"location":"commands/session/events/log-event/#description","text":"This API allows us to store a custom event. Appium provides Appium Event Timing to track when events happen. This custom event feature allow users to store a custom event as the feature.","title":"Description"},{"location":"commands/session/events/log-event/#support","text":"","title":"Support"},{"location":"commands/session/events/log-event/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.16.0+ All UIAutomation 8.0 to 9.3 1.16.0+ All Android Espresso ?+ 1.16.0+ All UiAutomator2 ?+ 1.16.0+ All UiAutomator 4.3+ 1.16.0+ All Mac Mac ?+ 1.16.0+ All Windows Windows 10+ 1.16.0+ All","title":"Appium Server"},{"location":"commands/session/events/log-event/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All appium.github.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby All www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/session/events/log-event/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/events/log-event/#endpoint","text":"POST /session/:session_id/appium/log_event","title":"Endpoint"},{"location":"commands/session/events/log-event/#url-parameters","text":"None","title":"URL Parameters"},{"location":"commands/session/events/log-event/#json-parameters","text":"name type description vendor string The name of vendor. It will be vendor in vendor:event . event string The name of event. It will be event in vendor:event .","title":"JSON Parameters"},{"location":"commands/session/events/log-event/#response","text":"null","title":"Response"},{"location":"commands/session/events/log-event/#see-also","text":"JSONWP Specification add new route to allow logging of custom events","title":"See Also"},{"location":"commands/session/geolocation/","text":"Appium API Documentation ### /docs/en/commands/session/geolocation Get Geolocation Set Geolocation","title":"Home"},{"location":"commands/session/geolocation/#appium-api-documentation","text":"### /docs/en/commands/session/geolocation Get Geolocation Set Geolocation","title":"Appium API Documentation"},{"location":"commands/session/geolocation/get-geolocation/","text":"Get Geolocation Get the current geo location Example Usage // Java Location location = driver.location(); // Must be a driver that implements LocationContext # Python location = self.driver.location() // Javascript // webdriver.io example let location = driver.getGeoLocation(); // wd example let location = await driver.getGeoLocation(); # Ruby # ruby_lib example location # ruby_lib_core example @driver.location // C# Location location = driver.Location; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/location URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response name type description latitude number The current geolocation latitude longitude number The current geolocation longitude altitude number The current geolocation altitude See Also JSONWP Specification","title":"Get Geolocation"},{"location":"commands/session/geolocation/get-geolocation/#get-geolocation","text":"Get the current geo location","title":"Get Geolocation"},{"location":"commands/session/geolocation/get-geolocation/#example-usage","text":"// Java Location location = driver.location(); // Must be a driver that implements LocationContext # Python location = self.driver.location() // Javascript // webdriver.io example let location = driver.getGeoLocation(); // wd example let location = await driver.getGeoLocation(); # Ruby # ruby_lib example location # ruby_lib_core example @driver.location // C# Location location = driver.Location;","title":"Example Usage"},{"location":"commands/session/geolocation/get-geolocation/#support","text":"","title":"Support"},{"location":"commands/session/geolocation/get-geolocation/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/geolocation/get-geolocation/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/geolocation/get-geolocation/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/geolocation/get-geolocation/#endpoint","text":"GET /session/:session_id/location","title":"Endpoint"},{"location":"commands/session/geolocation/get-geolocation/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/geolocation/get-geolocation/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/geolocation/get-geolocation/#response","text":"name type description latitude number The current geolocation latitude longitude number The current geolocation longitude altitude number The current geolocation altitude","title":"Response"},{"location":"commands/session/geolocation/get-geolocation/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/geolocation/set-geolocation/","text":"Set Geolocation Set the current geo location Example Usage // Java driver.setLocation(new Location(49, 123, 10)); // Must be a driver that implements LocationContext # Python self.driver.set_location(49, 123, 10) // Javascript // webdriver.io example driver.setGeoLocation({latitude: 121.21 , longitude: 11.56 , altitude: 94.23 }); // wd example await driver.setGeoLocation(121.21, 11.56, 10); # Ruby # ruby_lib example set_location(121.21, 11.56, 94.23) # ruby_lib_core example @driver.set_location(121.21, 11.56, 94.23) // C# driver.Location.Altitude = 94.23; driver.Location.Latitude = 121.21; driver.Location.Longitude = 11.56; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/location URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description latitude number The desired geolocation latitude longitude number The desired geolocation longitude altitude number The desired geolocation altitude (optional. altitude works on real Android devices only) Response null See Also JSONWP Specification","title":"Set Geolocation"},{"location":"commands/session/geolocation/set-geolocation/#set-geolocation","text":"Set the current geo location","title":"Set Geolocation"},{"location":"commands/session/geolocation/set-geolocation/#example-usage","text":"// Java driver.setLocation(new Location(49, 123, 10)); // Must be a driver that implements LocationContext # Python self.driver.set_location(49, 123, 10) // Javascript // webdriver.io example driver.setGeoLocation({latitude: 121.21 , longitude: 11.56 , altitude: 94.23 }); // wd example await driver.setGeoLocation(121.21, 11.56, 10); # Ruby # ruby_lib example set_location(121.21, 11.56, 94.23) # ruby_lib_core example @driver.set_location(121.21, 11.56, 94.23) // C# driver.Location.Altitude = 94.23; driver.Location.Latitude = 121.21; driver.Location.Longitude = 11.56;","title":"Example Usage"},{"location":"commands/session/geolocation/set-geolocation/#support","text":"","title":"Support"},{"location":"commands/session/geolocation/set-geolocation/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/geolocation/set-geolocation/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/geolocation/set-geolocation/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/geolocation/set-geolocation/#endpoint","text":"POST /session/:session_id/location","title":"Endpoint"},{"location":"commands/session/geolocation/set-geolocation/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/geolocation/set-geolocation/#json-parameters","text":"name type description latitude number The desired geolocation latitude longitude number The desired geolocation longitude altitude number The desired geolocation altitude (optional. altitude works on real Android devices only)","title":"JSON Parameters"},{"location":"commands/session/geolocation/set-geolocation/#response","text":"null","title":"Response"},{"location":"commands/session/geolocation/set-geolocation/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/logs/","text":"Appium API Documentation ### /docs/en/commands/session/logs Get Log Types Get Logs","title":"Home"},{"location":"commands/session/logs/#appium-api-documentation","text":"### /docs/en/commands/session/logs Get Log Types Get Logs","title":"Appium API Documentation"},{"location":"commands/session/logs/get-log-types/","text":"Get available log types Get available log types as a list of strings Example Usage // Java Set String logTypes = driver.manage().logs().getAvailableLogTypes(); # Python log_types = driver.log_types // Javascript // webdriver.io example driver.getLogTypes() // wd example const logTypes = await driver.logTypes(); # Ruby # ruby_lib example get_available_log_types # ruby_lib_core example @driver.logs.available_types // C# IReadOnlyCollection string logTypes = driver.Manage().Logs.AvailableLogTypes; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/log/types URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The list of log types ( array string ) See Also JSONWP Specification","title":"Get Log Types"},{"location":"commands/session/logs/get-log-types/#get-available-log-types","text":"Get available log types as a list of strings","title":"Get available log types"},{"location":"commands/session/logs/get-log-types/#example-usage","text":"// Java Set String logTypes = driver.manage().logs().getAvailableLogTypes(); # Python log_types = driver.log_types // Javascript // webdriver.io example driver.getLogTypes() // wd example const logTypes = await driver.logTypes(); # Ruby # ruby_lib example get_available_log_types # ruby_lib_core example @driver.logs.available_types // C# IReadOnlyCollection string logTypes = driver.Manage().Logs.AvailableLogTypes;","title":"Example Usage"},{"location":"commands/session/logs/get-log-types/#support","text":"","title":"Support"},{"location":"commands/session/logs/get-log-types/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/logs/get-log-types/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/logs/get-log-types/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/logs/get-log-types/#endpoint","text":"GET /session/:session_id/log/types","title":"Endpoint"},{"location":"commands/session/logs/get-log-types/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/logs/get-log-types/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/logs/get-log-types/#response","text":"The list of log types ( array string )","title":"Response"},{"location":"commands/session/logs/get-log-types/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/logs/get-log/","text":"Get Logs Get the log for a given log type. Log buffer is reset after each request Example Usage // Java LogEntries logEntries = driver.manage().logs().get( driver ); # Python logs = driver.get_log('driver') // Javascript // webdriver.io example let logs = driver.getLogs('driver') // wd example const logs = await driver.log('driver'); # Ruby # ruby_lib example get_log('driver') # ruby_lib_core example @driver.logs.get 'driver' // C# ILogs logs = driver.Manage().Logs; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/log URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description type string The log type Response The list of log entries ( array object ) See Also JSONWP Specification","title":"Get Logs"},{"location":"commands/session/logs/get-log/#get-logs","text":"Get the log for a given log type. Log buffer is reset after each request","title":"Get Logs"},{"location":"commands/session/logs/get-log/#example-usage","text":"// Java LogEntries logEntries = driver.manage().logs().get( driver ); # Python logs = driver.get_log('driver') // Javascript // webdriver.io example let logs = driver.getLogs('driver') // wd example const logs = await driver.log('driver'); # Ruby # ruby_lib example get_log('driver') # ruby_lib_core example @driver.logs.get 'driver' // C# ILogs logs = driver.Manage().Logs;","title":"Example Usage"},{"location":"commands/session/logs/get-log/#support","text":"","title":"Support"},{"location":"commands/session/logs/get-log/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/logs/get-log/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/logs/get-log/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/logs/get-log/#endpoint","text":"POST /session/:session_id/log","title":"Endpoint"},{"location":"commands/session/logs/get-log/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/logs/get-log/#json-parameters","text":"name type description type string The log type","title":"JSON Parameters"},{"location":"commands/session/logs/get-log/#response","text":"The list of log entries ( array object )","title":"Response"},{"location":"commands/session/logs/get-log/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/orientation/","text":"Appium API Documentation ### /docs/en/commands/session/orientation Get Orientation Set Orientation","title":"Home"},{"location":"commands/session/orientation/#appium-api-documentation","text":"### /docs/en/commands/session/orientation Get Orientation Set Orientation","title":"Appium API Documentation"},{"location":"commands/session/orientation/get-orientation/","text":"Get Orientation Get the current device/browser orientation Example Usage // Java ScreenOrientation orientation = driver.getOrientation(); # Python orientation = self.driver.orientation // Javascript // webdriver.io example let orientation = driver.getOrientation(); // wd example let orientation = await driver.getOrientation(); # Ruby # ruby_lib example orientation # ruby_lib_core example @driver.orientation // C# ScreenOrientation orientation = driver.Orientation; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/orientation URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The current browser orientation {LANDSCAPE|PORTRAIT} ( string ) See Also JSONWP Specification","title":"Get Orientation"},{"location":"commands/session/orientation/get-orientation/#get-orientation","text":"Get the current device/browser orientation","title":"Get Orientation"},{"location":"commands/session/orientation/get-orientation/#example-usage","text":"// Java ScreenOrientation orientation = driver.getOrientation(); # Python orientation = self.driver.orientation // Javascript // webdriver.io example let orientation = driver.getOrientation(); // wd example let orientation = await driver.getOrientation(); # Ruby # ruby_lib example orientation # ruby_lib_core example @driver.orientation // C# ScreenOrientation orientation = driver.Orientation;","title":"Example Usage"},{"location":"commands/session/orientation/get-orientation/#support","text":"","title":"Support"},{"location":"commands/session/orientation/get-orientation/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/orientation/get-orientation/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/orientation/get-orientation/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/orientation/get-orientation/#endpoint","text":"GET /session/:session_id/orientation","title":"Endpoint"},{"location":"commands/session/orientation/get-orientation/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/orientation/get-orientation/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/orientation/get-orientation/#response","text":"The current browser orientation {LANDSCAPE|PORTRAIT} ( string )","title":"Response"},{"location":"commands/session/orientation/get-orientation/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/orientation/set-orientation/","text":"Set Orientation Set the current device/browser orientation Example Usage // Java driver.rotate(ScreenOrientation.LANDSCAPE); # Python driver.orientation = LANDSCAPE // Javascript // webdriver.io example driver.setOrientation( LANDSCAPE ); // wd example await driver.setOrientation('LANDSCAPE'); # Ruby # ruby_lib example rotation = :landscape # ruby_lib_core example @driver.rotation = :landscape // C# driver.Orientation = ScreenOrientation.Landscape; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/orientation URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description orientation string The desired orientation - {LANDSCAPE Response null See Also JSONWP Specification","title":"Set Orientation"},{"location":"commands/session/orientation/set-orientation/#set-orientation","text":"Set the current device/browser orientation","title":"Set Orientation"},{"location":"commands/session/orientation/set-orientation/#example-usage","text":"// Java driver.rotate(ScreenOrientation.LANDSCAPE); # Python driver.orientation = LANDSCAPE // Javascript // webdriver.io example driver.setOrientation( LANDSCAPE ); // wd example await driver.setOrientation('LANDSCAPE'); # Ruby # ruby_lib example rotation = :landscape # ruby_lib_core example @driver.rotation = :landscape // C# driver.Orientation = ScreenOrientation.Landscape;","title":"Example Usage"},{"location":"commands/session/orientation/set-orientation/#support","text":"","title":"Support"},{"location":"commands/session/orientation/set-orientation/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/orientation/set-orientation/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/orientation/set-orientation/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/orientation/set-orientation/#endpoint","text":"POST /session/:session_id/orientation","title":"Endpoint"},{"location":"commands/session/orientation/set-orientation/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/orientation/set-orientation/#json-parameters","text":"name type description orientation string The desired orientation - {LANDSCAPE","title":"JSON Parameters"},{"location":"commands/session/orientation/set-orientation/#response","text":"null","title":"Response"},{"location":"commands/session/orientation/set-orientation/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/settings/","text":"Appium API Documentation ### /docs/en/commands/session/settings Update Settings Get Device Settings","title":"Home"},{"location":"commands/session/settings/#appium-api-documentation","text":"### /docs/en/commands/session/settings Update Settings Get Device Settings","title":"Appium API Documentation"},{"location":"commands/session/settings/get-settings/","text":"Retrieve Device Settings Retrieve the current settings on the device Example Usage // Java Map String, Object settings = driver.getSettings(); # Python self.driver.get_settings() // Javascript // webdriver.io example let settings = driver.getSettings(); // wd example await driver.settings(); # Ruby # ruby_lib example get_settings # ruby_lib_core example @driver.get_settings @driver.settings.get // C# driver.Settings Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python None appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby None www.rubydoc.info C# None github.com HTTP API Specifications Endpoint GET /session/:session_id/appium/settings URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response a JSON hash of all the currently specified settings, see Settings API . ( array object ) See Also JSONWP Specification","title":"Get Device Settings"},{"location":"commands/session/settings/get-settings/#retrieve-device-settings","text":"Retrieve the current settings on the device","title":"Retrieve Device Settings"},{"location":"commands/session/settings/get-settings/#example-usage","text":"// Java Map String, Object settings = driver.getSettings(); # Python self.driver.get_settings() // Javascript // webdriver.io example let settings = driver.getSettings(); // wd example await driver.settings(); # Ruby # ruby_lib example get_settings # ruby_lib_core example @driver.get_settings @driver.settings.get // C# driver.Settings","title":"Example Usage"},{"location":"commands/session/settings/get-settings/#support","text":"","title":"Support"},{"location":"commands/session/settings/get-settings/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/settings/get-settings/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python None appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby None www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/session/settings/get-settings/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/settings/get-settings/#endpoint","text":"GET /session/:session_id/appium/settings","title":"Endpoint"},{"location":"commands/session/settings/get-settings/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/settings/get-settings/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/session/settings/get-settings/#response","text":"a JSON hash of all the currently specified settings, see Settings API . ( array object )","title":"Response"},{"location":"commands/session/settings/get-settings/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/settings/update-settings/","text":"Update Device Settings Update the current setting on the device Example Usage // Java driver.setSetting(Setting.WAIT_FOR_IDLE_TIMEOUT, 5000); # Python self.driver.update_settings({ sample : value })) // Javascript // webdriver.io example driver.updateSettings({nativeWebTap: true}); // wd example await driver.updateSettings({nativeWebTap: true}); # Ruby # ruby_lib example update_settings({'nativeWebTap' = true, 'allowInvisibleElements' = true}) # ruby_lib_core example @driver.update_settings({'nativeWebTap' = true, 'allowInvisibleElements' = true}) @driver.settings.update({'nativeWebTap' = true, 'allowInvisibleElements' = true}) @driver.settings = {'nativeWebTap' = true, 'allowInvisibleElements' = true} // C# driver.Settings = new Dictionary string, object () { [AutomatorSetting.KeyInjectionDelay] = 1500, [ nativeWebTap ] = true }; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/appium/settings URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description settings array object a JSON hash of settings to update, see Settings API . Response null See Also JSONWP Specification","title":"Update Settings"},{"location":"commands/session/settings/update-settings/#update-device-settings","text":"Update the current setting on the device","title":"Update Device Settings"},{"location":"commands/session/settings/update-settings/#example-usage","text":"// Java driver.setSetting(Setting.WAIT_FOR_IDLE_TIMEOUT, 5000); # Python self.driver.update_settings({ sample : value })) // Javascript // webdriver.io example driver.updateSettings({nativeWebTap: true}); // wd example await driver.updateSettings({nativeWebTap: true}); # Ruby # ruby_lib example update_settings({'nativeWebTap' = true, 'allowInvisibleElements' = true}) # ruby_lib_core example @driver.update_settings({'nativeWebTap' = true, 'allowInvisibleElements' = true}) @driver.settings.update({'nativeWebTap' = true, 'allowInvisibleElements' = true}) @driver.settings = {'nativeWebTap' = true, 'allowInvisibleElements' = true} // C# driver.Settings = new Dictionary string, object () { [AutomatorSetting.KeyInjectionDelay] = 1500, [ nativeWebTap ] = true };","title":"Example Usage"},{"location":"commands/session/settings/update-settings/#support","text":"","title":"Support"},{"location":"commands/session/settings/update-settings/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/settings/update-settings/#appium-clients","text":"Language Support Documentation Java All appium.github.io Python All appium.github.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/settings/update-settings/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/settings/update-settings/#endpoint","text":"POST /session/:session_id/appium/settings","title":"Endpoint"},{"location":"commands/session/settings/update-settings/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/settings/update-settings/#json-parameters","text":"name type description settings array object a JSON hash of settings to update, see Settings API .","title":"JSON Parameters"},{"location":"commands/session/settings/update-settings/#response","text":"null","title":"Response"},{"location":"commands/session/settings/update-settings/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/timeouts/","text":"Appium API Documentation ### /docs/en/commands/session/timeouts Timeouts Implicit Wait Async Script","title":"Home"},{"location":"commands/session/timeouts/#appium-api-documentation","text":"### /docs/en/commands/session/timeouts Timeouts Implicit Wait Async Script","title":"Appium API Documentation"},{"location":"commands/session/timeouts/async-script/","text":"Set Script Timeout Set the amount of time, in milliseconds, that asynchronous scripts executed by execute async are permitted to run before they are aborted (Web context only) Example Usage // Java driver.manage().timeouts().setScriptTimeout(30, TimeUnit.SECONDS); # Python self.driver.set_script_timeout(5000) // Javascript // webdriver.io example driver.setAsyncTimeout(5000) // wd example await driver.setAsyncScriptTimeout(5000); # Ruby # ruby_lib example script_timeout(5) # Ruby translates it to seconds # ruby_lib_core example @driver.script_timeout(5) # Ruby translates it to seconds // C# // TODO C# sample Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/timeouts/async_script URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description ms number The amount of time, in milliseconds, that time-limited commands are permitted to run Response null See Also JSONWP Specification","title":"Async Script"},{"location":"commands/session/timeouts/async-script/#set-script-timeout","text":"Set the amount of time, in milliseconds, that asynchronous scripts executed by execute async are permitted to run before they are aborted (Web context only)","title":"Set Script Timeout"},{"location":"commands/session/timeouts/async-script/#example-usage","text":"// Java driver.manage().timeouts().setScriptTimeout(30, TimeUnit.SECONDS); # Python self.driver.set_script_timeout(5000) // Javascript // webdriver.io example driver.setAsyncTimeout(5000) // wd example await driver.setAsyncScriptTimeout(5000); # Ruby # ruby_lib example script_timeout(5) # Ruby translates it to seconds # ruby_lib_core example @driver.script_timeout(5) # Ruby translates it to seconds // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/session/timeouts/async-script/#support","text":"","title":"Support"},{"location":"commands/session/timeouts/async-script/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/session/timeouts/async-script/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/timeouts/async-script/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/timeouts/async-script/#endpoint","text":"POST /session/:session_id/timeouts/async_script","title":"Endpoint"},{"location":"commands/session/timeouts/async-script/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/timeouts/async-script/#json-parameters","text":"name type description ms number The amount of time, in milliseconds, that time-limited commands are permitted to run","title":"JSON Parameters"},{"location":"commands/session/timeouts/async-script/#response","text":"null","title":"Response"},{"location":"commands/session/timeouts/async-script/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/session/timeouts/implicit-wait/","text":"Set Implicit Wait Timeout Set the amount of time the driver should wait when searching for elements Example Usage // Java driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); # Python self.driver.implicitly_wait(5) # waits 5 seconds // Javascript // webdriver.io example driver.setImplicitTimeout(5000) // wd example await driver.setImplicitWaitTimeout(5000); # Ruby # ruby_lib example manage.timeouts.implicit_wait = 5 # Ruby translates it to seconds # ruby_lib_core example @driver.manage.timeouts.implicit_wait = 5 # Ruby translates it to seconds // C# driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(30); Description When searching for a single element, the driver should poll the page until an element is found or the timeout expires, whichever occurs first. When searching for multiple elements, the driver should poll the page until at least one element is found or the timeout expires, at which point it should return an empty list. If this command is never sent, the driver should default to an implicit wait of 0ms Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/timeouts/implicit_wait URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description ms number The amount of time, in milliseconds, that time-limited commands are permitted to run Response null See Also W3C Specification JSONWP Specification","title":"Implicit Wait"},{"location":"commands/session/timeouts/implicit-wait/#set-implicit-wait-timeout","text":"Set the amount of time the driver should wait when searching for elements","title":"Set Implicit Wait Timeout"},{"location":"commands/session/timeouts/implicit-wait/#example-usage","text":"// Java driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); # Python self.driver.implicitly_wait(5) # waits 5 seconds // Javascript // webdriver.io example driver.setImplicitTimeout(5000) // wd example await driver.setImplicitWaitTimeout(5000); # Ruby # ruby_lib example manage.timeouts.implicit_wait = 5 # Ruby translates it to seconds # ruby_lib_core example @driver.manage.timeouts.implicit_wait = 5 # Ruby translates it to seconds // C# driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(30);","title":"Example Usage"},{"location":"commands/session/timeouts/implicit-wait/#description","text":"When searching for a single element, the driver should poll the page until an element is found or the timeout expires, whichever occurs first. When searching for multiple elements, the driver should poll the page until at least one element is found or the timeout expires, at which point it should return an empty list. If this command is never sent, the driver should default to an implicit wait of 0ms","title":"Description"},{"location":"commands/session/timeouts/implicit-wait/#support","text":"","title":"Support"},{"location":"commands/session/timeouts/implicit-wait/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/timeouts/implicit-wait/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/timeouts/implicit-wait/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/timeouts/implicit-wait/#endpoint","text":"POST /session/:session_id/timeouts/implicit_wait","title":"Endpoint"},{"location":"commands/session/timeouts/implicit-wait/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/timeouts/implicit-wait/#json-parameters","text":"name type description ms number The amount of time, in milliseconds, that time-limited commands are permitted to run","title":"JSON Parameters"},{"location":"commands/session/timeouts/implicit-wait/#response","text":"null","title":"Response"},{"location":"commands/session/timeouts/implicit-wait/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/session/timeouts/timeouts/","text":"Set Timeouts Configure the amount of time that a particular type of operation can execute for before they are aborted Example Usage // Java driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS); # Python self.driver.set_page_load_timeout(5000) // Javascript // webdriver.io example driver.setTimeouts(5000) // wd example await driver.setPageLoadTimeout(5000); # Ruby # ruby_lib example timeout('pageLoad', 5) # Ruby translates it to seconds # ruby_lib_core example @driver.timeout('pageLoad', 5) # Ruby translates it to seconds // C# driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(30); Description The types of timeouts are 'page load', 'script' and 'implicit' . (The example usage is just 'page load') Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/timeouts URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description type string The type of operation to set the timeout for. Valid values are: 'script' for script timeouts, 'implicit' for modifying the implicit wait timeout and 'page load' for setting a page load timeout. ms number The amount of time, in milliseconds, that time-limited commands are permitted to run Response null See Also W3C Specification JSONWP Specification","title":"Timeouts"},{"location":"commands/session/timeouts/timeouts/#set-timeouts","text":"Configure the amount of time that a particular type of operation can execute for before they are aborted","title":"Set Timeouts"},{"location":"commands/session/timeouts/timeouts/#example-usage","text":"// Java driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS); # Python self.driver.set_page_load_timeout(5000) // Javascript // webdriver.io example driver.setTimeouts(5000) // wd example await driver.setPageLoadTimeout(5000); # Ruby # ruby_lib example timeout('pageLoad', 5) # Ruby translates it to seconds # ruby_lib_core example @driver.timeout('pageLoad', 5) # Ruby translates it to seconds // C# driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(30);","title":"Example Usage"},{"location":"commands/session/timeouts/timeouts/#description","text":"The types of timeouts are 'page load', 'script' and 'implicit' . (The example usage is just 'page load')","title":"Description"},{"location":"commands/session/timeouts/timeouts/#support","text":"","title":"Support"},{"location":"commands/session/timeouts/timeouts/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac ?+ 1.6.4+ All Windows Windows 10+ 1.6.0+ All","title":"Appium Server"},{"location":"commands/session/timeouts/timeouts/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/session/timeouts/timeouts/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/session/timeouts/timeouts/#endpoint","text":"POST /session/:session_id/timeouts","title":"Endpoint"},{"location":"commands/session/timeouts/timeouts/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/session/timeouts/timeouts/#json-parameters","text":"name type description type string The type of operation to set the timeout for. Valid values are: 'script' for script timeouts, 'implicit' for modifying the implicit wait timeout and 'page load' for setting a page load timeout. ms number The amount of time, in milliseconds, that time-limited commands are permitted to run","title":"JSON Parameters"},{"location":"commands/session/timeouts/timeouts/#response","text":"null","title":"Response"},{"location":"commands/session/timeouts/timeouts/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/","text":"Appium API Documentation ### /docs/en/commands/web Window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window Navigation Go to URL Get URL Back Forward Refresh Storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies Frame Switch to Frame Switch to Parent Frame Execute Async Execute","title":"Home"},{"location":"commands/web/#appium-api-documentation","text":"### /docs/en/commands/web Window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window Navigation Go to URL Get URL Back Forward Refresh Storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies Frame Switch to Frame Switch to Parent Frame Execute Async Execute","title":"Appium API Documentation"},{"location":"commands/web/execute-async/","text":"Execute Async Script Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context only) Example Usage // Java ((JavascriptExecutor) driver).executeAsyncScript( window.setTimeout(arguments[arguments.length - 1], 500); ); # Python self.driver.execute_async_script(\u2018document.title\u2019) // Javascript // webdriver.io example driver.setAsyncTimeout(5000) var result = browser.executeAsync(function(a, b, c, d, done) { // browser context - you may access neither client nor console setTimeout(function() { done(a + b + c + d); }, 3000); }, 1, 2, 3, 4) // node.js context - client and console are available console.log(result); // outputs: 10 // wd example await driver.safeExecuteAsync('document.title'); # Ruby # ruby_lib example execute_async_script( document.title ) # ruby_lib_core example @driver.execute_async_script( document.title ) // C# // TODO C# sample Description The executed script is assumed to be asynchronous and must signal that is done by invoking the provided callback, which is always provided as the final argument to the function. The value to this callback will be returned to the client. Asynchronous script commands may not span page loads. If an unload event is fired while waiting for a script result, an error should be returned to the client. The script argument defines the script to execute in the form of a function body. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified. The final argument will always be a callback function that must be invoked to signal that the script has finished. Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects. Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java None seleniumhq.github.io Python None selenium-python.readthedocs.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby None www.rubydoc.info C# None github.com HTTP API Specifications Endpoint POST /session/:session_id/execute_async URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description script string The script to execute args array The script arguments Response The script result ( any ) See Also W3C Specification JSONWP Specification","title":"Execute Async"},{"location":"commands/web/execute-async/#execute-async-script","text":"Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context only)","title":"Execute Async Script"},{"location":"commands/web/execute-async/#example-usage","text":"// Java ((JavascriptExecutor) driver).executeAsyncScript( window.setTimeout(arguments[arguments.length - 1], 500); ); # Python self.driver.execute_async_script(\u2018document.title\u2019) // Javascript // webdriver.io example driver.setAsyncTimeout(5000) var result = browser.executeAsync(function(a, b, c, d, done) { // browser context - you may access neither client nor console setTimeout(function() { done(a + b + c + d); }, 3000); }, 1, 2, 3, 4) // node.js context - client and console are available console.log(result); // outputs: 10 // wd example await driver.safeExecuteAsync('document.title'); # Ruby # ruby_lib example execute_async_script( document.title ) # ruby_lib_core example @driver.execute_async_script( document.title ) // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/web/execute-async/#description","text":"The executed script is assumed to be asynchronous and must signal that is done by invoking the provided callback, which is always provided as the final argument to the function. The value to this callback will be returned to the client. Asynchronous script commands may not span page loads. If an unload event is fired while waiting for a script result, an error should be returned to the client. The script argument defines the script to execute in the form of a function body. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified. The final argument will always be a callback function that must be invoked to signal that the script has finished. Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects.","title":"Description"},{"location":"commands/web/execute-async/#support","text":"","title":"Support"},{"location":"commands/web/execute-async/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/execute-async/#appium-clients","text":"Language Support Documentation Java None seleniumhq.github.io Python None selenium-python.readthedocs.io Javascript (WebdriverIO) None Javascript (WD) None github.com Ruby None www.rubydoc.info C# None github.com","title":"Appium Clients"},{"location":"commands/web/execute-async/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/execute-async/#endpoint","text":"POST /session/:session_id/execute_async","title":"Endpoint"},{"location":"commands/web/execute-async/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/execute-async/#json-parameters","text":"name type description script string The script to execute args array The script arguments","title":"JSON Parameters"},{"location":"commands/web/execute-async/#response","text":"The script result ( any )","title":"Response"},{"location":"commands/web/execute-async/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/execute/","text":"Execute Script Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context). Run a native mobile command (Native Context). Example Usage // Java ((JavascriptExecutor) driver).executeScript( window.setTimeout(arguments[arguments.length - 1], 500); ); # Python self.driver.execute_script(\u2018document.title\u2019) // Javascript // webdriver.io example var result = browser.execute(function(a, b, c, d) { // browser context - you may not access client or console return a + b + c + d; }, 1, 2, 3, 4) // node.js context - client and console are available console.log(result); // outputs: 10 // wd example await driver.execute('document.title'); # Ruby # ruby_lib example execute_script( document.title ) # ruby_lib_core example @driver.execute_script( document.title ) // C# // TODO C# sample Description The executed script is assumed to be synchronous and the result of evaluating the script is returned to the client. The script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified. Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects. For execute in the native context, see Mobile Commands . Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/execute URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description script string The script to execute args array The script arguments Response The script result ( any ) See Also W3C Specification JSONWP Specification","title":"Execute"},{"location":"commands/web/execute/#execute-script","text":"Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context). Run a native mobile command (Native Context).","title":"Execute Script"},{"location":"commands/web/execute/#example-usage","text":"// Java ((JavascriptExecutor) driver).executeScript( window.setTimeout(arguments[arguments.length - 1], 500); ); # Python self.driver.execute_script(\u2018document.title\u2019) // Javascript // webdriver.io example var result = browser.execute(function(a, b, c, d) { // browser context - you may not access client or console return a + b + c + d; }, 1, 2, 3, 4) // node.js context - client and console are available console.log(result); // outputs: 10 // wd example await driver.execute('document.title'); # Ruby # ruby_lib example execute_script( document.title ) # ruby_lib_core example @driver.execute_script( document.title ) // C# // TODO C# sample","title":"Example Usage"},{"location":"commands/web/execute/#description","text":"The executed script is assumed to be synchronous and the result of evaluating the script is returned to the client. The script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified. Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects. For execute in the native context, see Mobile Commands .","title":"Description"},{"location":"commands/web/execute/#support","text":"","title":"Support"},{"location":"commands/web/execute/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/execute/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/execute/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/execute/#endpoint","text":"POST /session/:session_id/execute","title":"Endpoint"},{"location":"commands/web/execute/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/execute/#json-parameters","text":"name type description script string The script to execute args array The script arguments","title":"JSON Parameters"},{"location":"commands/web/execute/#response","text":"The script result ( any )","title":"Response"},{"location":"commands/web/execute/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/frame/","text":"Appium API Documentation ### /docs/en/commands/web/frame Switch to Frame Switch to Parent Frame","title":"Home"},{"location":"commands/web/frame/#appium-api-documentation","text":"### /docs/en/commands/web/frame Switch to Frame Switch to Parent Frame","title":"Appium API Documentation"},{"location":"commands/web/frame/parent/","text":"Switch to Parent Frame Change focus to the parent context (Web context only) Example Usage // Java driver.switchTo().parentFrame(); # Python self.driver.switch_to.parent() // Javascript // webdriver.io example driver.switchToParentFrame(); // Not supported # Ruby # ruby_lib example parent_frame # ruby_lib_core example @driver.parent_frame // C# driver.SwitchTo().ParentFrame(); Description If the current context is the top level browsing context, the context remains unchanged Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/url URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The current URL ( string ) See Also W3C Specification JSONWP Specification","title":"Switch to Parent Frame"},{"location":"commands/web/frame/parent/#switch-to-parent-frame","text":"Change focus to the parent context (Web context only)","title":"Switch to Parent Frame"},{"location":"commands/web/frame/parent/#example-usage","text":"// Java driver.switchTo().parentFrame(); # Python self.driver.switch_to.parent() // Javascript // webdriver.io example driver.switchToParentFrame(); // Not supported # Ruby # ruby_lib example parent_frame # ruby_lib_core example @driver.parent_frame // C# driver.SwitchTo().ParentFrame();","title":"Example Usage"},{"location":"commands/web/frame/parent/#description","text":"If the current context is the top level browsing context, the context remains unchanged","title":"Description"},{"location":"commands/web/frame/parent/#support","text":"","title":"Support"},{"location":"commands/web/frame/parent/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/frame/parent/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/frame/parent/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/frame/parent/#endpoint","text":"GET /session/:session_id/url","title":"Endpoint"},{"location":"commands/web/frame/parent/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/frame/parent/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/frame/parent/#response","text":"The current URL ( string )","title":"Response"},{"location":"commands/web/frame/parent/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/frame/switch/","text":"Switch to Frame Change focus to another frame on the page (Web context only) Example Usage // Java driver.switchTo().frame(3); # Python self.driver.switch_to.frame(3) // Javascript // webdriver.io example driver.switchToFrame(3); // wd example await driver.frame(3); # Ruby # ruby_lib example switch_to.frame(3) # ruby_lib_core example @driver.switch_to.frame(3) // C# driver.SwitchTo().Frame(3); Description If the frame id is null, the server should switch to the page's default content Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/frame URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description id string|number|null|WebElement JSON Object Identifier for the frame to change focus to. Response null See Also W3C Specification JSONWP Specification","title":"Switch to Frame"},{"location":"commands/web/frame/switch/#switch-to-frame","text":"Change focus to another frame on the page (Web context only)","title":"Switch to Frame"},{"location":"commands/web/frame/switch/#example-usage","text":"// Java driver.switchTo().frame(3); # Python self.driver.switch_to.frame(3) // Javascript // webdriver.io example driver.switchToFrame(3); // wd example await driver.frame(3); # Ruby # ruby_lib example switch_to.frame(3) # ruby_lib_core example @driver.switch_to.frame(3) // C# driver.SwitchTo().Frame(3);","title":"Example Usage"},{"location":"commands/web/frame/switch/#description","text":"If the frame id is null, the server should switch to the page's default content","title":"Description"},{"location":"commands/web/frame/switch/#support","text":"","title":"Support"},{"location":"commands/web/frame/switch/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/frame/switch/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/frame/switch/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/frame/switch/#endpoint","text":"POST /session/:session_id/frame","title":"Endpoint"},{"location":"commands/web/frame/switch/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/frame/switch/#json-parameters","text":"name type description id string|number|null|WebElement JSON Object Identifier for the frame to change focus to.","title":"JSON Parameters"},{"location":"commands/web/frame/switch/#response","text":"null","title":"Response"},{"location":"commands/web/frame/switch/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/navigation/","text":"Appium API Documentation ### /docs/en/commands/web/navigation Go to URL Get URL Back Forward Refresh","title":"Home"},{"location":"commands/web/navigation/#appium-api-documentation","text":"### /docs/en/commands/web/navigation Go to URL Get URL Back Forward Refresh","title":"Appium API Documentation"},{"location":"commands/web/navigation/back/","text":"Go Back Navigate backwards in the browser history, if possible (Web context only) Example Usage // Java driver.back(); # Python self.driver.back() // Javascript // webdriver.io example driver.back(); // wd example await driver.back(); # Ruby # ruby_lib example back # ruby_lib_core example @driver.back // C# driver.Navigate().Back(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/back URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Back"},{"location":"commands/web/navigation/back/#go-back","text":"Navigate backwards in the browser history, if possible (Web context only)","title":"Go Back"},{"location":"commands/web/navigation/back/#example-usage","text":"// Java driver.back(); # Python self.driver.back() // Javascript // webdriver.io example driver.back(); // wd example await driver.back(); # Ruby # ruby_lib example back # ruby_lib_core example @driver.back // C# driver.Navigate().Back();","title":"Example Usage"},{"location":"commands/web/navigation/back/#support","text":"","title":"Support"},{"location":"commands/web/navigation/back/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android Espresso ?+ 1.9.0+ All UiAutomator2 ?+ 1.6.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/navigation/back/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/navigation/back/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/navigation/back/#endpoint","text":"POST /session/:session_id/back","title":"Endpoint"},{"location":"commands/web/navigation/back/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/navigation/back/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/navigation/back/#response","text":"null","title":"Response"},{"location":"commands/web/navigation/back/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/navigation/forward/","text":"Go Forward Navigate forwards in the browser history, if possible (Web context only) Example Usage // Java driver.forward(); # Python self.driver.forward() // Javascript // webdriver.io example driver.forward(); // wd example await driver.forward(); # Ruby # ruby_lib example forward # ruby_lib_core example @driver.forward // C# driver.Navigate().Forward(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/forward URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Forward"},{"location":"commands/web/navigation/forward/#go-forward","text":"Navigate forwards in the browser history, if possible (Web context only)","title":"Go Forward"},{"location":"commands/web/navigation/forward/#example-usage","text":"// Java driver.forward(); # Python self.driver.forward() // Javascript // webdriver.io example driver.forward(); // wd example await driver.forward(); # Ruby # ruby_lib example forward # ruby_lib_core example @driver.forward // C# driver.Navigate().Forward();","title":"Example Usage"},{"location":"commands/web/navigation/forward/#support","text":"","title":"Support"},{"location":"commands/web/navigation/forward/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/navigation/forward/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/navigation/forward/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/navigation/forward/#endpoint","text":"POST /session/:session_id/forward","title":"Endpoint"},{"location":"commands/web/navigation/forward/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/navigation/forward/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/navigation/forward/#response","text":"null","title":"Response"},{"location":"commands/web/navigation/forward/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/navigation/go-to-url/","text":"Go to URL Navigate to a new URL (Web context) or open an Appium deep link (Native) Example Usage // Java driver.get( http://appium.io/ ); # Python self.driver.get( http://appium.io/ ) // Javascript // webdriver.io example driver.url( http://appium.io ); // wd example await driver.get( http://appium.io/ ); # Ruby # ruby_lib example get( http://appium.io ) # ruby_lib_core example @driver.get( http://appium.io ) // C# driver.Navigate().GoToUrl( http://appium.io ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/url URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description url string The URL to navigate to Response null See Also W3C Specification JSONWP Specification","title":"Go to URL"},{"location":"commands/web/navigation/go-to-url/#go-to-url","text":"Navigate to a new URL (Web context) or open an Appium deep link (Native)","title":"Go to URL"},{"location":"commands/web/navigation/go-to-url/#example-usage","text":"// Java driver.get( http://appium.io/ ); # Python self.driver.get( http://appium.io/ ) // Javascript // webdriver.io example driver.url( http://appium.io ); // wd example await driver.get( http://appium.io/ ); # Ruby # ruby_lib example get( http://appium.io ) # ruby_lib_core example @driver.get( http://appium.io ) // C# driver.Navigate().GoToUrl( http://appium.io );","title":"Example Usage"},{"location":"commands/web/navigation/go-to-url/#support","text":"","title":"Support"},{"location":"commands/web/navigation/go-to-url/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest 9.3+ 1.6.0+ All UIAutomation 8.0 to 9.3 All All Android UiAutomator2 ?+ 1.6.0+ All Espresso ?+ 1.9.0+ All UiAutomator 4.3+ All All Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/navigation/go-to-url/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/navigation/go-to-url/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/navigation/go-to-url/#endpoint","text":"POST /session/:session_id/url","title":"Endpoint"},{"location":"commands/web/navigation/go-to-url/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/navigation/go-to-url/#json-parameters","text":"name type description url string The URL to navigate to","title":"JSON Parameters"},{"location":"commands/web/navigation/go-to-url/#response","text":"null","title":"Response"},{"location":"commands/web/navigation/go-to-url/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/navigation/refresh/","text":"Refresh Refresh the current page. (Web context only) Example Usage // Java driver.refresh(); # Python self.driver.refresh() // Javascript // webdriver.io example driver.refresh(); // wd example await driver.refresh(); # Ruby # ruby_lib example navigate.refresh # ruby_lib_core example @driver.navigate.refresh // C# driver.Navigate().Refresh(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/refresh URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Refresh"},{"location":"commands/web/navigation/refresh/#refresh","text":"Refresh the current page. (Web context only)","title":"Refresh"},{"location":"commands/web/navigation/refresh/#example-usage","text":"// Java driver.refresh(); # Python self.driver.refresh() // Javascript // webdriver.io example driver.refresh(); // wd example await driver.refresh(); # Ruby # ruby_lib example navigate.refresh # ruby_lib_core example @driver.navigate.refresh // C# driver.Navigate().Refresh();","title":"Example Usage"},{"location":"commands/web/navigation/refresh/#support","text":"","title":"Support"},{"location":"commands/web/navigation/refresh/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/navigation/refresh/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/navigation/refresh/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/navigation/refresh/#endpoint","text":"POST /session/:session_id/refresh","title":"Endpoint"},{"location":"commands/web/navigation/refresh/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/navigation/refresh/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/navigation/refresh/#response","text":"null","title":"Response"},{"location":"commands/web/navigation/refresh/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/navigation/url/","text":"Get URL Retrieve the URL of the current page (Web context only) Example Usage // Java String url = driver.getCurrentUrl(); # Python url = self.driver.current_url() // Javascript // webdriver.io example let url = driver.getUrl(); // wd example let url = await driver.url(); # Ruby # ruby_lib example current_url # ruby_lib_core example @driver.current_url // C# string url = driver.Url; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/url URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response The current URL ( string ) See Also W3C Specification JSONWP Specification","title":"Get URL"},{"location":"commands/web/navigation/url/#get-url","text":"Retrieve the URL of the current page (Web context only)","title":"Get URL"},{"location":"commands/web/navigation/url/#example-usage","text":"// Java String url = driver.getCurrentUrl(); # Python url = self.driver.current_url() // Javascript // webdriver.io example let url = driver.getUrl(); // wd example let url = await driver.url(); # Ruby # ruby_lib example current_url # ruby_lib_core example @driver.current_url // C# string url = driver.Url;","title":"Example Usage"},{"location":"commands/web/navigation/url/#support","text":"","title":"Support"},{"location":"commands/web/navigation/url/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/navigation/url/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/navigation/url/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/navigation/url/#endpoint","text":"GET /session/:session_id/url","title":"Endpoint"},{"location":"commands/web/navigation/url/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/navigation/url/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/navigation/url/#response","text":"The current URL ( string )","title":"Response"},{"location":"commands/web/navigation/url/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/storage/","text":"Appium API Documentation ### /docs/en/commands/web/storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies","title":"Home"},{"location":"commands/web/storage/#appium-api-documentation","text":"### /docs/en/commands/web/storage Get All Cookies Set Cookie Delete Cookie Delete All Cookies","title":"Appium API Documentation"},{"location":"commands/web/storage/delete-all-cookies/","text":"Delete All Cookies Delete all cookies visible to current page (Web context only) Example Usage // Java driver.manage().deleteAllCookies(); # Python self.driver.delete_all_cookies() // Javascript // webdriver.io example driver.deleteCookies(); // wd example await driver.deleteAllCookies(); # Ruby # ruby_lib example manage.delete_all_cookies # ruby_lib_core example @driver.manage.delete_all_cookies // C# driver.Manage().Cookies.DeleteAllCookies(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint DELETE /session/:sessionId/cookie URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Delete All Cookies"},{"location":"commands/web/storage/delete-all-cookies/#delete-all-cookies","text":"Delete all cookies visible to current page (Web context only)","title":"Delete All Cookies"},{"location":"commands/web/storage/delete-all-cookies/#example-usage","text":"// Java driver.manage().deleteAllCookies(); # Python self.driver.delete_all_cookies() // Javascript // webdriver.io example driver.deleteCookies(); // wd example await driver.deleteAllCookies(); # Ruby # ruby_lib example manage.delete_all_cookies # ruby_lib_core example @driver.manage.delete_all_cookies // C# driver.Manage().Cookies.DeleteAllCookies();","title":"Example Usage"},{"location":"commands/web/storage/delete-all-cookies/#support","text":"","title":"Support"},{"location":"commands/web/storage/delete-all-cookies/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/storage/delete-all-cookies/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/storage/delete-all-cookies/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/storage/delete-all-cookies/#endpoint","text":"DELETE /session/:sessionId/cookie","title":"Endpoint"},{"location":"commands/web/storage/delete-all-cookies/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/storage/delete-all-cookies/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/storage/delete-all-cookies/#response","text":"null","title":"Response"},{"location":"commands/web/storage/delete-all-cookies/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/storage/delete-cookie/","text":"Delete Cookie Delete the cookie with the given name (Web context only) Example Usage // Java driver.manage().deleteCookieNamed( cookie_name ); # Python self.driver.delete_cookie( cookie_name ) // Javascript // webdriver.io example driver.deleteCookies( cookie_name ); // wd example await driver.deleteCookie( cookie_name ); # Ruby # ruby_lib example delete_cookie( cookie_name ) # ruby_lib_core example @driver.delete_cookie( cookie_name ) // C# driver.Manage().Cookies.DeleteCookieNamed( cookie_name ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint DELETE /session/:sessionId/cookie/:name URL Parameters name description session_id ID of the session to route the command to name Name of cookie to delete JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Delete Cookie"},{"location":"commands/web/storage/delete-cookie/#delete-cookie","text":"Delete the cookie with the given name (Web context only)","title":"Delete Cookie"},{"location":"commands/web/storage/delete-cookie/#example-usage","text":"// Java driver.manage().deleteCookieNamed( cookie_name ); # Python self.driver.delete_cookie( cookie_name ) // Javascript // webdriver.io example driver.deleteCookies( cookie_name ); // wd example await driver.deleteCookie( cookie_name ); # Ruby # ruby_lib example delete_cookie( cookie_name ) # ruby_lib_core example @driver.delete_cookie( cookie_name ) // C# driver.Manage().Cookies.DeleteCookieNamed( cookie_name );","title":"Example Usage"},{"location":"commands/web/storage/delete-cookie/#support","text":"","title":"Support"},{"location":"commands/web/storage/delete-cookie/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/storage/delete-cookie/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/storage/delete-cookie/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/storage/delete-cookie/#endpoint","text":"DELETE /session/:sessionId/cookie/:name","title":"Endpoint"},{"location":"commands/web/storage/delete-cookie/#url-parameters","text":"name description session_id ID of the session to route the command to name Name of cookie to delete","title":"URL Parameters"},{"location":"commands/web/storage/delete-cookie/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/storage/delete-cookie/#response","text":"null","title":"Response"},{"location":"commands/web/storage/delete-cookie/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/storage/get-all-cookies/","text":"Get All Cookies Retrieve all cookies visible to the current page (Web context only) Example Usage // Java Set Cookie allcookies = driver.manage().getCookies(); # Python cookies = self.driver.get_cookies() // Javascript // webdriver.io example let cookies = driver.getCookies(): // wd example let cookies = await driver.allCookies(); # Ruby # ruby_lib example manage.all_cookies # ruby_lib_core example @driver.manage.all_cookies // C# IEnumerable Cookie allCookies = driver.Manage().Cookies.AllCookies; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:sessionId/cookie URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response A list of cookies ( array object ) See Also W3C Specification JSONWP Specification","title":"Get All Cookies"},{"location":"commands/web/storage/get-all-cookies/#get-all-cookies","text":"Retrieve all cookies visible to the current page (Web context only)","title":"Get All Cookies"},{"location":"commands/web/storage/get-all-cookies/#example-usage","text":"// Java Set Cookie allcookies = driver.manage().getCookies(); # Python cookies = self.driver.get_cookies() // Javascript // webdriver.io example let cookies = driver.getCookies(): // wd example let cookies = await driver.allCookies(); # Ruby # ruby_lib example manage.all_cookies # ruby_lib_core example @driver.manage.all_cookies // C# IEnumerable Cookie allCookies = driver.Manage().Cookies.AllCookies;","title":"Example Usage"},{"location":"commands/web/storage/get-all-cookies/#support","text":"","title":"Support"},{"location":"commands/web/storage/get-all-cookies/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/storage/get-all-cookies/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/storage/get-all-cookies/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/storage/get-all-cookies/#endpoint","text":"GET /session/:sessionId/cookie","title":"Endpoint"},{"location":"commands/web/storage/get-all-cookies/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/storage/get-all-cookies/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/storage/get-all-cookies/#response","text":"A list of cookies ( array object )","title":"Response"},{"location":"commands/web/storage/get-all-cookies/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/storage/set-cookie/","text":"Set Cookie Set a cookie (Web context only) Example Usage // Java driver.manage().addCookie(new Cookie( foo , bar )); # Python self.driver.add_cookie({name: 'foo', value: 'bar'}) // Javascript // webdriver.io example driver.setCookies([{ name: 'myCookie', value: 'some content' }]); // wd example let cookies = await driver.setCookie({name: 'foo', value: 'bar'}); # Ruby # ruby_lib example manage.add_cookie(:name = 'foo', :value = 'bar') # ruby_lib_core example @driver.manage.add_cookie(:name = 'foo', :value = 'bar') // C# driver.Manage().Cookies.AddCookie(new Cookie( foo , bar )); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:sessionId/cookie URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description cookie object The cookie to add Response null See Also W3C Specification JSONWP Specification","title":"Set Cookie"},{"location":"commands/web/storage/set-cookie/#set-cookie","text":"Set a cookie (Web context only)","title":"Set Cookie"},{"location":"commands/web/storage/set-cookie/#example-usage","text":"// Java driver.manage().addCookie(new Cookie( foo , bar )); # Python self.driver.add_cookie({name: 'foo', value: 'bar'}) // Javascript // webdriver.io example driver.setCookies([{ name: 'myCookie', value: 'some content' }]); // wd example let cookies = await driver.setCookie({name: 'foo', value: 'bar'}); # Ruby # ruby_lib example manage.add_cookie(:name = 'foo', :value = 'bar') # ruby_lib_core example @driver.manage.add_cookie(:name = 'foo', :value = 'bar') // C# driver.Manage().Cookies.AddCookie(new Cookie( foo , bar ));","title":"Example Usage"},{"location":"commands/web/storage/set-cookie/#support","text":"","title":"Support"},{"location":"commands/web/storage/set-cookie/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/storage/set-cookie/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/storage/set-cookie/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/storage/set-cookie/#endpoint","text":"POST /session/:sessionId/cookie","title":"Endpoint"},{"location":"commands/web/storage/set-cookie/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/storage/set-cookie/#json-parameters","text":"name type description cookie object The cookie to add","title":"JSON Parameters"},{"location":"commands/web/storage/set-cookie/#response","text":"null","title":"Response"},{"location":"commands/web/storage/set-cookie/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/window/","text":"Appium API Documentation ### /docs/en/commands/web/window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window","title":"Home"},{"location":"commands/web/window/#appium-api-documentation","text":"### /docs/en/commands/web/window Set Window Close Window Get Handle Get Handles Get Title Get Window Size Set Window Size Get Window Position Set Window Position Maximize Window","title":"Appium API Documentation"},{"location":"commands/web/window/close-window/","text":"Close Window Close the current window (Web context only) Example Usage // Java driver.close(); # Python self.driver.close() // Javascript // webdriver.io example driver.closeWindow(); // wd example await driver.close(); # Ruby # ruby_lib example close # ruby_lib_core example @driver.close // C# driver.Close(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint DELETE /session/:session_id/window URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Close Window"},{"location":"commands/web/window/close-window/#close-window","text":"Close the current window (Web context only)","title":"Close Window"},{"location":"commands/web/window/close-window/#example-usage","text":"// Java driver.close(); # Python self.driver.close() // Javascript // webdriver.io example driver.closeWindow(); // wd example await driver.close(); # Ruby # ruby_lib example close # ruby_lib_core example @driver.close // C# driver.Close();","title":"Example Usage"},{"location":"commands/web/window/close-window/#support","text":"","title":"Support"},{"location":"commands/web/window/close-window/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/close-window/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/close-window/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/close-window/#endpoint","text":"DELETE /session/:session_id/window","title":"Endpoint"},{"location":"commands/web/window/close-window/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/window/close-window/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/close-window/#response","text":"null","title":"Response"},{"location":"commands/web/window/close-window/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/window/get-handle/","text":"Get Window Handle Retrieve the current window handle (Web context only) Example Usage // Java String windowHandle = driver.getWindowHandle(); # Python window_handle = self.driver.current_window_handle // Javascript // webdriver.io example let handle = driver.getWindowHandle(); // wd example let windowHandle = await driver.windowHandle(); # Ruby # ruby_lib example window_handle # ruby_lib_core example @driver.window_handle // C# string windowHandle = driver.CurrentWindowHandle; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/window_handle URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Get Handle"},{"location":"commands/web/window/get-handle/#get-window-handle","text":"Retrieve the current window handle (Web context only)","title":"Get Window Handle"},{"location":"commands/web/window/get-handle/#example-usage","text":"// Java String windowHandle = driver.getWindowHandle(); # Python window_handle = self.driver.current_window_handle // Javascript // webdriver.io example let handle = driver.getWindowHandle(); // wd example let windowHandle = await driver.windowHandle(); # Ruby # ruby_lib example window_handle # ruby_lib_core example @driver.window_handle // C# string windowHandle = driver.CurrentWindowHandle;","title":"Example Usage"},{"location":"commands/web/window/get-handle/#support","text":"","title":"Support"},{"location":"commands/web/window/get-handle/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/get-handle/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/get-handle/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/get-handle/#endpoint","text":"GET /session/:session_id/window_handle","title":"Endpoint"},{"location":"commands/web/window/get-handle/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/window/get-handle/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/get-handle/#response","text":"null","title":"Response"},{"location":"commands/web/window/get-handle/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/window/get-handles/","text":"Get Window Handles Retrieve the list of all window handles available to the session (Web context only) Example Usage // Java Set String windowHandles = driver.getWindowHandles(); # Python window_handles = self.driver.window_handles // Javascript // webdriver.io example let handles = driver.getWindowHandles(); // wd example let windowHandle = await driver.windowHandles(); # Ruby # ruby_lib example window_handles # ruby_lib_core example @driver.window_handles // C# IEnumerable string windowHandles = driver.WindowHandles; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/window_handles URL Parameters name description session_id ID of the session to route the command to JSON Parameters None Response A list of window handles ( array string ) See Also W3C Specification JSONWP Specification","title":"Get Handles"},{"location":"commands/web/window/get-handles/#get-window-handles","text":"Retrieve the list of all window handles available to the session (Web context only)","title":"Get Window Handles"},{"location":"commands/web/window/get-handles/#example-usage","text":"// Java Set String windowHandles = driver.getWindowHandles(); # Python window_handles = self.driver.window_handles // Javascript // webdriver.io example let handles = driver.getWindowHandles(); // wd example let windowHandle = await driver.windowHandles(); # Ruby # ruby_lib example window_handles # ruby_lib_core example @driver.window_handles // C# IEnumerable string windowHandles = driver.WindowHandles;","title":"Example Usage"},{"location":"commands/web/window/get-handles/#support","text":"","title":"Support"},{"location":"commands/web/window/get-handles/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/get-handles/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/get-handles/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/get-handles/#endpoint","text":"GET /session/:session_id/window_handles","title":"Endpoint"},{"location":"commands/web/window/get-handles/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/window/get-handles/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/get-handles/#response","text":"A list of window handles ( array string )","title":"Response"},{"location":"commands/web/window/get-handles/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/window/get-window-position/","text":"Get Window Position Get the position of the specified window (Web context only) Example Usage // Java Point windowPosition = driver.manage().window().getPosition(); # Python handle_one_position = self.driver.get_window_position() handle_two_position = self.driver.get_window_position( handleName ) // Javascript // webdriver.io example let position = driver.getWindowRect(); // wd example let handleOnePosition = await driver.getWindowPosition(); let handleTwoPosition = await driver.getWindowPosition( handleName ); # Ruby # ruby_lib example window_position window_position( handleName ) # ruby_lib_core example @driver.window_position @driver.window_position( handleName ) // C# Point windowPosition = driver.Manage().Window.Position; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/window/:window_handle/position URL Parameters name description session_id ID of the session to route the command to window_handle Handle of the window to get position of. If 'current' it will get position of current window. JSON Parameters None Response name type description x number The x coordinate relative to the top left corner of the window y number The y coordinate relative to the top left corner of the window See Also JSONWP Specification","title":"Get Window Position"},{"location":"commands/web/window/get-window-position/#get-window-position","text":"Get the position of the specified window (Web context only)","title":"Get Window Position"},{"location":"commands/web/window/get-window-position/#example-usage","text":"// Java Point windowPosition = driver.manage().window().getPosition(); # Python handle_one_position = self.driver.get_window_position() handle_two_position = self.driver.get_window_position( handleName ) // Javascript // webdriver.io example let position = driver.getWindowRect(); // wd example let handleOnePosition = await driver.getWindowPosition(); let handleTwoPosition = await driver.getWindowPosition( handleName ); # Ruby # ruby_lib example window_position window_position( handleName ) # ruby_lib_core example @driver.window_position @driver.window_position( handleName ) // C# Point windowPosition = driver.Manage().Window.Position;","title":"Example Usage"},{"location":"commands/web/window/get-window-position/#support","text":"","title":"Support"},{"location":"commands/web/window/get-window-position/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/get-window-position/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/get-window-position/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/get-window-position/#endpoint","text":"GET /session/:session_id/window/:window_handle/position","title":"Endpoint"},{"location":"commands/web/window/get-window-position/#url-parameters","text":"name description session_id ID of the session to route the command to window_handle Handle of the window to get position of. If 'current' it will get position of current window.","title":"URL Parameters"},{"location":"commands/web/window/get-window-position/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/get-window-position/#response","text":"name type description x number The x coordinate relative to the top left corner of the window y number The y coordinate relative to the top left corner of the window","title":"Response"},{"location":"commands/web/window/get-window-position/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/web/window/get-window-size/","text":"Get Window Size Get the size of the specified window (Web context only) Example Usage // Java Dimension windowSize = driver.manage().window().getSize(); # Python handle_one_size = self.driver.get_window_size() handle_two_size = self.driver.get_window_size( handleName ) // Javascript // webdriver.io example let position = driver.getWindowRect(); // wd example let handleOneSize = await driver.getWindowSize(); let handleTwoSize = await driver.getWindowSize( handleName ); # Ruby # ruby_lib example window_size window_size( handleName ) # ruby_lib_core example @driver.window_size @driver.window_size( handleName ) // C# Size windowSize = driver.Manage().Window.Size; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/window/:window_handle/size URL Parameters name description session_id ID of the session to route the command to window_handle Handle of the window to get size of. If 'current' it will get size of current window. JSON Parameters None Response name type description width number The width of the window height number The height of the window See Also JSONWP Specification","title":"Get Window Size"},{"location":"commands/web/window/get-window-size/#get-window-size","text":"Get the size of the specified window (Web context only)","title":"Get Window Size"},{"location":"commands/web/window/get-window-size/#example-usage","text":"// Java Dimension windowSize = driver.manage().window().getSize(); # Python handle_one_size = self.driver.get_window_size() handle_two_size = self.driver.get_window_size( handleName ) // Javascript // webdriver.io example let position = driver.getWindowRect(); // wd example let handleOneSize = await driver.getWindowSize(); let handleTwoSize = await driver.getWindowSize( handleName ); # Ruby # ruby_lib example window_size window_size( handleName ) # ruby_lib_core example @driver.window_size @driver.window_size( handleName ) // C# Size windowSize = driver.Manage().Window.Size;","title":"Example Usage"},{"location":"commands/web/window/get-window-size/#support","text":"","title":"Support"},{"location":"commands/web/window/get-window-size/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/get-window-size/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/get-window-size/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/get-window-size/#endpoint","text":"GET /session/:session_id/window/:window_handle/size","title":"Endpoint"},{"location":"commands/web/window/get-window-size/#url-parameters","text":"name description session_id ID of the session to route the command to window_handle Handle of the window to get size of. If 'current' it will get size of current window.","title":"URL Parameters"},{"location":"commands/web/window/get-window-size/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/get-window-size/#response","text":"name type description width number The width of the window height number The height of the window","title":"Response"},{"location":"commands/web/window/get-window-size/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/web/window/maximize-window/","text":"Maximize Window Maximize the specified window (Web context only) Example Usage // Java driver.manage().window().maximize(); # Python self.driver.maximize_window(); // Javascript // webdriver.io example driver.maximizeWindow(); // wd example await driver.maximize( handleName ); // Set size of window by handle name await driver.maximize(); // Set current window # Ruby # ruby_lib example maximize_window # ruby_lib_core example @driver.maximize_window // C# driver.Manage().Window.Maximize(); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/window/:window_handle/maximize URL Parameters name description session_id ID of the session to route the command to window_handle Handle of the window to maximize. If 'current' it will maximize current window JSON Parameters None Response null See Also W3C Specification JSONWP Specification","title":"Maximize Window"},{"location":"commands/web/window/maximize-window/#maximize-window","text":"Maximize the specified window (Web context only)","title":"Maximize Window"},{"location":"commands/web/window/maximize-window/#example-usage","text":"// Java driver.manage().window().maximize(); # Python self.driver.maximize_window(); // Javascript // webdriver.io example driver.maximizeWindow(); // wd example await driver.maximize( handleName ); // Set size of window by handle name await driver.maximize(); // Set current window # Ruby # ruby_lib example maximize_window # ruby_lib_core example @driver.maximize_window // C# driver.Manage().Window.Maximize();","title":"Example Usage"},{"location":"commands/web/window/maximize-window/#support","text":"","title":"Support"},{"location":"commands/web/window/maximize-window/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/maximize-window/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/maximize-window/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/maximize-window/#endpoint","text":"POST /session/:session_id/window/:window_handle/maximize","title":"Endpoint"},{"location":"commands/web/window/maximize-window/#url-parameters","text":"name description session_id ID of the session to route the command to window_handle Handle of the window to maximize. If 'current' it will maximize current window","title":"URL Parameters"},{"location":"commands/web/window/maximize-window/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/maximize-window/#response","text":"null","title":"Response"},{"location":"commands/web/window/maximize-window/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/window/set-window-position/","text":"Set Window Position Change the position of the specified window (Web context only) Example Usage // Java driver.manage().window().setPosition(new Dimension(10, 10)); # Python self.driver.set_window_position(10, 10) // Javascript // webdriver.io example driver.setWindowRect(10, 10); // wd example await driver.setWindowPosition(10, 10, handleName ); // Set position of window by handle name await driver.setWindowPosition(10, 10); // Set current window # Ruby # ruby_lib example reposition_window(10, 10) # ruby_lib_core example @driver.reposition_window(10, 10) // C# driver.Manage().Window.Position = new Point(10, 10); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/window/:window_handle/position URL Parameters name description session_id ID of the session to route the command to window_handle Handle of the window to get position of. If 'current' it will get position of current window. JSON Parameters name type description x number The x coordinate relative to the top left corner of the window y number The y coordinate relative to the top left corner of the window Response null See Also JSONWP Specification","title":"Set Window Position"},{"location":"commands/web/window/set-window-position/#set-window-position","text":"Change the position of the specified window (Web context only)","title":"Set Window Position"},{"location":"commands/web/window/set-window-position/#example-usage","text":"// Java driver.manage().window().setPosition(new Dimension(10, 10)); # Python self.driver.set_window_position(10, 10) // Javascript // webdriver.io example driver.setWindowRect(10, 10); // wd example await driver.setWindowPosition(10, 10, handleName ); // Set position of window by handle name await driver.setWindowPosition(10, 10); // Set current window # Ruby # ruby_lib example reposition_window(10, 10) # ruby_lib_core example @driver.reposition_window(10, 10) // C# driver.Manage().Window.Position = new Point(10, 10);","title":"Example Usage"},{"location":"commands/web/window/set-window-position/#support","text":"","title":"Support"},{"location":"commands/web/window/set-window-position/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/set-window-position/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/set-window-position/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/set-window-position/#endpoint","text":"POST /session/:session_id/window/:window_handle/position","title":"Endpoint"},{"location":"commands/web/window/set-window-position/#url-parameters","text":"name description session_id ID of the session to route the command to window_handle Handle of the window to get position of. If 'current' it will get position of current window.","title":"URL Parameters"},{"location":"commands/web/window/set-window-position/#json-parameters","text":"name type description x number The x coordinate relative to the top left corner of the window y number The y coordinate relative to the top left corner of the window","title":"JSON Parameters"},{"location":"commands/web/window/set-window-position/#response","text":"null","title":"Response"},{"location":"commands/web/window/set-window-position/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/web/window/set-window-size/","text":"Set Window Size Change the size of the specified window (Web context only) Example Usage // Java driver.manage().window().setSize(new Dimension(10, 10)); # Python self.driver.set_window_size(10, 10) // Javascript // webdriver.io example driver.setWindowRect(0, 0, 800, 600}); // wd example await driver.setWindowSize(10, 10, handleName ); // Set size of window by handle name await driver.setWindowSize(10, 10); // Set current window # Ruby # ruby_lib example resize_to(10, 10) # ruby_lib_core example @driver.resize_to(10, 10) // C# driver.Manage().Window.Size = new Size(10, 10); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/window/:window_handle/size URL Parameters name description session_id ID of the session to route the command to window_handle Handle of the window to get size of. If 'current' it will get size of current window. JSON Parameters name type description width number The new window width height number The new window height Response null See Also JSONWP Specification","title":"Set Window Size"},{"location":"commands/web/window/set-window-size/#set-window-size","text":"Change the size of the specified window (Web context only)","title":"Set Window Size"},{"location":"commands/web/window/set-window-size/#example-usage","text":"// Java driver.manage().window().setSize(new Dimension(10, 10)); # Python self.driver.set_window_size(10, 10) // Javascript // webdriver.io example driver.setWindowRect(0, 0, 800, 600}); // wd example await driver.setWindowSize(10, 10, handleName ); // Set size of window by handle name await driver.setWindowSize(10, 10); // Set current window # Ruby # ruby_lib example resize_to(10, 10) # ruby_lib_core example @driver.resize_to(10, 10) // C# driver.Manage().Window.Size = new Size(10, 10);","title":"Example Usage"},{"location":"commands/web/window/set-window-size/#support","text":"","title":"Support"},{"location":"commands/web/window/set-window-size/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/set-window-size/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/set-window-size/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/set-window-size/#endpoint","text":"POST /session/:session_id/window/:window_handle/size","title":"Endpoint"},{"location":"commands/web/window/set-window-size/#url-parameters","text":"name description session_id ID of the session to route the command to window_handle Handle of the window to get size of. If 'current' it will get size of current window.","title":"URL Parameters"},{"location":"commands/web/window/set-window-size/#json-parameters","text":"name type description width number The new window width height number The new window height","title":"JSON Parameters"},{"location":"commands/web/window/set-window-size/#response","text":"null","title":"Response"},{"location":"commands/web/window/set-window-size/#see-also","text":"JSONWP Specification","title":"See Also"},{"location":"commands/web/window/set-window/","text":"Switch to Window Change focus to another window (Web context only) Example Usage // Java driver.switchTo().window( handle ); # Python self.driver.switch_to.window( handle ) // Javascript // webdriver.io example driver.switchToWindow( handle ); // wd example await driver.window( handle ); # Ruby # ruby_lib example switch_to.window( handle ) # ruby_lib_core example @driver.switch_to.window( handle ) // C# driver.SwitchTo().Window( handle ); Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint POST /session/:session_id/window URL Parameters name description session_id ID of the session to route the command to JSON Parameters name type description name string (For MJSONWP) The window to change focus to handle string (For W3C) The window to change focus to Response null See Also W3C Specification JSONWP Specification","title":"Set Window"},{"location":"commands/web/window/set-window/#switch-to-window","text":"Change focus to another window (Web context only)","title":"Switch to Window"},{"location":"commands/web/window/set-window/#example-usage","text":"// Java driver.switchTo().window( handle ); # Python self.driver.switch_to.window( handle ) // Javascript // webdriver.io example driver.switchToWindow( handle ); // wd example await driver.window( handle ); # Ruby # ruby_lib example switch_to.window( handle ) # ruby_lib_core example @driver.switch_to.window( handle ) // C# driver.SwitchTo().Window( handle );","title":"Example Usage"},{"location":"commands/web/window/set-window/#support","text":"","title":"Support"},{"location":"commands/web/window/set-window/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/set-window/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/set-window/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/set-window/#endpoint","text":"POST /session/:session_id/window","title":"Endpoint"},{"location":"commands/web/window/set-window/#url-parameters","text":"name description session_id ID of the session to route the command to","title":"URL Parameters"},{"location":"commands/web/window/set-window/#json-parameters","text":"name type description name string (For MJSONWP) The window to change focus to handle string (For W3C) The window to change focus to","title":"JSON Parameters"},{"location":"commands/web/window/set-window/#response","text":"null","title":"Response"},{"location":"commands/web/window/set-window/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"commands/web/window/title/","text":"Get Title Get the current page title (Web context only) Example Usage // Java String title = driver.getTitle(); # Python title = self.driver.title // Javascript // webdriver.io example let handle = driver.getTitle(); // wd example let title = await driver.title(); # Ruby # ruby_lib example title # ruby_lib_core example @driver.title // C# string title = driver.Title; Support Appium Server Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None Appium Clients Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com HTTP API Specifications Endpoint GET /session/:session_id/title URL Parameters None JSON Parameters None Response The current page title ( string ) See Also W3C Specification JSONWP Specification","title":"Get Title"},{"location":"commands/web/window/title/#get-title","text":"Get the current page title (Web context only)","title":"Get Title"},{"location":"commands/web/window/title/#example-usage","text":"// Java String title = driver.getTitle(); # Python title = self.driver.title // Javascript // webdriver.io example let handle = driver.getTitle(); // wd example let title = await driver.title(); # Ruby # ruby_lib example title # ruby_lib_core example @driver.title // C# string title = driver.Title;","title":"Example Usage"},{"location":"commands/web/window/title/#support","text":"","title":"Support"},{"location":"commands/web/window/title/#appium-server","text":"Platform Driver Platform Versions Appium Version Driver Version iOS XCUITest None None None UIAutomation None None None Android UiAutomator2 None None None Espresso None None None UiAutomator None None None Mac Mac None None None Windows Windows None None None","title":"Appium Server"},{"location":"commands/web/window/title/#appium-clients","text":"Language Support Documentation Java All seleniumhq.github.io Python All selenium-python.readthedocs.io Javascript (WebdriverIO) All Javascript (WD) All github.com Ruby All www.rubydoc.info C# All github.com","title":"Appium Clients"},{"location":"commands/web/window/title/#http-api-specifications","text":"","title":"HTTP API Specifications"},{"location":"commands/web/window/title/#endpoint","text":"GET /session/:session_id/title","title":"Endpoint"},{"location":"commands/web/window/title/#url-parameters","text":"None","title":"URL Parameters"},{"location":"commands/web/window/title/#json-parameters","text":"None","title":"JSON Parameters"},{"location":"commands/web/window/title/#response","text":"The current page title ( string )","title":"Response"},{"location":"commands/web/window/title/#see-also","text":"W3C Specification JSONWP Specification","title":"See Also"},{"location":"contributing-to-appium/appium-from-source/","text":"Running Appium from Source So you want to run Appium from source and help fix bugs and add features? Great! Just fork the project, make a change, and send a pull request! Please have a look at our Style Guide before getting to work. Please make sure the unit and functional tests pass before sending a pull request; for more information on how to run tests, keep reading! Node.js Appium is written in JavaScript, and run with the Node.js engine. Currently version 6+ is supported. While Node.js can be installed globally on the system, a version manager is highly recommended. * NVM - https://github.com/creationix/nvm * N - https://github.com/tj/n Your Node.js installation will include the NPM package manager, which Appium will need in order to manage dependencies. Appiums supports NPM version 3+. Setting up Appium from Source An Appium setup involves the Appium server, which sends messages back and forth between your test code and devices/emulators, and a test script, written in whatever language binding exists that is compatible with Appium. Run an instance of an Appium server, and then run your test. The quick way to get started: git clone https://github.com/appium/appium.git cd appium npm install npm run build node . Hacking on Appium Install the appium-doctor tool, and run it to verify all of the dependencies are set up correctly (since dependencies for building Appium are different from those for simply running it): npm install -g appium-doctor appium-doctor --dev Install the Node.js dependencies: npm install When pulling new code from GitHub, if there are changes to package.json it is necessary to remove the old dependencies and re-run npm install : rm -rf node_modules rm -rf package-lock.json npm install At this point, you will be able to start the Appium server: node . See the server documentation for a full list of command line arguments that can be used. Hacking with Appium for Android To work on Android, make sure you have ant , maven , and adb installed and added to system PATH environment variable. Also you would need the android-19+ sdk installed. From your local repo's command prompt, install/run the following: Set up Appium by running: rm -rf node_modules rm -rf package-lock.json npm install Make sure you have one and only one Android emulator or device running, e.g., by running this command in another process (assuming the emulator command is on your path): emulator -avd MyAvdName Now you are ready to run the Appium server via node . . Making sure you're up to date Since Appium uses dev versions of some packages, it often becomes necessary to install new npm packages or update various things. Running npm install will update everything necessary. You will also need to do this when Appium bumps its version up. Prior to running npm install it is recommended to remove all the old dependencies in the node_modules directory: rm -rf node_modules rm -rf package-lock.json npm install Different packages Appium is made up of a number of different packages. While it is often possible to work in a single package, it is also often the case that work, whether fixing a bug or adding a new feature, requires working on multiple packages simultaneously. Unfortunately the dependencies installed when running npm install are those that have already been published, so some work is needed to link together local development versions of the packages that are being worked on. In the case where one package, A , depends on another package, B , the following steps are necessary to link the two: 1. In one terminal, enter into package B cd B 2. Use NPM link to create symbolic link to this package npm link 3. In another terminal, enter into package A cd A 4. Use NPM link to link the dependent package B to the development version npm link B Now the version of B that A uses will be your local version. Remember, however, that changes made to the JavaScript will only be available when they have been transpiled, so when you are going to test from package A , run npm run build in the directory for package B . Running Tests First, check out our documentation on running tests in general Make sure your system is set up properly for the platforms you desire to test on. Once your system is set up and your code is up to date, you can run unit tests with: npm run test You can run functional tests for all supported platforms (after ensuring that Appium is running in another window with node . ) with: npm run e2e-test Debugging Node This project has multiple launch configurations for running NodeJS code from within VSCode Debug : Runs Appium server in debug mode so you can set breakpoints inside VSCode source files Attach Debug : Attach to a currently running Appium server Example Usage From root, run node --inspect-brk . --port 5555 Run attach debug Setup breakpoints in VSCode Test All : Runs all mocha tests in test/ . Can setup breakpoints in test code and source code Test Current File : Runs the currently focused-on mocha file. Fails if it's not valid mocha test Committing code Each Appium package installs a pre-commit hook which will run the linter and the unit tests before the commit is made. Any error in either of these will stop the commit from occurring. Once code is committed and a pull request is made to the correct Appium respository on GitHub , Appium build system will run all of the functional tests.","title":"Running Appium from Source"},{"location":"contributing-to-appium/appium-from-source/#running-appium-from-source","text":"So you want to run Appium from source and help fix bugs and add features? Great! Just fork the project, make a change, and send a pull request! Please have a look at our Style Guide before getting to work. Please make sure the unit and functional tests pass before sending a pull request; for more information on how to run tests, keep reading!","title":"Running Appium from Source"},{"location":"contributing-to-appium/appium-from-source/#nodejs","text":"Appium is written in JavaScript, and run with the Node.js engine. Currently version 6+ is supported. While Node.js can be installed globally on the system, a version manager is highly recommended. * NVM - https://github.com/creationix/nvm * N - https://github.com/tj/n Your Node.js installation will include the NPM package manager, which Appium will need in order to manage dependencies. Appiums supports NPM version 3+.","title":"Node.js"},{"location":"contributing-to-appium/appium-from-source/#setting-up-appium-from-source","text":"An Appium setup involves the Appium server, which sends messages back and forth between your test code and devices/emulators, and a test script, written in whatever language binding exists that is compatible with Appium. Run an instance of an Appium server, and then run your test. The quick way to get started: git clone https://github.com/appium/appium.git cd appium npm install npm run build node .","title":"Setting up Appium from Source"},{"location":"contributing-to-appium/appium-from-source/#hacking-on-appium","text":"Install the appium-doctor tool, and run it to verify all of the dependencies are set up correctly (since dependencies for building Appium are different from those for simply running it): npm install -g appium-doctor appium-doctor --dev Install the Node.js dependencies: npm install When pulling new code from GitHub, if there are changes to package.json it is necessary to remove the old dependencies and re-run npm install : rm -rf node_modules rm -rf package-lock.json npm install At this point, you will be able to start the Appium server: node . See the server documentation for a full list of command line arguments that can be used.","title":"Hacking on Appium"},{"location":"contributing-to-appium/appium-from-source/#hacking-with-appium-for-android","text":"To work on Android, make sure you have ant , maven , and adb installed and added to system PATH environment variable. Also you would need the android-19+ sdk installed. From your local repo's command prompt, install/run the following: Set up Appium by running: rm -rf node_modules rm -rf package-lock.json npm install Make sure you have one and only one Android emulator or device running, e.g., by running this command in another process (assuming the emulator command is on your path): emulator -avd MyAvdName Now you are ready to run the Appium server via node . .","title":"Hacking with Appium for Android"},{"location":"contributing-to-appium/appium-from-source/#making-sure-youre-up-to-date","text":"Since Appium uses dev versions of some packages, it often becomes necessary to install new npm packages or update various things. Running npm install will update everything necessary. You will also need to do this when Appium bumps its version up. Prior to running npm install it is recommended to remove all the old dependencies in the node_modules directory: rm -rf node_modules rm -rf package-lock.json npm install","title":"Making sure you're up to date"},{"location":"contributing-to-appium/appium-from-source/#different-packages","text":"Appium is made up of a number of different packages. While it is often possible to work in a single package, it is also often the case that work, whether fixing a bug or adding a new feature, requires working on multiple packages simultaneously. Unfortunately the dependencies installed when running npm install are those that have already been published, so some work is needed to link together local development versions of the packages that are being worked on. In the case where one package, A , depends on another package, B , the following steps are necessary to link the two: 1. In one terminal, enter into package B cd B 2. Use NPM link to create symbolic link to this package npm link 3. In another terminal, enter into package A cd A 4. Use NPM link to link the dependent package B to the development version npm link B Now the version of B that A uses will be your local version. Remember, however, that changes made to the JavaScript will only be available when they have been transpiled, so when you are going to test from package A , run npm run build in the directory for package B .","title":"Different packages"},{"location":"contributing-to-appium/appium-from-source/#running-tests","text":"First, check out our documentation on running tests in general Make sure your system is set up properly for the platforms you desire to test on. Once your system is set up and your code is up to date, you can run unit tests with: npm run test You can run functional tests for all supported platforms (after ensuring that Appium is running in another window with node . ) with: npm run e2e-test","title":"Running Tests"},{"location":"contributing-to-appium/appium-from-source/#debugging-node","text":"This project has multiple launch configurations for running NodeJS code from within VSCode Debug : Runs Appium server in debug mode so you can set breakpoints inside VSCode source files Attach Debug : Attach to a currently running Appium server Example Usage From root, run node --inspect-brk . --port 5555 Run attach debug Setup breakpoints in VSCode Test All : Runs all mocha tests in test/ . Can setup breakpoints in test code and source code Test Current File : Runs the currently focused-on mocha file. Fails if it's not valid mocha test","title":"Debugging Node"},{"location":"contributing-to-appium/appium-from-source/#committing-code","text":"Each Appium package installs a pre-commit hook which will run the linter and the unit tests before the commit is made. Any error in either of these will stop the commit from occurring. Once code is committed and a pull request is made to the correct Appium respository on GitHub , Appium build system will run all of the functional tests.","title":"Committing code"},{"location":"contributing-to-appium/appium-packages/","text":"Appium in a Nutshell appium runs basic checks node version ( = 5) CLI arguments checks contains all available and supported CLI arguments check for deprecation and mutual exclusion put logging together mixture out of npmlog, winston and a custom logger initiates AppiumDriver (extends Basedriver) assigns iOS/Android/Fake driver to session creates/deletes Appium session starts baseServer (appium-express) passes routes given by driver appium-express (part of appium-base-driver) starts express server (allows x-domain-origin) initialises routes from AppiumDriver timeout handling serves a static page for test purposes connects req/res events to logger mobile-json-wire-protocol (part of appium-base-driver) provides list of Appium commands subclassed by drivers that will use the protocol kind of middleware between client and driver handles jwp proxy for driver contains error classes for all types of errors sanitises error responses (un)wraps params to commands checks required params, validates params appium-base-driver designed to have a single testing session per instantiation contains constraints on caps (platformName has to be present, etc) validates capabilities runs chain of promised commands with single concurrency handles session restart handles swipe options exports class (DeviceSettings) to manage device settings (get/update) contains basic commands to find elements create/delete sessions handle timeouts set/update device settings provides helper methods for commands appium-ios-driver can also run as standalone server (has a small server part that extends from appium-express) supported strategies: \"name\", \"xpath\", \"id\", \"-ios uiautomation\", \"class name\", \"accessibility id\u201d can start a simulator or a real device (if udid is given) runs for each type a huge set of instructions removeInstrumentsSocket setBundleIdFromApp createInstruments runSimReset, isolateSimDevice, setLocale || runRealDeviceReset setPreferences || runRealDeviceReset startLogCapture prelaunchSimulator || (noop) startInstruments onInstrumentsLaunch configureBootstrap setBundleId setInitialOrientation initAutoWebview waitForAppLaunched all instructions are helper methods within driver.js contains a more specific set of capability constraints has logic to build and run Safari (safari-launcher) using appium-xcode implements commands for iOS driver Selenium commands are compiled to ui-automator commands commands will be send out to uiAutoClient (appium-uiauto) connects to appium remote debugger appium-xcode runs shell commands to return useful data from Xcode like getPath getVersion getAutomationTraceTemplatePath getMaxIOSSDK \u2026 has an auto-retry built in appium-uiauto wrapper for the iOS UI Automation framework talks to it via socket connection runs a command queue that get filled up by the sendCommand function handles responses (as a buffer) from the ui-automation framework uses osascript to rotate screenshots provides method to bootstrap simulator/realdevice (dynamic-bootstrap) javascript files which are run in the iOS UI Automation context (not node) responsible to execute actual iOS UI Automation commands see UIAutomation docs command flow is like Webdriver command - iOS driver command - uiauto-command appium-instruments wrapper to run instruments commands a lot of exec calls to talk to instruments binary all of them take callbacks to propagate the result uses \"iwd\" (instruments without delay) packages which have to be compiled first special Instruments package that gets rid of a delay between commands contains also older versions of iwd instrument (v4 - v7) appium-ios-log captures console, performance and crash logs from the iOS simulator or real device by either calling tail to grab logs from a system path (simulator devices) or by calling deviceconsole (real devices) performance logs are getting grabbed using the remote-debugger crash logs remain in \u201c.crash\u201d files on the system appium-ios-simulator wrapper around iOS simulator app start and shutdown (kill all) simulators updating settings and locals update/clean safari grabs meta data about the simulator device uses simctl to talk to the simulator works for Xcode 6 and 7 node-simctl wrapper around simctl binary (cli utility to control an iOS simulator) executed as a subcommand of xcrun (locate or invoke developer tools from the command-line) contains functions to install/remove apps launch and shutdown simulators create/erase/delete devices get list of devices appium-cookies simple package to create and receive cookies used in the appium-ios-driver to implement jswonwire cookie commands within the web context appium-chromedriver wrapper around the chrome driver downloads and installs chromedriver binaries launches, restarts and stops (or kills all) chrome instances uses appium-jsonwp-proxy to send json wire protocol commands to the driver jsonwp-proxy (part of appium-base-driver) allows to send json wire protocol commands to a server that understands it (browser drivers) parses response into json allows to proxy requests to a proxied server used for communication in appium-chromedriver appium-android-driver similar to appium-ios-driver it can run as standalone server automates native, hybrid and mobile web apps on emulators/simulators and real devices takes care of installing android packages to the device runs chromedriver sessions if desired contains a more specific set of capability constraints uses appium-adb to talk to the emulator/simulator/realdevice and appium-android-bootstrap to execute the actual commands contains helpers to figure out which web view belongs to which app package vice versa appium-adb wrapper around the Android Debug Bridge (adb) contains a bunch of commands that are basically just rpc to the adb binary houses jar files to run for special use cases like signing, verifying apps or moving manifests allows special (mobile specific) emulator commands that are not related to the webdriver protocol like locking the screen press back button press home button set/get airplane mode set/get wifi state captures logcat handles emulator/simulator actions (e.g. reboot) appium-android-bootstrap JavaScript interface, and Java code, for interacting with Android UI Automator builds AppiumBootstrap.jar that contains logic to execute the commands counterpart to appium-uiauto once started it creates a web socket connection to the device application provides start/shutdown/sendCommand interface command flow is like: Selenium command - appium-adb - appium-android-bootstrap - Java code using the Android UI Automator framework appium-uiautomator starts and shutdowns uiautomator server given by appium-android-bootstrap jar build command flow is like appium-android-bootstrap:start - appium-uiautomator:start - appium-adb:install bootstrap appium-android-ime allows to send and receive unicode characters from/to the Android device encodes text into UTF-7 sends it to the device and recodes it as Unicode used by appium-android-driver appium-doctor diagnoses, reports and fixes common Node, iOS and Android configuration issues before starting Appium exposes cli command \u201cappium-doctor\" it checks for Android: android sdk exists and configured properly env variables and path check iOS: xcode is installed (with command line tools) dev tools security check auth check node binary check appium-gulp-plugins dev package with custom plugins used accross appium modules (for Appium development only) contains task for e2e and unit tests (with coverage reporting) transpiling ES2016 into ES5 static code analysis (eslint) watch task for dev appium-remote-debugger RPC client to connect Appium to iOS webviews can connect to WebKit devtools for iOS only has two rpc client classes remote-debugger-rpc-client: uses tcp6 that connects to localhost:27753 webkit-rpc-client: uses WebSockets to connect to ws://localhost:27753/devtools/page/${pageId} node-teen_process helper module that exposes: exec: ES7 (async/await) implementation of exec that uses spawn under the hood SubProcess: cuts down boilerplate when using spawn (especially when using in an async/await context) appium-logger basic logger defaulting to npmlog with special consideration for running tests exposes getLogger function that gets used by almost all Appium packages defers to already-running logger if there is one, so everything bubbles up appium-support utility functions used to support libs used across appium packages. provides promise wrappers for some common operations like system methods (isWindows, isLinux \u2026) utility methods like hasValue, escapeSpace a bunch of fs methods plist helpers for parsing and updating plist files","title":"Appium Package Structure"},{"location":"contributing-to-appium/appium-packages/#appium-in-a-nutshell","text":"","title":"Appium in a Nutshell"},{"location":"contributing-to-appium/appium-packages/#appium","text":"runs basic checks node version ( = 5) CLI arguments checks contains all available and supported CLI arguments check for deprecation and mutual exclusion put logging together mixture out of npmlog, winston and a custom logger initiates AppiumDriver (extends Basedriver) assigns iOS/Android/Fake driver to session creates/deletes Appium session starts baseServer (appium-express) passes routes given by driver","title":"appium"},{"location":"contributing-to-appium/appium-packages/#appium-express-part-of-appium-base-driver","text":"starts express server (allows x-domain-origin) initialises routes from AppiumDriver timeout handling serves a static page for test purposes connects req/res events to logger","title":"appium-express (part of appium-base-driver)"},{"location":"contributing-to-appium/appium-packages/#mobile-json-wire-protocol-part-of-appium-base-driver","text":"provides list of Appium commands subclassed by drivers that will use the protocol kind of middleware between client and driver handles jwp proxy for driver contains error classes for all types of errors sanitises error responses (un)wraps params to commands checks required params, validates params","title":"mobile-json-wire-protocol (part of appium-base-driver)"},{"location":"contributing-to-appium/appium-packages/#appium-base-driver","text":"designed to have a single testing session per instantiation contains constraints on caps (platformName has to be present, etc) validates capabilities runs chain of promised commands with single concurrency handles session restart handles swipe options exports class (DeviceSettings) to manage device settings (get/update) contains basic commands to find elements create/delete sessions handle timeouts set/update device settings provides helper methods for commands","title":"appium-base-driver"},{"location":"contributing-to-appium/appium-packages/#appium-ios-driver","text":"can also run as standalone server (has a small server part that extends from appium-express) supported strategies: \"name\", \"xpath\", \"id\", \"-ios uiautomation\", \"class name\", \"accessibility id\u201d can start a simulator or a real device (if udid is given) runs for each type a huge set of instructions removeInstrumentsSocket setBundleIdFromApp createInstruments runSimReset, isolateSimDevice, setLocale || runRealDeviceReset setPreferences || runRealDeviceReset startLogCapture prelaunchSimulator || (noop) startInstruments onInstrumentsLaunch configureBootstrap setBundleId setInitialOrientation initAutoWebview waitForAppLaunched all instructions are helper methods within driver.js contains a more specific set of capability constraints has logic to build and run Safari (safari-launcher) using appium-xcode implements commands for iOS driver Selenium commands are compiled to ui-automator commands commands will be send out to uiAutoClient (appium-uiauto) connects to appium remote debugger","title":"appium-ios-driver"},{"location":"contributing-to-appium/appium-packages/#appium-xcode","text":"runs shell commands to return useful data from Xcode like getPath getVersion getAutomationTraceTemplatePath getMaxIOSSDK \u2026 has an auto-retry built in","title":"appium-xcode"},{"location":"contributing-to-appium/appium-packages/#appium-uiauto","text":"wrapper for the iOS UI Automation framework talks to it via socket connection runs a command queue that get filled up by the sendCommand function handles responses (as a buffer) from the ui-automation framework uses osascript to rotate screenshots provides method to bootstrap simulator/realdevice (dynamic-bootstrap) javascript files which are run in the iOS UI Automation context (not node) responsible to execute actual iOS UI Automation commands see UIAutomation docs command flow is like Webdriver command - iOS driver command - uiauto-command","title":"appium-uiauto"},{"location":"contributing-to-appium/appium-packages/#appium-instruments","text":"wrapper to run instruments commands a lot of exec calls to talk to instruments binary all of them take callbacks to propagate the result uses \"iwd\" (instruments without delay) packages which have to be compiled first special Instruments package that gets rid of a delay between commands contains also older versions of iwd instrument (v4 - v7)","title":"appium-instruments"},{"location":"contributing-to-appium/appium-packages/#appium-ios-log","text":"captures console, performance and crash logs from the iOS simulator or real device by either calling tail to grab logs from a system path (simulator devices) or by calling deviceconsole (real devices) performance logs are getting grabbed using the remote-debugger crash logs remain in \u201c.crash\u201d files on the system","title":"appium-ios-log"},{"location":"contributing-to-appium/appium-packages/#appium-ios-simulator","text":"wrapper around iOS simulator app start and shutdown (kill all) simulators updating settings and locals update/clean safari grabs meta data about the simulator device uses simctl to talk to the simulator works for Xcode 6 and 7","title":"appium-ios-simulator"},{"location":"contributing-to-appium/appium-packages/#node-simctl","text":"wrapper around simctl binary (cli utility to control an iOS simulator) executed as a subcommand of xcrun (locate or invoke developer tools from the command-line) contains functions to install/remove apps launch and shutdown simulators create/erase/delete devices get list of devices","title":"node-simctl"},{"location":"contributing-to-appium/appium-packages/#appium-cookies","text":"simple package to create and receive cookies used in the appium-ios-driver to implement jswonwire cookie commands within the web context","title":"appium-cookies"},{"location":"contributing-to-appium/appium-packages/#appium-chromedriver","text":"wrapper around the chrome driver downloads and installs chromedriver binaries launches, restarts and stops (or kills all) chrome instances uses appium-jsonwp-proxy to send json wire protocol commands to the driver","title":"appium-chromedriver"},{"location":"contributing-to-appium/appium-packages/#jsonwp-proxy-part-of-appium-base-driver","text":"allows to send json wire protocol commands to a server that understands it (browser drivers) parses response into json allows to proxy requests to a proxied server used for communication in appium-chromedriver","title":"jsonwp-proxy (part of appium-base-driver)"},{"location":"contributing-to-appium/appium-packages/#appium-android-driver","text":"similar to appium-ios-driver it can run as standalone server automates native, hybrid and mobile web apps on emulators/simulators and real devices takes care of installing android packages to the device runs chromedriver sessions if desired contains a more specific set of capability constraints uses appium-adb to talk to the emulator/simulator/realdevice and appium-android-bootstrap to execute the actual commands contains helpers to figure out which web view belongs to which app package vice versa","title":"appium-android-driver"},{"location":"contributing-to-appium/appium-packages/#appium-adb","text":"wrapper around the Android Debug Bridge (adb) contains a bunch of commands that are basically just rpc to the adb binary houses jar files to run for special use cases like signing, verifying apps or moving manifests allows special (mobile specific) emulator commands that are not related to the webdriver protocol like locking the screen press back button press home button set/get airplane mode set/get wifi state captures logcat handles emulator/simulator actions (e.g. reboot)","title":"appium-adb"},{"location":"contributing-to-appium/appium-packages/#appium-android-bootstrap","text":"JavaScript interface, and Java code, for interacting with Android UI Automator builds AppiumBootstrap.jar that contains logic to execute the commands counterpart to appium-uiauto once started it creates a web socket connection to the device application provides start/shutdown/sendCommand interface command flow is like: Selenium command - appium-adb - appium-android-bootstrap - Java code using the Android UI Automator framework","title":"appium-android-bootstrap"},{"location":"contributing-to-appium/appium-packages/#appium-uiautomator","text":"starts and shutdowns uiautomator server given by appium-android-bootstrap jar build command flow is like appium-android-bootstrap:start - appium-uiautomator:start - appium-adb:install bootstrap","title":"appium-uiautomator"},{"location":"contributing-to-appium/appium-packages/#appium-android-ime","text":"allows to send and receive unicode characters from/to the Android device encodes text into UTF-7 sends it to the device and recodes it as Unicode used by appium-android-driver","title":"appium-android-ime"},{"location":"contributing-to-appium/appium-packages/#appium-doctor","text":"diagnoses, reports and fixes common Node, iOS and Android configuration issues before starting Appium exposes cli command \u201cappium-doctor\" it checks for Android: android sdk exists and configured properly env variables and path check iOS: xcode is installed (with command line tools) dev tools security check auth check node binary check","title":"appium-doctor"},{"location":"contributing-to-appium/appium-packages/#appium-gulp-plugins","text":"dev package with custom plugins used accross appium modules (for Appium development only) contains task for e2e and unit tests (with coverage reporting) transpiling ES2016 into ES5 static code analysis (eslint) watch task for dev","title":"appium-gulp-plugins"},{"location":"contributing-to-appium/appium-packages/#appium-remote-debugger","text":"RPC client to connect Appium to iOS webviews can connect to WebKit devtools for iOS only has two rpc client classes remote-debugger-rpc-client: uses tcp6 that connects to localhost:27753 webkit-rpc-client: uses WebSockets to connect to ws://localhost:27753/devtools/page/${pageId}","title":"appium-remote-debugger"},{"location":"contributing-to-appium/appium-packages/#node-teen_process","text":"helper module that exposes: exec: ES7 (async/await) implementation of exec that uses spawn under the hood SubProcess: cuts down boilerplate when using spawn (especially when using in an async/await context)","title":"node-teen_process"},{"location":"contributing-to-appium/appium-packages/#appium-logger","text":"basic logger defaulting to npmlog with special consideration for running tests exposes getLogger function that gets used by almost all Appium packages defers to already-running logger if there is one, so everything bubbles up","title":"appium-logger"},{"location":"contributing-to-appium/appium-packages/#appium-support","text":"utility functions used to support libs used across appium packages. provides promise wrappers for some common operations like system methods (isWindows, isLinux \u2026) utility methods like hasValue, escapeSpace a bunch of fs methods plist helpers for parsing and updating plist files","title":"appium-support"},{"location":"contributing-to-appium/credits/","text":"Credits These are the projects that inspired us, or are depended upon to make Appium awesome. Apple UIAutomation GhostDriver IOS Auto IOS Driver Mechanic.js node-webkit Remote Debug Selenium Project ios-webkit-debug-proxy instruments-without-delay deviceconsole WinAppDriver WebDriverAgent","title":"Credits"},{"location":"contributing-to-appium/credits/#credits","text":"","title":"Credits"},{"location":"contributing-to-appium/credits/#these-are-the-projects-that-inspired-us-or-are-depended-upon-to-make-appium-awesome","text":"Apple UIAutomation GhostDriver IOS Auto IOS Driver Mechanic.js node-webkit Remote Debug Selenium Project ios-webkit-debug-proxy instruments-without-delay deviceconsole WinAppDriver WebDriverAgent","title":"These are the projects that inspired us, or are depended upon to make Appium awesome."},{"location":"contributing-to-appium/dev-tools/","text":"Appium development commands Each Appium package has a number of NPM scripts that are used to automate development tasks: Task Description npm run build Transpile code into the build directory npm run lint Runs ESLint npm run test Cleans, lints, transpiles, and runs unit tests npm run e2e-test Tranpiles and runs functional tests npm run watch Automatically runs test command when code is changed npm run mocha Gives access to mocha test runner In addition, the main Appium package has a task npm generate-docs which generates the command documentation.","title":"Standard Dev Commands"},{"location":"contributing-to-appium/dev-tools/#appium-development-commands","text":"Each Appium package has a number of NPM scripts that are used to automate development tasks: Task Description npm run build Transpile code into the build directory npm run lint Runs ESLint npm run test Cleans, lints, transpiles, and runs unit tests npm run e2e-test Tranpiles and runs functional tests npm run watch Automatically runs test command when code is changed npm run mocha Gives access to mocha test runner In addition, the main Appium package has a task npm generate-docs which generates the command documentation.","title":"Appium development commands"},{"location":"contributing-to-appium/developers-overview/","text":"A Developer's Overview of Appium Before reading this document, please ensure that you have read and understood the more general introduction to Appium concepts and the more general contribution instructions . Technical Vision Appium aims to be a Mobile JSONWP front-end for the best app automation technologies. That's it. We want to take all the different useful automation engines and smooth away their differences and gotchas by making Appium drivers for them and bringing them under the umbrella of Appium itself. This is very similar to the goal of the Selenium project. For our part, we want to have every driver be an independent entity (separate repo, tests, etc...) even as it uses shared libraries that make the development of an Appium driver as simple and boilerplate-free as possible. We use modern JavaScript because JavaScript is everywhere and it's easy for many developers to understand and contribute back to. Developer Community Anyone is welcome to become an Appium developer; just read this guide and get some of your code merged, and you are one of us! If you stick around and help a lot, we will also make you a committer so that you can continue to help the community more easily. If you are developing code for Appium and have questions, reach out to the developer community at appium-developers@googlegroups.com . Note that this is a mailing list for development questions, not usage questions or bug reports. Usage questions belong on discuss.appium.io . The GitHub issue tracker is for bug reports and feature requests only. Agile Development Workflow The Appium team runs development according to a very lightweight version of SCRUM. Every two weeks we begin a new \"sprint\", or a period of time in which we have decided what we want to accomplish. Anyone familiar with the Appium codebase is welcome to attend our sprint planning and participate as a SCRUM team member for that sprint. No long-term commitments required! During the sprint, we update each other with daily progress in the #standup room in our Appium Slack Group (there are no real-time daily standups). At the end of the sprint, to celebrate our accomplishments and reflect on how things went, we hold a \"retrospective\", which might result in a list of things we can try differently or do better next time around. Ultimately, the goal is to time an Appium release at the end of each sprint, so every two weeks. We're not quite there, but hopefully we will be soon. Current meeting times: * Sprint Planning: every other Monday from 10:00 AM - 10:45 AM (Pacific Time) * Sprint Retrospective: every other other Friday from 1:00 PM - 1:30 PM (Pacific Time) We hold meetings using Zoom video chat. If you are interested in participating a sprint, ping @jlipps or @isaac in the Appium Slack Group, or DM @jlipps on Twitter, and we'll share how to join the video chat for the next sprint. Architecture Appium is primarily a collection of node.js packages that combine to form a running node.js server. These packages are maintained independently of one another and each have their own GitHub repo, CI, and release process. Some packages (like appium-ios-driver ) are large and add significant functionality to Appium, while others play a support role and expose one specific bit of functionality that is reused by other packages. For an overview of the package hierarchy and the role that each package plays, please check out our package overview doc. Transpilation Appium is written in a new form of JavaScript, called ES6 (or now ES2015). Because this version of the language is not yet supported natively by older versions of node.js, Appium code is transpiled to ES5 (the more widely-supported version of JS). This transpilation process must occur before any code is run. In addition to the new language features of ES6, we have adopted two very important keywords from the subsequent version of JS, namely async and await , which assist in writing asynchronous code cleanly. Because of the transpilation step, Appium packages include tools which watch code for changes and automatically re-transpile the code. Usually, the same tool will automatically run unit tests as well to ensure that nothing small has broken. Most Appium packages have this as the default behavior when running gulp . Linting and Style It's important for all of Appium's JS to look and feel the same. This includes style conventions as well as coding patterns and which libraries we use to solve various problems. You should get familiar with our new ES2015 Style Guide . When transpiling, Appium packages will automatically run ESLint or other lint tools and provide warning or error feedback if the code doesn't conform to our style. These tools are not necessarily exhaustive of the kinds of style issues we care about, so we may also mention style issues in our reviews. This isn't to be nit-picky but to have a clean, consistent, and readable codebase! Submitting Code Getting your code into Appium is easy: just submit a PR to one of our repos and engage with the maintainers in the review process. We have a number of requirements for code submissions (but don't worry! If the following seems like a lot, we will helpfully and patiently walk you through each step. Just send in your PR and we'll go from there): Follow the style of the surrounding code and our Style Guide Atomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with git rebase -i and squashing! No merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR. Almost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. We will be happy to walk you through the test creation process. Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage. If you do all of these things before submission, your code will almost certainly be accepted very quickly! Of course, if you're thinking of making a change to Appium that requires a lot of work, you might reach out to the developers list to make sure that the change is in line with our philosophy and in principle something that we'll accept before you get going. Testing Always make sure that your changes are tested! In addition to writing unit and e2e tests, make sure you run existing tests before you begin to make changes and before you push code to be reviewed. We do have CI set up for every Appium repository as a safety net for reviewers to know whether the code they are reviewing has passed muster. Running tests in any Appium package is easy! Unless the README says otherwise, here are the things you can do: npm run lint # run eslint on the code npm run watch # watch directory to re-transpile on code change, lint, and run unit tests npm run test # same as above but don't watch npm run e2e-test # transpile and run end-to-end/functional tests _FORCE_LOGS=1 command # show module log output during test run Note that we have a convention for unit test files to end in -specs.js and for e2e test files to end in -e2e-specs.js . Releasing The release process for any Appium module other than the main Appium package is pretty straightforward (note that you will need to be an NPM owner for the package if you want to publish it. Ownership is managed by the Appium committers; talk to @jlipps, @kazucocoa, @dang, @mykola-mokhnach if you believe you should be an owner and are not): rm -rf node_modules rm -rf package-lock.json npm install and run tests to make sure a clean install works. Determine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of SemVer (see also this explanation of how SemVer works with NPM ). Update the CHANGELOG and/or README with any appropriate changes and commit. Most subpackages don't have a CHANGELOG . Run npm version version-type with the appropriate version type. Push the appropriate branch to GitHub, and don't forget to include the --tags flag to include the tag just created by npm version . Run npm publish (with --tag beta if this isn't an official release). For the main Appium package, all the above steps must be taken, but with several changes. One reason is that for the main package we use NPM shrinkwrap to ensure dependencies don't change between installations. Another reason is that we develop on master and release on various branches. The way it works is as follows: we always develop and add new code to master. When we are ready to make a new minor or major release (i.e., 1.5.0 or 2.0.0 ), we create a release branch ( 1.5 or 2.0 respectively). We then publish off of that branch. As we feel the need to make patch releases, we first pull the patch into master, then cherry-pick individual patches to the release branch (perhaps even multiple release branches). Then we again publish from those branches with the updated patch version ( 1.5.1 or 2.0.1 for example). Every release should have at least one release candidate prior to the GA release. For example, if we're releasing 1.20.0 then we should checkout branch 1.12 and then first release 1.12.0-rc.0 . We keep releasing new release candidates until we're happy with it and then \"upgrade\" to GA. The GA release should have identical code and shrinkwrap as the most recent release candidate. The only difference should be the version, which is reflected in package.json and npm-shrinkwrap.json A note about npm shrinkwrap : We use npm shrinkwrap in order to lock dependencies on release. Without it, any development on dependent packages will be reflected when Appium is installed, which may lead to issues. Since the configuration file, npm-shrinkwrap.json , only exists on release branches, it is necessary to manually manage it during the release process. It needs to be checked in to GitHub along with changes to package.json . With npm 5+ there is also a package-lock.json file produced. During the shrinkwrap process this is converted into the npm-shrinkwrap.json file. Follow directions in Release Appium Doc","title":"Developer Overview"},{"location":"contributing-to-appium/developers-overview/#a-developers-overview-of-appium","text":"Before reading this document, please ensure that you have read and understood the more general introduction to Appium concepts and the more general contribution instructions .","title":"A Developer's Overview of Appium"},{"location":"contributing-to-appium/developers-overview/#technical-vision","text":"Appium aims to be a Mobile JSONWP front-end for the best app automation technologies. That's it. We want to take all the different useful automation engines and smooth away their differences and gotchas by making Appium drivers for them and bringing them under the umbrella of Appium itself. This is very similar to the goal of the Selenium project. For our part, we want to have every driver be an independent entity (separate repo, tests, etc...) even as it uses shared libraries that make the development of an Appium driver as simple and boilerplate-free as possible. We use modern JavaScript because JavaScript is everywhere and it's easy for many developers to understand and contribute back to.","title":"Technical Vision"},{"location":"contributing-to-appium/developers-overview/#developer-community","text":"Anyone is welcome to become an Appium developer; just read this guide and get some of your code merged, and you are one of us! If you stick around and help a lot, we will also make you a committer so that you can continue to help the community more easily. If you are developing code for Appium and have questions, reach out to the developer community at appium-developers@googlegroups.com . Note that this is a mailing list for development questions, not usage questions or bug reports. Usage questions belong on discuss.appium.io . The GitHub issue tracker is for bug reports and feature requests only.","title":"Developer Community"},{"location":"contributing-to-appium/developers-overview/#agile-development-workflow","text":"The Appium team runs development according to a very lightweight version of SCRUM. Every two weeks we begin a new \"sprint\", or a period of time in which we have decided what we want to accomplish. Anyone familiar with the Appium codebase is welcome to attend our sprint planning and participate as a SCRUM team member for that sprint. No long-term commitments required! During the sprint, we update each other with daily progress in the #standup room in our Appium Slack Group (there are no real-time daily standups). At the end of the sprint, to celebrate our accomplishments and reflect on how things went, we hold a \"retrospective\", which might result in a list of things we can try differently or do better next time around. Ultimately, the goal is to time an Appium release at the end of each sprint, so every two weeks. We're not quite there, but hopefully we will be soon. Current meeting times: * Sprint Planning: every other Monday from 10:00 AM - 10:45 AM (Pacific Time) * Sprint Retrospective: every other other Friday from 1:00 PM - 1:30 PM (Pacific Time) We hold meetings using Zoom video chat. If you are interested in participating a sprint, ping @jlipps or @isaac in the Appium Slack Group, or DM @jlipps on Twitter, and we'll share how to join the video chat for the next sprint.","title":"Agile Development Workflow"},{"location":"contributing-to-appium/developers-overview/#architecture","text":"Appium is primarily a collection of node.js packages that combine to form a running node.js server. These packages are maintained independently of one another and each have their own GitHub repo, CI, and release process. Some packages (like appium-ios-driver ) are large and add significant functionality to Appium, while others play a support role and expose one specific bit of functionality that is reused by other packages. For an overview of the package hierarchy and the role that each package plays, please check out our package overview doc.","title":"Architecture"},{"location":"contributing-to-appium/developers-overview/#transpilation","text":"Appium is written in a new form of JavaScript, called ES6 (or now ES2015). Because this version of the language is not yet supported natively by older versions of node.js, Appium code is transpiled to ES5 (the more widely-supported version of JS). This transpilation process must occur before any code is run. In addition to the new language features of ES6, we have adopted two very important keywords from the subsequent version of JS, namely async and await , which assist in writing asynchronous code cleanly. Because of the transpilation step, Appium packages include tools which watch code for changes and automatically re-transpile the code. Usually, the same tool will automatically run unit tests as well to ensure that nothing small has broken. Most Appium packages have this as the default behavior when running gulp .","title":"Transpilation"},{"location":"contributing-to-appium/developers-overview/#linting-and-style","text":"It's important for all of Appium's JS to look and feel the same. This includes style conventions as well as coding patterns and which libraries we use to solve various problems. You should get familiar with our new ES2015 Style Guide . When transpiling, Appium packages will automatically run ESLint or other lint tools and provide warning or error feedback if the code doesn't conform to our style. These tools are not necessarily exhaustive of the kinds of style issues we care about, so we may also mention style issues in our reviews. This isn't to be nit-picky but to have a clean, consistent, and readable codebase!","title":"Linting and Style"},{"location":"contributing-to-appium/developers-overview/#submitting-code","text":"Getting your code into Appium is easy: just submit a PR to one of our repos and engage with the maintainers in the review process. We have a number of requirements for code submissions (but don't worry! If the following seems like a lot, we will helpfully and patiently walk you through each step. Just send in your PR and we'll go from there): Follow the style of the surrounding code and our Style Guide Atomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with git rebase -i and squashing! No merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR. Almost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. We will be happy to walk you through the test creation process. Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage. If you do all of these things before submission, your code will almost certainly be accepted very quickly! Of course, if you're thinking of making a change to Appium that requires a lot of work, you might reach out to the developers list to make sure that the change is in line with our philosophy and in principle something that we'll accept before you get going.","title":"Submitting Code"},{"location":"contributing-to-appium/developers-overview/#testing","text":"Always make sure that your changes are tested! In addition to writing unit and e2e tests, make sure you run existing tests before you begin to make changes and before you push code to be reviewed. We do have CI set up for every Appium repository as a safety net for reviewers to know whether the code they are reviewing has passed muster. Running tests in any Appium package is easy! Unless the README says otherwise, here are the things you can do: npm run lint # run eslint on the code npm run watch # watch directory to re-transpile on code change, lint, and run unit tests npm run test # same as above but don't watch npm run e2e-test # transpile and run end-to-end/functional tests _FORCE_LOGS=1 command # show module log output during test run Note that we have a convention for unit test files to end in -specs.js and for e2e test files to end in -e2e-specs.js .","title":"Testing"},{"location":"contributing-to-appium/developers-overview/#releasing","text":"The release process for any Appium module other than the main Appium package is pretty straightforward (note that you will need to be an NPM owner for the package if you want to publish it. Ownership is managed by the Appium committers; talk to @jlipps, @kazucocoa, @dang, @mykola-mokhnach if you believe you should be an owner and are not): rm -rf node_modules rm -rf package-lock.json npm install and run tests to make sure a clean install works. Determine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of SemVer (see also this explanation of how SemVer works with NPM ). Update the CHANGELOG and/or README with any appropriate changes and commit. Most subpackages don't have a CHANGELOG . Run npm version version-type with the appropriate version type. Push the appropriate branch to GitHub, and don't forget to include the --tags flag to include the tag just created by npm version . Run npm publish (with --tag beta if this isn't an official release). For the main Appium package, all the above steps must be taken, but with several changes. One reason is that for the main package we use NPM shrinkwrap to ensure dependencies don't change between installations. Another reason is that we develop on master and release on various branches. The way it works is as follows: we always develop and add new code to master. When we are ready to make a new minor or major release (i.e., 1.5.0 or 2.0.0 ), we create a release branch ( 1.5 or 2.0 respectively). We then publish off of that branch. As we feel the need to make patch releases, we first pull the patch into master, then cherry-pick individual patches to the release branch (perhaps even multiple release branches). Then we again publish from those branches with the updated patch version ( 1.5.1 or 2.0.1 for example). Every release should have at least one release candidate prior to the GA release. For example, if we're releasing 1.20.0 then we should checkout branch 1.12 and then first release 1.12.0-rc.0 . We keep releasing new release candidates until we're happy with it and then \"upgrade\" to GA. The GA release should have identical code and shrinkwrap as the most recent release candidate. The only difference should be the version, which is reflected in package.json and npm-shrinkwrap.json A note about npm shrinkwrap : We use npm shrinkwrap in order to lock dependencies on release. Without it, any development on dependent packages will be reflected when Appium is installed, which may lead to issues. Since the configuration file, npm-shrinkwrap.json , only exists on release branches, it is necessary to manually manage it during the release process. It needs to be checked in to GitHub along with changes to package.json . With npm 5+ there is also a package-lock.json file produced. During the shrinkwrap process this is converted into the npm-shrinkwrap.json file. Follow directions in Release Appium Doc","title":"Releasing"},{"location":"contributing-to-appium/how-to-write-docs/","text":"How to write docs ## is used to write a h2 header. Each document must start with a h2 header. This is to support appium.io docs generation. Don't use the --- underline method of creating headers. Don't use h1 # or === for heading as it is not supported for table of contents (folder name is used as h1). Subheaders ### is used to write subheaders. Regular headers #### is used for headers that don't appear in the table of contents. Don't use h5 ##### , or h6 ###### . Line breaks Don't use line breaks such as -- or --- . Linking Link to the readme: [readme](../../README.md) Link to contributing: [contributing](../../CONTRIBUTING.md) Link to another document [link text](filename.md) Writing Commands Documents The command documents located in docs/en/commands , are generated docs and aren't meant to be edited directly. The command documentation is defined in commands-yml/commands . Generating Commands Documents To generate the commands docs, run npm run generate-docs . This will generate the markdown files in docs/en/commands and then they need to be committed and pushed. Adding Documents to Appium.io Markdown files in docs/ aren't automatically added to the site. To add a document to appium.io you need to add it as an entry in the appropriate location in the table of contents, toc.js Publishing To publish documentation on appium.io see appium.io (Github) .","title":"How to Write Docs"},{"location":"contributing-to-appium/how-to-write-docs/#how-to-write-docs","text":"## is used to write a h2 header. Each document must start with a h2 header. This is to support appium.io docs generation. Don't use the --- underline method of creating headers. Don't use h1 # or === for heading as it is not supported for table of contents (folder name is used as h1).","title":"How to write docs"},{"location":"contributing-to-appium/how-to-write-docs/#subheaders","text":"### is used to write subheaders.","title":"Subheaders"},{"location":"contributing-to-appium/how-to-write-docs/#regular-headers","text":"#### is used for headers that don't appear in the table of contents. Don't use h5 ##### , or h6 ###### .","title":"Regular headers"},{"location":"contributing-to-appium/how-to-write-docs/#line-breaks","text":"Don't use line breaks such as -- or --- .","title":"Line breaks"},{"location":"contributing-to-appium/how-to-write-docs/#linking","text":"Link to the readme: [readme](../../README.md) Link to contributing: [contributing](../../CONTRIBUTING.md) Link to another document [link text](filename.md)","title":"Linking"},{"location":"contributing-to-appium/how-to-write-docs/#writing-commands-documents","text":"The command documents located in docs/en/commands , are generated docs and aren't meant to be edited directly. The command documentation is defined in commands-yml/commands .","title":"Writing Commands Documents"},{"location":"contributing-to-appium/how-to-write-docs/#generating-commands-documents","text":"To generate the commands docs, run npm run generate-docs . This will generate the markdown files in docs/en/commands and then they need to be committed and pushed.","title":"Generating Commands Documents"},{"location":"contributing-to-appium/how-to-write-docs/#adding-documents-to-appiumio","text":"Markdown files in docs/ aren't automatically added to the site. To add a document to appium.io you need to add it as an entry in the appropriate location in the table of contents, toc.js","title":"Adding Documents to Appium.io"},{"location":"contributing-to-appium/how-to-write-docs/#publishing","text":"To publish documentation on appium.io see appium.io (Github) .","title":"Publishing"},{"location":"contributing-to-appium/real-device-ci/","text":"Real Device Continuous Integration Appium uses a service called TestObject that allows us to run automated functional tests against real devices. How it works See here for details on how TestObject runs Appium tests For tests that use wd , to run TestObject tests we must use a method called enableTestObject from appium-test-support which is called before the tests are run This method does the following: Pulls down appium and runs git command from the shell to clone it Rewrites it and changes the version of the driver we want to test to point to a git URL with a commit hash Installs the npm modules Zips the folder Uploads it to S3 Overrides wd so that it includes testobject specific desired capabilities including a path to the S3 url Environment In order to use this you need to set some environment variables AWS_ACCESS_KEY_ID: ID with S3 write access AWS_SECRET_ACCESS_KEY AWS_REGION AWS_S3_BUCKET: Name of the bucket being written to TESTOBJECT_API_KEY Example // This script, if run before the rest of the tests, will use TestObject appium staging server import { enableTestObject, disableTestObject } from 'appium-test-support'; import wd from 'wd'; import { startServer, DEFAULT_PORT } from '../../..'; import logger from '../../../lib/logger'; if (process.env.TESTOBJECT_E2E_TESTS) { logger.debug('Running tests on TestObject'); let wdObject; before(async function () { // Use a commit SHA as the git branch const branch = process.env.COMMIT_HASH || process.env.TRAVIS_COMMIT; if (!branch) { throw new Error(`A commit must be provided in $COMMIT_HASH`); } // Uploads the zip and injects 'appium-uiautomator2-driver' as the branch wdObject = await enableTestObject(wd, 'appium-uiautomator2-driver', `git@github.com:appium/appium-uiautomator2-driver.git#${branch}`); }); after(async function () { // Reverses the overriding of 'wd' await disableTestObject(wdObject); }); } else { before(async function () { // If we're not using TestObject, we're using a local server await startServer(DEFAULT_PORT, 'localhost'); }); }","title":"Real Device Continuous Integration"},{"location":"contributing-to-appium/real-device-ci/#real-device-continuous-integration","text":"Appium uses a service called TestObject that allows us to run automated functional tests against real devices.","title":"Real Device Continuous Integration"},{"location":"contributing-to-appium/real-device-ci/#how-it-works","text":"See here for details on how TestObject runs Appium tests For tests that use wd , to run TestObject tests we must use a method called enableTestObject from appium-test-support which is called before the tests are run This method does the following: Pulls down appium and runs git command from the shell to clone it Rewrites it and changes the version of the driver we want to test to point to a git URL with a commit hash Installs the npm modules Zips the folder Uploads it to S3 Overrides wd so that it includes testobject specific desired capabilities including a path to the S3 url","title":"How it works"},{"location":"contributing-to-appium/real-device-ci/#environment","text":"In order to use this you need to set some environment variables AWS_ACCESS_KEY_ID: ID with S3 write access AWS_SECRET_ACCESS_KEY AWS_REGION AWS_S3_BUCKET: Name of the bucket being written to TESTOBJECT_API_KEY","title":"Environment"},{"location":"contributing-to-appium/real-device-ci/#example","text":"// This script, if run before the rest of the tests, will use TestObject appium staging server import { enableTestObject, disableTestObject } from 'appium-test-support'; import wd from 'wd'; import { startServer, DEFAULT_PORT } from '../../..'; import logger from '../../../lib/logger'; if (process.env.TESTOBJECT_E2E_TESTS) { logger.debug('Running tests on TestObject'); let wdObject; before(async function () { // Use a commit SHA as the git branch const branch = process.env.COMMIT_HASH || process.env.TRAVIS_COMMIT; if (!branch) { throw new Error(`A commit must be provided in $COMMIT_HASH`); } // Uploads the zip and injects 'appium-uiautomator2-driver' as the branch wdObject = await enableTestObject(wd, 'appium-uiautomator2-driver', `git@github.com:appium/appium-uiautomator2-driver.git#${branch}`); }); after(async function () { // Reverses the overriding of 'wd' await disableTestObject(wdObject); }); } else { before(async function () { // If we're not using TestObject, we're using a local server await startServer(DEFAULT_PORT, 'localhost'); }); }","title":"Example"},{"location":"contributing-to-appium/release-appium/","text":"Releasing Appium Appium follows the GitLab flow approach. Releases are made on release branches that have the format releases/x.y where x is a major version and y is a minor version. The main Appium repository doesn't strictly follow semver (unlike the dependencies of Appium). A minor release (e.g.: 1.20.0 ) means that we're creating a new release that has a newly created set of dependencies that are shrinkwrapped to the latest. A patch release (e.g.: 1.20.4 ) isn't strictly a \"patch\", but just means that we're making an intermediary release that brings in small changes. For example, suppose I have a new version of appium-xcuitest-driver that I want to publish and it can't wait until the next minor release. To bring in that change, I would checkout the release branch (e.g.: git checkout releases/1.20 ); install the dependency ( npm install appium-xcuitest-driver@version git commit -a -m 'bump appium-xcuitest-driver to version $version ); release a \"release candidate\" (see below) and then when it's ready, graduate the \"release candidate\" to general availability Create a release branch bash ./scripts/release-branch.sh x.y where x is the major version and y is the minor version (example: bash ./scripts/release-branch.sh 1.20 ) This will create: A release branch releases/1.20 A git tag v1.20.0-rc.0 Publish a NPM package 1.20.0-rc.0 as a release candidate Create a changelog pull request Create a release candidate Checkout the release branch (e.g.: git checkout releases/1.21 git pull origin releases/1.21 ) bash ./scripts/release.sh rc Publish to GA Checkout the release branch (e.g.: git checkout releases/1.21 git pull origin releases/1.21 ) bash ./scripts/release-latest.sh 1.21.0 The 1.21.0 must be proper version name Update the site docs by going to https://github.com/appium/appium.io/pulls and merging the latest pull request that was opened by the Triager bot. Close any other pull requests opened by Triager bot. Create a new release on GitHub: go to https://github.com/appium/appium/releases/tag/v VERSION and hit \"Edit Tag\". Make the release name VERSION (e.g., 2.0.5 ), then paste in the changelog (but not the changelog header for this version). If it's a beta release, mark as pre-release. Please check Create a discussion for this release and select Release category Create a new post on discuss.appium.io announcing the release. Post it in the \"News\" category. Paste in the changelog and any choice comments. Pin it and unpin the previous release post. Begin process of releasing appium-desktop . Notify @jlipps to so he can tweet a link to the discuss post. Create the next beta Bump the version name in package.json for the next beta on the main branch. e.g. 1.22.0-beta.0 Commit the change without a tag, Push the version as npm publish --tag beta . Troubleshooting When you publish a version to a wrong channel For example, you accidentally pusbed rc version into the latest channel. Then, you could add the deprecated label to this version , and re-tag the previous stable version in order to keep the stable one via npm install . dist-tag command helps to achieve that. $ npm deprecate appium@1.21.0-rc.0 this release should be in rc channel --tag=latest $ npm dist-tag add appium@1.20.2 latest You can confirm if the above step works by calling npm install -g appium . Once you can install appium@1.20.2 , the above step worked. (You may need to wait for a few minutes because of npm caching.)","title":"Release Appium"},{"location":"contributing-to-appium/release-appium/#releasing-appium","text":"Appium follows the GitLab flow approach. Releases are made on release branches that have the format releases/x.y where x is a major version and y is a minor version. The main Appium repository doesn't strictly follow semver (unlike the dependencies of Appium). A minor release (e.g.: 1.20.0 ) means that we're creating a new release that has a newly created set of dependencies that are shrinkwrapped to the latest. A patch release (e.g.: 1.20.4 ) isn't strictly a \"patch\", but just means that we're making an intermediary release that brings in small changes. For example, suppose I have a new version of appium-xcuitest-driver that I want to publish and it can't wait until the next minor release. To bring in that change, I would checkout the release branch (e.g.: git checkout releases/1.20 ); install the dependency ( npm install appium-xcuitest-driver@version git commit -a -m 'bump appium-xcuitest-driver to version $version ); release a \"release candidate\" (see below) and then when it's ready, graduate the \"release candidate\" to general availability","title":"Releasing Appium"},{"location":"contributing-to-appium/release-appium/#create-a-release-branch","text":"bash ./scripts/release-branch.sh x.y where x is the major version and y is the minor version (example: bash ./scripts/release-branch.sh 1.20 ) This will create: A release branch releases/1.20 A git tag v1.20.0-rc.0 Publish a NPM package 1.20.0-rc.0 as a release candidate Create a changelog pull request","title":"Create a release branch"},{"location":"contributing-to-appium/release-appium/#create-a-release-candidate","text":"Checkout the release branch (e.g.: git checkout releases/1.21 git pull origin releases/1.21 ) bash ./scripts/release.sh rc","title":"Create a release candidate"},{"location":"contributing-to-appium/release-appium/#publish-to-ga","text":"Checkout the release branch (e.g.: git checkout releases/1.21 git pull origin releases/1.21 ) bash ./scripts/release-latest.sh 1.21.0 The 1.21.0 must be proper version name Update the site docs by going to https://github.com/appium/appium.io/pulls and merging the latest pull request that was opened by the Triager bot. Close any other pull requests opened by Triager bot. Create a new release on GitHub: go to https://github.com/appium/appium/releases/tag/v VERSION and hit \"Edit Tag\". Make the release name VERSION (e.g., 2.0.5 ), then paste in the changelog (but not the changelog header for this version). If it's a beta release, mark as pre-release. Please check Create a discussion for this release and select Release category Create a new post on discuss.appium.io announcing the release. Post it in the \"News\" category. Paste in the changelog and any choice comments. Pin it and unpin the previous release post. Begin process of releasing appium-desktop . Notify @jlipps to so he can tweet a link to the discuss post. Create the next beta Bump the version name in package.json for the next beta on the main branch. e.g. 1.22.0-beta.0 Commit the change without a tag, Push the version as npm publish --tag beta .","title":"Publish to GA"},{"location":"contributing-to-appium/release-appium/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"contributing-to-appium/release-appium/#when-you-publish-a-version-to-a-wrong-channel","text":"For example, you accidentally pusbed rc version into the latest channel. Then, you could add the deprecated label to this version , and re-tag the previous stable version in order to keep the stable one via npm install . dist-tag command helps to achieve that. $ npm deprecate appium@1.21.0-rc.0 this release should be in rc channel --tag=latest $ npm dist-tag add appium@1.20.2 latest You can confirm if the above step works by calling npm install -g appium . Once you can install appium@1.20.2 , the above step worked. (You may need to wait for a few minutes because of npm caching.)","title":"When you publish a version to a wrong channel"},{"location":"contributing-to-appium/style-guide/","text":"Style guide for contributors Thanks for your contribution to Appium! Here are the principles we use when writing javascript. Please conform to these so we can merge your pull request without going back and forth about style. The main principle is: make your code look like the surrounding code . JavaScript With the exception of the code that runs on the devices themselves ( appium-uiautomator2-server for Android, WebDriverAgent for iOS), Appium is written in Node.js . If you are not familiar with JavaScript, please familiarize yourself before attempting to modify the code. There are plenty of good, free resources (see, for example, You Don't Know JavaScript ). Rebasing Commits in a pull request should consist of logical changes . If there are multiple authors, make sure each author has their own commit. It's not a good idea to modify author information. Merge commits should be rebased out of pull requests. Linting All code must pass ESLint . To check your code, you can simply run npm run lint from the Appium repo dir. The configuration is specified in the eslint-config-appium package. Most modern editors have integration with ESLint. See here for details. Style notes We use a future version of JavaScript and take advantage of the Babel transpiler to render it down to what is supported by current versions of Node.js . We use ES2015 (formerly called ES6) with some not-yet-standard features, namely async/await . This style guide must be followed diligently in all Appium contributions! Luckily, linting will enforce most of these rules! Use two spaces for indentation, no tabs Use single spaces around operators js let x = 1; not js let x=1; Spaces after commas and colons in lists, objects, function calls, etc... js let x = myFunc('lol', {foo: bar, baz: boo}); not js let x = myFunc('lol',{foo:bar,baz:boo}); Always end statements with semicolons Brackets for function , if , etc... go on same line, else gets sandwiched js if (foo === bar) { // do something } else { // do something else } not js if (foo === bar) { // do something } else { // do something else } Space after if , for , and function : js if (foo === bar) { js for (let i = 0; i 10; i ++) { js let lol = function (foo) { not js if(foo === bar) { js for(let i = 0; i 10; i ++) { js let lol = function(foo) { Avoid bracketless if for one-liners: js if (foo === bar) { foo++; } not js if (foo === bar) foo++; except in the case of short-circuiting to return/error js if (err) return; js if (err) throw new Error(err); Use === , not == , and !== , not != for no surprises Line length shouldn't be longer than 79 characters Break up long strings like this: javascript myFunc('This is a really long string that's longer ' + 'than 79 characters so I broke it up, woo'); Comments should line up with code js if (foo === 5) { myFunc(foo); // foo++; } not js if (foo === 5) { myFunc(foo); //foo++; } Variable names should be camelCased: js let myVariable = 42; not js let my_variable = 42; Check for undefined using Appium's appium-support package js util.hasValue(myVariable) Define a variable with a default value js let x = y || z; not js let x = y ? y : z; Test Style: Tests are written using mocha and chai . The WebDriver library used is wd . Keep on the same line if it makes sense semantically and length is not an issue: Examples: driver.elementByTagName('el1').should.become('123'); driver .elementsByTagName('el1').should.eventually.have.length(0); Alternatively use extra indents to improve readability: driver .elementById('comments') .clear() .click() .keys('hello world') .getValue() .should.become('hello world') .elementById('comments') .getValue().should.become('hello world'); driver .execute( 'NaN'-- ) .should.be.rejectedWith('status: 13');","title":"Appium Style Guide"},{"location":"contributing-to-appium/style-guide/#style-guide-for-contributors","text":"Thanks for your contribution to Appium! Here are the principles we use when writing javascript. Please conform to these so we can merge your pull request without going back and forth about style. The main principle is: make your code look like the surrounding code .","title":"Style guide for contributors"},{"location":"contributing-to-appium/style-guide/#javascript","text":"With the exception of the code that runs on the devices themselves ( appium-uiautomator2-server for Android, WebDriverAgent for iOS), Appium is written in Node.js . If you are not familiar with JavaScript, please familiarize yourself before attempting to modify the code. There are plenty of good, free resources (see, for example, You Don't Know JavaScript ).","title":"JavaScript"},{"location":"contributing-to-appium/style-guide/#rebasing","text":"Commits in a pull request should consist of logical changes . If there are multiple authors, make sure each author has their own commit. It's not a good idea to modify author information. Merge commits should be rebased out of pull requests.","title":"Rebasing"},{"location":"contributing-to-appium/style-guide/#linting","text":"All code must pass ESLint . To check your code, you can simply run npm run lint from the Appium repo dir. The configuration is specified in the eslint-config-appium package. Most modern editors have integration with ESLint. See here for details.","title":"Linting"},{"location":"contributing-to-appium/style-guide/#style-notes","text":"We use a future version of JavaScript and take advantage of the Babel transpiler to render it down to what is supported by current versions of Node.js . We use ES2015 (formerly called ES6) with some not-yet-standard features, namely async/await . This style guide must be followed diligently in all Appium contributions! Luckily, linting will enforce most of these rules! Use two spaces for indentation, no tabs Use single spaces around operators js let x = 1; not js let x=1; Spaces after commas and colons in lists, objects, function calls, etc... js let x = myFunc('lol', {foo: bar, baz: boo}); not js let x = myFunc('lol',{foo:bar,baz:boo}); Always end statements with semicolons Brackets for function , if , etc... go on same line, else gets sandwiched js if (foo === bar) { // do something } else { // do something else } not js if (foo === bar) { // do something } else { // do something else } Space after if , for , and function : js if (foo === bar) { js for (let i = 0; i 10; i ++) { js let lol = function (foo) { not js if(foo === bar) { js for(let i = 0; i 10; i ++) { js let lol = function(foo) { Avoid bracketless if for one-liners: js if (foo === bar) { foo++; } not js if (foo === bar) foo++; except in the case of short-circuiting to return/error js if (err) return; js if (err) throw new Error(err); Use === , not == , and !== , not != for no surprises Line length shouldn't be longer than 79 characters Break up long strings like this: javascript myFunc('This is a really long string that's longer ' + 'than 79 characters so I broke it up, woo'); Comments should line up with code js if (foo === 5) { myFunc(foo); // foo++; } not js if (foo === 5) { myFunc(foo); //foo++; } Variable names should be camelCased: js let myVariable = 42; not js let my_variable = 42; Check for undefined using Appium's appium-support package js util.hasValue(myVariable) Define a variable with a default value js let x = y || z; not js let x = y ? y : z;","title":"Style notes"},{"location":"contributing-to-appium/style-guide/#test-style","text":"Tests are written using mocha and chai . The WebDriver library used is wd . Keep on the same line if it makes sense semantically and length is not an issue: Examples: driver.elementByTagName('el1').should.become('123'); driver .elementsByTagName('el1').should.eventually.have.length(0); Alternatively use extra indents to improve readability: driver .elementById('comments') .clear() .click() .keys('hello world') .getValue() .should.become('hello world') .elementById('comments') .getValue().should.become('hello world'); driver .execute( 'NaN'-- ) .should.be.rejectedWith('status: 13');","title":"Test Style:"},{"location":"contributing-to-appium/version-branch-release/","text":"Appium Version, Branch, and Release Models Versioning Following 1.3.6, Appium switched to semantic versioning: major | minor | patch | [-beta{N}] . E.g., 1.4.1 or 2.4.0-Beta4 . * Major: API-breaking changes; new features * Minor: Backward-compatible changes; may or may not include new features * Patch: Quick fix engineering; no new features This makes Appium\u2019s versioning consistent with other major projects in the NPM ecosystem. It also works well with the trunk-based development model described below. Branching and Release Model Appium uses Trunk Based Development . As Paul Hammant explains, Trunk Based Development (TBD) is where all developers (for a particular deployable unit) commit to one shared branch under source-control. That branch is going to be colloquially known as trunk. \u2026 Branches are made for a release. Developers are not allowed to make branches in that shared place. Only release engineers commit to those branches, and indeed create each release branch. They may also cherry-pick individual commits to that branch if there is a desire to do so. \u2026 The release branch that will live for a short time before it is replaced by another release branch, takes everything from trunk when it is created. In terms of merges, only cherry-picks FROM trunk TO the release branch are supported. Milestones The versioning and release model shape how we set Appium milestones. The next milestone is always a Major.Minor release. Triaged bugs and features that aren't associated with the next Major.Minor release should be backlogged in eponymously-named milestones (i.e., Bugs and Features ). In general, our goal is a minor release every 8 to 10 weeks. This includes approximately a week of Beta testing and another week for fixes and final changes. Hotfixes are released (Major.Minor.Patch) as needed between the Major.Minor versions. This allows us to get fixes out quickly while minimizing the risk of regression. Workflow For Appium, the basic flow looks like this: All PRs go to master (aka trunk ). Whoever is leading a release acts as the \"release engineer\" (RE). When the release is ready to be shared (\u201cBeta\" status or better), the RE creates a new branch v[Major].[Minor].[Patch]-branch . PRs continue to go to master . If the release requires fixes committed to master , the RE cherrypicks those commits into the release branch. The release branch can be amended with hotfixes for subsequent patch releases. This allows the team to carefully scope small changesets for quick release. Fixes can also be pulled into previous release branches branches when needed. Rinse, repeat. Developers can maintain working branches however they like. These are strictly for personal use. All \u201cofficial\u201d branches should conform to the model defined above. Example It\u2019s 1 June. The Appium team plans on releasing 20.1-beta on 15 July and the full 20.1 release on 1 August. For the next six weeks, the team commits their work to master . On 15 July, the acting RE creates 20.1-branch . The first node is tagged \u201c20.1.0 Beta\u201d. One team member begins fixing bugs in the beta. The fixes are committed to master . Other contributors begin committing changes that are planned for 20.2. These also go to master . The RE cherrypicks the fixes into 20.1-branch , leaving the other changes on master . The team celebrates that all the beta bugs are fixed for the 1 August release. The RE tags HEAD of 20.1-branch as 20.1.0 and publishes the release. A few weeks later, a crash is discovered in 20.1.0 and users need a fix NOW. The acting RE pulls the crash fix from master into 20.1-branch , tags HEAD as 20.1.1 , and publishes the hotfix. The cycle repeats once the 20.2 release is ready.","title":"Appium Version, Branch, and Release Models"},{"location":"contributing-to-appium/version-branch-release/#appium-version-branch-and-release-models","text":"","title":"Appium Version, Branch, and Release Models"},{"location":"contributing-to-appium/version-branch-release/#versioning","text":"Following 1.3.6, Appium switched to semantic versioning: major | minor | patch | [-beta{N}] . E.g., 1.4.1 or 2.4.0-Beta4 . * Major: API-breaking changes; new features * Minor: Backward-compatible changes; may or may not include new features * Patch: Quick fix engineering; no new features This makes Appium\u2019s versioning consistent with other major projects in the NPM ecosystem. It also works well with the trunk-based development model described below.","title":"Versioning"},{"location":"contributing-to-appium/version-branch-release/#branching-and-release-model","text":"Appium uses Trunk Based Development . As Paul Hammant explains, Trunk Based Development (TBD) is where all developers (for a particular deployable unit) commit to one shared branch under source-control. That branch is going to be colloquially known as trunk. \u2026 Branches are made for a release. Developers are not allowed to make branches in that shared place. Only release engineers commit to those branches, and indeed create each release branch. They may also cherry-pick individual commits to that branch if there is a desire to do so. \u2026 The release branch that will live for a short time before it is replaced by another release branch, takes everything from trunk when it is created. In terms of merges, only cherry-picks FROM trunk TO the release branch are supported.","title":"Branching and Release Model"},{"location":"contributing-to-appium/version-branch-release/#milestones","text":"The versioning and release model shape how we set Appium milestones. The next milestone is always a Major.Minor release. Triaged bugs and features that aren't associated with the next Major.Minor release should be backlogged in eponymously-named milestones (i.e., Bugs and Features ). In general, our goal is a minor release every 8 to 10 weeks. This includes approximately a week of Beta testing and another week for fixes and final changes. Hotfixes are released (Major.Minor.Patch) as needed between the Major.Minor versions. This allows us to get fixes out quickly while minimizing the risk of regression.","title":"Milestones"},{"location":"contributing-to-appium/version-branch-release/#workflow","text":"For Appium, the basic flow looks like this: All PRs go to master (aka trunk ). Whoever is leading a release acts as the \"release engineer\" (RE). When the release is ready to be shared (\u201cBeta\" status or better), the RE creates a new branch v[Major].[Minor].[Patch]-branch . PRs continue to go to master . If the release requires fixes committed to master , the RE cherrypicks those commits into the release branch. The release branch can be amended with hotfixes for subsequent patch releases. This allows the team to carefully scope small changesets for quick release. Fixes can also be pulled into previous release branches branches when needed. Rinse, repeat. Developers can maintain working branches however they like. These are strictly for personal use. All \u201cofficial\u201d branches should conform to the model defined above.","title":"Workflow"},{"location":"contributing-to-appium/version-branch-release/#example","text":"It\u2019s 1 June. The Appium team plans on releasing 20.1-beta on 15 July and the full 20.1 release on 1 August. For the next six weeks, the team commits their work to master . On 15 July, the acting RE creates 20.1-branch . The first node is tagged \u201c20.1.0 Beta\u201d. One team member begins fixing bugs in the beta. The fixes are committed to master . Other contributors begin committing changes that are planned for 20.2. These also go to master . The RE cherrypicks the fixes into 20.1-branch , leaving the other changes on master . The team celebrates that all the beta bugs are fixed for the 1 August release. The RE tags HEAD of 20.1-branch as 20.1.0 and publishes the release. A few weeks later, a crash is discovered in 20.1.0 and users need a fix NOW. The acting RE pulls the crash fix from master into 20.1-branch , tags HEAD as 20.1.1 , and publishes the hotfix. The cycle repeats once the 20.2 release is ready.","title":"Example"},{"location":"drivers/android-espresso/","text":"The Espresso Driver for Android Appium currently has support for the Espresso automation technology via its own Espresso driver. This driver works by kicking off an Espresso run on a device, with our own automation server as part of the Espresso test APK. Appium can then communicate with this automation server and trigger Espresso commands as the result of Appium client calls. Development of the Espresso driver happens at the appium-espresso-driver repo. Appium also supports Android automation using the UiAutomator2 Driver .) Requirements and Support In addition to Appium's general requirements: Java 8 installed and configured correctly for your platform Mac, Windows, or Linux OS with the ability to run the Android SDK The minimum required Android SDK Build Tools version is 24 Usage The way to start a session using the Espresso driver is to include the automationName capability in your new session request , with the value Espresso . Of course, you must also include appropriate platformName (= Android ), platformVersion , deviceName , and app capabilities, at a minimum. Capabilities The Espresso driver currently supports a subset of the standard Android capabilities . Setup Setup for the Espresso driver basically entails getting the Android SDK and build tools ready to go. You can follow the instructions at the UiAutomator2 Driver doc , since the steps are the same.","title":"Espresso (Android)"},{"location":"drivers/android-espresso/#the-espresso-driver-for-android","text":"Appium currently has support for the Espresso automation technology via its own Espresso driver. This driver works by kicking off an Espresso run on a device, with our own automation server as part of the Espresso test APK. Appium can then communicate with this automation server and trigger Espresso commands as the result of Appium client calls. Development of the Espresso driver happens at the appium-espresso-driver repo. Appium also supports Android automation using the UiAutomator2 Driver .)","title":"The Espresso Driver for Android"},{"location":"drivers/android-espresso/#requirements-and-support","text":"In addition to Appium's general requirements: Java 8 installed and configured correctly for your platform Mac, Windows, or Linux OS with the ability to run the Android SDK The minimum required Android SDK Build Tools version is 24","title":"Requirements and Support"},{"location":"drivers/android-espresso/#usage","text":"The way to start a session using the Espresso driver is to include the automationName capability in your new session request , with the value Espresso . Of course, you must also include appropriate platformName (= Android ), platformVersion , deviceName , and app capabilities, at a minimum.","title":"Usage"},{"location":"drivers/android-espresso/#capabilities","text":"The Espresso driver currently supports a subset of the standard Android capabilities .","title":"Capabilities"},{"location":"drivers/android-espresso/#setup","text":"Setup for the Espresso driver basically entails getting the Android SDK and build tools ready to go. You can follow the instructions at the UiAutomator2 Driver doc , since the steps are the same.","title":"Setup"},{"location":"drivers/android-uiautomator/","text":"The UiAutomator Driver for Android Appium's older support for automating Android apps is via the UiAutomator driver. (New to Appium? Read our introduction to Appium drivers ) . This driver leverages Google's UiAutomator technology to launch automation sessions on a device. Development of the UiAutomator driver happens at the appium-android-driver repo. We recommend you upgrade to the UiAutomator2 Driver and use that driver instead, since this driver will not be supported moving forward. Requirements and Support In addition to Appium's general requirements: Java 7 installed and configured correctly for your platform Mac, Windows, or Linux OS with the ability to run the Android SDK Usage The way to start a session using the UiAutomator driver is to include the platformName capability in your new session request , with the value Android . Of course, you must also include appropriate platformVersion , deviceName , and app capabilities, at a minimum. In the case of this driver, for Appium versions below 1.14.0 no automationName capability should be used, while for version 1.14.0 and above the automationName should be set to UiAutomator1 . It is highly recommended to also set the appPackage and appActivity capabilities in order to let Appium know exactly which package and activity should be launched for your application. Otherwise, Appium will try to determine these automatically from your app manifest. Capabilities The UiAutomator driver supports a number of standard Appium capabilities , but has an additional set of capabilities that modulate the behavior of the driver. These can be found currently at the Android section of the aforementioned doc. For web tests, to automate Chrome instead of your own application, leave the app capability empty and instead set the browserName capability to Chrome . Note that you are responsible for ensuring that Chrome is on the emulator/device, and that it is of a version compatible with Chromedriver. Commands To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the UiAutomator driver, see the API Reference . Setup Given that the setup instructions for this driver and the newer UiAutomator2 Driver are identical, please refer to the system, emulator, and device setup instructions on the UiAutomator2 Driver doc.","title":"UIAutomator (Android)"},{"location":"drivers/android-uiautomator/#the-uiautomator-driver-for-android","text":"Appium's older support for automating Android apps is via the UiAutomator driver. (New to Appium? Read our introduction to Appium drivers ) . This driver leverages Google's UiAutomator technology to launch automation sessions on a device. Development of the UiAutomator driver happens at the appium-android-driver repo. We recommend you upgrade to the UiAutomator2 Driver and use that driver instead, since this driver will not be supported moving forward.","title":"The UiAutomator Driver for Android"},{"location":"drivers/android-uiautomator/#requirements-and-support","text":"In addition to Appium's general requirements: Java 7 installed and configured correctly for your platform Mac, Windows, or Linux OS with the ability to run the Android SDK","title":"Requirements and Support"},{"location":"drivers/android-uiautomator/#usage","text":"The way to start a session using the UiAutomator driver is to include the platformName capability in your new session request , with the value Android . Of course, you must also include appropriate platformVersion , deviceName , and app capabilities, at a minimum. In the case of this driver, for Appium versions below 1.14.0 no automationName capability should be used, while for version 1.14.0 and above the automationName should be set to UiAutomator1 . It is highly recommended to also set the appPackage and appActivity capabilities in order to let Appium know exactly which package and activity should be launched for your application. Otherwise, Appium will try to determine these automatically from your app manifest.","title":"Usage"},{"location":"drivers/android-uiautomator/#capabilities","text":"The UiAutomator driver supports a number of standard Appium capabilities , but has an additional set of capabilities that modulate the behavior of the driver. These can be found currently at the Android section of the aforementioned doc. For web tests, to automate Chrome instead of your own application, leave the app capability empty and instead set the browserName capability to Chrome . Note that you are responsible for ensuring that Chrome is on the emulator/device, and that it is of a version compatible with Chromedriver.","title":"Capabilities"},{"location":"drivers/android-uiautomator/#commands","text":"To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the UiAutomator driver, see the API Reference .","title":"Commands"},{"location":"drivers/android-uiautomator/#setup","text":"Given that the setup instructions for this driver and the newer UiAutomator2 Driver are identical, please refer to the system, emulator, and device setup instructions on the UiAutomator2 Driver doc.","title":"Setup"},{"location":"drivers/android-uiautomator2/","text":"The UiAutomator2 Driver for Android Appium's flagship support for automating Android apps is via the UiAutomator2 driver. (New to Appium? Read our introduction to Appium drivers ) . This driver leverages Google's UiAutomator2 technology to facilitate automation on a device or emulator. Development of the UiAutomator2 driver happens at the appium-uiautomator2-driver repo. Older Android-based drivers include: * The UiAutomator Driver Requirements and Support In addition to Appium's general requirements: Java 8 installed and configured correctly for your platform Mac, Windows, or Linux OS with the ability to run the Android SDK The minimum required Android SDK Build Tools version is 24 Further, the UiAutomator2 driver does not support Android versions below 5.0 (Lollipop, API level 21). If you are automating such versions, consider using the UiAutomator driver ; Usage The way to start a session using the UiAutomator2 driver is to include the automationName capability in your new session request , with the value UiAutomator2 . Of course, you must also include appropriate platformName (= Android ), platformVersion , deviceName , and app capabilities, at a minimum. It is highly recommended to also set the appPackage and appActivity capabilities in order to let Appium know exactly which package and activity should be launched for your application. Otherwise, Appium will try to determine these automatically from your app manifest. Capabilities The UiAutomator2 driver supports a number of standard Appium capabilities , but has an additional set of capabilities that modulate the behavior of the driver. These can be found currently at the Android section of the aforementioned doc. For web tests, to automate Chrome instead of your own application, leave the app capability empty and instead set the browserName capability to Chrome . Note that you are responsible for ensuring that Chrome is on the emulator/device, and that it is of a version compatible with Chromedriver . Commands To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the UiAutomator2 driver, see the API Reference . Basic Setup Ensure that you have Appium's general dependencies (e.g., Node NPM) installed and configured. Ensure that Java (the JDK, not just the JRE) is installed and Java binaries are added to your path. The instructions for this step differ for Mac/Linux and for Windows. Please consult platform-specific documentation, as this is a common task. An example of how to change the PATH on Windows is here . Ensure that the JAVA_HOME environment variable is also set to the JDK path. For Mac/Linux, for example (the specifics of this path will vary greatly by system), put this in your login script: export JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\" On Windows, this will be done by setting the environment variable in the control panel, using the same strategy as for setting PATH above. Android Studio also has JDK in the path like /Applications/Android Studio.app/Contents/jre/jdk/Contents/Home (Mac). You can specify the path, too. Install the Android SDK . The supported way of doing this nowadays is to use Android Studio . Use the provided GUI to install the Android SDK to a path of your choosing. Set the ANDROID_HOME environment variable to match this path. For example, if you installed the SDK to /usr/local/adt , then there will typically be a sdk folder inside of that which contains the SDK files. In that case, on Mac and Linux, add the following line to your login script (e.g., ~/.bashrc , ~/.bash_profile , etc...): export ANDROID_HOME=\"/usr/local/adt/sdk\" On Windows, follow the same steps as before to set the environment variable in the control panel. Using the SDK manager, ensure you have installed the SDK for Android API levels you wish to automate (e.g., 24). On Windows, ensure that you always run Appium in Administrator mode. At this point, your general system setup is done. Follow the steps below based on whether you want to automate an emulator or a real device. In addition you will need your app's APK (preferably built in Debug mode), whose path or URL you will use as the value of the app capability when running your tests. Emulator Setup To run tests on emulators, use the AVD Manager included with Android Studio or the SDK. With this tool, create the emulator that matches your needs. With the emulator launched, Appium will automatically find and use it for its tests. Otherwise, if you specify the avd capability with the value matching the name of your emulator, then Appium will attempt to launch the emulator for you. Additional tips for emulators: There exists a hardware accelerated emulator for Android, though it has its own limitations. It can be installed from Intel's website, or through the Android SDK Manager. For more information, go here . Make sure that hw.battery=yes in your AVD's config.ini , if you want to run any of the Appium tests, or use any of the power commands. (As of Android 5.0, this is the default.) Real Device Setup For Android automation, no additional setup is required for testing on real devices, other than these simple requirements: Ensure that Developer mode is turned on for the device. Ensure that the device is connected via USB to the Appium host, and can be seen by ADB (run adb devices to make sure). Ensure that \"Verify Apps\" in settings is disabled, to allow Appium's helper apps to function without manual intervention. (For some specific commands, the device might need to be rooted, though this is not the norm.)","title":"UIAutomator2 (Android)"},{"location":"drivers/android-uiautomator2/#the-uiautomator2-driver-for-android","text":"Appium's flagship support for automating Android apps is via the UiAutomator2 driver. (New to Appium? Read our introduction to Appium drivers ) . This driver leverages Google's UiAutomator2 technology to facilitate automation on a device or emulator. Development of the UiAutomator2 driver happens at the appium-uiautomator2-driver repo. Older Android-based drivers include: * The UiAutomator Driver","title":"The UiAutomator2 Driver for Android"},{"location":"drivers/android-uiautomator2/#requirements-and-support","text":"In addition to Appium's general requirements: Java 8 installed and configured correctly for your platform Mac, Windows, or Linux OS with the ability to run the Android SDK The minimum required Android SDK Build Tools version is 24 Further, the UiAutomator2 driver does not support Android versions below 5.0 (Lollipop, API level 21). If you are automating such versions, consider using the UiAutomator driver ;","title":"Requirements and Support"},{"location":"drivers/android-uiautomator2/#usage","text":"The way to start a session using the UiAutomator2 driver is to include the automationName capability in your new session request , with the value UiAutomator2 . Of course, you must also include appropriate platformName (= Android ), platformVersion , deviceName , and app capabilities, at a minimum. It is highly recommended to also set the appPackage and appActivity capabilities in order to let Appium know exactly which package and activity should be launched for your application. Otherwise, Appium will try to determine these automatically from your app manifest.","title":"Usage"},{"location":"drivers/android-uiautomator2/#capabilities","text":"The UiAutomator2 driver supports a number of standard Appium capabilities , but has an additional set of capabilities that modulate the behavior of the driver. These can be found currently at the Android section of the aforementioned doc. For web tests, to automate Chrome instead of your own application, leave the app capability empty and instead set the browserName capability to Chrome . Note that you are responsible for ensuring that Chrome is on the emulator/device, and that it is of a version compatible with Chromedriver .","title":"Capabilities"},{"location":"drivers/android-uiautomator2/#commands","text":"To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the UiAutomator2 driver, see the API Reference .","title":"Commands"},{"location":"drivers/android-uiautomator2/#basic-setup","text":"Ensure that you have Appium's general dependencies (e.g., Node NPM) installed and configured. Ensure that Java (the JDK, not just the JRE) is installed and Java binaries are added to your path. The instructions for this step differ for Mac/Linux and for Windows. Please consult platform-specific documentation, as this is a common task. An example of how to change the PATH on Windows is here . Ensure that the JAVA_HOME environment variable is also set to the JDK path. For Mac/Linux, for example (the specifics of this path will vary greatly by system), put this in your login script: export JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\" On Windows, this will be done by setting the environment variable in the control panel, using the same strategy as for setting PATH above. Android Studio also has JDK in the path like /Applications/Android Studio.app/Contents/jre/jdk/Contents/Home (Mac). You can specify the path, too. Install the Android SDK . The supported way of doing this nowadays is to use Android Studio . Use the provided GUI to install the Android SDK to a path of your choosing. Set the ANDROID_HOME environment variable to match this path. For example, if you installed the SDK to /usr/local/adt , then there will typically be a sdk folder inside of that which contains the SDK files. In that case, on Mac and Linux, add the following line to your login script (e.g., ~/.bashrc , ~/.bash_profile , etc...): export ANDROID_HOME=\"/usr/local/adt/sdk\" On Windows, follow the same steps as before to set the environment variable in the control panel. Using the SDK manager, ensure you have installed the SDK for Android API levels you wish to automate (e.g., 24). On Windows, ensure that you always run Appium in Administrator mode. At this point, your general system setup is done. Follow the steps below based on whether you want to automate an emulator or a real device. In addition you will need your app's APK (preferably built in Debug mode), whose path or URL you will use as the value of the app capability when running your tests.","title":"Basic Setup"},{"location":"drivers/android-uiautomator2/#emulator-setup","text":"To run tests on emulators, use the AVD Manager included with Android Studio or the SDK. With this tool, create the emulator that matches your needs. With the emulator launched, Appium will automatically find and use it for its tests. Otherwise, if you specify the avd capability with the value matching the name of your emulator, then Appium will attempt to launch the emulator for you. Additional tips for emulators: There exists a hardware accelerated emulator for Android, though it has its own limitations. It can be installed from Intel's website, or through the Android SDK Manager. For more information, go here . Make sure that hw.battery=yes in your AVD's config.ini , if you want to run any of the Appium tests, or use any of the power commands. (As of Android 5.0, this is the default.)","title":"Emulator Setup"},{"location":"drivers/android-uiautomator2/#real-device-setup","text":"For Android automation, no additional setup is required for testing on real devices, other than these simple requirements: Ensure that Developer mode is turned on for the device. Ensure that the device is connected via USB to the Appium host, and can be seen by ADB (run adb devices to make sure). Ensure that \"Verify Apps\" in settings is disabled, to allow Appium's helper apps to function without manual intervention. (For some specific commands, the device might need to be rooted, though this is not the norm.)","title":"Real Device Setup"},{"location":"drivers/gecko/","text":"The Gecko Driver Gecko driver has been added to Appium since version 1.20. This driver is a wrapper over Mozilla's geckodriver binary, which implements communication with either desktop/mobile Gecko-based browsers like Firefox or Gecko-based web views (on mobile) via W3C WebDriver protocol . Development of the Gecko driver happens at the appium-geckodriver repo. Requirements and Support In addition to Appium's general requirements: A supported browser must be installed on the destination platform. The recent browser releases (both desktop and mobile) could be retrieved from the official download page . The corresponding executable driver binary for the target platform must be available in PATH under geckodriver ( geckodriver.exe in Windows) name. Geckodriver build for different supported platforms could be retrieved from the GitHub Releases page . Windows (32/64 bit), Linux (32/64 bit) or macOS are supported as the host platforms. Android SDK must be installed if it is necessary to communicate with the browser or a web view on mobile devices. Also, the Emulator SDK is needed if automated tests are going to use Android emulators. For real Android devices it is necessary to make sure they have the online status to in the adb devices -l output. The device's screen must not be locked. Usage The way to start a session using the Gecko driver is to include the automationName capability in your new session request, with the value Gecko . Of course, you must also include appropriate platformName ( Mac / Android / Windows / Linux ). Read https://github.com/appium/appium-geckodriver/blob/master/README.md for more details. Capabilities The list of available driver capabilities could be found at https://github.com/appium/appium-geckodriver/blob/master/README.md","title":"Gecko (Firefox)"},{"location":"drivers/gecko/#the-gecko-driver","text":"Gecko driver has been added to Appium since version 1.20. This driver is a wrapper over Mozilla's geckodriver binary, which implements communication with either desktop/mobile Gecko-based browsers like Firefox or Gecko-based web views (on mobile) via W3C WebDriver protocol . Development of the Gecko driver happens at the appium-geckodriver repo.","title":"The Gecko Driver"},{"location":"drivers/gecko/#requirements-and-support","text":"In addition to Appium's general requirements: A supported browser must be installed on the destination platform. The recent browser releases (both desktop and mobile) could be retrieved from the official download page . The corresponding executable driver binary for the target platform must be available in PATH under geckodriver ( geckodriver.exe in Windows) name. Geckodriver build for different supported platforms could be retrieved from the GitHub Releases page . Windows (32/64 bit), Linux (32/64 bit) or macOS are supported as the host platforms. Android SDK must be installed if it is necessary to communicate with the browser or a web view on mobile devices. Also, the Emulator SDK is needed if automated tests are going to use Android emulators. For real Android devices it is necessary to make sure they have the online status to in the adb devices -l output. The device's screen must not be locked.","title":"Requirements and Support"},{"location":"drivers/gecko/#usage","text":"The way to start a session using the Gecko driver is to include the automationName capability in your new session request, with the value Gecko . Of course, you must also include appropriate platformName ( Mac / Android / Windows / Linux ). Read https://github.com/appium/appium-geckodriver/blob/master/README.md for more details.","title":"Usage"},{"location":"drivers/gecko/#capabilities","text":"The list of available driver capabilities could be found at https://github.com/appium/appium-geckodriver/blob/master/README.md","title":"Capabilities"},{"location":"drivers/ios-uiautomation-safari-launcher/","text":"SafariLauncher Setup Instructions Running mobile web tests on iOS real devices with iOS 9.3 or below, using Instruments, requires the introduction of a third-party app, SafariLauncher . This is necessary because with Instruments there is no way to start the Safari app on the device. The SafariLauncher app just launches, and then launches Safari. Simple! In some configurations, Appium is able to automatically build, sign, and install SafariLauncher as it needs, and there is nothing else necessary to be done. If, however, this is not the case, as is more often so with later versions of Xcode , the following configuration needs to be done before Safari tests on real devices can be successfully run. Automatic SafariLauncher configuration The only thing needed for automatic SafariLauncher configuration is to create a provisioning profile that can be used to deploy the SafariLauncher App. This requires, in particular, a wildcard certificate, which is not possible if your Apple developer account is a free one. If that is the case, skip to the manual configuration below. To create a profile for the launcher go into the Apple Developers Member Center and: Step 1: Create a new App Id and select the WildCard App ID option and set it to \"*\" Step 2: Create a new Development Profile and for App Id select the one created in step 1. Step 3: Select your certificate(s) and device(s) and click next. Step 4: Set the profile name and generate the profile . Step 5: Download the profile and open it with a text editor. Step 6: Search for the UUID and the string for it is your identity code . Now simply include your UDID and device name in your desired capabilities: { udid: '...', deviceName: '...', platformName: 'iOS', platformVersion: '9.3', browserName: 'Safari' } Manual SafariLauncher configuration Note: This procedure assumes you have Xcode 7.3 or 7.3.1. It is possible to use the version of SafariLauncher that comes with the appium-ios-driver , but if you do, each time you update Appium the procedure will have to be done again. To get a local copy of SafariLauncher , first clone it from GitHub : git clone https://github.com/snevesbarros/SafariLauncher.git Once you have a local copy of the source code for the SafariLauncher app, open Xcode and then open the SafariLauncher project In the SafariLauncher target pane you will see an error, saying that there needs to be a provisioning profile for this app In order to fix this, you first need to enter a \"Bundle Identifier\" for the app. The default expected by Appium is com.bytearc.SafariLauncher , but this might not be available for you to build. In that case, choose something else, and make note of it. Then choose a \"Team\", and allow the provisioning profile to be created Finally, make sure your device is connected to the computer, and choose it as the target And run the build and install actions to compile the app and push it onto your device Now you have a working SafariLauncher on your device. The app itself is a plain screen that will launch Safari at the click of a button The last step is only necessary if you chose a bundle identifier for the app that is different from the default ( com.bytearc.SafariLauncher ). If you did, it is necessary to send that to Appium when creating a session, using the bundleId desired capability: { udid: '...', deviceName: '...', platformName: 'iOS', platformVersion: '9.3', browserName: 'Safari', bundleId: 'com.imurchie.SafariLauncher' }","title":"UIAutomation Safari Launcher (iOS)"},{"location":"drivers/ios-uiautomation-safari-launcher/#safarilauncher-setup-instructions","text":"Running mobile web tests on iOS real devices with iOS 9.3 or below, using Instruments, requires the introduction of a third-party app, SafariLauncher . This is necessary because with Instruments there is no way to start the Safari app on the device. The SafariLauncher app just launches, and then launches Safari. Simple! In some configurations, Appium is able to automatically build, sign, and install SafariLauncher as it needs, and there is nothing else necessary to be done. If, however, this is not the case, as is more often so with later versions of Xcode , the following configuration needs to be done before Safari tests on real devices can be successfully run.","title":"SafariLauncher Setup Instructions"},{"location":"drivers/ios-uiautomation-safari-launcher/#automatic-safarilauncher-configuration","text":"The only thing needed for automatic SafariLauncher configuration is to create a provisioning profile that can be used to deploy the SafariLauncher App. This requires, in particular, a wildcard certificate, which is not possible if your Apple developer account is a free one. If that is the case, skip to the manual configuration below. To create a profile for the launcher go into the Apple Developers Member Center and: Step 1: Create a new App Id and select the WildCard App ID option and set it to \"*\" Step 2: Create a new Development Profile and for App Id select the one created in step 1. Step 3: Select your certificate(s) and device(s) and click next. Step 4: Set the profile name and generate the profile . Step 5: Download the profile and open it with a text editor. Step 6: Search for the UUID and the string for it is your identity code . Now simply include your UDID and device name in your desired capabilities: { udid: '...', deviceName: '...', platformName: 'iOS', platformVersion: '9.3', browserName: 'Safari' }","title":"Automatic SafariLauncher configuration"},{"location":"drivers/ios-uiautomation-safari-launcher/#manual-safarilauncher-configuration","text":"Note: This procedure assumes you have Xcode 7.3 or 7.3.1. It is possible to use the version of SafariLauncher that comes with the appium-ios-driver , but if you do, each time you update Appium the procedure will have to be done again. To get a local copy of SafariLauncher , first clone it from GitHub : git clone https://github.com/snevesbarros/SafariLauncher.git Once you have a local copy of the source code for the SafariLauncher app, open Xcode and then open the SafariLauncher project In the SafariLauncher target pane you will see an error, saying that there needs to be a provisioning profile for this app In order to fix this, you first need to enter a \"Bundle Identifier\" for the app. The default expected by Appium is com.bytearc.SafariLauncher , but this might not be available for you to build. In that case, choose something else, and make note of it. Then choose a \"Team\", and allow the provisioning profile to be created Finally, make sure your device is connected to the computer, and choose it as the target And run the build and install actions to compile the app and push it onto your device Now you have a working SafariLauncher on your device. The app itself is a plain screen that will launch Safari at the click of a button The last step is only necessary if you chose a bundle identifier for the app that is different from the default ( com.bytearc.SafariLauncher ). If you did, it is necessary to send that to Appium when creating a session, using the bundleId desired capability: { udid: '...', deviceName: '...', platformName: 'iOS', platformVersion: '9.3', browserName: 'Safari', bundleId: 'com.imurchie.SafariLauncher' }","title":"Manual SafariLauncher configuration"},{"location":"drivers/ios-uiautomation/","text":"The UIAutomation Driver for iOS Note : This driver is DEPRECATED and should not be used unless absolutely necessary. The information in this doc may not keep up to date with reality, and the driver will be removed in a future version of Appium. To begin iOS automation with Appium today, please use the XCUITest Driver instead. Appium's former method for iOS app automation was based on UIAutomation , an Apple-provided framework that shipped with the iOS SDK until iOS 10, when it was removed. UIAutomation was one of the tools included in Apple's Instruments profiling system, and provided a JavaScript API that ran synchronously in the context of a single app. The Appium UIAutomation driver established an asynchronous, session-based WebDriver front end for this API. Development of the UIAutomation driver is done at the appium-ios-driver repo. Requirements and Support In addition to Appium's general requirements: Xcode 7 or lower. iOS simulators or devices with version 9.3 or lower. All versions of Appium ship with this driver. For correct functioning of the driver, see additional setup below. Usage The way to start a session using the UIAutomation driver is to set the platformName capability in your new session request to the value of iOS . Of course, you must also include appropriate platformVersion , deviceName , and app capabilities, at a minimum. Capabilities The UIAutomation driver supports a number of standard Appium capabilities , but has an additional set of capabilities that work for this driver only (see the iOS section of the aforementioned doc). To automate Safari instead of your own application, leave the app capability empty and instead set the browserName capability to Safari . Commands To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the UIAutomation driver, see the API Reference . Simulator Setup (Note that due to limitations of Xcode and the iOS simulator, only one simulator may be open, and automated, at any given time. For multiple simulator support, you will need to upgrade to the XCUITest driver ). For best results, launch each simulator you wish to use and ensure the following: The soft keyboard is enabled (Command+K in the Simulator app) UIAutomation is enabled in the Developer settings menu There is not more than one simulator with the same name in Xcode's \"Devices\" organizer Real Device Setup Running tests on real devices is considerably more complicated due to code signing and additional workarounds to Apple limitations. The basic process for a successful automation strategy using this driver are as follows: Build your app with a Debug configuration, for the specific type of real device you will run the test on, ensuring that the app is also signed for running on your specific device. For example: xcodebuild -sdk iphoneos -target target_name -configuration Debug \\ CODE_SIGN_IDENTITY=\"iPhone Developer: Mister Smith\" \\ PROVISIONING_PROFILE=\"XXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\" Install the built app (usually now located in a build directory specified in Xcode) to your test device yourself, ensuring it exists on the device and there are no signing issues. There are a number of methods for installing apps onto devices. One is to just use Xcode itself. Another is to use the ideviceinstaller tool provided as part of the libimobiledevice suite. A third is to use ios-deploy . Here's an example for ideviceinstaller : ``` first install ideviceinstaller, using Homebrew (http://brew.sh) brew install libimobiledevice ideviceinstaller -u -i ``` Use the bundle ID of your application as the value of the app capability. Use the UDID of your device as the udid capability. As above, ensure that UI Automation is enabled in the Developer settings. Following these steps should ensure your success! If you're using newer versions of Xcode (7.x, for example), you may wish to consult the XCUITest Driver Real Device Docs as they may contain some pertinent information as well. Real Device Hybrid / Web Testing For hybrid and web testing, Appium requires the use of the Remote Debugging Protocol to send JavaScript to execute inside a web view. For real iOS devices, this protocol is encrypted and access must be facilitated using a 3rd-party tool, provided by Google, called ios-webkit-debug-proxy (IWDP). For information on installing and using IWDP within Appium, check out the IWDP doc . For web testing, i.e., tests that run in the Safari browser, we have another hurdle to jump. On real devices, apps that are not signed by the developer cannot be instrumented with UIAutomation. Safari is one such app. Thus we have a helper app called SafariLauncher , which can be signed by the developer. Its sole purpose upon launching is to turn around and launch Safari, which can then be automated via the Remote Debugger in conjunction with IWDP. Unfortunately you cannot, in this case, move into the native context and do any automation of the browser itself. For instructions on setting up SafariLauncher , check out the SafariLauncher doc . Files generated by iOS test runs Testing on iOS generates files that can sometimes get large. These include logs, temporary files, and derived data from Xcode runs. Generally the following locations are where they are found, should they need to be deleted: $HOME/Library/Logs/CoreSimulator/* /Library/Caches/com.apple.dt.instruments/* Running iOS tests using Jenkins First download the jenkins-cli.jar and verify that the Mac successfully connects to Jenkins master. wget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar java -jar jenkins-cli.jar \\ -s https://team-appium.ci.cloudbees.com \\ -i ~/.ssh/id_rsa \\ on-premise-executor \\ -fsroot ~/jenkins \\ -labels osx \\ -name mac_appium Next define a LaunchAgent for Jenkins to launch automatically on login. A LaunchDaemon will not work because daemons don't have GUI access. Make sure the plist doesn't contain the SessionCreate or User key as that may prevent tests from running. You'll see a Failed to authorize rights error if misconfigured. $ sudo nano /Library/LaunchAgents/com.jenkins.ci.plist ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE plist PUBLIC -//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd plist version= 1.0 dict key Label /key string com.jenkins.ci /string key ProgramArguments /key array string java /string string -Djava.awt.headless=true /string string -jar /string string /Users/appium/jenkins/jenkins-cli.jar /string string -s /string string https://instructure.ci.cloudbees.com /string string on-premise-executor /string string -fsroot /string string /Users/appium/jenkins /string string -executors /string string 1 /string string -labels /string string mac /string string -name /string string mac_appium /string string -persistent /string /array key KeepAlive /key true/ key StandardOutPath /key string /Users/appium/jenkins/stdout.log /string key StandardErrorPath /key string /Users/appium/jenkins/error.log /string /dict /plist Finally set the owner, permissions, and then start the agent. sudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist sudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist launchctl load /Library/LaunchAgents/com.jenkins.ci.plist launchctl start com.jenkins.ci","title":"UIAutomation (iOS)"},{"location":"drivers/ios-uiautomation/#the-uiautomation-driver-for-ios","text":"Note : This driver is DEPRECATED and should not be used unless absolutely necessary. The information in this doc may not keep up to date with reality, and the driver will be removed in a future version of Appium. To begin iOS automation with Appium today, please use the XCUITest Driver instead. Appium's former method for iOS app automation was based on UIAutomation , an Apple-provided framework that shipped with the iOS SDK until iOS 10, when it was removed. UIAutomation was one of the tools included in Apple's Instruments profiling system, and provided a JavaScript API that ran synchronously in the context of a single app. The Appium UIAutomation driver established an asynchronous, session-based WebDriver front end for this API. Development of the UIAutomation driver is done at the appium-ios-driver repo.","title":"The UIAutomation Driver for iOS"},{"location":"drivers/ios-uiautomation/#requirements-and-support","text":"In addition to Appium's general requirements: Xcode 7 or lower. iOS simulators or devices with version 9.3 or lower. All versions of Appium ship with this driver. For correct functioning of the driver, see additional setup below.","title":"Requirements and Support"},{"location":"drivers/ios-uiautomation/#usage","text":"The way to start a session using the UIAutomation driver is to set the platformName capability in your new session request to the value of iOS . Of course, you must also include appropriate platformVersion , deviceName , and app capabilities, at a minimum.","title":"Usage"},{"location":"drivers/ios-uiautomation/#capabilities","text":"The UIAutomation driver supports a number of standard Appium capabilities , but has an additional set of capabilities that work for this driver only (see the iOS section of the aforementioned doc). To automate Safari instead of your own application, leave the app capability empty and instead set the browserName capability to Safari .","title":"Capabilities"},{"location":"drivers/ios-uiautomation/#commands","text":"To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the UIAutomation driver, see the API Reference .","title":"Commands"},{"location":"drivers/ios-uiautomation/#simulator-setup","text":"(Note that due to limitations of Xcode and the iOS simulator, only one simulator may be open, and automated, at any given time. For multiple simulator support, you will need to upgrade to the XCUITest driver ). For best results, launch each simulator you wish to use and ensure the following: The soft keyboard is enabled (Command+K in the Simulator app) UIAutomation is enabled in the Developer settings menu There is not more than one simulator with the same name in Xcode's \"Devices\" organizer","title":"Simulator Setup"},{"location":"drivers/ios-uiautomation/#real-device-setup","text":"Running tests on real devices is considerably more complicated due to code signing and additional workarounds to Apple limitations. The basic process for a successful automation strategy using this driver are as follows: Build your app with a Debug configuration, for the specific type of real device you will run the test on, ensuring that the app is also signed for running on your specific device. For example: xcodebuild -sdk iphoneos -target target_name -configuration Debug \\ CODE_SIGN_IDENTITY=\"iPhone Developer: Mister Smith\" \\ PROVISIONING_PROFILE=\"XXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\" Install the built app (usually now located in a build directory specified in Xcode) to your test device yourself, ensuring it exists on the device and there are no signing issues. There are a number of methods for installing apps onto devices. One is to just use Xcode itself. Another is to use the ideviceinstaller tool provided as part of the libimobiledevice suite. A third is to use ios-deploy . Here's an example for ideviceinstaller : ```","title":"Real Device Setup"},{"location":"drivers/ios-uiautomation/#first-install-ideviceinstaller-using-homebrew-httpbrewsh","text":"brew install libimobiledevice ideviceinstaller -u -i ``` Use the bundle ID of your application as the value of the app capability. Use the UDID of your device as the udid capability. As above, ensure that UI Automation is enabled in the Developer settings. Following these steps should ensure your success! If you're using newer versions of Xcode (7.x, for example), you may wish to consult the XCUITest Driver Real Device Docs as they may contain some pertinent information as well.","title":"first install ideviceinstaller, using Homebrew (http://brew.sh)"},{"location":"drivers/ios-uiautomation/#real-device-hybrid-web-testing","text":"For hybrid and web testing, Appium requires the use of the Remote Debugging Protocol to send JavaScript to execute inside a web view. For real iOS devices, this protocol is encrypted and access must be facilitated using a 3rd-party tool, provided by Google, called ios-webkit-debug-proxy (IWDP). For information on installing and using IWDP within Appium, check out the IWDP doc . For web testing, i.e., tests that run in the Safari browser, we have another hurdle to jump. On real devices, apps that are not signed by the developer cannot be instrumented with UIAutomation. Safari is one such app. Thus we have a helper app called SafariLauncher , which can be signed by the developer. Its sole purpose upon launching is to turn around and launch Safari, which can then be automated via the Remote Debugger in conjunction with IWDP. Unfortunately you cannot, in this case, move into the native context and do any automation of the browser itself. For instructions on setting up SafariLauncher , check out the SafariLauncher doc .","title":"Real Device Hybrid / Web Testing"},{"location":"drivers/ios-uiautomation/#files-generated-by-ios-test-runs","text":"Testing on iOS generates files that can sometimes get large. These include logs, temporary files, and derived data from Xcode runs. Generally the following locations are where they are found, should they need to be deleted: $HOME/Library/Logs/CoreSimulator/* /Library/Caches/com.apple.dt.instruments/*","title":"Files generated by iOS test runs"},{"location":"drivers/ios-uiautomation/#running-ios-tests-using-jenkins","text":"First download the jenkins-cli.jar and verify that the Mac successfully connects to Jenkins master. wget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar java -jar jenkins-cli.jar \\ -s https://team-appium.ci.cloudbees.com \\ -i ~/.ssh/id_rsa \\ on-premise-executor \\ -fsroot ~/jenkins \\ -labels osx \\ -name mac_appium Next define a LaunchAgent for Jenkins to launch automatically on login. A LaunchDaemon will not work because daemons don't have GUI access. Make sure the plist doesn't contain the SessionCreate or User key as that may prevent tests from running. You'll see a Failed to authorize rights error if misconfigured. $ sudo nano /Library/LaunchAgents/com.jenkins.ci.plist ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE plist PUBLIC -//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd plist version= 1.0 dict key Label /key string com.jenkins.ci /string key ProgramArguments /key array string java /string string -Djava.awt.headless=true /string string -jar /string string /Users/appium/jenkins/jenkins-cli.jar /string string -s /string string https://instructure.ci.cloudbees.com /string string on-premise-executor /string string -fsroot /string string /Users/appium/jenkins /string string -executors /string string 1 /string string -labels /string string mac /string string -name /string string mac_appium /string string -persistent /string /array key KeepAlive /key true/ key StandardOutPath /key string /Users/appium/jenkins/stdout.log /string key StandardErrorPath /key string /Users/appium/jenkins/error.log /string /dict /plist Finally set the owner, permissions, and then start the agent. sudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist sudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist launchctl load /Library/LaunchAgents/com.jenkins.ci.plist launchctl start com.jenkins.ci","title":"Running iOS tests using Jenkins"},{"location":"drivers/ios-xcuitest-real-devices/","text":"Appium XCUITest Driver Real Device Setup Installing dependencies From Appium 1.15.0, Appium communicates with a real device via appium-ios-device . You no longer install extra dependencies. XCUITest driver installs a helper application called WebDriverAgent-Runner onto the device, and handles the application under test via it. While this is simple in theory, the hoops of code signing and provisioning applications for development and testing can make this a bit of a headache. The device should be available to Xcode. Please make sure the device under test can connect to Xcode without issues. You could confirm it with Devices and Simulators Xcode dialog. The documentation on appium-xcuitest-driver is also helpful to resolve dependencies. Basic (automatic) configuration The easiest way to get up-and-running with Appium's XCUITest support on iOS real devices is to use the automatic configuration strategy. There are two ways to do this: Use the xcodeOrgId and xcodeSigningId desired capabilities: { xcodeOrgId : Team ID , xcodeSigningId : iPhone Developer } Create a .xcconfig file somewhere on your file system and add the following to it: DEVELOPMENT_TEAM = Team ID CODE_SIGN_IDENTITY = iPhone Developer In either case, the Team ID is a unique 10-character string generated by Apple that is assigned to your team. You can find your Team ID using your developer account. Sign in to developer.apple.com/account , and click Membership in the sidebar. Your Team ID appears in the Membership Information section under the team name. You can also find your team ID listed under the \"Organizational Unit\" field in your iPhone Developer certificate in your keychain. Note that these are mutually exclusive strategies; use either the xcodeConfigFile capability or the combination of xcodeOrgId and xcodeSigningId . Once this configuration is done, it should just be a matter of starting your test specifying a real device in your udid desired capability. If this has not worked it will usually manifest itself in the Appium server logs as some error followed by info XCUITest xcodebuild exited with code '65' and signal 'null' . This usually means that the necessary code signing is not set up correctly. Go on to the Basic (manual) configuration to fix. If the WebDriverAgentRunner is successfully installed on the device, but in the Appium logs there is an error message something like: 2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12 Unable to launch com.apple.test.WebDriverAgentRunner-Runner UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1 (null) UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}} 2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5 Early unexpected exit, operation never finished bootstrapping - no restart will be attempted UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted} Testing failed: Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted) The problem is that the developer is not trusted on the device. If you manually try to run the WebDriverAgentRunner app on the device, you will see a popup message: You can go to Settings = General = Device Management on the device to trust the developer and allow the WebDriverAgentRunner app to be run (see Apple documentation for more information ). Basic (manual) configuration There are many cases in which the basic automatic configuration is not enough. This usually has to do with code signing and the configuration of the project to be able to be run on the real device under test. Often this happens when the development account being used is a \"Free\" one, in which case it is not possible to create a wildcard provisioning profile, and will often not create one for the default application bundle. This will manifest as something like an error that Xcode failed to create provisioning profile : The easiest way around this is to create a provisioning profile by opening Xcode and creating a new project: The type does not matter, other than it being \"iOS\". \"Single View Application\" is the easiest: The important part is to use a unique \"Product Name\" and \"Organization Name\". Also, at this point, specify your \"Team\". You can confirm that the provisioning profile was created by looking at the \"Project\" tab: Or by going into your account preferences and seeing the provisioning profile: At this point you have a valid provisioning profile. Make note of the bundle id you associated with it, and add that in the updatedWDABundleId desired capability for your tests. Then follow the initial instructions for automatic configuration . Full manual configuration Alternatively, the provisioning profile can be manually associated with the project (keep in mind that this will have to be done each time the WebDriverAgent is updated, which includes every time a new version of Appium is installed, and is not recommended): Find out where your Appium installation is: $ which appium /path/where/installed/bin/appium Given this installation location, /path/where/installed/bin/appium , WebDriverAgent project will be found in /path/where/installed/lib/node_modules/appium/node_modules/appium-webdriveragent . Open a terminal and go to the location, then run the next script. mkdir -p Resources/WebDriverAgent.bundle (Only for Appium versions below 1.20) Run the next script on the same terminal. ./Scripts/bootstrap.sh -d Open WebDriverAgent.xcodeproj in Xcode. For both the WebDriverAgentLib and WebDriverAgentRunner targets, select \"Automatically manage signing\" in the \"General\" tab, and then select your Development Team . This should also auto select Signing Ceritificate . The outcome should look as shown below: Xcode may fail to create a provisioning profile for the WebDriverAgentRunner target: This necessitates manually changing the bundle id for the target by going into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\" from com.facebook.WebDriverAgentRunner to something that Xcode will accept: Going back to the \"General\" tab for the WebDriverAgentRunner target, you should now see that it has created a provisioning profile and all is well: Finally, you can verify that everything works. Build the project: xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id= udid ' test If this was successful, the output should end with something like: Test Suite 'All tests' started at 2017-01-23 15:49:12.585 Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586 Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587 Test Case '-[UITestingUITests testRunner]' started. t = 0.00s Start Test at 2017-01-23 15:49:12.588 t = 0.00s Set Up To completely verify, you can try accessing the WebDriverAgent server status ( note: you must be on the same network as the device, and know its IP address, from Settings = Wi-Fi = Current Network): export DEVICE_URL='http:// device IP :8100' export JSON_HEADER='-H Content-Type: application/json;charset=UTF-8, accept: application/json ' curl -X GET $JSON_HEADER $DEVICE_URL/status You ought to get back output something like this: { value : { state : success , os : { name : iOS , version : 10.2 }, ios : { simulatorVersion : 10.2 , ip : 192.168.0.7 }, build : { time : Jan 23 2017 14:59:57 } }, sessionId : 8951A6DD-F3AD-410E-A5DB-D042F42F68A7 , status : 0 } Configuring the app under test Not only does WebDriverAgent need to be configured to run on your device, but your app must also be able to run on your device. The central requirements are the same: to have a build of your app (an .ipa file) signed with a development provisioning profile. A good overview of the process can be found here and here . In a little more detail, to get started on a real device, you will need the following: An Apple Developer ID and a valid Developer Account with a configured development certificate and provisioning profile. (Please make sure the provisioning profile has iOS Distribution type) A valid iOS Development Certificate and Provisioning Profile are necessary to test on a real device. Your app will also need to be signed. You can find information about this in the Apple documentation . An iPad or iPhone. Make sure this has been set up for development in Xcode. A signed .app or .ipa file of your app, or the source code to build one. A Mac with Xcode and the Xcode Command Line Developer Tools. Appium handles installing the application to the device, using ideviceinstaller (which is installed as part of libimobiledevice ), but it is sometimes easier to pre-install your app using Xcode to ensure there are no problems (see again the Apple documentation for this). Troubleshooting ideas Make sure UDID is correct by checking it in Xcode Organizer or iTunes. It is a long string (20+ chars). Make sure that you can run your tests against the Simulator. Make sure the following settings are enabled on your device: Settings - Developer - Enable UI Automation Settings - Safari - Advanced - Web Inspector and Remote Automation Please read Automating mobile web apps for more details about WebView Consider generating a provisioning profile with .xctrunner identifier if you do not want to generate a wildcard one for manual configuration. The .xctrunner config support has been added since Xcode 11. A reference Make sure the device under test is not a jaibroken one com.apple.mobile.installation_proxy service to manage Apps on the device does not work Make sure the provisioning profile has iOS Distribution certificate An active Xcode/xcodebuild connection/session is necessary to interact with WebDriverAgentRunner because of Apple's security design. The certificate affects the limitation ( issue ) Make sure the keyboard preference in the device under test is Apple official one and the input language is set to English to send texts to XCUIElementTypeSecureTextField Non-official or non-English keyboards may not be able to send keys to XCUIElementTypeSecureTextField . e.g. issues#15647","title":"XCUITest Real Devices (iOS)"},{"location":"drivers/ios-xcuitest-real-devices/#appium-xcuitest-driver-real-device-setup","text":"","title":"Appium XCUITest Driver Real Device Setup"},{"location":"drivers/ios-xcuitest-real-devices/#installing-dependencies","text":"From Appium 1.15.0, Appium communicates with a real device via appium-ios-device . You no longer install extra dependencies. XCUITest driver installs a helper application called WebDriverAgent-Runner onto the device, and handles the application under test via it. While this is simple in theory, the hoops of code signing and provisioning applications for development and testing can make this a bit of a headache. The device should be available to Xcode. Please make sure the device under test can connect to Xcode without issues. You could confirm it with Devices and Simulators Xcode dialog. The documentation on appium-xcuitest-driver is also helpful to resolve dependencies.","title":"Installing dependencies"},{"location":"drivers/ios-xcuitest-real-devices/#basic-automatic-configuration","text":"The easiest way to get up-and-running with Appium's XCUITest support on iOS real devices is to use the automatic configuration strategy. There are two ways to do this: Use the xcodeOrgId and xcodeSigningId desired capabilities: { xcodeOrgId : Team ID , xcodeSigningId : iPhone Developer } Create a .xcconfig file somewhere on your file system and add the following to it: DEVELOPMENT_TEAM = Team ID CODE_SIGN_IDENTITY = iPhone Developer In either case, the Team ID is a unique 10-character string generated by Apple that is assigned to your team. You can find your Team ID using your developer account. Sign in to developer.apple.com/account , and click Membership in the sidebar. Your Team ID appears in the Membership Information section under the team name. You can also find your team ID listed under the \"Organizational Unit\" field in your iPhone Developer certificate in your keychain. Note that these are mutually exclusive strategies; use either the xcodeConfigFile capability or the combination of xcodeOrgId and xcodeSigningId . Once this configuration is done, it should just be a matter of starting your test specifying a real device in your udid desired capability. If this has not worked it will usually manifest itself in the Appium server logs as some error followed by info XCUITest xcodebuild exited with code '65' and signal 'null' . This usually means that the necessary code signing is not set up correctly. Go on to the Basic (manual) configuration to fix. If the WebDriverAgentRunner is successfully installed on the device, but in the Appium logs there is an error message something like: 2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12 Unable to launch com.apple.test.WebDriverAgentRunner-Runner UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1 (null) UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}} 2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5 Early unexpected exit, operation never finished bootstrapping - no restart will be attempted UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted} Testing failed: Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted) The problem is that the developer is not trusted on the device. If you manually try to run the WebDriverAgentRunner app on the device, you will see a popup message: You can go to Settings = General = Device Management on the device to trust the developer and allow the WebDriverAgentRunner app to be run (see Apple documentation for more information ).","title":"Basic (automatic) configuration"},{"location":"drivers/ios-xcuitest-real-devices/#basic-manual-configuration","text":"There are many cases in which the basic automatic configuration is not enough. This usually has to do with code signing and the configuration of the project to be able to be run on the real device under test. Often this happens when the development account being used is a \"Free\" one, in which case it is not possible to create a wildcard provisioning profile, and will often not create one for the default application bundle. This will manifest as something like an error that Xcode failed to create provisioning profile : The easiest way around this is to create a provisioning profile by opening Xcode and creating a new project: The type does not matter, other than it being \"iOS\". \"Single View Application\" is the easiest: The important part is to use a unique \"Product Name\" and \"Organization Name\". Also, at this point, specify your \"Team\". You can confirm that the provisioning profile was created by looking at the \"Project\" tab: Or by going into your account preferences and seeing the provisioning profile: At this point you have a valid provisioning profile. Make note of the bundle id you associated with it, and add that in the updatedWDABundleId desired capability for your tests. Then follow the initial instructions for automatic configuration .","title":"Basic (manual) configuration"},{"location":"drivers/ios-xcuitest-real-devices/#full-manual-configuration","text":"Alternatively, the provisioning profile can be manually associated with the project (keep in mind that this will have to be done each time the WebDriverAgent is updated, which includes every time a new version of Appium is installed, and is not recommended): Find out where your Appium installation is: $ which appium /path/where/installed/bin/appium Given this installation location, /path/where/installed/bin/appium , WebDriverAgent project will be found in /path/where/installed/lib/node_modules/appium/node_modules/appium-webdriveragent . Open a terminal and go to the location, then run the next script. mkdir -p Resources/WebDriverAgent.bundle (Only for Appium versions below 1.20) Run the next script on the same terminal. ./Scripts/bootstrap.sh -d Open WebDriverAgent.xcodeproj in Xcode. For both the WebDriverAgentLib and WebDriverAgentRunner targets, select \"Automatically manage signing\" in the \"General\" tab, and then select your Development Team . This should also auto select Signing Ceritificate . The outcome should look as shown below: Xcode may fail to create a provisioning profile for the WebDriverAgentRunner target: This necessitates manually changing the bundle id for the target by going into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\" from com.facebook.WebDriverAgentRunner to something that Xcode will accept: Going back to the \"General\" tab for the WebDriverAgentRunner target, you should now see that it has created a provisioning profile and all is well: Finally, you can verify that everything works. Build the project: xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id= udid ' test If this was successful, the output should end with something like: Test Suite 'All tests' started at 2017-01-23 15:49:12.585 Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586 Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587 Test Case '-[UITestingUITests testRunner]' started. t = 0.00s Start Test at 2017-01-23 15:49:12.588 t = 0.00s Set Up To completely verify, you can try accessing the WebDriverAgent server status ( note: you must be on the same network as the device, and know its IP address, from Settings = Wi-Fi = Current Network): export DEVICE_URL='http:// device IP :8100' export JSON_HEADER='-H Content-Type: application/json;charset=UTF-8, accept: application/json ' curl -X GET $JSON_HEADER $DEVICE_URL/status You ought to get back output something like this: { value : { state : success , os : { name : iOS , version : 10.2 }, ios : { simulatorVersion : 10.2 , ip : 192.168.0.7 }, build : { time : Jan 23 2017 14:59:57 } }, sessionId : 8951A6DD-F3AD-410E-A5DB-D042F42F68A7 , status : 0 }","title":"Full manual configuration"},{"location":"drivers/ios-xcuitest-real-devices/#configuring-the-app-under-test","text":"Not only does WebDriverAgent need to be configured to run on your device, but your app must also be able to run on your device. The central requirements are the same: to have a build of your app (an .ipa file) signed with a development provisioning profile. A good overview of the process can be found here and here . In a little more detail, to get started on a real device, you will need the following: An Apple Developer ID and a valid Developer Account with a configured development certificate and provisioning profile. (Please make sure the provisioning profile has iOS Distribution type) A valid iOS Development Certificate and Provisioning Profile are necessary to test on a real device. Your app will also need to be signed. You can find information about this in the Apple documentation . An iPad or iPhone. Make sure this has been set up for development in Xcode. A signed .app or .ipa file of your app, or the source code to build one. A Mac with Xcode and the Xcode Command Line Developer Tools. Appium handles installing the application to the device, using ideviceinstaller (which is installed as part of libimobiledevice ), but it is sometimes easier to pre-install your app using Xcode to ensure there are no problems (see again the Apple documentation for this).","title":"Configuring the app under test"},{"location":"drivers/ios-xcuitest-real-devices/#troubleshooting-ideas","text":"Make sure UDID is correct by checking it in Xcode Organizer or iTunes. It is a long string (20+ chars). Make sure that you can run your tests against the Simulator. Make sure the following settings are enabled on your device: Settings - Developer - Enable UI Automation Settings - Safari - Advanced - Web Inspector and Remote Automation Please read Automating mobile web apps for more details about WebView Consider generating a provisioning profile with .xctrunner identifier if you do not want to generate a wildcard one for manual configuration. The .xctrunner config support has been added since Xcode 11. A reference Make sure the device under test is not a jaibroken one com.apple.mobile.installation_proxy service to manage Apps on the device does not work Make sure the provisioning profile has iOS Distribution certificate An active Xcode/xcodebuild connection/session is necessary to interact with WebDriverAgentRunner because of Apple's security design. The certificate affects the limitation ( issue ) Make sure the keyboard preference in the device under test is Apple official one and the input language is set to English to send texts to XCUIElementTypeSecureTextField Non-official or non-English keyboards may not be able to send keys to XCUIElementTypeSecureTextField . e.g. issues#15647","title":"Troubleshooting ideas"},{"location":"drivers/ios-xcuitest/","text":"The XCUITest Driver for iOS Appium's primary support for automating iOS apps is via the XCUITest driver. (New to Appium? Read our introduction to Appium drivers ) . This driver leverages Apple's XCUITest libraries under the hood in order to facilitate automation of your app . This access to XCUITest is mediated by the WebDriverAgent server. WebDriverAgent (also referred to as \"WDA\") is a project managed by Facebook, to which the Appium core team contributes heavily. WDA is a WebDriver-compatible server that runs in the context of an iOS simulator or device and exposes the XCUITest API. Appium's XCUITest driver manages WDA as a subprocess opaque to the Appium user, proxies commands to/from WDA, and provides a host of additional functionality (like simulator management and other methods, for example). Development of the XCUITest driver happens at the appium-xcuitest-driver repo. Requirements and Support In addition to Appium's general requirements: Apple's XCUITest library is only available on iOS simulators and devices that are running iOS 9.3 or higher. A Mac computer with macOS 10.11 or 10.12 is required. Xcode 7 or higher is required. The XCUITest driver was available in Appium starting with Appium 1.6. For correct functioning of the driver, additional system libraries are required (see the Setup sections below). Migrating from the UIAutomation Driver If you are migrating to the XCUITest driver from Appium's old UIAutomation-based driver , you may wish to consult this migration guide . Usage The way to start a session using the XCUITest driver is to include the automationName capability in your new session request , with the value XCUITest . Of course, you must also include appropriate platformName , platformVersion , deviceName , and app capabilities, at a minimum. The platformName should be iOS for iPhone or iPad. tvOS devices are available if the platformName is tvOS . iOS json { \"automationName\": \"XCUITest\", \"platformName\": \"iOS\", \"platformVersion\": \"12.2\", \"deviceName\": \"iPhone 8\", ... } tvOS json { \"automationName\": \"XCUITest\", \"platformName\": \"tvOS\", \"platformVersion\": \"12.2\", \"deviceName\": \"Apple TV\", ... } Capabilities The XCUITest driver supports a number of standard Appium capabilities , but has an additional set of capabilities that modulate the behavior of the driver. These can be found currently at the appium-xcuitest-driver README . To automate Safari instead of your own application, leave the app capability empty and instead set the browserName capability to Safari . Commands To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the XCUITest driver, see the API Reference . Basic Setup (We recommend the use of Homebrew for installing system dependencies) Ensure that you have Appium's general dependencies (e.g., Node NPM) installed and configured. If you don't need to automate real devices, you're done! To automate an app on the simulator, the app capability should be set to an absolute path or url pointing to your .app or .app.zip file, built for the sim. Real Device Setup Automating a real device with XCUITest is considerably more complicated, due to Apple's restrictions around running apps on real devices. Please refer to the XCUITest real device setup doc for instructions. Once set up, running a session on a real device is achieved by using the following desired capabilities: app or bundleId - specifies the application (local path or url referencing your signed .ipa file) , or, if it is already installed, simply the bundle identifier of the app so that Appium can launch it. udid - the specific id of the device to test on. This can also be set to auto if there is only a single device, in which case Appium will determine the device id and use it. Optional Setup Install idb for better handling of various iOS Simulator operations, such as: biometrics, geolocation setting and window focussing. Read https://github.com/appium/appium-idb#installation to install necessary libraries (since Appium 1.14.0) Install AppleSimulatorUtils to use the permissions capability Files generated by test runs Testing on iOS generates files that can sometimes get large. These include logs, temporary files, and derived data from Xcode runs. Generally the following locations are where they are found, should they need to be deleted: $HOME/Library/Logs/CoreSimulator/* $HOME/Library/Developer/Xcode/DerivedData/* Configure keyboards Over Appium 1.14.0, Appium configures keyboard preferences by default to make test running more stable. You can change sone of them via settings API. Turn Auto-Correction in Keyboards off Turn Predictive in Keyboards off Mark keyboard tutorial as complete (Only for Simulator) Toggle software keyboard on Accessibility preferences fine-tuning In some cases, enabling of the below preferences helps to make some view elements accessible. Appium does not modify these settings automatically, since they could affect the way your application under test performs. Please change them manually if needed Turn Spoken Content in Settings Accessibility on Turn Speak Selection in Settings Accessibility on","title":"XCUITest (iOS)"},{"location":"drivers/ios-xcuitest/#the-xcuitest-driver-for-ios","text":"Appium's primary support for automating iOS apps is via the XCUITest driver. (New to Appium? Read our introduction to Appium drivers ) . This driver leverages Apple's XCUITest libraries under the hood in order to facilitate automation of your app . This access to XCUITest is mediated by the WebDriverAgent server. WebDriverAgent (also referred to as \"WDA\") is a project managed by Facebook, to which the Appium core team contributes heavily. WDA is a WebDriver-compatible server that runs in the context of an iOS simulator or device and exposes the XCUITest API. Appium's XCUITest driver manages WDA as a subprocess opaque to the Appium user, proxies commands to/from WDA, and provides a host of additional functionality (like simulator management and other methods, for example). Development of the XCUITest driver happens at the appium-xcuitest-driver repo.","title":"The XCUITest Driver for iOS"},{"location":"drivers/ios-xcuitest/#requirements-and-support","text":"In addition to Appium's general requirements: Apple's XCUITest library is only available on iOS simulators and devices that are running iOS 9.3 or higher. A Mac computer with macOS 10.11 or 10.12 is required. Xcode 7 or higher is required. The XCUITest driver was available in Appium starting with Appium 1.6. For correct functioning of the driver, additional system libraries are required (see the Setup sections below).","title":"Requirements and Support"},{"location":"drivers/ios-xcuitest/#migrating-from-the-uiautomation-driver","text":"If you are migrating to the XCUITest driver from Appium's old UIAutomation-based driver , you may wish to consult this migration guide .","title":"Migrating from the UIAutomation Driver"},{"location":"drivers/ios-xcuitest/#usage","text":"The way to start a session using the XCUITest driver is to include the automationName capability in your new session request , with the value XCUITest . Of course, you must also include appropriate platformName , platformVersion , deviceName , and app capabilities, at a minimum. The platformName should be iOS for iPhone or iPad. tvOS devices are available if the platformName is tvOS . iOS json { \"automationName\": \"XCUITest\", \"platformName\": \"iOS\", \"platformVersion\": \"12.2\", \"deviceName\": \"iPhone 8\", ... } tvOS json { \"automationName\": \"XCUITest\", \"platformName\": \"tvOS\", \"platformVersion\": \"12.2\", \"deviceName\": \"Apple TV\", ... }","title":"Usage"},{"location":"drivers/ios-xcuitest/#capabilities","text":"The XCUITest driver supports a number of standard Appium capabilities , but has an additional set of capabilities that modulate the behavior of the driver. These can be found currently at the appium-xcuitest-driver README . To automate Safari instead of your own application, leave the app capability empty and instead set the browserName capability to Safari .","title":"Capabilities"},{"location":"drivers/ios-xcuitest/#commands","text":"To see the various commands Appium supports, and specifically for information on how the commands map to behaviors for the XCUITest driver, see the API Reference .","title":"Commands"},{"location":"drivers/ios-xcuitest/#basic-setup","text":"(We recommend the use of Homebrew for installing system dependencies) Ensure that you have Appium's general dependencies (e.g., Node NPM) installed and configured. If you don't need to automate real devices, you're done! To automate an app on the simulator, the app capability should be set to an absolute path or url pointing to your .app or .app.zip file, built for the sim.","title":"Basic Setup"},{"location":"drivers/ios-xcuitest/#real-device-setup","text":"Automating a real device with XCUITest is considerably more complicated, due to Apple's restrictions around running apps on real devices. Please refer to the XCUITest real device setup doc for instructions. Once set up, running a session on a real device is achieved by using the following desired capabilities: app or bundleId - specifies the application (local path or url referencing your signed .ipa file) , or, if it is already installed, simply the bundle identifier of the app so that Appium can launch it. udid - the specific id of the device to test on. This can also be set to auto if there is only a single device, in which case Appium will determine the device id and use it.","title":"Real Device Setup"},{"location":"drivers/ios-xcuitest/#optional-setup","text":"Install idb for better handling of various iOS Simulator operations, such as: biometrics, geolocation setting and window focussing. Read https://github.com/appium/appium-idb#installation to install necessary libraries (since Appium 1.14.0) Install AppleSimulatorUtils to use the permissions capability","title":"Optional Setup"},{"location":"drivers/ios-xcuitest/#files-generated-by-test-runs","text":"Testing on iOS generates files that can sometimes get large. These include logs, temporary files, and derived data from Xcode runs. Generally the following locations are where they are found, should they need to be deleted: $HOME/Library/Logs/CoreSimulator/* $HOME/Library/Developer/Xcode/DerivedData/*","title":"Files generated by test runs"},{"location":"drivers/ios-xcuitest/#configure-keyboards","text":"Over Appium 1.14.0, Appium configures keyboard preferences by default to make test running more stable. You can change sone of them via settings API. Turn Auto-Correction in Keyboards off Turn Predictive in Keyboards off Mark keyboard tutorial as complete (Only for Simulator) Toggle software keyboard on","title":"Configure keyboards"},{"location":"drivers/ios-xcuitest/#accessibility-preferences-fine-tuning","text":"In some cases, enabling of the below preferences helps to make some view elements accessible. Appium does not modify these settings automatically, since they could affect the way your application under test performs. Please change them manually if needed Turn Spoken Content in Settings Accessibility on Turn Speak Selection in Settings Accessibility on","title":"Accessibility preferences fine-tuning"},{"location":"drivers/mac/","text":"The Mac Driver for OS X Appium has beta support for automation of OS X desktop applications. Development of this driver happens at the appium-mac-driver , and relies on a native OS X binary called AppiumForMac . Requirements and Support (In addition to Appium's general requirements) Mac OS X 10.7 The AppiumForMac helper application downloaded and installed (see below) Usage The way to start a session using the Mac driver is to include the platformName capability in your new session request , with the value Mac . Also, ensure that you set the deviceName capability to Mac as well. Of course, you must also include appropriate platformVersion and app capabilities, at a minimum. Getting AppiumForMac Currently, this driver does not ship with the AppiumForMac binary, which means, in order to automate Mac apps you must manually install the AppiumForMac application and grant it the appropriate OS X Accessibility permissions. To Install Appium for Mac: 1. Download a release and unzip the application into your /Applications folder 2. Follow the brief supplemental installation instructions to enable Appium to have access to OS X's Accessibility APIs (For more information on using AppiumForMac, check out the docs )","title":"Mac"},{"location":"drivers/mac/#the-mac-driver-for-os-x","text":"Appium has beta support for automation of OS X desktop applications. Development of this driver happens at the appium-mac-driver , and relies on a native OS X binary called AppiumForMac .","title":"The Mac Driver for OS X"},{"location":"drivers/mac/#requirements-and-support","text":"(In addition to Appium's general requirements) Mac OS X 10.7 The AppiumForMac helper application downloaded and installed (see below)","title":"Requirements and Support"},{"location":"drivers/mac/#usage","text":"The way to start a session using the Mac driver is to include the platformName capability in your new session request , with the value Mac . Also, ensure that you set the deviceName capability to Mac as well. Of course, you must also include appropriate platformVersion and app capabilities, at a minimum.","title":"Usage"},{"location":"drivers/mac/#getting-appiumformac","text":"Currently, this driver does not ship with the AppiumForMac binary, which means, in order to automate Mac apps you must manually install the AppiumForMac application and grant it the appropriate OS X Accessibility permissions. To Install Appium for Mac: 1. Download a release and unzip the application into your /Applications folder 2. Follow the brief supplemental installation instructions to enable Appium to have access to OS X's Accessibility APIs (For more information on using AppiumForMac, check out the docs )","title":"Getting AppiumForMac"},{"location":"drivers/mac2/","text":"The Mac2Driver Mac2Driver has been added to Appium since version 1.20. This driver is for automating macOS applications using Apple's XCTest framework. It provides more flexibility and features in comparison to the legacy MacDriver and is better compatible with operating system internals. The driver operates in scope of W3C WebDriver protocol with several custom extensions to cover operating-system specific scenarios. The original idea and parts of the source code are borrowed from the Facebook's WebDriverAgent project. Development of the Mac2Driver happens at the appium-mac2-driver repo. Requirements and Support In addition to Appium's general requirements: macOS 10.15 or later Xcode 12 or later should be installed Xcode Helper app should be enabled for Accessibility access. The app itself could be usually found at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/Xcode Helper.app . In order to enable Accessibility access for it simply open the parent folder in Finder: open /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/ and drag drop the Xcode Helper app to Security Privacy - Privacy - Accessibility list of your System Preferences . This action must only be done once. Usage The way to start a session using the Mac2Driver is to include the automationName capability in your new session request, with the value Mac2 . Of course, you must also include appropriate platformName (only Mac is supported). Read Mac2Driver documentation for more details. Capabilities The list of available driver capabilities could be found in the driver README file.","title":"Mac2"},{"location":"drivers/mac2/#the-mac2driver","text":"Mac2Driver has been added to Appium since version 1.20. This driver is for automating macOS applications using Apple's XCTest framework. It provides more flexibility and features in comparison to the legacy MacDriver and is better compatible with operating system internals. The driver operates in scope of W3C WebDriver protocol with several custom extensions to cover operating-system specific scenarios. The original idea and parts of the source code are borrowed from the Facebook's WebDriverAgent project. Development of the Mac2Driver happens at the appium-mac2-driver repo.","title":"The Mac2Driver"},{"location":"drivers/mac2/#requirements-and-support","text":"In addition to Appium's general requirements: macOS 10.15 or later Xcode 12 or later should be installed Xcode Helper app should be enabled for Accessibility access. The app itself could be usually found at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/Xcode Helper.app . In order to enable Accessibility access for it simply open the parent folder in Finder: open /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/ and drag drop the Xcode Helper app to Security Privacy - Privacy - Accessibility list of your System Preferences . This action must only be done once.","title":"Requirements and Support"},{"location":"drivers/mac2/#usage","text":"The way to start a session using the Mac2Driver is to include the automationName capability in your new session request, with the value Mac2 . Of course, you must also include appropriate platformName (only Mac is supported). Read Mac2Driver documentation for more details.","title":"Usage"},{"location":"drivers/mac2/#capabilities","text":"The list of available driver capabilities could be found in the driver README file.","title":"Capabilities"},{"location":"drivers/safari/","text":"The Safari Driver Safari driver has been added to Appium since version 1.20. This driver is a wrapper over Apple's safaridriver binary, which is included to the standard macOS distribution and implements communication with either desktop or mobile Safari browser via W3C WebDriver protocol . Development of the Safari driver happens at the appium-safari-driver repo. Appium also supports mobile Safari automation and Safari web views automation using the appium-remote-debugger . This module is used to implement context switching feature with XCUITest automation name. It is more universal and flexible than the current Safari driver, however it is using the undocumented WebKit communication protocol under the hood. Which means the development of it and the effort to keep it in working state is comparably high while the list of supported features is smaller. On the other hand safaridriver is maintained by Apple, which means it is always in sync with the most recent browser and communication protocol requirements. Long story short, it makes sense to prefer this driver if it is necessary to only automate a web application that only works in Safari browser (either mobile or desktop). In case it is necessary to interact with native context or switch between different applications/contexts while automating your scenario then the obvious choice would be either XCUITest Driver (for the mobile platform) or Mac driver (for the desktop platform). Requirements and Support In addition to Appium's general requirements: Run the safaridriver --enable command from the macOS terminal and provide your administrator password before any automated session will be executed. This only should be done once. In order to automate Safari on real devices it is necessary to enable Remote Automation switch in Settings \u2192 Safari \u2192 Advanced \u2192 Remote Automation for these particular devices and trust them on the target host. The device's screen must not be locked while starting tests. Only macOS (High Sierra or newer) is supported as the host platform. Only iOS 13 and newer is supported for mobile browser automation. As it is stated in the WebKit blog article , Safari for iOS does not allow WebDriver-initiated navigations to be handled outside of Safari. In other words, clicking a tel:// link will not offer to place a phone call, and clicking an app store link will not redirect the user to the App Store. Similarly, non-Safari content displayed by the system\u2013such as update dialogs, app notifications, incoming calls, etc.\u2013are suppressed while a WebDriver session is active. Usage The way to start a session using the Safari driver is to include the automationName capability in your new session request, with the value Safari . Of course, you must also include appropriate platformName ( Mac or iOS ). Read https://github.com/appium/appium-safari-driver/blob/master/README.md for more details. Capabilities The list of available driver capabilities could be found at https://github.com/appium/appium-safari-driver/blob/master/README.md","title":"Safari (Mac/iOS)"},{"location":"drivers/safari/#the-safari-driver","text":"Safari driver has been added to Appium since version 1.20. This driver is a wrapper over Apple's safaridriver binary, which is included to the standard macOS distribution and implements communication with either desktop or mobile Safari browser via W3C WebDriver protocol . Development of the Safari driver happens at the appium-safari-driver repo. Appium also supports mobile Safari automation and Safari web views automation using the appium-remote-debugger . This module is used to implement context switching feature with XCUITest automation name. It is more universal and flexible than the current Safari driver, however it is using the undocumented WebKit communication protocol under the hood. Which means the development of it and the effort to keep it in working state is comparably high while the list of supported features is smaller. On the other hand safaridriver is maintained by Apple, which means it is always in sync with the most recent browser and communication protocol requirements. Long story short, it makes sense to prefer this driver if it is necessary to only automate a web application that only works in Safari browser (either mobile or desktop). In case it is necessary to interact with native context or switch between different applications/contexts while automating your scenario then the obvious choice would be either XCUITest Driver (for the mobile platform) or Mac driver (for the desktop platform).","title":"The Safari Driver"},{"location":"drivers/safari/#requirements-and-support","text":"In addition to Appium's general requirements: Run the safaridriver --enable command from the macOS terminal and provide your administrator password before any automated session will be executed. This only should be done once. In order to automate Safari on real devices it is necessary to enable Remote Automation switch in Settings \u2192 Safari \u2192 Advanced \u2192 Remote Automation for these particular devices and trust them on the target host. The device's screen must not be locked while starting tests. Only macOS (High Sierra or newer) is supported as the host platform. Only iOS 13 and newer is supported for mobile browser automation. As it is stated in the WebKit blog article , Safari for iOS does not allow WebDriver-initiated navigations to be handled outside of Safari. In other words, clicking a tel:// link will not offer to place a phone call, and clicking an app store link will not redirect the user to the App Store. Similarly, non-Safari content displayed by the system\u2013such as update dialogs, app notifications, incoming calls, etc.\u2013are suppressed while a WebDriver session is active.","title":"Requirements and Support"},{"location":"drivers/safari/#usage","text":"The way to start a session using the Safari driver is to include the automationName capability in your new session request, with the value Safari . Of course, you must also include appropriate platformName ( Mac or iOS ). Read https://github.com/appium/appium-safari-driver/blob/master/README.md for more details.","title":"Usage"},{"location":"drivers/safari/#capabilities","text":"The list of available driver capabilities could be found at https://github.com/appium/appium-safari-driver/blob/master/README.md","title":"Capabilities"},{"location":"drivers/windows/","text":"The Windows Driver Appium has the ability to automate Windows PC Desktop apps. This driver relies on a project from Microsoft called WinAppDriver , which is an Appium-compatible WebDriver server for Windows Desktop apps (and more in the future). WinAppDriver is often abbreviated \"WAD\". WAD is bundled with Appium and does not need to be installed separately. The Windows Driver supports testing of Universal Windows Platform (UWP) and Classic Windows (Win32) applications. In addition to the WAD repo, development of the Appium driver takes place at the appium-windows-driver repo. Requirements and Support In addition to Appium's general requirements: Windows PC with Windows 10 or up Ability to enter Administrator mode Usage The way to start a session using the Windows driver is to include the platformName capability in your new session request , with the value Windows . Also, ensure that you set the deviceName capability to WindowsPC as well. Of course, you must also include an appropriate app capability, at a minimum (see below). Capabilities The Windows driver supports a number of standard Appium capabilities . See below for how these should be used specifically with the Windows driver. Setup To test a Windows app, simply make sure you have turned developer mode on. When running Appium (whether Appium Desktop or from the command line), ensure that you have started the app / cmd prompt as an administrator. Writing Tests for the Windows Driver You could begin by taking a look at some existing samples: Java Samples 1. Open the sample folder as an existing project in a Java IDE such as IntelliJ. For example: CalculatorTest 2. In the Java IDE build and run the test C# Samples 1. Pull and open CalculatorTest.sln under CalculatorTest 2. In Visual Studio 2015 with the test solution open build the test and select Test Run All Tests Javascript/node Samples Using selenium-webdriver Examples on selenium-appium selenium-webdriver-winappdriver-example If you want to write tests from scratch, you can choose any programming language or tools supported by Appium/Selenium to write your test scripts. In the example below, we will author the test script in C# using Microsoft Visual Studio 2015. Create Test Project Open Microsoft Visual Studio 2015 Create the test project and solution. I.e. select New Project Templates Visual C# Test Unit Test Project Once created, select Project Manage NuGet Packages... Browse and search for Appium.WebDriver Install the Appium.WebDriver NuGet packages for the test project Start writing your test (see sample code under [samples]) Universal Windows Platform App Testing To test a UWP app, you can use any Selenium supported language and simply specify the Application Id for the app under test in the app capabilities entry. Below is an example of creating a test session for Windows Alarms Clock app written in C#: // Launch the AlarmClock app DesiredCapabilities appCapabilities = new DesiredCapabilities(); appCapabilities.SetCapability( app , Microsoft.WindowsAlarms_8wekyb3d8bbwe!App ); AlarmClockSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities); // Control the AlarmClock app AlarmClockSession.FindElementByAccessibilityId( AddAlarmButton ).Click(); AlarmClockSession.FindElementByAccessibilityId( AlarmNameTextBox ).Clear(); When testing the application you authored yourself, you can find the Application Id in the generated AppX\\vs.appxrecipe file under RegisteredUserNmodeAppID node. E.g. c24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App Classic Windows App Testing To test a classic Windows app, you can also use any Selenium supported language and specify the full executable path for the app under test in the app capabilities entry. Below is an example of creating a test session for Windows Notepad app: // Launch Notepad DesiredCapabilities appCapabilities = new DesiredCapabilities(); appCapabilities.SetCapability( app , @ C:\\Windows\\System32\\notepad.exe ); NotepadSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities); // Control the Notepad app NotepadSession.FindElementByClassName( Edit ).SendKeys( This is some text ); Starting a Session As mentioned above, you should additionally use these capabilities to ensure you are getting a Windows App automation session: platformName : Windows deviceName : WindowsPC app : the appID of the Windows app for testing, or the path to the .exe file Inspecting UI Elements Microsoft Visual Studio 2015 by default includes Windows SDK that provides great tool to inspect the application you are testing. This tool allows you to see every UI element/node that you can query using Windows Application Driver. This inspect.exe tool can be found under the Windows SDK folder such as C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86 . The tool will show various element attributes. The table below shows you which Appium locator strategy you should use to find elements with the corresponding attributes. Locator Strategy Matched Attribute accessibility id AutomationId class name ClassName name Name","title":"Windows"},{"location":"drivers/windows/#the-windows-driver","text":"Appium has the ability to automate Windows PC Desktop apps. This driver relies on a project from Microsoft called WinAppDriver , which is an Appium-compatible WebDriver server for Windows Desktop apps (and more in the future). WinAppDriver is often abbreviated \"WAD\". WAD is bundled with Appium and does not need to be installed separately. The Windows Driver supports testing of Universal Windows Platform (UWP) and Classic Windows (Win32) applications. In addition to the WAD repo, development of the Appium driver takes place at the appium-windows-driver repo.","title":"The Windows Driver"},{"location":"drivers/windows/#requirements-and-support","text":"In addition to Appium's general requirements: Windows PC with Windows 10 or up Ability to enter Administrator mode","title":"Requirements and Support"},{"location":"drivers/windows/#usage","text":"The way to start a session using the Windows driver is to include the platformName capability in your new session request , with the value Windows . Also, ensure that you set the deviceName capability to WindowsPC as well. Of course, you must also include an appropriate app capability, at a minimum (see below).","title":"Usage"},{"location":"drivers/windows/#capabilities","text":"The Windows driver supports a number of standard Appium capabilities . See below for how these should be used specifically with the Windows driver.","title":"Capabilities"},{"location":"drivers/windows/#setup","text":"To test a Windows app, simply make sure you have turned developer mode on. When running Appium (whether Appium Desktop or from the command line), ensure that you have started the app / cmd prompt as an administrator.","title":"Setup"},{"location":"drivers/windows/#writing-tests-for-the-windows-driver","text":"You could begin by taking a look at some existing samples: Java Samples 1. Open the sample folder as an existing project in a Java IDE such as IntelliJ. For example: CalculatorTest 2. In the Java IDE build and run the test C# Samples 1. Pull and open CalculatorTest.sln under CalculatorTest 2. In Visual Studio 2015 with the test solution open build the test and select Test Run All Tests Javascript/node Samples Using selenium-webdriver Examples on selenium-appium selenium-webdriver-winappdriver-example If you want to write tests from scratch, you can choose any programming language or tools supported by Appium/Selenium to write your test scripts. In the example below, we will author the test script in C# using Microsoft Visual Studio 2015.","title":"Writing Tests for the Windows Driver"},{"location":"drivers/windows/#create-test-project","text":"Open Microsoft Visual Studio 2015 Create the test project and solution. I.e. select New Project Templates Visual C# Test Unit Test Project Once created, select Project Manage NuGet Packages... Browse and search for Appium.WebDriver Install the Appium.WebDriver NuGet packages for the test project Start writing your test (see sample code under [samples])","title":"Create Test Project"},{"location":"drivers/windows/#universal-windows-platform-app-testing","text":"To test a UWP app, you can use any Selenium supported language and simply specify the Application Id for the app under test in the app capabilities entry. Below is an example of creating a test session for Windows Alarms Clock app written in C#: // Launch the AlarmClock app DesiredCapabilities appCapabilities = new DesiredCapabilities(); appCapabilities.SetCapability( app , Microsoft.WindowsAlarms_8wekyb3d8bbwe!App ); AlarmClockSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities); // Control the AlarmClock app AlarmClockSession.FindElementByAccessibilityId( AddAlarmButton ).Click(); AlarmClockSession.FindElementByAccessibilityId( AlarmNameTextBox ).Clear(); When testing the application you authored yourself, you can find the Application Id in the generated AppX\\vs.appxrecipe file under RegisteredUserNmodeAppID node. E.g. c24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App","title":"Universal Windows Platform App Testing"},{"location":"drivers/windows/#classic-windows-app-testing","text":"To test a classic Windows app, you can also use any Selenium supported language and specify the full executable path for the app under test in the app capabilities entry. Below is an example of creating a test session for Windows Notepad app: // Launch Notepad DesiredCapabilities appCapabilities = new DesiredCapabilities(); appCapabilities.SetCapability( app , @ C:\\Windows\\System32\\notepad.exe ); NotepadSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities); // Control the Notepad app NotepadSession.FindElementByClassName( Edit ).SendKeys( This is some text );","title":"Classic Windows App Testing"},{"location":"drivers/windows/#starting-a-session","text":"As mentioned above, you should additionally use these capabilities to ensure you are getting a Windows App automation session: platformName : Windows deviceName : WindowsPC app : the appID of the Windows app for testing, or the path to the .exe file","title":"Starting a Session"},{"location":"drivers/windows/#inspecting-ui-elements","text":"Microsoft Visual Studio 2015 by default includes Windows SDK that provides great tool to inspect the application you are testing. This tool allows you to see every UI element/node that you can query using Windows Application Driver. This inspect.exe tool can be found under the Windows SDK folder such as C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86 . The tool will show various element attributes. The table below shows you which Appium locator strategy you should use to find elements with the corresponding attributes. Locator Strategy Matched Attribute accessibility id AutomationId class name ClassName name Name","title":"Inspecting UI Elements"},{"location":"writing-running-appium/caps/","text":"Appium Desired Capabilities Desired Capabilities are keys and values encoded in a JSON object, sent by Appium clients to the server when a new automation session is requested. They tell the Appium drivers all kinds of important things about how you want your test to work. Each Appium client builds capabilities in a way specific to the client's language, but at the end of the day, they are sent over to Appium as JSON objects. Desired Capabilities can be scripted in the WebDriver test or set within the Appium Server GUI (via an Inspector Session) Some important capabilities are demonstrated in the following example: { platformName : iOS , platformVersion : 11.0 , deviceName : iPhone 7 , automationName : XCUITest , app : /path/to/my.app } This set of Desired Capabilities expresses the desire for Appium to begin an automation session on an iPhone 7 simulator with iOS 11, using the XCUITest Driver , with /path/to/my.app as the app under test. There are many, many Capabilities that Appium supports. Capabilities also differ by driver, though there are a standard set that most drivers pay attention to. What follows are a series of tables outlining the various Desired Capabilities available in general and for specific drivers. General Capabilities These Capabilities span multiple drivers. Capability Description Values automationName Which automation engine to use Appium (default), or UiAutomator2 , Espresso , or UiAutomator1 for Android, or XCUITest or Instruments for iOS, or YouiEngine for application built with You.i Engine platformName Which mobile OS platform to use iOS , Android , or FirefoxOS platformVersion Mobile OS version e.g., 7.1 , 4.4 deviceName The kind of mobile device or emulator to use iPhone Simulator , iPad Simulator , iPhone Retina 4-inch , Android Emulator , Galaxy S4 , etc.... On iOS, this should be one of the valid devices returned by instruments with instruments -s devices or xctrace with xcrun xctrace list devices (since Xcode 12). On Android this capability is currently ignored, though it remains required. app The absolute local path or remote http URL to a .ipa file (IOS), .app folder (IOS Simulator), .apk file (Android) or .apks file (Android App Bundle), or a .zip file containing one of these. Appium will attempt to install this app binary on the appropriate device first. Note that this capability is not required for Android if you specify appPackage and appActivity capabilities (see below). UiAutomator2 and XCUITest allow to start the session without app or appPackage . Incompatible with browserName . See here about .apks file. /abs/path/to/my.apk or http://myapp.com/app.ipa otherApps App or list of apps (as a JSON array) to install prior to running tests. Note that it will not work with automationName of Espresso and iOS real devices e.g., \"/path/to/app.apk\" , https://www.example.com/url/to/app.apk , [\"http://appium.github.io/appium/assets/TestApp9.4.app.zip\", \"/path/to/app-b.app\"] browserName Name of mobile web browser to automate. Should be an empty string if automating an app instead. 'Safari' for iOS and 'Chrome', 'Chromium', or 'Browser' for Android newCommandTimeout How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session e.g. 60 language Language to set for iOS (XCUITest driver only) and Android. e.g. fr locale Locale to set for iOS (XCUITest driver only) and Android. fr_CA format for iOS. CA format (country name abbreviation) for Android e.g. fr_CA , CA udid Unique device identifier of the connected physical device e.g. 1ae203187fc012g orientation (Sim/Emu-only) start in a certain orientation LANDSCAPE or PORTRAIT autoWebview Move directly into Webview context. Default false true , false noReset Don't reset app state before this session. See here for more details true , false fullReset Perform a complete reset. See here for more details true , false eventTimings Enable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to false . To enable, use true . The timings are then reported as events property on response to querying the current session. See the event timing docs for the the structure of this response. e.g., true enablePerformanceLogging (Web and webview only) Enable Chromedriver's (on Android) or Safari's (on iOS) performance logging (default false ) true , false printPageSourceOnFindFailure When a find operation fails, print the current page source. Defaults to false . e.g., true clearSystemFiles Delete any generated files at the end of a session. Default to false . true , false Update settings Capability Description Values settings[settingsKey] Update Appium Settings on session creation. e.g., 'settings[mjpegScalingFactor]': 10 , 'settings[shouldUseCompactResponses]': true Android Only These Capabilities are available only on Android-based drivers. Capability Description Values appActivity Activity name for the Android activity you want to launch from your package. This often needs to be preceded by a . (e.g., .MainActivity instead of MainActivity ). By default this capability is received from the package manifest (action: android.intent.action.MAIN , category: android.intent.category.LAUNCHER) MainActivity , .Settings appPackage Java package of the Android app you want to run. By default this capability is received from the package manifest (@package attribute value) com.example.android.myApp , com.android.settings appWaitActivity Activity name/names, comma separated, for the Android activity you want to wait for. By default the value of this capability is the same as for appActivity . You must set it to the very first focused application activity name in case it is different from the one which is set as appActivity if your capability has appActivity and appPackage . You can also use wildcards ( * ). SplashActivity , SplashActivity,OtherActivity , * , *.SplashActivity appWaitPackage Java package of the Android app you want to wait for. By default the value of this capability is the same as for appActivity com.example.android.myApp , com.android.settings appWaitDuration Timeout in milliseconds used to wait for the appWaitActivity to launch (default 20000 ) 30000 deviceReadyTimeout Timeout in seconds while waiting for device to become ready 5 allowTestPackages Allow to install a test package which has android:testOnly=\"true\" in the manifest. false by default true or false androidCoverage Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation androidCoverageEndIntent A broadcast action implemented by yourself which is used to dump coverage into file system. Passed to -a in adb shell am broadcast -a com.example.pkg.END_EMMA androidDeviceReadyTimeout Timeout in seconds used to wait for a device to become ready after booting e.g., 30 androidInstallTimeout Timeout in milliseconds used to wait for an apk to install to the device. Defaults to 90000 e.g., 90000 androidInstallPath The name of the directory on the device in which the apk will be push before install. Defaults to /data/local/tmp e.g. /sdcard/Downloads/ adbPort Port used to connect to the ADB server (default 5037 ) 5037 systemPort systemPort used to connect to appium-uiautomator2-server or appium-espresso-driver . The default is 8200 in general and selects one port from 8200 to 8299 for appium-uiautomator2-server , it is 8300 from 8300 to 8399 for appium-espresso-driver . When you run tests in parallel, you must adjust the port to avoid conflicts. Read Parallel Testing Setup Guide for more details. e.g., 8201 remoteAdbHost Optional remote ADB server host e.g.: 192.168.0.101 androidDeviceSocket Devtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client. e.g., chrome_devtools_remote avd Name of avd to launch e.g., api19 avdLaunchTimeout How long to wait in milliseconds for an avd to launch and connect to ADB (default 60000 ) 300000 avdReadyTimeout How long to wait in milliseconds for an avd to finish its boot animations (default 120000 ) 300000 avdArgs Additional emulator arguments used when launching an avd e.g., -netfast useKeystore Use a custom keystore to sign apks, default false true or false keystorePath Path to custom keystore, default ~/.android/debug.keystore e.g., /path/to.keystore keystorePassword Password for custom keystore e.g., foo keyAlias Alias for key e.g., androiddebugkey keyPassword Password for key e.g., foo chromedriverExecutable The absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium) /abs/path/to/webdriver chromedriverArgs An array of arguments to be passed to the chromedriver binary when it's run by Appium. By default no CLI args are added beyond what Appium uses internally (such as --url-base , --port , --adb-port , and --log-path . e.g., [\"--disable-gpu\", \"--disable-web-security\"] chromedriverExecutableDir The absolute path to a directory to look for Chromedriver executables in, for automatic discovery of compatible Chromedrivers. Ignored if chromedriverUseSystemExecutable is true /abs/path/to/chromedriver/directory chromedriverChromeMappingFile The absolute path to a file which maps Chromedriver versions to the minimum Chrome that it supports. Ignored if chromedriverUseSystemExecutable is true /abs/path/to/mapping.json chromedriverUseSystemExecutable If true , bypasses automatic Chromedriver configuration and uses the version that comes downloaded with Appium. Ignored if chromedriverExecutable is set. Defaults to false e.g., true autoWebviewTimeout Amount of time to wait for Webview context to become active, in ms. Defaults to 2000 e.g. 4 chromedriverPort Numeric port to start Chromedriver on. Note that use of this capability is discouraged as it will cause undefined behavior in case there are multiple webviews present. By default Appium will find a free port. e.g. 8000 chromedriverPorts A list of valid ports for Appium to use for communication with Chromedrivers. This capability supports multiple webview scenarios. The form of this capability is an array of numeric ports, where array items can themselves be arrays of length 2, where the first element is the start of an inclusive range and the second is the end. By default, Appium will use any free port. e.g. [8000, [9000, 9005]] ensureWebviewsHavePages Whether or not Appium should augment its webview detection with page detection, guaranteeing that any webview contexts which show up in the context list have active pages. This can prevent an error if a context is selected where Chromedriver cannot find any pages. Defaults to false e.g. true webviewDevtoolsPort To support the ensureWebviewsHavePages feature, it is necessary to open a TCP port for communication with the webview on the device under test. This capability allows overriding of the default port of 9222 , in case multiple sessions are running simultaneously (to avoid port clash), or in case the default port is not appropriate for your system. e.g. 9543 enableWebviewDetailsCollection Enables collection of detailed WebView information via /json/version CDP (Chrome Developer Protocol) endpoint since Appium 1.18.0+. This helps to properly match Chromedriver version which supports the given WebView. Without this flag enabled, Appium tries to guess the version of the WebView based on the version of the corresponding installed package (which usually fails for custom web views). Defaults to false true or false dontStopAppOnReset Doesn't stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with dontStopAppOnReset set to true , we will not include the -S flag in the adb shell am start call. With this capability omitted or set to false , we include the -S flag. Default false true or false unicodeKeyboard Enable Unicode input, default false true or false resetKeyboard Reset keyboard to its original state, after running Unicode tests with unicodeKeyboard capability. Ignored if used alone. Default false true or false noSign Skip checking and signing of app with debug keys, will work only with UiAutomator, default false true or false ignoreUnimportantViews Calls the setCompressedLayoutHierarchy() uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able setting as well as a capability. Defaults to false true or false disableAndroidWatchers Disables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator, default false true or false chromeOptions Allows passing chromeOptions capability for ChromeDriver. For more information see chromeOptions chromeOptions: {args: ['--disable-popup-blocking']} recreateChromeDriverSessions Kill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to false true or false nativeWebScreenshot In a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to false true or false androidScreenshotPath The name of the directory on the device in which the screenshot will be put. Defaults to /data/local/tmp e.g. /sdcard/screenshots/ autoGrantPermissions Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false . If noReset is true , this capability doesn't work. true or false networkSpeed Set the network speed emulation. Specify the maximum network upload and download speeds. Defaults to full ['full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo'] Check -netspeed option more info about speed emulation for avds gpsEnabled Toggle gps location provider for emulators before starting the session. By default the emulator will have this option enabled or not according to how it has been provisioned. true or false isHeadless Set this capability to true to run the Emulator headless when device display is not needed to be visible. false is the default value. isHeadless is also support for iOS, check XCUITest-specific capabilities. e.g., true adbExecTimeout Timeout in milliseconds used to wait for adb command execution. Defaults to 20000 e.g., 50000 localeScript Sets the locale script e.g., \"Cyrl\" (Cyrillic) skipDeviceInitialization Skip device initialization which includes i.a.: installation and running of Settings app or setting of permissions. Can be used to improve startup performance when the device was already used for automation and it's prepared for the next automation. Defaults to false true or false chromedriverDisableBuildCheck Sets the chromedriver flag --disable-build-check for Chrome webview tests true or false skipUnlock Skips unlock during session creation. Defaults to false true or false unlockType Unlock the target device with particular lock pattern instead of just waking up the device with a helper app. It works with unlockKey capability. Defaults to undefined. fingerprint is available only for Android 6.0+ and emulators. Read unlock doc in android driver. ['pin', 'password', 'pattern', 'fingerprint'] unlockKey A key pattern to unlock used by unlockType . e.g., '1111' autoLaunch Initializing the app under test automatically. Appium does not install/launch the app under test if this is false . Defaults to true true or false skipLogcatCapture Skips to start capturing logcat. It might improve performance such as network. Log related commands will not work. Defaults to false . true or false uninstallOtherPackages A package, list of packages or * to uninstall package/s before installing apks for test. '*' uninstall all of thrid-party packages except for packages which is necessary for Appium to test such as io.appium.settings or io.appium.uiautomator2.server since Appium already contains the logic to manage them. e.g. \"io.appium.example\" , [\"io.appium.example1\", \"io.appium.example2\"] , '*' disableWindowAnimation Set device animation scale zero if the value is true . After session is complete, Appium restores the animation scale to it's original value. Defaults to false true , false remoteAppsCacheLimit Set the maximum number of remote cached apks (default is 10) which are pushed to the device-under-test's local storage. Caching apks remotely speeds up the execution of sequential test cases, when using the same set of apks, by avoiding the need to be push an apk to the remote file system every time a reinstall is needed. Set this capability to 0 to disable caching. e.g. 0 , 5 , 20 buildToolsVersion Specify the Android build-tools version to be something different than the default, which is to use the most recent version. It is helpful to use a non-default version if your environment uses alpha/beta build tools. e.g. '28.0.3' androidNaturalOrientation Allow for correct handling of orientation on landscape-oriented devices. Set to true to basically flip the meaning of PORTRAIT and LANDSCAPE . Defaults to false true , false enforceAppInstall By default application installation is skipped if newer or the same version of this app is already present on the device under test. Setting this option to true will enforce Appium to always install the current application build independently of the currently installed version of it. Defaults to false . true , false ignoreHiddenApiPolicyError Ignores Security exception: Permission denial alert and allows to continue the session creation process since Appium 1.18.0+. The error happens when Appium tries to relax hidden API policy , although some devices with a customized firmware deny such requests. Defaults to false . true , false mockLocationApp Sets the package identifier of the app, which is used as a system mock location provider since Appium 1.18.0+. This capability has no effect on emulators. If the value is set to null or an empty string, then Appium will skip the mocked location provider setup procedure. Defaults to Appium Setting package identifier ( io.appium.settings ). e.g., null , io.appium.settings , example.your.app logcatFormat Set the output format for logcat messages since Appium 1.18.0. Supported formats are listed in here . Please read logcat#outputFormat for more details about each format. Defaults to threadtime . e.g., process logcatFilterSpecs Set the output filter rule for logcat messages since Appium 1.18.0. Please read logcat#filteringOutput for more details about the rule. Write and View Logs with Logcat is also helpful. e.g., ['*:W', 'MyActivity:D'] ( MyActivity is a tag) allowDelayAdb Whether enable -delay-adb on emulator startup. Defaults to true true , false UIAutomator 1 These Capabilities are available on UIAutomator 1. Capability Description Values intentAction Intent action which will be used to start activity (default android.intent.action.MAIN ) e.g. android.intent.action.MAIN , android.intent.action.VIEW intentCategory Intent category which will be used to start activity (default android.intent.category.LAUNCHER ) e.g. android.intent.category.LAUNCHER , android.intent.category.APP_CONTACTS intentFlags Flags that will be used to start activity (default 0x10200000 ) e.g. 0x10200000 optionalIntentArguments Additional intent arguments that will be used to start activity. See Intent arguments e.g. --esn EXTRA_KEY , --ez EXTRA_KEY EXTRA_BOOLEAN_VALUE , etc. UIAutomator2 Only Please refer to the documentation on the UIAutomator2 driver repository about its available capabilities. Espresso Only Please refer to the documentation on the Espresso driver repository about its available capabilities. iOS Only These Capabilities are available only on the XCUITest Driver and the deprecated UIAutomation Driver . Capability Description Values calendarFormat (Sim-only) Calendar format to set for the iOS Simulator e.g. gregorian bundleId Bundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app' capability, but you must provide 'udid'. e.g. io.appium.TestApp launchTimeout Amount of time in ms to wait for instruments before assuming it hung and failing the session e.g. 20000 locationServicesEnabled (Sim-only) Force location services to be either on or off. Default is to keep current sim setting. true or false locationServicesAuthorized (Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn't pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the bundleId capability to send in your app's bundle ID. true or false autoAcceptAlerts Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. true or false autoDismissAlerts Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. true or false nativeInstrumentsLib Use native intruments lib (ie disable instruments-without-delay). true or false nativeWebTap Enable \"real\", non-javascript-based web taps in Safari. Default: false . Warning: depending on viewport size/ratio; this might not accurately tap an element true or false safariInitialUrl Initial safari url, default is a local welcome page e.g. https://www.github.com safariAllowPopups (Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting true or false safariIgnoreFraudWarning (Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting. true or false safariOpenLinksInBackground (Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting. true or false keepKeyChains (Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished true or false localizableStringsDir Where to look for localizable strings. Default en.lproj en.lproj processArguments Arguments to pass to the AUT using instruments e.g., -myflag interKeyDelay The delay, in ms, between keystrokes sent to an element when typing. e.g., 100 showIOSLog Whether to show any logs captured from a device in the appium logs. Default false true or false sendKeyStrategy strategy to use to type test into a test field. Simulator default: oneByOne . Real device default: grouped oneByOne , grouped or setValue screenshotWaitTimeout Max timeout in sec to wait for a screenshot to be generated. default: 10 e.g., 5 waitForAppScript The ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean e.g. true; , target.elements().length 0; , $.delay(5000); true; webviewConnectRetries Number of times to send connection message to remote debugger, to get webview. Default: 8 e.g., 12 appName The display name of the application under test. Used to automate backgrounding the app in iOS 9+. e.g., UICatalog customSSLCert (Sim only) Add an SSL certificate to IOS Simulator. e.g. -----BEGIN CERTIFICATE-----MIIFWjCCBEKg... -----END CERTIFICATE----- webkitResponseTimeout (Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to 5000 e.g., 10000 remoteDebugProxy (Sim only, = 11.2) If set, Appium sends and receives remote debugging messages through a proxy on either the local port (Sim only, = 11.2) or a proxy on this unix socket (Sim only = 11.3) instead of communicating with the iOS remote debugger directly. e.g. 12000 or \"/tmp/my.proxy.socket\" enableAsyncExecuteFromHttps capability to allow simulators to execute asynchronous JavaScript on pages using HTTPS. Defaults to false true or false skipLogCapture Skips to start capturing logs such as crash, system, safari console and safari network. It might improve performance such as network. Log related commands will not work. Defaults to false . true or false webkitDebugProxyPort (Real device only) Port to which ios-webkit-debug-proxy is connected, during real device tests. Default is 27753 . 12021 fullContextList Returns the detailed information on contexts for the get available context command. If this capability is enabled, then each item in the returned contexts list would additionally include WebView title, full URL and the bundle identifier. Defaults to false . true or false iOS Only, using XCUITest Please refer to the documentation on the XCUITest driver repository about its available capabilities. Safaridriver Only Please refer to the documentation on the safaridriver repository about its available capabilities. Geckodriver Only Please refer to the documentation on the geckodriver repository about its available capabilities. MacDriver Only Please refer to the documentation on the MacDriver repository about its available capabilities. Mac2Driver Only Please refer to the documentation on the Mac2Driver repository about its available capabilities. You.i Engine Only Please refer to the documentation on the You.i Engine driver repository about its available capabilities. WinAppDriver Only Please refer to the documentation on the Appium Windows Diver repository about its available capabilities. Flutter driver only Please refer to the documentation on the Flutter Diver repository about its available capabilities.","title":"Desired Capabilities"},{"location":"writing-running-appium/caps/#appium-desired-capabilities","text":"Desired Capabilities are keys and values encoded in a JSON object, sent by Appium clients to the server when a new automation session is requested. They tell the Appium drivers all kinds of important things about how you want your test to work. Each Appium client builds capabilities in a way specific to the client's language, but at the end of the day, they are sent over to Appium as JSON objects. Desired Capabilities can be scripted in the WebDriver test or set within the Appium Server GUI (via an Inspector Session) Some important capabilities are demonstrated in the following example: { platformName : iOS , platformVersion : 11.0 , deviceName : iPhone 7 , automationName : XCUITest , app : /path/to/my.app } This set of Desired Capabilities expresses the desire for Appium to begin an automation session on an iPhone 7 simulator with iOS 11, using the XCUITest Driver , with /path/to/my.app as the app under test. There are many, many Capabilities that Appium supports. Capabilities also differ by driver, though there are a standard set that most drivers pay attention to. What follows are a series of tables outlining the various Desired Capabilities available in general and for specific drivers.","title":"Appium Desired Capabilities"},{"location":"writing-running-appium/caps/#general-capabilities","text":"These Capabilities span multiple drivers. Capability Description Values automationName Which automation engine to use Appium (default), or UiAutomator2 , Espresso , or UiAutomator1 for Android, or XCUITest or Instruments for iOS, or YouiEngine for application built with You.i Engine platformName Which mobile OS platform to use iOS , Android , or FirefoxOS platformVersion Mobile OS version e.g., 7.1 , 4.4 deviceName The kind of mobile device or emulator to use iPhone Simulator , iPad Simulator , iPhone Retina 4-inch , Android Emulator , Galaxy S4 , etc.... On iOS, this should be one of the valid devices returned by instruments with instruments -s devices or xctrace with xcrun xctrace list devices (since Xcode 12). On Android this capability is currently ignored, though it remains required. app The absolute local path or remote http URL to a .ipa file (IOS), .app folder (IOS Simulator), .apk file (Android) or .apks file (Android App Bundle), or a .zip file containing one of these. Appium will attempt to install this app binary on the appropriate device first. Note that this capability is not required for Android if you specify appPackage and appActivity capabilities (see below). UiAutomator2 and XCUITest allow to start the session without app or appPackage . Incompatible with browserName . See here about .apks file. /abs/path/to/my.apk or http://myapp.com/app.ipa otherApps App or list of apps (as a JSON array) to install prior to running tests. Note that it will not work with automationName of Espresso and iOS real devices e.g., \"/path/to/app.apk\" , https://www.example.com/url/to/app.apk , [\"http://appium.github.io/appium/assets/TestApp9.4.app.zip\", \"/path/to/app-b.app\"] browserName Name of mobile web browser to automate. Should be an empty string if automating an app instead. 'Safari' for iOS and 'Chrome', 'Chromium', or 'Browser' for Android newCommandTimeout How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session e.g. 60 language Language to set for iOS (XCUITest driver only) and Android. e.g. fr locale Locale to set for iOS (XCUITest driver only) and Android. fr_CA format for iOS. CA format (country name abbreviation) for Android e.g. fr_CA , CA udid Unique device identifier of the connected physical device e.g. 1ae203187fc012g orientation (Sim/Emu-only) start in a certain orientation LANDSCAPE or PORTRAIT autoWebview Move directly into Webview context. Default false true , false noReset Don't reset app state before this session. See here for more details true , false fullReset Perform a complete reset. See here for more details true , false eventTimings Enable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to false . To enable, use true . The timings are then reported as events property on response to querying the current session. See the event timing docs for the the structure of this response. e.g., true enablePerformanceLogging (Web and webview only) Enable Chromedriver's (on Android) or Safari's (on iOS) performance logging (default false ) true , false printPageSourceOnFindFailure When a find operation fails, print the current page source. Defaults to false . e.g., true clearSystemFiles Delete any generated files at the end of a session. Default to false . true , false","title":"General Capabilities"},{"location":"writing-running-appium/caps/#update-settings","text":"Capability Description Values settings[settingsKey] Update Appium Settings on session creation. e.g., 'settings[mjpegScalingFactor]': 10 , 'settings[shouldUseCompactResponses]': true","title":"Update settings"},{"location":"writing-running-appium/caps/#android-only","text":"These Capabilities are available only on Android-based drivers. Capability Description Values appActivity Activity name for the Android activity you want to launch from your package. This often needs to be preceded by a . (e.g., .MainActivity instead of MainActivity ). By default this capability is received from the package manifest (action: android.intent.action.MAIN , category: android.intent.category.LAUNCHER) MainActivity , .Settings appPackage Java package of the Android app you want to run. By default this capability is received from the package manifest (@package attribute value) com.example.android.myApp , com.android.settings appWaitActivity Activity name/names, comma separated, for the Android activity you want to wait for. By default the value of this capability is the same as for appActivity . You must set it to the very first focused application activity name in case it is different from the one which is set as appActivity if your capability has appActivity and appPackage . You can also use wildcards ( * ). SplashActivity , SplashActivity,OtherActivity , * , *.SplashActivity appWaitPackage Java package of the Android app you want to wait for. By default the value of this capability is the same as for appActivity com.example.android.myApp , com.android.settings appWaitDuration Timeout in milliseconds used to wait for the appWaitActivity to launch (default 20000 ) 30000 deviceReadyTimeout Timeout in seconds while waiting for device to become ready 5 allowTestPackages Allow to install a test package which has android:testOnly=\"true\" in the manifest. false by default true or false androidCoverage Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation androidCoverageEndIntent A broadcast action implemented by yourself which is used to dump coverage into file system. Passed to -a in adb shell am broadcast -a com.example.pkg.END_EMMA androidDeviceReadyTimeout Timeout in seconds used to wait for a device to become ready after booting e.g., 30 androidInstallTimeout Timeout in milliseconds used to wait for an apk to install to the device. Defaults to 90000 e.g., 90000 androidInstallPath The name of the directory on the device in which the apk will be push before install. Defaults to /data/local/tmp e.g. /sdcard/Downloads/ adbPort Port used to connect to the ADB server (default 5037 ) 5037 systemPort systemPort used to connect to appium-uiautomator2-server or appium-espresso-driver . The default is 8200 in general and selects one port from 8200 to 8299 for appium-uiautomator2-server , it is 8300 from 8300 to 8399 for appium-espresso-driver . When you run tests in parallel, you must adjust the port to avoid conflicts. Read Parallel Testing Setup Guide for more details. e.g., 8201 remoteAdbHost Optional remote ADB server host e.g.: 192.168.0.101 androidDeviceSocket Devtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client. e.g., chrome_devtools_remote avd Name of avd to launch e.g., api19 avdLaunchTimeout How long to wait in milliseconds for an avd to launch and connect to ADB (default 60000 ) 300000 avdReadyTimeout How long to wait in milliseconds for an avd to finish its boot animations (default 120000 ) 300000 avdArgs Additional emulator arguments used when launching an avd e.g., -netfast useKeystore Use a custom keystore to sign apks, default false true or false keystorePath Path to custom keystore, default ~/.android/debug.keystore e.g., /path/to.keystore keystorePassword Password for custom keystore e.g., foo keyAlias Alias for key e.g., androiddebugkey keyPassword Password for key e.g., foo chromedriverExecutable The absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium) /abs/path/to/webdriver chromedriverArgs An array of arguments to be passed to the chromedriver binary when it's run by Appium. By default no CLI args are added beyond what Appium uses internally (such as --url-base , --port , --adb-port , and --log-path . e.g., [\"--disable-gpu\", \"--disable-web-security\"] chromedriverExecutableDir The absolute path to a directory to look for Chromedriver executables in, for automatic discovery of compatible Chromedrivers. Ignored if chromedriverUseSystemExecutable is true /abs/path/to/chromedriver/directory chromedriverChromeMappingFile The absolute path to a file which maps Chromedriver versions to the minimum Chrome that it supports. Ignored if chromedriverUseSystemExecutable is true /abs/path/to/mapping.json chromedriverUseSystemExecutable If true , bypasses automatic Chromedriver configuration and uses the version that comes downloaded with Appium. Ignored if chromedriverExecutable is set. Defaults to false e.g., true autoWebviewTimeout Amount of time to wait for Webview context to become active, in ms. Defaults to 2000 e.g. 4 chromedriverPort Numeric port to start Chromedriver on. Note that use of this capability is discouraged as it will cause undefined behavior in case there are multiple webviews present. By default Appium will find a free port. e.g. 8000 chromedriverPorts A list of valid ports for Appium to use for communication with Chromedrivers. This capability supports multiple webview scenarios. The form of this capability is an array of numeric ports, where array items can themselves be arrays of length 2, where the first element is the start of an inclusive range and the second is the end. By default, Appium will use any free port. e.g. [8000, [9000, 9005]] ensureWebviewsHavePages Whether or not Appium should augment its webview detection with page detection, guaranteeing that any webview contexts which show up in the context list have active pages. This can prevent an error if a context is selected where Chromedriver cannot find any pages. Defaults to false e.g. true webviewDevtoolsPort To support the ensureWebviewsHavePages feature, it is necessary to open a TCP port for communication with the webview on the device under test. This capability allows overriding of the default port of 9222 , in case multiple sessions are running simultaneously (to avoid port clash), or in case the default port is not appropriate for your system. e.g. 9543 enableWebviewDetailsCollection Enables collection of detailed WebView information via /json/version CDP (Chrome Developer Protocol) endpoint since Appium 1.18.0+. This helps to properly match Chromedriver version which supports the given WebView. Without this flag enabled, Appium tries to guess the version of the WebView based on the version of the corresponding installed package (which usually fails for custom web views). Defaults to false true or false dontStopAppOnReset Doesn't stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with dontStopAppOnReset set to true , we will not include the -S flag in the adb shell am start call. With this capability omitted or set to false , we include the -S flag. Default false true or false unicodeKeyboard Enable Unicode input, default false true or false resetKeyboard Reset keyboard to its original state, after running Unicode tests with unicodeKeyboard capability. Ignored if used alone. Default false true or false noSign Skip checking and signing of app with debug keys, will work only with UiAutomator, default false true or false ignoreUnimportantViews Calls the setCompressedLayoutHierarchy() uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able setting as well as a capability. Defaults to false true or false disableAndroidWatchers Disables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator, default false true or false chromeOptions Allows passing chromeOptions capability for ChromeDriver. For more information see chromeOptions chromeOptions: {args: ['--disable-popup-blocking']} recreateChromeDriverSessions Kill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to false true or false nativeWebScreenshot In a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to false true or false androidScreenshotPath The name of the directory on the device in which the screenshot will be put. Defaults to /data/local/tmp e.g. /sdcard/screenshots/ autoGrantPermissions Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to false . If noReset is true , this capability doesn't work. true or false networkSpeed Set the network speed emulation. Specify the maximum network upload and download speeds. Defaults to full ['full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo'] Check -netspeed option more info about speed emulation for avds gpsEnabled Toggle gps location provider for emulators before starting the session. By default the emulator will have this option enabled or not according to how it has been provisioned. true or false isHeadless Set this capability to true to run the Emulator headless when device display is not needed to be visible. false is the default value. isHeadless is also support for iOS, check XCUITest-specific capabilities. e.g., true adbExecTimeout Timeout in milliseconds used to wait for adb command execution. Defaults to 20000 e.g., 50000 localeScript Sets the locale script e.g., \"Cyrl\" (Cyrillic) skipDeviceInitialization Skip device initialization which includes i.a.: installation and running of Settings app or setting of permissions. Can be used to improve startup performance when the device was already used for automation and it's prepared for the next automation. Defaults to false true or false chromedriverDisableBuildCheck Sets the chromedriver flag --disable-build-check for Chrome webview tests true or false skipUnlock Skips unlock during session creation. Defaults to false true or false unlockType Unlock the target device with particular lock pattern instead of just waking up the device with a helper app. It works with unlockKey capability. Defaults to undefined. fingerprint is available only for Android 6.0+ and emulators. Read unlock doc in android driver. ['pin', 'password', 'pattern', 'fingerprint'] unlockKey A key pattern to unlock used by unlockType . e.g., '1111' autoLaunch Initializing the app under test automatically. Appium does not install/launch the app under test if this is false . Defaults to true true or false skipLogcatCapture Skips to start capturing logcat. It might improve performance such as network. Log related commands will not work. Defaults to false . true or false uninstallOtherPackages A package, list of packages or * to uninstall package/s before installing apks for test. '*' uninstall all of thrid-party packages except for packages which is necessary for Appium to test such as io.appium.settings or io.appium.uiautomator2.server since Appium already contains the logic to manage them. e.g. \"io.appium.example\" , [\"io.appium.example1\", \"io.appium.example2\"] , '*' disableWindowAnimation Set device animation scale zero if the value is true . After session is complete, Appium restores the animation scale to it's original value. Defaults to false true , false remoteAppsCacheLimit Set the maximum number of remote cached apks (default is 10) which are pushed to the device-under-test's local storage. Caching apks remotely speeds up the execution of sequential test cases, when using the same set of apks, by avoiding the need to be push an apk to the remote file system every time a reinstall is needed. Set this capability to 0 to disable caching. e.g. 0 , 5 , 20 buildToolsVersion Specify the Android build-tools version to be something different than the default, which is to use the most recent version. It is helpful to use a non-default version if your environment uses alpha/beta build tools. e.g. '28.0.3' androidNaturalOrientation Allow for correct handling of orientation on landscape-oriented devices. Set to true to basically flip the meaning of PORTRAIT and LANDSCAPE . Defaults to false true , false enforceAppInstall By default application installation is skipped if newer or the same version of this app is already present on the device under test. Setting this option to true will enforce Appium to always install the current application build independently of the currently installed version of it. Defaults to false . true , false ignoreHiddenApiPolicyError Ignores Security exception: Permission denial alert and allows to continue the session creation process since Appium 1.18.0+. The error happens when Appium tries to relax hidden API policy , although some devices with a customized firmware deny such requests. Defaults to false . true , false mockLocationApp Sets the package identifier of the app, which is used as a system mock location provider since Appium 1.18.0+. This capability has no effect on emulators. If the value is set to null or an empty string, then Appium will skip the mocked location provider setup procedure. Defaults to Appium Setting package identifier ( io.appium.settings ). e.g., null , io.appium.settings , example.your.app logcatFormat Set the output format for logcat messages since Appium 1.18.0. Supported formats are listed in here . Please read logcat#outputFormat for more details about each format. Defaults to threadtime . e.g., process logcatFilterSpecs Set the output filter rule for logcat messages since Appium 1.18.0. Please read logcat#filteringOutput for more details about the rule. Write and View Logs with Logcat is also helpful. e.g., ['*:W', 'MyActivity:D'] ( MyActivity is a tag) allowDelayAdb Whether enable -delay-adb on emulator startup. Defaults to true true , false","title":"Android Only"},{"location":"writing-running-appium/caps/#uiautomator-1","text":"These Capabilities are available on UIAutomator 1. Capability Description Values intentAction Intent action which will be used to start activity (default android.intent.action.MAIN ) e.g. android.intent.action.MAIN , android.intent.action.VIEW intentCategory Intent category which will be used to start activity (default android.intent.category.LAUNCHER ) e.g. android.intent.category.LAUNCHER , android.intent.category.APP_CONTACTS intentFlags Flags that will be used to start activity (default 0x10200000 ) e.g. 0x10200000 optionalIntentArguments Additional intent arguments that will be used to start activity. See Intent arguments e.g. --esn EXTRA_KEY , --ez EXTRA_KEY EXTRA_BOOLEAN_VALUE , etc.","title":"UIAutomator 1"},{"location":"writing-running-appium/caps/#uiautomator2-only","text":"Please refer to the documentation on the UIAutomator2 driver repository about its available capabilities.","title":"UIAutomator2 Only"},{"location":"writing-running-appium/caps/#espresso-only","text":"Please refer to the documentation on the Espresso driver repository about its available capabilities.","title":"Espresso Only"},{"location":"writing-running-appium/caps/#ios-only","text":"These Capabilities are available only on the XCUITest Driver and the deprecated UIAutomation Driver . Capability Description Values calendarFormat (Sim-only) Calendar format to set for the iOS Simulator e.g. gregorian bundleId Bundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app' capability, but you must provide 'udid'. e.g. io.appium.TestApp launchTimeout Amount of time in ms to wait for instruments before assuming it hung and failing the session e.g. 20000 locationServicesEnabled (Sim-only) Force location services to be either on or off. Default is to keep current sim setting. true or false locationServicesAuthorized (Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn't pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the bundleId capability to send in your app's bundle ID. true or false autoAcceptAlerts Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. true or false autoDismissAlerts Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false. true or false nativeInstrumentsLib Use native intruments lib (ie disable instruments-without-delay). true or false nativeWebTap Enable \"real\", non-javascript-based web taps in Safari. Default: false . Warning: depending on viewport size/ratio; this might not accurately tap an element true or false safariInitialUrl Initial safari url, default is a local welcome page e.g. https://www.github.com safariAllowPopups (Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting true or false safariIgnoreFraudWarning (Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting. true or false safariOpenLinksInBackground (Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting. true or false keepKeyChains (Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished true or false localizableStringsDir Where to look for localizable strings. Default en.lproj en.lproj processArguments Arguments to pass to the AUT using instruments e.g., -myflag interKeyDelay The delay, in ms, between keystrokes sent to an element when typing. e.g., 100 showIOSLog Whether to show any logs captured from a device in the appium logs. Default false true or false sendKeyStrategy strategy to use to type test into a test field. Simulator default: oneByOne . Real device default: grouped oneByOne , grouped or setValue screenshotWaitTimeout Max timeout in sec to wait for a screenshot to be generated. default: 10 e.g., 5 waitForAppScript The ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean e.g. true; , target.elements().length 0; , $.delay(5000); true; webviewConnectRetries Number of times to send connection message to remote debugger, to get webview. Default: 8 e.g., 12 appName The display name of the application under test. Used to automate backgrounding the app in iOS 9+. e.g., UICatalog customSSLCert (Sim only) Add an SSL certificate to IOS Simulator. e.g. -----BEGIN CERTIFICATE-----MIIFWjCCBEKg... -----END CERTIFICATE----- webkitResponseTimeout (Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to 5000 e.g., 10000 remoteDebugProxy (Sim only, = 11.2) If set, Appium sends and receives remote debugging messages through a proxy on either the local port (Sim only, = 11.2) or a proxy on this unix socket (Sim only = 11.3) instead of communicating with the iOS remote debugger directly. e.g. 12000 or \"/tmp/my.proxy.socket\" enableAsyncExecuteFromHttps capability to allow simulators to execute asynchronous JavaScript on pages using HTTPS. Defaults to false true or false skipLogCapture Skips to start capturing logs such as crash, system, safari console and safari network. It might improve performance such as network. Log related commands will not work. Defaults to false . true or false webkitDebugProxyPort (Real device only) Port to which ios-webkit-debug-proxy is connected, during real device tests. Default is 27753 . 12021 fullContextList Returns the detailed information on contexts for the get available context command. If this capability is enabled, then each item in the returned contexts list would additionally include WebView title, full URL and the bundle identifier. Defaults to false . true or false","title":"iOS Only"},{"location":"writing-running-appium/caps/#ios-only-using-xcuitest","text":"Please refer to the documentation on the XCUITest driver repository about its available capabilities.","title":"iOS Only, using XCUITest"},{"location":"writing-running-appium/caps/#safaridriver-only","text":"Please refer to the documentation on the safaridriver repository about its available capabilities.","title":"Safaridriver Only"},{"location":"writing-running-appium/caps/#geckodriver-only","text":"Please refer to the documentation on the geckodriver repository about its available capabilities.","title":"Geckodriver Only"},{"location":"writing-running-appium/caps/#macdriver-only","text":"Please refer to the documentation on the MacDriver repository about its available capabilities.","title":"MacDriver Only"},{"location":"writing-running-appium/caps/#mac2driver-only","text":"Please refer to the documentation on the Mac2Driver repository about its available capabilities.","title":"Mac2Driver Only"},{"location":"writing-running-appium/caps/#youi-engine-only","text":"Please refer to the documentation on the You.i Engine driver repository about its available capabilities.","title":"You.i Engine Only"},{"location":"writing-running-appium/caps/#winappdriver-only","text":"Please refer to the documentation on the Appium Windows Diver repository about its available capabilities.","title":"WinAppDriver Only"},{"location":"writing-running-appium/caps/#flutter-driver-only","text":"Please refer to the documentation on the Flutter Diver repository about its available capabilities.","title":"Flutter driver only"},{"location":"writing-running-appium/default-capabilities-arg/","text":"The --default-capabilities flag Appium 1.5 does away with most CLI flags that existed previously; the remainder can be converted into JSON and made part of the --default-capabilities flag. For example: # raw JSON as an argument --default-capabilities '{ app : myapp.app , deviceName : iPhone Simulator }' # or the name of a JSON file --default-capabilities /path/to/file.json Windows users will need to escape the quotes in JSON passed on the command line: --default-capabilities \"{\\\"app\\\": \\\"myapp.app\\\"}\" Flag JSON key --keep-artifacts keepArtifacts --platform-name platformName --platform-version platformVersion --automation-name automationName --device-name deviceName --browser-name browserName --app app --launch-timeout launchTimeout --language language --locale locale --udid udid --orientation orientation --no-reset noReset --full-reset fullReset --app-pkg appPackage --app-activity appActivity --app-wait-package appWaitPackage --app-wait-activity appWaitActivity --device-ready-timeout deviceReadyTimeout --android-coverage androidCoverage --avd avd --avd-args avdArgs --use-keystore useKeystore --keystore-path keystorePath --keystore-password keystorePassword --key-alias keyAlias --key-password keyPassword --intent-action intentAction --intent-category intentCategory --intent-flags intentFlags --intent-args optionalIntentArguments --dont-stop-app-on-reset dontStopAppOnReset --calendar-format calendarFormat --native-instruments-lib nativeInstrumentsLib --keep-keychains keepKeyChains --localizable-strings-dir localizableStringsDir --show-ios-log showIOSLog --reboot reboot","title":"The --default-capabilities flag"},{"location":"writing-running-appium/default-capabilities-arg/#the-default-capabilities-flag","text":"Appium 1.5 does away with most CLI flags that existed previously; the remainder can be converted into JSON and made part of the --default-capabilities flag. For example: # raw JSON as an argument --default-capabilities '{ app : myapp.app , deviceName : iPhone Simulator }' # or the name of a JSON file --default-capabilities /path/to/file.json Windows users will need to escape the quotes in JSON passed on the command line: --default-capabilities \"{\\\"app\\\": \\\"myapp.app\\\"}\" Flag JSON key --keep-artifacts keepArtifacts --platform-name platformName --platform-version platformVersion --automation-name automationName --device-name deviceName --browser-name browserName --app app --launch-timeout launchTimeout --language language --locale locale --udid udid --orientation orientation --no-reset noReset --full-reset fullReset --app-pkg appPackage --app-activity appActivity --app-wait-package appWaitPackage --app-wait-activity appWaitActivity --device-ready-timeout deviceReadyTimeout --android-coverage androidCoverage --avd avd --avd-args avdArgs --use-keystore useKeystore --keystore-path keystorePath --keystore-password keystorePassword --key-alias keyAlias --key-password keyPassword --intent-action intentAction --intent-category intentCategory --intent-flags intentFlags --intent-args optionalIntentArguments --dont-stop-app-on-reset dontStopAppOnReset --calendar-format calendarFormat --native-instruments-lib nativeInstrumentsLib --keep-keychains keepKeyChains --localizable-strings-dir localizableStringsDir --show-ios-log showIOSLog --reboot reboot","title":"The --default-capabilities flag"},{"location":"writing-running-appium/finding-elements/","text":"Finding and interacting with elements Appium supports a subset of the WebDriver locator strategies such as: find by \"class\" (i.e., ui component type) find by \"xpath\" (i.e., an abstract representation of a path to an element, with certain constraints) You can see a list of them in Selector Strategies Appium additionally supports some of the Mobile JSON Wire Protocol locator strategies -ios predicate string : a string corresponding to a recursive element search using the iOS Predicate (iOS 10.0 and above) -ios uiautomation for iOS 9.3 and below -android uiautomator : a string corresponding to a recursive element search using the UiAutomator Api (Android-only) -android datamatcher : a string corresponding to an Espresso DataMatcher json (Android-only) accessibility id : a string corresponding to a recursive element search using the Id/Name that the native Accessibility options utilize. Finally, Appium supports several additional experimental locator strategies: -image : a string corresponding to a base64-encoded version of an image which should be used by Appium as a template to find a matching screen region, which can then be tapped as if it were an element. For more information on this locator strategy, see the Finding Image Elements doc. -custom : a string which will be sent to an element finding plugin registered via the customFindModules capability. For more information on this strategy, check out the Element Finding Plugin docs. Issues There's a known issue with table cell elements becoming invalidated before there's time to interact with them. We're working on a fix Using Appium Desktop To Locate Elements Appium provides you with a neat tool that allows you to find the the elements you're looking for. With Appium Desktop you can find any element and its locators by either clicking the element on the screenshot image, or locating it in the source tree. Overview Appium Desktop has a simple layout, complete with a source tree, a screenshot, and record and refresh buttons, and interaction tools. Example After launching Appium Desktop and starting a session, you can locate any element in the source. In this test, I'm looking for the accessibility id of the \"Compute Sum\" button. To find the accessibility id of this button, I click the \"Compute Sum\" button in the screenshot. The element is then highlighted in the source tree. In the panel on the right, I can see the accessibility id. REPL A REPL is a simple interactive language shell. You can invoke various command interactively. It will help you to make sure your scenarios interactively with Appium server. Appium Ruby Console WebDriverIO with debug mode","title":"Finding Elements"},{"location":"writing-running-appium/finding-elements/#finding-and-interacting-with-elements","text":"Appium supports a subset of the WebDriver locator strategies such as: find by \"class\" (i.e., ui component type) find by \"xpath\" (i.e., an abstract representation of a path to an element, with certain constraints) You can see a list of them in Selector Strategies Appium additionally supports some of the Mobile JSON Wire Protocol locator strategies -ios predicate string : a string corresponding to a recursive element search using the iOS Predicate (iOS 10.0 and above) -ios uiautomation for iOS 9.3 and below -android uiautomator : a string corresponding to a recursive element search using the UiAutomator Api (Android-only) -android datamatcher : a string corresponding to an Espresso DataMatcher json (Android-only) accessibility id : a string corresponding to a recursive element search using the Id/Name that the native Accessibility options utilize. Finally, Appium supports several additional experimental locator strategies: -image : a string corresponding to a base64-encoded version of an image which should be used by Appium as a template to find a matching screen region, which can then be tapped as if it were an element. For more information on this locator strategy, see the Finding Image Elements doc. -custom : a string which will be sent to an element finding plugin registered via the customFindModules capability. For more information on this strategy, check out the Element Finding Plugin docs.","title":"Finding and interacting with elements"},{"location":"writing-running-appium/finding-elements/#issues","text":"There's a known issue with table cell elements becoming invalidated before there's time to interact with them. We're working on a fix","title":"Issues"},{"location":"writing-running-appium/finding-elements/#using-appium-desktop-to-locate-elements","text":"Appium provides you with a neat tool that allows you to find the the elements you're looking for. With Appium Desktop you can find any element and its locators by either clicking the element on the screenshot image, or locating it in the source tree.","title":"Using Appium Desktop To Locate Elements"},{"location":"writing-running-appium/finding-elements/#overview","text":"Appium Desktop has a simple layout, complete with a source tree, a screenshot, and record and refresh buttons, and interaction tools.","title":"Overview"},{"location":"writing-running-appium/finding-elements/#example","text":"After launching Appium Desktop and starting a session, you can locate any element in the source. In this test, I'm looking for the accessibility id of the \"Compute Sum\" button. To find the accessibility id of this button, I click the \"Compute Sum\" button in the screenshot. The element is then highlighted in the source tree. In the panel on the right, I can see the accessibility id.","title":"Example"},{"location":"writing-running-appium/finding-elements/#repl","text":"A REPL is a simple interactive language shell. You can invoke various command interactively. It will help you to make sure your scenarios interactively with Appium server. Appium Ruby Console WebDriverIO with debug mode","title":"REPL"},{"location":"writing-running-appium/image-comparison/","text":"Image Comparison Features This article describes the set of image comparison features available in Appium. These features are available in all drivers and require OpenCV 3 native libs. Also, each feature is able to visualize the comparison result, so you can always track what is going on under the hood to select optimal matching parameters to achieve the best comparison results. Prerequisites OpenCV 3+ native libraries opencv4nodejs npm module: npm i -g opencv4nodejs . By default the preinstall script of this module also downloads and makes all the required OpenCV libs from source, but this requires developer tools to be available on the host system. Appium Server 1.8.0+ Purpose Image comparison might be handy for many automation tasks. For example: - It is necessary to figure out whether the given picture example is present on the screen - It is necessary to calculate coordinates of some predefined on-screen object - It is necessary to verify whether the current on-screen object state is similar to the expected state Feature-based Comparison Performs images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html for more details on this topic. Such comparison is useful in case the resulting image is rotated/scaled in comparison to the original one. Examples // java byte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); FeaturesMatchingResult result = driver .matchImagesFeatures(screenshot, originalImg, new FeaturesMatchingOptions() .withDetectorName(FeatureDetector.ORB) .withGoodMatchesFactor(40) .withMatchFunc(MatchingFunction.BRUTE_FORCE_HAMMING) .withEnabledVisualization()); assertThat(result.getVisualization().length, is(greaterThan(0))); assertThat(result.getCount(), is(greaterThan(0))); assertThat(result.getTotalCount(), is(greaterThan(0))); assertFalse(result.getPoints1().isEmpty()); assertNotNull(result.getRect1()); assertFalse(result.getPoints2().isEmpty()); assertNotNull(result.getRect2()); All the FeaturesMatchingOptions builder methods above contain detailed descriptions in their docstrings. # Ruby image1 = File.read 'first/image/path.png' image2 = File.read 'second/image/path.png' match_result = @driver.match_images_features first_image: image1, second_image: image2 assert_equal %w(points1 rect1 points2 rect2 totalCount count), match_result.keys match_result_visual = @driver.match_images_features first_image: image1, second_image: image2, visualize: true assert_equal %w(points1 rect1 points2 rect2 totalCount count visualization), match_result_visual.keys File.open('match_result_visual.png', 'wb') { |f| f Base64.decode64(match_result_visual['visualization']) } assert File.size? 'match_result_visual.png' Visualization Example Occurrences Lookup Performs images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html for more details on this topic. Such comparison is useful in case the full image is a superset of the partial image. There is a subtle difference between occurrence comparison and feature comparison. The former is to be used when the image to be found is a subset of the target/screenshot. The latter is to be used when the image to be found is basically the same as the target but rotated and/or scaled. Examples // java byte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); OccurrenceMatchingResult result = driver .findImageOccurrence(screenshot, partialImage, new OccurrenceMatchingOptions() .withEnabledVisualization()); assertThat(result.getVisualization().length, is(greaterThan(0))); assertNotNull(result.getRect()); All the OccurrenceMatchingOptions builder methods above contain detailed descriptions in their docstrings. # Ruby image1 = File.read 'first/image/path.png' image2 = File.read 'partial/image/path.png' find_result = @driver.find_image_occurrence full_image: image1, partial_image: image2 assert_equal({ 'rect' = { 'x' = 0, 'y' = 0, 'width' = 750, 'height' = 1334 } }, find_result) find_result_visual = @driver.find_image_occurrence full_image: image1, partial_image: image2, visualize: true assert_equal %w(rect visualization), find_result_visual.keys File.open('find_result_visual.png', 'wb') { |f| f Base64.decode64(find_result_visual['visualization']) } assert File.size? 'find_result_visual.png' // Typescript / Javascript /* Typescsript code for occurrence comparison using the template matching algorithm. It detects if an image is contained in another image (called the template). The image must have the same scale and look the same. However, you can add a scaling transformation beforehand. official doc: https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/image-comparison.md OpenCV algorithm doc: https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html official sample code: https://github.com/justadudewhohacks/opencv4nodejs/blob/master/examples/templateMatching.js You must install opencv4nodejs using the -g option. The Javascript client driver webdriverio does not support (in January 2020) the -image strategy implemented in the Appium server. You will have more power and understanding while using openCV directly. Since the appium server is in Javascript, you can do all it does with opencv in your test suite. The testing framework mocha can be run with typescript to have async/await. You need to run mocha with those options in the right order and with the associated packages installed: NODE_PATH=/path/to/nodejs/lig/node_modules TS_NODE_PROJECT=config/tsconfig_test.json --require ts-node/register --require tsconfig-paths/register You will also need to make a basic config/tsconfig_test.json Note that paths in tsconfig.json does not support absolute paths. Hence, you cannot move the NODE_PATH there. */ import * as path from 'path'; const cv = require(path.join(process.env.NODE_PATH, 'opencv4nodejs')); const isImagePresent = async () = { /// Take screenshot and read the image const screenImagePath = './appium_screenshot1.png'; await driver.saveScreenshot(screenImagePath) const likedImagePath = './occurrence1.png'; // Load images const originalMatPromise = cv.imreadAsync(screenImagePath); const waldoMatPromise = cv.imreadAsync(likedImagePath); const [originalMat, waldoMat] = await Promise.all([originalMatPromise, waldoMatPromise]); // Match template (the brightest locations indicate the highest match) // In the OpenCV doc, the option 5 refers to the algorithm called CV_TM_CCOEFF_NORMED const matched = originalMat.matchTemplate(waldoMat, 5); // Use minMaxLoc to locate the highest value (or lower, depending of the type of matching method) const minMax = matched.minMaxLoc(); const { maxLoc: { x, y } } = minMax; // Draw bounding rectangle originalMat.drawRectangle( new cv.Rect(x, y, waldoMat.cols, waldoMat.rows), new cv.Vec(0, 255, 0), 2, cv.LINE_8 ); // Open result in new window // If the image is too big for your screen, you need to write to a file instead. // Check the source of opencv4nodejs for writing an image to a file. cv.imshow('We\\'ve found Waldo!', originalMat); await cv.waitKey(); // then you know if the image was found by comparing the rectangle with a reference rectangle. // the structure minMax contains the property maxVal that gives the quality of the match // 1 is prefect match, but you may get .999. If you extract an image from the screenshot manually, // you will get an image that matches. }; Visualization Example The highlighted picture at the left bottom corner is the resulting match of lookup. Similarity Calculation Performs images matching to calculate the similarity score between them. The flow there is similar to the one used in findImageOccurrence , but it is mandatory that both images are of equal size. Such comparison is useful in case the original image is a copy of the original one, but with changed content. Examples // java byte[] screenshot1 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); byte[] screenshot2 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); SimilarityMatchingResult result = driver .getImagesSimilarity(screenshot1, screenshot2, new SimilarityMatchingOptions() .withEnabledVisualization()); assertThat(result.getVisualization().length, is(greaterThan(0))); assertThat(result.getScore(), is(greaterThan(0.0))); All the SimilarityMatchingOptions builder methods above contain detailed descriptions in their docstrings. # Ruby image1 = File.read 'first/image/path.png' image2 = File.read 'second/image/path.png' get_images_result = @driver.get_images_similarity first_image: image1, second_image: image2 assert_equal({ 'score' = 0.891606867313385 }, get_images_result) get_images_result_visual = @driver.get_images_similarity first_image: image1, second_image: image2, visualize: true assert_equal %w(score visualization), get_images_result_visual.keys File.open('get_images_result_visual.png', 'wb') { |f| f Base64.decode64(get_images_result_visual['visualization']) } assert File.size? 'get_images_result_visual.png' Visualization Example The similarity score for two pictures above is ~0.98.","title":"Image Comparison"},{"location":"writing-running-appium/image-comparison/#image-comparison-features","text":"This article describes the set of image comparison features available in Appium. These features are available in all drivers and require OpenCV 3 native libs. Also, each feature is able to visualize the comparison result, so you can always track what is going on under the hood to select optimal matching parameters to achieve the best comparison results.","title":"Image Comparison Features"},{"location":"writing-running-appium/image-comparison/#prerequisites","text":"OpenCV 3+ native libraries opencv4nodejs npm module: npm i -g opencv4nodejs . By default the preinstall script of this module also downloads and makes all the required OpenCV libs from source, but this requires developer tools to be available on the host system. Appium Server 1.8.0+","title":"Prerequisites"},{"location":"writing-running-appium/image-comparison/#purpose","text":"Image comparison might be handy for many automation tasks. For example: - It is necessary to figure out whether the given picture example is present on the screen - It is necessary to calculate coordinates of some predefined on-screen object - It is necessary to verify whether the current on-screen object state is similar to the expected state","title":"Purpose"},{"location":"writing-running-appium/image-comparison/#feature-based-comparison","text":"Performs images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html for more details on this topic. Such comparison is useful in case the resulting image is rotated/scaled in comparison to the original one.","title":"Feature-based Comparison"},{"location":"writing-running-appium/image-comparison/#examples","text":"// java byte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); FeaturesMatchingResult result = driver .matchImagesFeatures(screenshot, originalImg, new FeaturesMatchingOptions() .withDetectorName(FeatureDetector.ORB) .withGoodMatchesFactor(40) .withMatchFunc(MatchingFunction.BRUTE_FORCE_HAMMING) .withEnabledVisualization()); assertThat(result.getVisualization().length, is(greaterThan(0))); assertThat(result.getCount(), is(greaterThan(0))); assertThat(result.getTotalCount(), is(greaterThan(0))); assertFalse(result.getPoints1().isEmpty()); assertNotNull(result.getRect1()); assertFalse(result.getPoints2().isEmpty()); assertNotNull(result.getRect2()); All the FeaturesMatchingOptions builder methods above contain detailed descriptions in their docstrings. # Ruby image1 = File.read 'first/image/path.png' image2 = File.read 'second/image/path.png' match_result = @driver.match_images_features first_image: image1, second_image: image2 assert_equal %w(points1 rect1 points2 rect2 totalCount count), match_result.keys match_result_visual = @driver.match_images_features first_image: image1, second_image: image2, visualize: true assert_equal %w(points1 rect1 points2 rect2 totalCount count visualization), match_result_visual.keys File.open('match_result_visual.png', 'wb') { |f| f Base64.decode64(match_result_visual['visualization']) } assert File.size? 'match_result_visual.png'","title":"Examples"},{"location":"writing-running-appium/image-comparison/#visualization-example","text":"","title":"Visualization Example"},{"location":"writing-running-appium/image-comparison/#occurrences-lookup","text":"Performs images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html for more details on this topic. Such comparison is useful in case the full image is a superset of the partial image. There is a subtle difference between occurrence comparison and feature comparison. The former is to be used when the image to be found is a subset of the target/screenshot. The latter is to be used when the image to be found is basically the same as the target but rotated and/or scaled.","title":"Occurrences Lookup"},{"location":"writing-running-appium/image-comparison/#examples_1","text":"// java byte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); OccurrenceMatchingResult result = driver .findImageOccurrence(screenshot, partialImage, new OccurrenceMatchingOptions() .withEnabledVisualization()); assertThat(result.getVisualization().length, is(greaterThan(0))); assertNotNull(result.getRect()); All the OccurrenceMatchingOptions builder methods above contain detailed descriptions in their docstrings. # Ruby image1 = File.read 'first/image/path.png' image2 = File.read 'partial/image/path.png' find_result = @driver.find_image_occurrence full_image: image1, partial_image: image2 assert_equal({ 'rect' = { 'x' = 0, 'y' = 0, 'width' = 750, 'height' = 1334 } }, find_result) find_result_visual = @driver.find_image_occurrence full_image: image1, partial_image: image2, visualize: true assert_equal %w(rect visualization), find_result_visual.keys File.open('find_result_visual.png', 'wb') { |f| f Base64.decode64(find_result_visual['visualization']) } assert File.size? 'find_result_visual.png' // Typescript / Javascript /* Typescsript code for occurrence comparison using the template matching algorithm. It detects if an image is contained in another image (called the template). The image must have the same scale and look the same. However, you can add a scaling transformation beforehand. official doc: https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/image-comparison.md OpenCV algorithm doc: https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html official sample code: https://github.com/justadudewhohacks/opencv4nodejs/blob/master/examples/templateMatching.js You must install opencv4nodejs using the -g option. The Javascript client driver webdriverio does not support (in January 2020) the -image strategy implemented in the Appium server. You will have more power and understanding while using openCV directly. Since the appium server is in Javascript, you can do all it does with opencv in your test suite. The testing framework mocha can be run with typescript to have async/await. You need to run mocha with those options in the right order and with the associated packages installed: NODE_PATH=/path/to/nodejs/lig/node_modules TS_NODE_PROJECT=config/tsconfig_test.json --require ts-node/register --require tsconfig-paths/register You will also need to make a basic config/tsconfig_test.json Note that paths in tsconfig.json does not support absolute paths. Hence, you cannot move the NODE_PATH there. */ import * as path from 'path'; const cv = require(path.join(process.env.NODE_PATH, 'opencv4nodejs')); const isImagePresent = async () = { /// Take screenshot and read the image const screenImagePath = './appium_screenshot1.png'; await driver.saveScreenshot(screenImagePath) const likedImagePath = './occurrence1.png'; // Load images const originalMatPromise = cv.imreadAsync(screenImagePath); const waldoMatPromise = cv.imreadAsync(likedImagePath); const [originalMat, waldoMat] = await Promise.all([originalMatPromise, waldoMatPromise]); // Match template (the brightest locations indicate the highest match) // In the OpenCV doc, the option 5 refers to the algorithm called CV_TM_CCOEFF_NORMED const matched = originalMat.matchTemplate(waldoMat, 5); // Use minMaxLoc to locate the highest value (or lower, depending of the type of matching method) const minMax = matched.minMaxLoc(); const { maxLoc: { x, y } } = minMax; // Draw bounding rectangle originalMat.drawRectangle( new cv.Rect(x, y, waldoMat.cols, waldoMat.rows), new cv.Vec(0, 255, 0), 2, cv.LINE_8 ); // Open result in new window // If the image is too big for your screen, you need to write to a file instead. // Check the source of opencv4nodejs for writing an image to a file. cv.imshow('We\\'ve found Waldo!', originalMat); await cv.waitKey(); // then you know if the image was found by comparing the rectangle with a reference rectangle. // the structure minMax contains the property maxVal that gives the quality of the match // 1 is prefect match, but you may get .999. If you extract an image from the screenshot manually, // you will get an image that matches. };","title":"Examples"},{"location":"writing-running-appium/image-comparison/#visualization-example_1","text":"The highlighted picture at the left bottom corner is the resulting match of lookup.","title":"Visualization Example"},{"location":"writing-running-appium/image-comparison/#similarity-calculation","text":"Performs images matching to calculate the similarity score between them. The flow there is similar to the one used in findImageOccurrence , but it is mandatory that both images are of equal size. Such comparison is useful in case the original image is a copy of the original one, but with changed content.","title":"Similarity Calculation"},{"location":"writing-running-appium/image-comparison/#examples_2","text":"// java byte[] screenshot1 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); byte[] screenshot2 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES)); SimilarityMatchingResult result = driver .getImagesSimilarity(screenshot1, screenshot2, new SimilarityMatchingOptions() .withEnabledVisualization()); assertThat(result.getVisualization().length, is(greaterThan(0))); assertThat(result.getScore(), is(greaterThan(0.0))); All the SimilarityMatchingOptions builder methods above contain detailed descriptions in their docstrings. # Ruby image1 = File.read 'first/image/path.png' image2 = File.read 'second/image/path.png' get_images_result = @driver.get_images_similarity first_image: image1, second_image: image2 assert_equal({ 'score' = 0.891606867313385 }, get_images_result) get_images_result_visual = @driver.get_images_similarity first_image: image1, second_image: image2, visualize: true assert_equal %w(score visualization), get_images_result_visual.keys File.open('get_images_result_visual.png', 'wb') { |f| f Base64.decode64(get_images_result_visual['visualization']) } assert File.size? 'get_images_result_visual.png'","title":"Examples"},{"location":"writing-running-appium/image-comparison/#visualization-example_2","text":"The similarity score for two pictures above is ~0.98.","title":"Visualization Example"},{"location":"writing-running-appium/running-tests/","text":"Running Tests Preparing your app for test (iOS) Test apps run on the simulator have to be compiled specifically for the simulator, for example by executing the following command in the Xcode project (you can use xcodebuild -showsdks to see the list of available SDKs): xcodebuild -sdk iphonesimulator6.0 This creates a build/Release-iphonesimulator directory in your Xcode project that contains the .app package that you'll need to communicate with the Appium server. If you want, you can zip up the .app directory into a .zip file! Appium will unpack it for you. Nice if you're not using Appium locally. Preparing your app for test (Android) Nothing in particular needs to be done to run your .apk using Appium. If you want to zip it up, you can. Preparing your app for test (Windows) Nothing in particular needs to be done to run your test. Running your test app with Appium (iOS) The best way to see what to do currently is to look at the example tests: Node.js | Python | Ruby | Java Basically, first make sure Appium is running: node . Then script your WebDriver test, sending in the following desired capabilities: // javascript { platformName: 'iOS', platformVersion: '7.1', deviceName: 'iPhone Simulator', app: myApp } # python { 'platformName': 'iOS', 'platformVersion': '7.1', 'deviceName': 'iPhone Simulator', 'app': myApp } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, iOS ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 7.1 ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, iPhone Simulator ); capabilities.setCapability(MobileCapabilityType.APP, myApp); In this set of capabilities, myApp must be either: A local absolute path to your simulator-compiled .app directory or .zip A url of a zip file containing your .app package A path to one of the sample app relative to the appium install root Using your WebDriver library of choice, set the remote session to use these capabilities and connect to the server running at port 4723 of localhost (or whatever host and port you specified when you started Appium). You should be all set now! Running your test app with Appium (Android) First, make sure you have one and only one Android emulator or device connected. If you run adb devices , for example, you should see one device connected. This is the device Appium will use for tests. Of course, to have a device connected, you'll need to have made an Android AVD. If the Android SDK tools are on your path, you can simply run: emulator -avd MyAvdName And wait for the android emulator to finish launching. Sometimes, for various reasons, adb gets stuck. If it's not showing any connected devices or otherwise failing, you can restart it by running: adb kill-server adb devices Now, make sure Appium is running: node . There are several ways to start an Appium application (it works exactly the same as when the application is started via adb): apk or zip only, the default activity will be launched ('app' capability) apk + activity ('app' + 'appActivity' capabilities) apk + activity + intent ('app' + 'appActivity' + 'appIntent' capabilities) ... Activities may be specified in the following way: absolute (e.g. appActivity: 'com.helloworld.SayHello'). relative to appPackage (e.g. appPackage: 'com.helloworld', appActivity='.SayHello') If the 'appWaitPackage' and 'appWaitActivity' caps are specified, Appium automatically spins until those activities are launched. You may specify multiple wait activities for instance: appActivity: 'com.splash.SplashScreen' appPackage: 'com.splash' appActivity: '.SplashScreen' appPackage: 'com.splash' appActivity: '.SplashScreen,.LandingPage,com.why.GoThere' If you are not sure what activity are configured in your apk, you can proceed in one of the following ways: Mac/Linux: 'adb shell dumpsys window windows | grep mFocusedApp' In the Ruby console: 'adb shell dumpsys window windows`.each_line.grep(/mFocusedApp/).first.strip' In Windows terminal run 'adb shell dumpsys window windows' and manually look for the mFocusedApp line. Then script your WebDriver test, sending in the following desired capabilities: // javascript { platformName: 'Android', platformVersion: '4.4', deviceName: 'Android Emulator', app: myApp } # python { 'platformName': 'Android', 'platformVersion': '4.4', 'deviceName': 'Android Emulator', 'app': myApp } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, Android ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 4.4 ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, Android Emulator ); capabilities.setCapability(MobileCapabilityType.APP, myApp); In this set of capabilities, myApp must be either: A local absolute path to your .apk or a .zip of it A url of a zip file containing your .apk A path to one of the sample app relative to the appium install root Using your WebDriver library of choice, set the remote session to use these capabilities and connect to the server running at port 4723 of localhost (or whatever host and port you specified when you started Appium). You should be all set now! Running your test app with Appium (Windows) Simply ensure that Appium is listening, and run your test with your test runner of choice. See our samples for details.","title":"Running Tests"},{"location":"writing-running-appium/running-tests/#running-tests","text":"","title":"Running Tests"},{"location":"writing-running-appium/running-tests/#preparing-your-app-for-test-ios","text":"Test apps run on the simulator have to be compiled specifically for the simulator, for example by executing the following command in the Xcode project (you can use xcodebuild -showsdks to see the list of available SDKs): xcodebuild -sdk iphonesimulator6.0 This creates a build/Release-iphonesimulator directory in your Xcode project that contains the .app package that you'll need to communicate with the Appium server. If you want, you can zip up the .app directory into a .zip file! Appium will unpack it for you. Nice if you're not using Appium locally.","title":"Preparing your app for test (iOS)"},{"location":"writing-running-appium/running-tests/#preparing-your-app-for-test-android","text":"Nothing in particular needs to be done to run your .apk using Appium. If you want to zip it up, you can.","title":"Preparing your app for test (Android)"},{"location":"writing-running-appium/running-tests/#preparing-your-app-for-test-windows","text":"Nothing in particular needs to be done to run your test.","title":"Preparing your app for test (Windows)"},{"location":"writing-running-appium/running-tests/#running-your-test-app-with-appium-ios","text":"The best way to see what to do currently is to look at the example tests: Node.js | Python | Ruby | Java Basically, first make sure Appium is running: node . Then script your WebDriver test, sending in the following desired capabilities: // javascript { platformName: 'iOS', platformVersion: '7.1', deviceName: 'iPhone Simulator', app: myApp } # python { 'platformName': 'iOS', 'platformVersion': '7.1', 'deviceName': 'iPhone Simulator', 'app': myApp } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, iOS ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 7.1 ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, iPhone Simulator ); capabilities.setCapability(MobileCapabilityType.APP, myApp); In this set of capabilities, myApp must be either: A local absolute path to your simulator-compiled .app directory or .zip A url of a zip file containing your .app package A path to one of the sample app relative to the appium install root Using your WebDriver library of choice, set the remote session to use these capabilities and connect to the server running at port 4723 of localhost (or whatever host and port you specified when you started Appium). You should be all set now!","title":"Running your test app with Appium (iOS)"},{"location":"writing-running-appium/running-tests/#running-your-test-app-with-appium-android","text":"First, make sure you have one and only one Android emulator or device connected. If you run adb devices , for example, you should see one device connected. This is the device Appium will use for tests. Of course, to have a device connected, you'll need to have made an Android AVD. If the Android SDK tools are on your path, you can simply run: emulator -avd MyAvdName And wait for the android emulator to finish launching. Sometimes, for various reasons, adb gets stuck. If it's not showing any connected devices or otherwise failing, you can restart it by running: adb kill-server adb devices Now, make sure Appium is running: node . There are several ways to start an Appium application (it works exactly the same as when the application is started via adb): apk or zip only, the default activity will be launched ('app' capability) apk + activity ('app' + 'appActivity' capabilities) apk + activity + intent ('app' + 'appActivity' + 'appIntent' capabilities) ... Activities may be specified in the following way: absolute (e.g. appActivity: 'com.helloworld.SayHello'). relative to appPackage (e.g. appPackage: 'com.helloworld', appActivity='.SayHello') If the 'appWaitPackage' and 'appWaitActivity' caps are specified, Appium automatically spins until those activities are launched. You may specify multiple wait activities for instance: appActivity: 'com.splash.SplashScreen' appPackage: 'com.splash' appActivity: '.SplashScreen' appPackage: 'com.splash' appActivity: '.SplashScreen,.LandingPage,com.why.GoThere' If you are not sure what activity are configured in your apk, you can proceed in one of the following ways: Mac/Linux: 'adb shell dumpsys window windows | grep mFocusedApp' In the Ruby console: 'adb shell dumpsys window windows`.each_line.grep(/mFocusedApp/).first.strip' In Windows terminal run 'adb shell dumpsys window windows' and manually look for the mFocusedApp line. Then script your WebDriver test, sending in the following desired capabilities: // javascript { platformName: 'Android', platformVersion: '4.4', deviceName: 'Android Emulator', app: myApp } # python { 'platformName': 'Android', 'platformVersion': '4.4', 'deviceName': 'Android Emulator', 'app': myApp } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, Android ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 4.4 ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, Android Emulator ); capabilities.setCapability(MobileCapabilityType.APP, myApp); In this set of capabilities, myApp must be either: A local absolute path to your .apk or a .zip of it A url of a zip file containing your .apk A path to one of the sample app relative to the appium install root Using your WebDriver library of choice, set the remote session to use these capabilities and connect to the server running at port 4723 of localhost (or whatever host and port you specified when you started Appium). You should be all set now!","title":"Running your test app with Appium (Android)"},{"location":"writing-running-appium/running-tests/#running-your-test-app-with-appium-windows","text":"Simply ensure that Appium is listening, and run your test with your test runner of choice. See our samples for details.","title":"Running your test app with Appium (Windows)"},{"location":"writing-running-appium/security/","text":"Security The Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, if you're running your own Appium server locally, and not sharing it with anyone else, and don't expose Appium's port to the wider internet, you should have nothing to worry about, and can safely enable all Appium's features. But because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to opt-in to these features explicitly. For security reasons, Appium client sessions can not request feature enablement via capabilities. This is the responsibility of the one who launches the Appium server. Security Server Args The server args doc outlines three relevant arguments which may be passed to Appium when starting it from the command line: --relaxed-security : Setting this flag turns on all insecure features (unless blocked by --deny-insecure ; see below) --allow-insecure : Setting this flag to a comma-separated list of feature names or a path to a file containing a feature list (each name on a separate line) will allow only the features listed. For example, --allow-insecure=adb_shell will cause only the ADB shell execution feature to be enabled. This is true unless --relaxed-security is also used, in which case all features will still be enabled. It makes no sense to combine this flag with --relaxed-security . --deny-insecure : This flag can likewise be set to a comma-separated list of feature names, or a path to a feature file. Any features listed here will be disabled , regardless of whether --relaxed-security is set and regardless of whether the names are also listed with --allow-insecure . Insecure Features Each Appium driver is responsible for its own security, and can create its own feature names. These are the features and names we know about for the officially-supported Appium drivers. Feature Name Description AutomationName get_server_logs Allows retrieving of Appium server logs via the Webdriver log interface IOS, XCUITest, Android, UiAutomator2, Espresso adb_shell Allows execution of arbitrary shell commands via ADB, using the mobile: shell command Android, UiAutomator2, Espresso shutdown_other_sims Allow any session to use a capability to shutdown any running simulators on the host XCUITest perf_record Allow recording the system performance and other metrics of the simulator XCUITest record_audio Allow recording of host machine audio inputs XCUITest chromedriver_autodownload Allow to download ChromeDriver automatically if Appium does not have proper the version Android, UiAutomator2, Espresso execute_driver_script Allows to send a request which has multiple Appium commands. Read documentation for more details All Please see also below links. They might have additional flags. appium-android-driver appium-xcuitest-driver appium-mac-driver appium-windows-driver For Driver Developers 2 methods exist on objects of classes which extend BaseDriver , which make the life of the driver developer easier when checking availability of insecure features: this.isFeatureEnabled(name) : returns true or false depending on whether the server security flags combine to allow the feature in question. this.ensureFeatureEnabled(name) : throws an error with the feature name and a link to this doc if the feature in question is not allowed.","title":"Server Security"},{"location":"writing-running-appium/security/#security","text":"The Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, if you're running your own Appium server locally, and not sharing it with anyone else, and don't expose Appium's port to the wider internet, you should have nothing to worry about, and can safely enable all Appium's features. But because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to opt-in to these features explicitly. For security reasons, Appium client sessions can not request feature enablement via capabilities. This is the responsibility of the one who launches the Appium server.","title":"Security"},{"location":"writing-running-appium/security/#security-server-args","text":"The server args doc outlines three relevant arguments which may be passed to Appium when starting it from the command line: --relaxed-security : Setting this flag turns on all insecure features (unless blocked by --deny-insecure ; see below) --allow-insecure : Setting this flag to a comma-separated list of feature names or a path to a file containing a feature list (each name on a separate line) will allow only the features listed. For example, --allow-insecure=adb_shell will cause only the ADB shell execution feature to be enabled. This is true unless --relaxed-security is also used, in which case all features will still be enabled. It makes no sense to combine this flag with --relaxed-security . --deny-insecure : This flag can likewise be set to a comma-separated list of feature names, or a path to a feature file. Any features listed here will be disabled , regardless of whether --relaxed-security is set and regardless of whether the names are also listed with --allow-insecure .","title":"Security Server Args"},{"location":"writing-running-appium/security/#insecure-features","text":"Each Appium driver is responsible for its own security, and can create its own feature names. These are the features and names we know about for the officially-supported Appium drivers. Feature Name Description AutomationName get_server_logs Allows retrieving of Appium server logs via the Webdriver log interface IOS, XCUITest, Android, UiAutomator2, Espresso adb_shell Allows execution of arbitrary shell commands via ADB, using the mobile: shell command Android, UiAutomator2, Espresso shutdown_other_sims Allow any session to use a capability to shutdown any running simulators on the host XCUITest perf_record Allow recording the system performance and other metrics of the simulator XCUITest record_audio Allow recording of host machine audio inputs XCUITest chromedriver_autodownload Allow to download ChromeDriver automatically if Appium does not have proper the version Android, UiAutomator2, Espresso execute_driver_script Allows to send a request which has multiple Appium commands. Read documentation for more details All Please see also below links. They might have additional flags. appium-android-driver appium-xcuitest-driver appium-mac-driver appium-windows-driver","title":"Insecure Features"},{"location":"writing-running-appium/security/#for-driver-developers","text":"2 methods exist on objects of classes which extend BaseDriver , which make the life of the driver developer easier when checking availability of insecure features: this.isFeatureEnabled(name) : returns true or false depending on whether the server security flags combine to allow the feature in question. this.ensureFeatureEnabled(name) : throws an error with the feature name and a link to this doc if the feature in question is not allowed.","title":"For Driver Developers"},{"location":"writing-running-appium/server-args/","text":"Appium server arguments Since Appium 1.5, many server arguments have been deprecated in favor of the --default-capabilities flag . Usage: node . [flags] Server flags All flags are optional, but some are required in conjunction with certain others. Flag Default Description Example --shell null Enter REPL mode --allow-cors false Turn on CORS compatibility mode, which will allow connections to the Appium server from within websites hosted on any domain. Be careful when enabling this feature, since there is a potential security risk if you visit a website that uses a cross-domain request to initiate or introspect sessions on your running Appium server. --ipa null (IOS-only) abs path to compiled .ipa file --ipa /abs/path/to/my.ipa -a , --address 0.0.0.0 IP Address to listen on --address 0.0.0.0 -p , --port 4723 port to listen on --port 4723 -pa , --base-path /wd/hub Initial path segment where the Appium/WebDriver API will be hosted. Every endpoint will be behind this segment. --base-path /my/path/prefix -ca , --callback-address null callback IP Address (default: same as --address) --callback-address 127.0.0.1 -cp , --callback-port null callback port (default: same as port) --callback-port 4723 -bp , --bootstrap-port 4724 (Android-only) port to use on device to talk to Appium --bootstrap-port 4724 -r , --backend-retries 3 (iOS-only) How many times to retry launching Instruments before saying it crashed or timed out --backend-retries 3 --session-override false Enables session override (clobbering) -l , --pre-launch false Pre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity) -g , --log null Also send log output to this file --log /path/to/appium.log --log-level debug Set the server log level for console and logfile (specified as console-level:logfile-level , with both being the same if only one value is supplied). Possible values are debug , info , warn , error , which are progressively less verbose. --log-level error:debug --log-timestamp false Show timestamps in console output --local-timezone false Use local timezone for timestamps --log-no-colors false Do not use colors in console output -G , --webhook null Also send log output to this HTTP listener --webhook localhost:9876 --safari false (IOS-Only) Use the safari app --default-device , -dd false (IOS-Simulator-only) use the default simulator that instruments launches on its own --force-iphone false (IOS-only) Use the iPhone Simulator no matter what the app wants --force-ipad false (IOS-only) Use the iPad Simulator no matter what the app wants --tracetemplate null (IOS-only) .tracetemplate file to use with Instruments --tracetemplate /Users/me/Automation.tracetemplate --instruments null (IOS-only) path to instruments binary --instruments /path/to/instruments --nodeconfig null Configuration JSON file to register appium with selenium grid --nodeconfig /abs/path/to/nodeconfig.json -ra , --robot-address 0.0.0.0 IP Address of robot --robot-address 0.0.0.0 -rp , --robot-port -1 port for robot --robot-port 4242 --chromedriver-port 9515 Port upon which ChromeDriver will run --chromedriver-port 9515 --chromedriver-executable null ChromeDriver executable full path --show-config false Show info about the appium server configuration and exit --no-perms-check false Bypass Appium's checks to ensure we can read/write necessary files --strict-caps false Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device --isolate-sim-device false Xcode 6 has a bug on some platforms where a certain simulator can only be launched without error if all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible for using simctl or xcode to manage the categories of devices used with Appium. --tmp null Absolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\\Windows\\Temp --trace-dir null Absolute path to directory Appium use to save ios instruments traces, defaults to /appium-instruments --debug-log-spacing false Add exaggerated spacing in logs to help with visual inspection --suppress-adb-kill-server false (Android-only) If set, prevents Appium from killing the adb server instance --async-trace false Add long stack traces to log entries. Recommended for debugging only. --webkit-debug-proxy-port 27753 (IOS-only) Local port used for communication with ios-webkit-debug-proxy --webkit-debug-proxy-port 27753 -dc , --default-capabilities {} Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. --default-capabilities [ '{\"app\": \"myapp.app\", \"deviceName\": \"iPhone Simulator\"}' | /path/to/caps.json ] --reboot false - (Android-only) reboot emulator after each session and kill it at the end --command-timeout 60 [DEPRECATED] No effect. This used to be the default command timeout for the server to use for all sessions (in seconds and should be less than 2147483). Use newCommandTimeout cap instead -k , --keep-artifacts false [DEPRECATED] - no effect, trace is now in tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag. --platform-name null [DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS --platform-name iOS --platform-version null [DEPRECATED] - Version of the mobile platform --platform-version 7.1 --automation-name null [DEPRECATED] - Name of the automation tool: Appium, XCUITest, etc. --automation-name Appium --device-name null [DEPRECATED] - Name of the mobile device to use --device-name iPhone Retina (4-inch), Android Emulator --browser-name null [DEPRECATED] - Name of the mobile browser: Safari or Chrome --browser-name Safari --app null [DEPRECATED] - IOS: abs path to simulator-compiled .app file or the bundle_id of the desired target on device; Android: abs path to .apk file --app /abs/path/to/my.app -lt , --launch-timeout 90000 [DEPRECATED] - (iOS-only) how long in ms to wait for Instruments to launch --language null [DEPRECATED] - Language for the iOS simulator / Android Emulator --language en --locale null [DEPRECATED] - Locale for the iOS simulator / Android Emulator --locale en_US -U , --udid null [DEPRECATED] - Unique device identifier of the connected physical device --udid 1adsf-sdfas-asdf-123sdf --orientation null [DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation --orientation LANDSCAPE --no-reset false [DEPRECATED] - Do not reset app state between sessions (IOS: do not delete app plist files; Android: do not uninstall app before new session) --full-reset false [DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete. --app-pkg null [DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example.android.myApp) --app-pkg com.example.android.myApp --app-activity null [DEPRECATED] - (Android-only) Activity name for the Android activity you want to launch from your package (e.g., MainActivity) --app-activity MainActivity --app-wait-package false [DEPRECATED] - (Android-only) Package name for the Android activity you want to wait for (e.g., com.example.android.myApp) --app-wait-package com.example.android.myApp --app-wait-activity false [DEPRECATED] - (Android-only) Activity name for the Android activity you want to wait for (e.g., SplashActivity) --app-wait-activity SplashActivity --device-ready-timeout 5 [DEPRECATED] - (Android-only) Timeout in seconds while waiting for device to become ready --device-ready-timeout 5 --android-coverage false [DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w --android-coverage com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation --avd null [DEPRECATED] - (Android-only) Name of the avd to launch --avd @default --avd-args null [DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd --avd-args -no-snapshot-load --use-keystore false [DEPRECATED] - (Android-only) When set the keystore will be used to sign apks. --keystore-path user /.android/debug.keystore [DEPRECATED] - (Android-only) Path to keystore --keystore-password android [DEPRECATED] - (Android-only) Password to keystore --key-alias androiddebugkey [DEPRECATED] - (Android-only) Key alias --key-password android [DEPRECATED] - (Android-only) Key password --intent-action android.intent.action.MAIN [DEPRECATED] - (Android-only) Intent action which will be used to start activity --intent-action android.intent.action.MAIN --intent-category android.intent.category.LAUNCHER [DEPRECATED] - (Android-only) Intent category which will be used to start activity --intent-category android.intent.category.APP_CONTACTS --intent-flags 0x10200000 [DEPRECATED] - (Android-only) Flags that will be used to start activity --intent-flags 0x10200000 --intent-args null [DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity --intent-args 0x10200000 --dont-stop-app-on-reset false [DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart --calendar-format null [DEPRECATED] - (IOS-only) calendar format for the iOS simulator --calendar-format gregorian --native-instruments-lib false [DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this in appium. If you do not want it patched, pass in this flag. --keep-keychains false [DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions --localizable-strings-dir en.lproj [DEPRECATED] - (IOS-only) the relative path of the dir where Localizable.strings file resides --localizable-strings-dir en.lproj --show-ios-log false [DEPRECATED] - (IOS-only) if set, the iOS system log will be written to the console --relaxed-security false Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it is not the case if a client could potentially break out of the session sandbox. Can override enabling of specific features with --deny-insecure. See also the security doc --allow-insecure [] Allow a list of features which are considered insecure and must be turned on explicitly by system administrators. Feature names are documented by the relevant server/driver. Should be a comma-separated list, or a path to a filename containing one feature name per line. Features listed in --deny-insecure will override anything listed here. Does not make sense to use in conjunction with --relaxed-security. See also the security doc --allow-insecure=foo,bar --deny-insecure [] Specify a list of features which will never be allowed to run, even if --relaxed-security is turned on, and even if feature names are listed with --allow-insecure. Should be a comma-separated list, or a path to a filename containing one feature name per line. See also the security doc --deny-insecure=foo,bar --log-filters null Specify a full path to a JSON file containing one or more log filtering rules. This feature is useful for cases when it is necessary to obfuscate sensitive information, which may be present in server log records, like passwords or access tokens. The format of each rule is described in https://github.com/appium/appium-support/blob/master/lib/log-internal.js. An exception will be thrown on server startup if any of the rules has issues. --log-filters=/home/config.json","title":"CLI Arguments"},{"location":"writing-running-appium/server-args/#appium-server-arguments","text":"Since Appium 1.5, many server arguments have been deprecated in favor of the --default-capabilities flag . Usage: node . [flags]","title":"Appium server arguments"},{"location":"writing-running-appium/server-args/#server-flags","text":"All flags are optional, but some are required in conjunction with certain others. Flag Default Description Example --shell null Enter REPL mode --allow-cors false Turn on CORS compatibility mode, which will allow connections to the Appium server from within websites hosted on any domain. Be careful when enabling this feature, since there is a potential security risk if you visit a website that uses a cross-domain request to initiate or introspect sessions on your running Appium server. --ipa null (IOS-only) abs path to compiled .ipa file --ipa /abs/path/to/my.ipa -a , --address 0.0.0.0 IP Address to listen on --address 0.0.0.0 -p , --port 4723 port to listen on --port 4723 -pa , --base-path /wd/hub Initial path segment where the Appium/WebDriver API will be hosted. Every endpoint will be behind this segment. --base-path /my/path/prefix -ca , --callback-address null callback IP Address (default: same as --address) --callback-address 127.0.0.1 -cp , --callback-port null callback port (default: same as port) --callback-port 4723 -bp , --bootstrap-port 4724 (Android-only) port to use on device to talk to Appium --bootstrap-port 4724 -r , --backend-retries 3 (iOS-only) How many times to retry launching Instruments before saying it crashed or timed out --backend-retries 3 --session-override false Enables session override (clobbering) -l , --pre-launch false Pre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity) -g , --log null Also send log output to this file --log /path/to/appium.log --log-level debug Set the server log level for console and logfile (specified as console-level:logfile-level , with both being the same if only one value is supplied). Possible values are debug , info , warn , error , which are progressively less verbose. --log-level error:debug --log-timestamp false Show timestamps in console output --local-timezone false Use local timezone for timestamps --log-no-colors false Do not use colors in console output -G , --webhook null Also send log output to this HTTP listener --webhook localhost:9876 --safari false (IOS-Only) Use the safari app --default-device , -dd false (IOS-Simulator-only) use the default simulator that instruments launches on its own --force-iphone false (IOS-only) Use the iPhone Simulator no matter what the app wants --force-ipad false (IOS-only) Use the iPad Simulator no matter what the app wants --tracetemplate null (IOS-only) .tracetemplate file to use with Instruments --tracetemplate /Users/me/Automation.tracetemplate --instruments null (IOS-only) path to instruments binary --instruments /path/to/instruments --nodeconfig null Configuration JSON file to register appium with selenium grid --nodeconfig /abs/path/to/nodeconfig.json -ra , --robot-address 0.0.0.0 IP Address of robot --robot-address 0.0.0.0 -rp , --robot-port -1 port for robot --robot-port 4242 --chromedriver-port 9515 Port upon which ChromeDriver will run --chromedriver-port 9515 --chromedriver-executable null ChromeDriver executable full path --show-config false Show info about the appium server configuration and exit --no-perms-check false Bypass Appium's checks to ensure we can read/write necessary files --strict-caps false Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device --isolate-sim-device false Xcode 6 has a bug on some platforms where a certain simulator can only be launched without error if all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible for using simctl or xcode to manage the categories of devices used with Appium. --tmp null Absolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\\Windows\\Temp --trace-dir null Absolute path to directory Appium use to save ios instruments traces, defaults to /appium-instruments --debug-log-spacing false Add exaggerated spacing in logs to help with visual inspection --suppress-adb-kill-server false (Android-only) If set, prevents Appium from killing the adb server instance --async-trace false Add long stack traces to log entries. Recommended for debugging only. --webkit-debug-proxy-port 27753 (IOS-only) Local port used for communication with ios-webkit-debug-proxy --webkit-debug-proxy-port 27753 -dc , --default-capabilities {} Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. --default-capabilities [ '{\"app\": \"myapp.app\", \"deviceName\": \"iPhone Simulator\"}' | /path/to/caps.json ] --reboot false - (Android-only) reboot emulator after each session and kill it at the end --command-timeout 60 [DEPRECATED] No effect. This used to be the default command timeout for the server to use for all sessions (in seconds and should be less than 2147483). Use newCommandTimeout cap instead -k , --keep-artifacts false [DEPRECATED] - no effect, trace is now in tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag. --platform-name null [DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS --platform-name iOS --platform-version null [DEPRECATED] - Version of the mobile platform --platform-version 7.1 --automation-name null [DEPRECATED] - Name of the automation tool: Appium, XCUITest, etc. --automation-name Appium --device-name null [DEPRECATED] - Name of the mobile device to use --device-name iPhone Retina (4-inch), Android Emulator --browser-name null [DEPRECATED] - Name of the mobile browser: Safari or Chrome --browser-name Safari --app null [DEPRECATED] - IOS: abs path to simulator-compiled .app file or the bundle_id of the desired target on device; Android: abs path to .apk file --app /abs/path/to/my.app -lt , --launch-timeout 90000 [DEPRECATED] - (iOS-only) how long in ms to wait for Instruments to launch --language null [DEPRECATED] - Language for the iOS simulator / Android Emulator --language en --locale null [DEPRECATED] - Locale for the iOS simulator / Android Emulator --locale en_US -U , --udid null [DEPRECATED] - Unique device identifier of the connected physical device --udid 1adsf-sdfas-asdf-123sdf --orientation null [DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation --orientation LANDSCAPE --no-reset false [DEPRECATED] - Do not reset app state between sessions (IOS: do not delete app plist files; Android: do not uninstall app before new session) --full-reset false [DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete. --app-pkg null [DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example.android.myApp) --app-pkg com.example.android.myApp --app-activity null [DEPRECATED] - (Android-only) Activity name for the Android activity you want to launch from your package (e.g., MainActivity) --app-activity MainActivity --app-wait-package false [DEPRECATED] - (Android-only) Package name for the Android activity you want to wait for (e.g., com.example.android.myApp) --app-wait-package com.example.android.myApp --app-wait-activity false [DEPRECATED] - (Android-only) Activity name for the Android activity you want to wait for (e.g., SplashActivity) --app-wait-activity SplashActivity --device-ready-timeout 5 [DEPRECATED] - (Android-only) Timeout in seconds while waiting for device to become ready --device-ready-timeout 5 --android-coverage false [DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w --android-coverage com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation --avd null [DEPRECATED] - (Android-only) Name of the avd to launch --avd @default --avd-args null [DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd --avd-args -no-snapshot-load --use-keystore false [DEPRECATED] - (Android-only) When set the keystore will be used to sign apks. --keystore-path user /.android/debug.keystore [DEPRECATED] - (Android-only) Path to keystore --keystore-password android [DEPRECATED] - (Android-only) Password to keystore --key-alias androiddebugkey [DEPRECATED] - (Android-only) Key alias --key-password android [DEPRECATED] - (Android-only) Key password --intent-action android.intent.action.MAIN [DEPRECATED] - (Android-only) Intent action which will be used to start activity --intent-action android.intent.action.MAIN --intent-category android.intent.category.LAUNCHER [DEPRECATED] - (Android-only) Intent category which will be used to start activity --intent-category android.intent.category.APP_CONTACTS --intent-flags 0x10200000 [DEPRECATED] - (Android-only) Flags that will be used to start activity --intent-flags 0x10200000 --intent-args null [DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity --intent-args 0x10200000 --dont-stop-app-on-reset false [DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart --calendar-format null [DEPRECATED] - (IOS-only) calendar format for the iOS simulator --calendar-format gregorian --native-instruments-lib false [DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this in appium. If you do not want it patched, pass in this flag. --keep-keychains false [DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions --localizable-strings-dir en.lproj [DEPRECATED] - (IOS-only) the relative path of the dir where Localizable.strings file resides --localizable-strings-dir en.lproj --show-ios-log false [DEPRECATED] - (IOS-only) if set, the iOS system log will be written to the console --relaxed-security false Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it is not the case if a client could potentially break out of the session sandbox. Can override enabling of specific features with --deny-insecure. See also the security doc --allow-insecure [] Allow a list of features which are considered insecure and must be turned on explicitly by system administrators. Feature names are documented by the relevant server/driver. Should be a comma-separated list, or a path to a filename containing one feature name per line. Features listed in --deny-insecure will override anything listed here. Does not make sense to use in conjunction with --relaxed-security. See also the security doc --allow-insecure=foo,bar --deny-insecure [] Specify a list of features which will never be allowed to run, even if --relaxed-security is turned on, and even if feature names are listed with --allow-insecure. Should be a comma-separated list, or a path to a filename containing one feature name per line. See also the security doc --deny-insecure=foo,bar --log-filters null Specify a full path to a JSON file containing one or more log filtering rules. This feature is useful for cases when it is necessary to obfuscate sensitive information, which may be present in server log records, like passwords or access tokens. The format of each rule is described in https://github.com/appium/appium-support/blob/master/lib/log-internal.js. An exception will be thrown on server startup if any of the rules has issues. --log-filters=/home/config.json","title":"Server flags"},{"location":"writing-running-appium/touch-actions/","text":"Automating mobile gestures While the Selenium WebDriver spec has support for certain kinds of mobile interaction, its parameters are not always easily mappable to the functionality that the underlying device automation (like UIAutomation in the case of iOS) provides. To that end, Appium implements the new TouchAction / MultiAction API defined in the newest version of the spec ( https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1 ). Note that this is different from the earlier version of the TouchAction API in the original JSON Wire Protocol. These APIs allow you to build up arbitrary gestures with multiple actuators. Please see the Appium client docs for your language in order to find examples of using this API. Note for W3C actions W3C actions is also available in some drivers such as XCUITest, UIA2, Espresso and Windows. W3C actions are implemented to the best of the limitations of the operating systems' test frameworks. e.g. WDA cannot handle zero wait PR . API doc and API docs of each client help to understand how to call them. An Overview of the TouchAction / MultiAction API TouchAction TouchAction objects contain a chain of events. In all the appium client libraries, touch objects are created and are given a chain of events. The available events from the spec are: * press * release * moveTo * tap * wait * longPress * cancel * perform Here's an example of creating an action in pseudocode: TouchAction().press(el0).moveTo(el1).release() The above simulates a user pressing down on an element, sliding their finger to another position, and removing their finger from the screen. Appium performs the events in sequence. You can add a wait event to control the timing of the gesture. moveTo coordinates are now absolute to the current position. For example, dragging from 100,100 to 200,200 can be achieved by: .press(100,100) // Start at 100,100 .moveTo(200,200) // Passing absolute values of 200,200 ending up at 200,200 The appium client libraries have different ways of implementing this, for example: you can pass in coordinates or an element to a moveTo event. Passing both coordinates and an element will treat the coordinates as relative to the element's position, rather than absolute. Calling the perform event sends the entire sequence of events to appium, and the touch gesture is run on your device. MultiTouch MultiTouch objects are collections of TouchActions. MultiTouch gestures only have two methods, add , and perform . add is used to add another TouchAction to this MultiTouch. When perform is called, all the TouchActions which were added to the MultiTouch are sent to appium and performed as if they happened at the same time. Appium first performs the first event of all TouchActions together, then the second, etc. Pseudocode example of tapping with two fingers: action0 = TouchAction().tap(el) action1 = TouchAction().tap(el) MultiAction().add(action0).add(action1).perform() Bugs and Workarounds An unfortunate bug exists in the iOS 7.0 - 8.x Simulators where ScrollViews, CollectionViews, and TableViews don't recognize gestures initiated by UIAutomation (which Appium uses under the hood for iOS). To work around this, we have provided access to a different function, scroll , which in many cases allows you to do what you wanted to do with one of these views, namely, scroll it! Scrolling To allow access to this special feature, we override the execute or executeScript methods in the driver, and prefix the command with mobile: . See examples below: To scroll, pass direction in which you intend to scroll as parameter. // javascript driver.execute('mobile: scroll', {direction: 'down'}); // java JavascriptExecutor js = (JavascriptExecutor) driver; HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( direction , down ); js.executeScript( mobile: scroll , scrollObject); # ruby execute_script 'mobile: scroll', direction: 'down' # python driver.execute_script( mobile: scroll , { direction : down }) // c# Dictionary string, string scrollObject = new Dictionary string, string (); scrollObject.Add( direction , down ); ((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject)); Sample to scroll using direction and element. // javascript driver.execute('mobile: scroll', {direction: 'down', element: element.value.ELEMENT}); // java JavascriptExecutor js = (JavascriptExecutor) driver; HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( direction , down ); scrollObject.put( element , ((RemoteWebElement) element).getId()); js.executeScript( mobile: scroll , scrollObject); # ruby execute_script 'mobile: scroll', direction: 'down', element: element.ref # python driver.execute_script( mobile: scroll , { direction : down , element: element.getAttribute( id )}) // c# Dictionary string, string scrollObject = new Dictionary string, string (); scrollObject.Add( direction , down ); scrollObject.Add( element , element_id ); ((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject)); Swiping This is an XCUITest driver specific method that is similar to scrolling (for reference, see https://developer.apple.com/reference/xctest/xcuielement). This method has the same API as Scrolling , just replace \"mobile: scroll\" with \"mobile: swipe\" Automating Sliders iOS Java // java // slider values can be string representations of numbers between 0 and 1 // e.g., 0.1 is 10%, 1.0 is 100% WebElement slider = driver.findElement(By.xpath( //window[1]/slider[1] )); slider.sendKeys( 0.1 ); Android The best way to interact with the slider on Android is with TouchActions.","title":"Touch Actions"},{"location":"writing-running-appium/touch-actions/#automating-mobile-gestures","text":"While the Selenium WebDriver spec has support for certain kinds of mobile interaction, its parameters are not always easily mappable to the functionality that the underlying device automation (like UIAutomation in the case of iOS) provides. To that end, Appium implements the new TouchAction / MultiAction API defined in the newest version of the spec ( https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1 ). Note that this is different from the earlier version of the TouchAction API in the original JSON Wire Protocol. These APIs allow you to build up arbitrary gestures with multiple actuators. Please see the Appium client docs for your language in order to find examples of using this API. Note for W3C actions W3C actions is also available in some drivers such as XCUITest, UIA2, Espresso and Windows. W3C actions are implemented to the best of the limitations of the operating systems' test frameworks. e.g. WDA cannot handle zero wait PR . API doc and API docs of each client help to understand how to call them.","title":"Automating mobile gestures"},{"location":"writing-running-appium/touch-actions/#an-overview-of-the-touchaction-multiaction-api","text":"","title":"An Overview of the TouchAction / MultiAction API"},{"location":"writing-running-appium/touch-actions/#touchaction","text":"TouchAction objects contain a chain of events. In all the appium client libraries, touch objects are created and are given a chain of events. The available events from the spec are: * press * release * moveTo * tap * wait * longPress * cancel * perform Here's an example of creating an action in pseudocode: TouchAction().press(el0).moveTo(el1).release() The above simulates a user pressing down on an element, sliding their finger to another position, and removing their finger from the screen. Appium performs the events in sequence. You can add a wait event to control the timing of the gesture. moveTo coordinates are now absolute to the current position. For example, dragging from 100,100 to 200,200 can be achieved by: .press(100,100) // Start at 100,100 .moveTo(200,200) // Passing absolute values of 200,200 ending up at 200,200 The appium client libraries have different ways of implementing this, for example: you can pass in coordinates or an element to a moveTo event. Passing both coordinates and an element will treat the coordinates as relative to the element's position, rather than absolute. Calling the perform event sends the entire sequence of events to appium, and the touch gesture is run on your device.","title":"TouchAction"},{"location":"writing-running-appium/touch-actions/#multitouch","text":"MultiTouch objects are collections of TouchActions. MultiTouch gestures only have two methods, add , and perform . add is used to add another TouchAction to this MultiTouch. When perform is called, all the TouchActions which were added to the MultiTouch are sent to appium and performed as if they happened at the same time. Appium first performs the first event of all TouchActions together, then the second, etc. Pseudocode example of tapping with two fingers: action0 = TouchAction().tap(el) action1 = TouchAction().tap(el) MultiAction().add(action0).add(action1).perform()","title":"MultiTouch"},{"location":"writing-running-appium/touch-actions/#bugs-and-workarounds","text":"An unfortunate bug exists in the iOS 7.0 - 8.x Simulators where ScrollViews, CollectionViews, and TableViews don't recognize gestures initiated by UIAutomation (which Appium uses under the hood for iOS). To work around this, we have provided access to a different function, scroll , which in many cases allows you to do what you wanted to do with one of these views, namely, scroll it! Scrolling To allow access to this special feature, we override the execute or executeScript methods in the driver, and prefix the command with mobile: . See examples below: To scroll, pass direction in which you intend to scroll as parameter. // javascript driver.execute('mobile: scroll', {direction: 'down'}); // java JavascriptExecutor js = (JavascriptExecutor) driver; HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( direction , down ); js.executeScript( mobile: scroll , scrollObject); # ruby execute_script 'mobile: scroll', direction: 'down' # python driver.execute_script( mobile: scroll , { direction : down }) // c# Dictionary string, string scrollObject = new Dictionary string, string (); scrollObject.Add( direction , down ); ((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject)); Sample to scroll using direction and element. // javascript driver.execute('mobile: scroll', {direction: 'down', element: element.value.ELEMENT}); // java JavascriptExecutor js = (JavascriptExecutor) driver; HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( direction , down ); scrollObject.put( element , ((RemoteWebElement) element).getId()); js.executeScript( mobile: scroll , scrollObject); # ruby execute_script 'mobile: scroll', direction: 'down', element: element.ref # python driver.execute_script( mobile: scroll , { direction : down , element: element.getAttribute( id )}) // c# Dictionary string, string scrollObject = new Dictionary string, string (); scrollObject.Add( direction , down ); scrollObject.Add( element , element_id ); ((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject)); Swiping This is an XCUITest driver specific method that is similar to scrolling (for reference, see https://developer.apple.com/reference/xctest/xcuielement). This method has the same API as Scrolling , just replace \"mobile: scroll\" with \"mobile: swipe\" Automating Sliders iOS Java // java // slider values can be string representations of numbers between 0 and 1 // e.g., 0.1 is 10%, 1.0 is 100% WebElement slider = driver.findElement(By.xpath( //window[1]/slider[1] )); slider.sendKeys( 0.1 ); Android The best way to interact with the slider on Android is with TouchActions.","title":"Bugs and Workarounds"},{"location":"writing-running-appium/android/actions/","text":"Low-Level Insights on Android Input Events What Are Input Events Android OS uses events concept to handle signals received from different input devices. It supports a wide range of different devices, such as touch screen, light pen, mouse, keyboard, but most of them are using MotionEvent or KeyEvent APIs, which are derived from the base InputEvent class. These APIs are quite flexible and support a wide range of different settings. We are particularly interested in the part of these APIs, which are responsible for touch and keyboard events generation/emulation. How Input Events Are Working An event is an object, which is generated in response to a signal from an input device. These objects are then delivered to the corresponding kernel subsystem, which processes them and notifies all listening processes about taps, key presses, swipes, etc. This means that in order to emulate a signal generated by an external device, such as touch screen, it is necessary to just send event objects with the same properties and in the same sequence as they would be generated by a real device. Lets Simulate a Single Tap Each input device has a set of actions whose property ranges and sequences are already predefined in the operating system. These actions we call \"tap\", \"swipe\" or \"double tap\", etc. The properties of each action could be found either in the Android documentation or in the OS source code. In order to perform events sequence, which is recognized as single tap, it is necessary to generate the following motion events: - ACTION_POINTER_DOWN - wait 125ms (525ms or longer wait will synthesize a long tap action instead) - ACTION_POINTER_UP . The downTime property should be set to the same timestamp as for ACTION_POINTER_DOWN It is also important, that coordinates and other properties of both the starting and the closing event should be equal except of the eventTime one, which is always equal to the current system timestamp in milliseconds ( SystemClock.uptimeMillis() ). The MotionEvent object itself could be created via obtain API, where parameters are the corresponding event properties. After events are created they must be passed to the system for execution. Such action is not secure, so it is only possible in instrumented tests via injectInputEvent method of IUiAutomationConnection interface. This is a very low-level method and it can only be accessed via reflection in automated tests. Normally, UiAutomator APIs have wrappers over it (like touchDown , touchMove , etc.), that already simulate the stuff described above. How About More Complicated Actions In theory it is possible to emulate any input action using a generated events sequence. Although, some actions, like multi-finger swipe, are really complicated and require a lot of events to be generated with correct properties and timings. The OS simply ignores given events if they don't follow internal action requirements. There is also a little assistance from UiAutomator framework, because Google only has wrappers for a limited set of simple actions, like tap , drag or swipe . So, in order to generate two-finger symmetric swipe we need to supply the following events chain: - ACTION_POINTER_DOWN (finger1) - ACTION_POINTER_DOWN (finger2) - start a loop, that generates ACTION_POINTER_MOVE event each 20ms for both finger1 and finger2 until ACTION_POINTER_UP is performed. The downTime should be set to the same timestamp as for the corresponding ACTION_POINTER_DOWN . The coordinates of each move event should be points belonging to the path between the corresponding start and end point coordinates normalized by the current timestamp (x0 + sqrt(sqr(x0) + sqr(x1))) * k, y0 + sqrt(sqr(y0) + sqr(y1))) * k). - ACTION_POINTER_UP (finger1) The downTime property should be set to the same timestamp as for the corresponding ACTION_POINTER_DOWN - ACTION_POINTER_UP (finger2) The downTime property should be set to the same timestamp as for the corresponding ACTION_POINTER_DOWN Google uses 5ms as interval duration between move events in UiAutomator code, but according to our observations this value is too little, which causes noticeable delays in actions execution. Further Reading Unfortunately, there is no so much detailed information on this topic. The only reliable source of the information are Android OS sources themselves. Consider visiting the following resources: https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewConfiguration.java https://android.googlesource.com/platform/frameworks/uiautomator/+/refs/heads/master https://github.com/appium/appium-uiautomator2-server/tree/master/app/src/main/java/io/appium/uiautomator2/utils/w3c https://github.com/appium/appium-uiautomator2-server/tree/master/app/src/test/java/io/appium/uiautomator2/utils/w3c https://github.com/appium/appium-espresso-driver/tree/master/espresso-server/app/src/androidTest/java/io/appium/espressoserver/lib/helpers/w3c","title":"Low-Level Insights on Android Input Events"},{"location":"writing-running-appium/android/actions/#low-level-insights-on-android-input-events","text":"","title":"Low-Level Insights on Android Input Events"},{"location":"writing-running-appium/android/actions/#what-are-input-events","text":"Android OS uses events concept to handle signals received from different input devices. It supports a wide range of different devices, such as touch screen, light pen, mouse, keyboard, but most of them are using MotionEvent or KeyEvent APIs, which are derived from the base InputEvent class. These APIs are quite flexible and support a wide range of different settings. We are particularly interested in the part of these APIs, which are responsible for touch and keyboard events generation/emulation.","title":"What Are Input Events"},{"location":"writing-running-appium/android/actions/#how-input-events-are-working","text":"An event is an object, which is generated in response to a signal from an input device. These objects are then delivered to the corresponding kernel subsystem, which processes them and notifies all listening processes about taps, key presses, swipes, etc. This means that in order to emulate a signal generated by an external device, such as touch screen, it is necessary to just send event objects with the same properties and in the same sequence as they would be generated by a real device.","title":"How Input Events Are Working"},{"location":"writing-running-appium/android/actions/#lets-simulate-a-single-tap","text":"Each input device has a set of actions whose property ranges and sequences are already predefined in the operating system. These actions we call \"tap\", \"swipe\" or \"double tap\", etc. The properties of each action could be found either in the Android documentation or in the OS source code. In order to perform events sequence, which is recognized as single tap, it is necessary to generate the following motion events: - ACTION_POINTER_DOWN - wait 125ms (525ms or longer wait will synthesize a long tap action instead) - ACTION_POINTER_UP . The downTime property should be set to the same timestamp as for ACTION_POINTER_DOWN It is also important, that coordinates and other properties of both the starting and the closing event should be equal except of the eventTime one, which is always equal to the current system timestamp in milliseconds ( SystemClock.uptimeMillis() ). The MotionEvent object itself could be created via obtain API, where parameters are the corresponding event properties. After events are created they must be passed to the system for execution. Such action is not secure, so it is only possible in instrumented tests via injectInputEvent method of IUiAutomationConnection interface. This is a very low-level method and it can only be accessed via reflection in automated tests. Normally, UiAutomator APIs have wrappers over it (like touchDown , touchMove , etc.), that already simulate the stuff described above.","title":"Lets Simulate a Single Tap"},{"location":"writing-running-appium/android/actions/#how-about-more-complicated-actions","text":"In theory it is possible to emulate any input action using a generated events sequence. Although, some actions, like multi-finger swipe, are really complicated and require a lot of events to be generated with correct properties and timings. The OS simply ignores given events if they don't follow internal action requirements. There is also a little assistance from UiAutomator framework, because Google only has wrappers for a limited set of simple actions, like tap , drag or swipe . So, in order to generate two-finger symmetric swipe we need to supply the following events chain: - ACTION_POINTER_DOWN (finger1) - ACTION_POINTER_DOWN (finger2) - start a loop, that generates ACTION_POINTER_MOVE event each 20ms for both finger1 and finger2 until ACTION_POINTER_UP is performed. The downTime should be set to the same timestamp as for the corresponding ACTION_POINTER_DOWN . The coordinates of each move event should be points belonging to the path between the corresponding start and end point coordinates normalized by the current timestamp (x0 + sqrt(sqr(x0) + sqr(x1))) * k, y0 + sqrt(sqr(y0) + sqr(y1))) * k). - ACTION_POINTER_UP (finger1) The downTime property should be set to the same timestamp as for the corresponding ACTION_POINTER_DOWN - ACTION_POINTER_UP (finger2) The downTime property should be set to the same timestamp as for the corresponding ACTION_POINTER_DOWN Google uses 5ms as interval duration between move events in UiAutomator code, but according to our observations this value is too little, which causes noticeable delays in actions execution.","title":"How About More Complicated Actions"},{"location":"writing-running-appium/android/actions/#further-reading","text":"Unfortunately, there is no so much detailed information on this topic. The only reliable source of the information are Android OS sources themselves. Consider visiting the following resources: https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewConfiguration.java https://android.googlesource.com/platform/frameworks/uiautomator/+/refs/heads/master https://github.com/appium/appium-uiautomator2-server/tree/master/app/src/main/java/io/appium/uiautomator2/utils/w3c https://github.com/appium/appium-uiautomator2-server/tree/master/app/src/test/java/io/appium/uiautomator2/utils/w3c https://github.com/appium/appium-espresso-driver/tree/master/espresso-server/app/src/androidTest/java/io/appium/espressoserver/lib/helpers/w3c","title":"Further Reading"},{"location":"writing-running-appium/android/activity-startup/","text":"How To Troubleshoot Activities Startup Capabilities The Activity class is a crucial component of an Android app, and the way activities are launched and put together is a fundamental part of the platform's application model. Unlike programming paradigms in which apps are launched with a main() method, the Android system initiates code in an Activity instance by invoking specific callback methods that correspond to specific stages of its lifecycle. Android Developer Documentation Appium needs to know package and activity names in order to properly initialize the application under test. This information is expected to be provided in driver capabilities and consists of the following keys: appActivity : The name of the main application activity appPackage : The identifier of the application package appWaitActivity : The name of the application activity to wait for/which starts the first appWaitPackage : The id of the application package to wait for/which starts the first appWaitDuration : The maximum duration to wait until the appWaitActivity is focused in milliseconds (20000 by default) appWaitForLaunch : Whether to wait until Activity Manager returns the control to the calling process. By default the driver always waits until appWaitDuration is expired. Setting this capability to false effectively cancels this wait and unblocks the server loop as soon as am successfully triggers the command to start the activity. All these capabilities are optional. If they are not set explicitly then Appium tries to auto detect them by reading their values from the APK manifest. Although, if the application under test is supposed to be already installed on the device ( noReset=true ) then at least appActivity and appPackage options are required to be set, since no package manifest is available in such case. If you don't set appWaitPackage and appWaitActivity explicitly then these are getting assigned to appPackage / appActivity values automatically. For more details check on the implementation of packageAndLaunchActivityFromManifest method in the appium-adb package. How Appium Starts Activities Activities are started by Call activity manager am . Appium tries to start the appPackage / appActivity combination using am start and then waits until the appWaitPackage / appWaitActivity is focused or the appWaitDuration timeout expires. The currently focused activity name is parsed from adb shell dumpsys window windows command output ( mFocusedApp or mCurrentFocus entries). For more details check on the implementation of startApp , and getFocusedPackageAndActivity methods in the appium-adb package. Possible Problems And Solutions java.lang.SecurityException: Permission Denial: starting Intent The full error description usually looks like 'java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mypackage/.myactivity.MainActivity launchParam=MultiScreenLaunchParams { mDisplayId=0 mBaseDisplayId=0 mFlags=0 } } from null (pid=11366, uid=2000) not exported from uid 10191 . Such error might be the indication of the fact that the combination of application package and activity name, which has been passed to Appium as appPackage / appActivity (or auto detected implicitly), is not the correct one to start the application under test. As a solution, it is necessary to check the correct values with the application developer and test them manually first by executing: adb shell am start -W -n com.myfixedpackage/.myfixedactivity.MainActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000 . If this commands succeeds manually and starts the necessary application on the device then it will work for Appium as well. com.myactivity or com.myapp.com.myactivity never started Thus exception usually indicates, that the first application activity is not the same package/activity, as it is set (or auto detected) by appWaitPackage / appWaitActivity . Such error normally happens in applications having multiple activities. In order to resolve the problem one should check with application developer regarding which activity/package is the very first one that appears on application startup. The currently focused activity name might be verified using the adb shell dumpsys window windows command mentioned above. Also, Appium allows to use wildcards while setting appWaitActivity value. This might be particularly useful if the activity name is generated dynamically or it is not the same all the time. For example com.mycomany.* will match any of com.mycomany.foo , com.mycomany.bar . Command '\u2026' timed out after X ms If you've double checked that activity names are correct, but the startup still times out, then try to increase the value of appWaitDuration capability. Normally, the default 20 seconds is enough for the most of applications, however, some bigger apps might require more time to start and show the first activity. Please, don't create such apps. There might be also situations where an activity does not return the control to the calling process at all, so am start call blocks forever independently of the value of appWaitDuration , thus causing the timeout. In such case setting appWaitForLaunch to false might help to resolve the issue. Although, by choosing this option, the driver cannot make sure the activity has fully started, so then it is up to the client code to verify the initial UI state is the one that is expected.","title":"Activities Startup Troubleshooting Guide"},{"location":"writing-running-appium/android/activity-startup/#how-to-troubleshoot-activities-startup","text":"","title":"How To Troubleshoot Activities Startup"},{"location":"writing-running-appium/android/activity-startup/#capabilities","text":"The Activity class is a crucial component of an Android app, and the way activities are launched and put together is a fundamental part of the platform's application model. Unlike programming paradigms in which apps are launched with a main() method, the Android system initiates code in an Activity instance by invoking specific callback methods that correspond to specific stages of its lifecycle. Android Developer Documentation Appium needs to know package and activity names in order to properly initialize the application under test. This information is expected to be provided in driver capabilities and consists of the following keys: appActivity : The name of the main application activity appPackage : The identifier of the application package appWaitActivity : The name of the application activity to wait for/which starts the first appWaitPackage : The id of the application package to wait for/which starts the first appWaitDuration : The maximum duration to wait until the appWaitActivity is focused in milliseconds (20000 by default) appWaitForLaunch : Whether to wait until Activity Manager returns the control to the calling process. By default the driver always waits until appWaitDuration is expired. Setting this capability to false effectively cancels this wait and unblocks the server loop as soon as am successfully triggers the command to start the activity. All these capabilities are optional. If they are not set explicitly then Appium tries to auto detect them by reading their values from the APK manifest. Although, if the application under test is supposed to be already installed on the device ( noReset=true ) then at least appActivity and appPackage options are required to be set, since no package manifest is available in such case. If you don't set appWaitPackage and appWaitActivity explicitly then these are getting assigned to appPackage / appActivity values automatically. For more details check on the implementation of packageAndLaunchActivityFromManifest method in the appium-adb package.","title":"Capabilities"},{"location":"writing-running-appium/android/activity-startup/#how-appium-starts-activities","text":"Activities are started by Call activity manager am . Appium tries to start the appPackage / appActivity combination using am start and then waits until the appWaitPackage / appWaitActivity is focused or the appWaitDuration timeout expires. The currently focused activity name is parsed from adb shell dumpsys window windows command output ( mFocusedApp or mCurrentFocus entries). For more details check on the implementation of startApp , and getFocusedPackageAndActivity methods in the appium-adb package.","title":"How Appium Starts Activities"},{"location":"writing-running-appium/android/activity-startup/#possible-problems-and-solutions","text":"","title":"Possible Problems And Solutions"},{"location":"writing-running-appium/android/activity-startup/#javalangsecurityexception-permission-denial-starting-intent","text":"The full error description usually looks like 'java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mypackage/.myactivity.MainActivity launchParam=MultiScreenLaunchParams { mDisplayId=0 mBaseDisplayId=0 mFlags=0 } } from null (pid=11366, uid=2000) not exported from uid 10191 . Such error might be the indication of the fact that the combination of application package and activity name, which has been passed to Appium as appPackage / appActivity (or auto detected implicitly), is not the correct one to start the application under test. As a solution, it is necessary to check the correct values with the application developer and test them manually first by executing: adb shell am start -W -n com.myfixedpackage/.myfixedactivity.MainActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000 . If this commands succeeds manually and starts the necessary application on the device then it will work for Appium as well.","title":"java.lang.SecurityException: Permission Denial: starting Intent"},{"location":"writing-running-appium/android/activity-startup/#commyactivity-or-commyappcommyactivity-never-started","text":"Thus exception usually indicates, that the first application activity is not the same package/activity, as it is set (or auto detected) by appWaitPackage / appWaitActivity . Such error normally happens in applications having multiple activities. In order to resolve the problem one should check with application developer regarding which activity/package is the very first one that appears on application startup. The currently focused activity name might be verified using the adb shell dumpsys window windows command mentioned above. Also, Appium allows to use wildcards while setting appWaitActivity value. This might be particularly useful if the activity name is generated dynamically or it is not the same all the time. For example com.mycomany.* will match any of com.mycomany.foo , com.mycomany.bar .","title":"com.myactivity or com.myapp.com.myactivity never started"},{"location":"writing-running-appium/android/activity-startup/#command-timed-out-after-x-ms","text":"If you've double checked that activity names are correct, but the startup still times out, then try to increase the value of appWaitDuration capability. Normally, the default 20 seconds is enough for the most of applications, however, some bigger apps might require more time to start and show the first activity. Please, don't create such apps. There might be also situations where an activity does not return the control to the calling process at all, so am start call blocks forever independently of the value of appWaitDuration , thus causing the timeout. In such case setting appWaitForLaunch to false might help to resolve the issue. Although, by choosing this option, the driver cannot make sure the activity has fully started, so then it is up to the client code to verify the initial UI state is the one that is expected.","title":"Command '\u2026' timed out after X ms"},{"location":"writing-running-appium/android/android-appbundle/","text":"How To Test Android App Bundle Google has released the Android App Bundle feature. An .aab file is generated by the feature, which we are supposed to upload to the Google Play Store. We can manage the .aab file via CLI using the official bundletool which is available from bundletool . The guide also help us to understand the feature. We can get distributed apk files from the .aab file via the CLI. Using the generated files, we can test against the release module. Since Appium 1.9.2, you can Appium tests against an .apks file using UiAutomator2 driver. 1 and 2 are PRs for the feature. How to run tests Export bundletool.jar in your path Appium looks for bundletool.jar in your local environemnt. Make sure you can find the path with which 'bundletool.jar' . If you can't find it, please set the path correctly. Generate the .apks file from the .aab file The .aab is available over Android Studio 3.2 You must sign correctly when you generate .apks from .aab . This step requires data signing. $ java -jar apks/bundletool.jar build-apks \\ --bundle apks/release/release/app.aab \\ # A generated aab file --output apks/AppBundleSample.apks \\ # An apks file you'd like to out put to --ks apks/sign \\ # Signing keystore --ks-key-alias key0 \\ # Alias of the keytstore --ks-pass pass:kazucocoa \\ # Password of the keystore --overwrite # Overwrite any existing apks files Use the path to the .apks file as your app capability. desired_capability = caps: { platformName: :android, automationName: 'uiautomator2', platformVersion: '8.1', deviceName: 'Android Emulator', app: path/to/your.apks , # This line is important fullReset: true, ... } core = ::Appium::Core.for(desired_capability) driver = core.start_driver You can find another way to get test APKs in https://developer.android.com/guide/app-bundle/ You could also install .apks bundles via Install App command like below. driver.install_app 'path/to/your.apks' Tips Make bundletool.jar executable Make sure the bundletool is executable. $ chmod 655 /path/to/bundletool.jar can make it executable, for example. Test with different languages Set fullReset: true if you would like to test against the app using different languages' resources. Appium only installs the minimum set of resources, following the behavior of the appbundle feature. For example, if a device's language is set of English, Appium will only install the en resource. The installed apk will have no Japanese resources. In orfer to force re-install with a different set of language resources, specify fullreset: true An example project https://github.com/KazuCocoa/AppBundleSample","title":"How To Test Android App Bundle"},{"location":"writing-running-appium/android/android-appbundle/#how-to-test-android-app-bundle","text":"Google has released the Android App Bundle feature. An .aab file is generated by the feature, which we are supposed to upload to the Google Play Store. We can manage the .aab file via CLI using the official bundletool which is available from bundletool . The guide also help us to understand the feature. We can get distributed apk files from the .aab file via the CLI. Using the generated files, we can test against the release module. Since Appium 1.9.2, you can Appium tests against an .apks file using UiAutomator2 driver. 1 and 2 are PRs for the feature.","title":"How To Test Android App Bundle"},{"location":"writing-running-appium/android/android-appbundle/#how-to-run-tests","text":"Export bundletool.jar in your path Appium looks for bundletool.jar in your local environemnt. Make sure you can find the path with which 'bundletool.jar' . If you can't find it, please set the path correctly. Generate the .apks file from the .aab file The .aab is available over Android Studio 3.2 You must sign correctly when you generate .apks from .aab . This step requires data signing. $ java -jar apks/bundletool.jar build-apks \\ --bundle apks/release/release/app.aab \\ # A generated aab file --output apks/AppBundleSample.apks \\ # An apks file you'd like to out put to --ks apks/sign \\ # Signing keystore --ks-key-alias key0 \\ # Alias of the keytstore --ks-pass pass:kazucocoa \\ # Password of the keystore --overwrite # Overwrite any existing apks files Use the path to the .apks file as your app capability. desired_capability = caps: { platformName: :android, automationName: 'uiautomator2', platformVersion: '8.1', deviceName: 'Android Emulator', app: path/to/your.apks , # This line is important fullReset: true, ... } core = ::Appium::Core.for(desired_capability) driver = core.start_driver You can find another way to get test APKs in https://developer.android.com/guide/app-bundle/ You could also install .apks bundles via Install App command like below. driver.install_app 'path/to/your.apks'","title":"How to run tests"},{"location":"writing-running-appium/android/android-appbundle/#tips","text":"","title":"Tips"},{"location":"writing-running-appium/android/android-appbundle/#make-bundletooljar-executable","text":"Make sure the bundletool is executable. $ chmod 655 /path/to/bundletool.jar can make it executable, for example.","title":"Make bundletool.jar executable"},{"location":"writing-running-appium/android/android-appbundle/#test-with-different-languages","text":"Set fullReset: true if you would like to test against the app using different languages' resources. Appium only installs the minimum set of resources, following the behavior of the appbundle feature. For example, if a device's language is set of English, Appium will only install the en resource. The installed apk will have no Japanese resources. In orfer to force re-install with a different set of language resources, specify fullreset: true","title":"Test with different languages"},{"location":"writing-running-appium/android/android-appbundle/#an-example-project","text":"https://github.com/KazuCocoa/AppBundleSample","title":"An example project"},{"location":"writing-running-appium/android/android-coverage/","text":"Android Coverage Guide Requirement Only Emulators or rooted phones are acceptable Need to add UiAutomator2 support in your apps. That is to say, you need to implement a subclass of Instrumentation . Instrumentation will be responsible to collect your coverage. Need to implement a BroadcastReceiver to export coverage to disk files. This is because Instrumentation only collects data into memory. Project Structure You may need the following structure of files: src/main/java/com/example/pkg |____ MainActivity.java Your main activity |____ InstrumentActivityListener.java A customized interface for exporting coverage to files |____ InstrumentActivity.java Activity launched for coverage. But in most cases, this should be same as MainActivity. The only difference is that it will include a `InstrumentActivityListener` to export coverage data to disk files. |____ JacocoInstrumentation.java The instrument class created by you. Also it needs to implement `InstrumentActivitylistener`. |____ EndEmmaBroadCast.java A broadcast receiver which will be invoked by appium-uiautomator2-driver at the end of testing. You need implementing logic to invoke InstrumentActivityListener so as to export coverage to files. Configure followings in your caps: * automationName \uff1a uiautomator2 (case irrelevant) * androidCoverage \uff1a {package}/{instrumentation class}, in our example, com.example.pkg/com.example.pkg.JacocoInstrumentation * appWaitActivity \uff1a the FQCN of the activity of InstrumentActivity, in our example, com.example.pkg.InstrumentActivity * appWaitPackage \uff1a {package}\uff0cin our example, com.example.pkg androidCoverageEndIntent \uff1a The action of the broadcast receiver to invoke the exporting of coverage data to files, in our example com.example.pkg.END_EMMA Methodology Appium (appium-uiautomator2-driver) will launch app via command like\uff1a adb shell am instrument -e coverage true -w com.example.pkg/com.example.pkg.JacocoInstrumentation After testing is done, Appium (appium-uiautomator2-driver) will execute adb shell am broadcast -a com.example.pkg.END_EMMA to export coverage to files\uff08If you implement such export in the broadcast receiver\uff09 Example [1] Appium Testing Project - Configure Caps Please refer to \"Project Structure\" - \"Configure followings in your caps\" [2] Android Project Define instrumentation class and broadcast receiver in AndroidManifest.xml : instrumentation android:name= com.example.pkg.instrumentation.JacocoInstrumentation android:targetPackage= com.example.pkg /instrumentation !-- adb shell am broadcast -a com.example.pkg.END_EMMA -- receiver android:name= com.example.pkg.EndEmmaBroadcast intent-filter action android:name= com.example.pkg.END_EMMA / /intent-filter /receiver Then, EndEmmaBroadcast.java \uff1a package com.example.pkg; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.os.Process; // adb shell am broadcast -a com.example.pkg.END_EMMA public class EndEmmaBroadcast extends BroadcastReceiver { InstrumentActivityListener activityListener; public void setInstrumentActivityListener(InstrumentActivityListener listener){ this.activityListener = listener; } @Override public void onReceive(Context context, Intent intent) { if(this.activityListener!=null){ activityListener.onActivityEnd(); } // once coverage is dumped, the processes is ended. Process.killProcess(Process.myPid()); } } After that, JacocoInstrumentation.java \uff1a package com.example.pkg; import android.app.Activity; import android.app.Instrumentation; import android.content.Intent; import android.content.IntentFilter; import android.os.Bundle; import android.os.Looper; import android.util.Log; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; public class JacocoInstrumentation extends Instrumentation implements InstrumentActivityListener { public static String TAG = JacocoInstrumentation: ; private static String DEFAULT_COVERAGE_FILE_PATH = null; private final Bundle mResults = new Bundle(); private Intent mIntent; private static final boolean LOGD = true; private boolean mCoverage = true; private String mCoverageFilePath; public JacocoInstrumentation() { } @Override public void onCreate(Bundle arguments) { Log.d(TAG, onCreate( + arguments + ) ); super.onCreate(arguments); // bad notation, better use NAME+TimeSeed because you might generate more than 1 corage file DEFAULT_COVERAGE_FILE_PATH = getContext().getFilesDir().getPath().toString() + /coverage.ec ; File file = new File(DEFAULT_COVERAGE_FILE_PATH); if(!file.exists()){ try{ file.createNewFile(); }catch (IOException e){ Log.d(TAG, File Exception \uff1a +e); e.printStackTrace();} } if(arguments != null) { mCoverageFilePath = arguments.getString( coverageFile ); } mIntent = new Intent(getTargetContext(), InstrumentActivity.class); mIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); start(); } @Override public void onStart() { super.onStart(); Looper.prepare(); // Register broadcast receiver and start InstrumentActivity InstrumentActivity activity = (InstrumentActivity) startActivitySync(mIntent); EndEmmaBroadcast broadcast = new EndEmmaBroadcast(); activity.setInstrumentActivityListener(this); broadcast.setInstrumentActivityListener(this); activity.registerReceiver(broadcast, new IntentFilter( com.example.pkg.END_EMMA )); } private String getCoverageFilePath() { if (mCoverageFilePath == null) { return DEFAULT_COVERAGE_FILE_PATH; } else { return mCoverageFilePath; } } private void generateCoverageReport() { Log.d(TAG, generateCoverageReport(): + getCoverageFilePath()); OutputStream out = null; try { out = new FileOutputStream(getCoverageFilePath(), false); Object agent = Class.forName( org.jacoco.agent.rt.RT ) .getMethod( getAgent ) .invoke(null); out.write((byte[]) agent.getClass().getMethod( getExecutionData , boolean.class) .invoke(agent, false)); } catch (Exception e) { Log.d(TAG, e.toString(), e); } finally { if (out != null) { try { out.close(); } catch (IOException e) { e.printStackTrace(); } } } } @Override public void onActivityEnd() { if (LOGD) Log.d(TAG, onActivityFinished() ); if (mCoverage) { generateCoverageReport(); } finish(Activity.RESULT_OK, mResults); } } Then, InstrumentActivityListener.java package com.example.pkg; public interface InstrumentActivityListener { void onActivityEnd(); } InstrumentActivity.java (This is optional, you can use MainActivity) package com.example.pkg; import android.app.Instrumentation; import android.os.Bundle; import android.util.Log; public class InstrumentActivity extends MainActivity { public static String TAG = IntrumentedActivity ; private InstrumentActivityListener listener; public void setInstrumentActivityListener(InstrumentActivityListener listener) { this.listener = listener; } // Generate output report when the activity is destroyed @Override public void onDestroy() { super.onDestroy(); Log.d(TAG, onDestroy() ); super.finish(); if (listener != null) { listener.onActivityEnd(); } } } Finally, the most important part is gradle : .... apply plugin: 'jacoco' // add plugin for jacoco ... android { ... defaultConfig { ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner } buildTypes { release { ... } debug{ testCoverageEnabled = true } } } dependencies { ... //uiautomator androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.0' } [3] Now, build apk and run Appium tests! The coverage.ec will be generated at /data/data/com.example.pkg/files. Pull it out. [4] About generating HTML reports To get the HTML report of coverage.ec, you need following steps: * [1] pull it into file system by adb pull * [2] create the following task in your gradle file: def coverageSourceDirs = [ './src/main/java' ] task jacocoTestReport(type: JacocoReport) { group = Reporting description = Generate Jacoco coverage reports after running tests. reports { xml.enabled = true html.enabled = true } classDirectories = fileTree( dir: './build/intermediates/classes/debug', excludes: ['**/R*.class', '**/*$InjectAdapter.class', '**/*$ModuleAdapter.class', '**/*$ViewInjector*.class' ]) sourceDirectories = files(coverageSourceDirs) // NOTE: Put your ec file here executionData = files( SOME PATH/coverage.ec ) doFirst { new File( $buildDir/intermediates/classes/ ).eachFileRecurse { file - if (file.name.contains('$$')) { file.renameTo(file.path.replace('$$', '$')) } } } }","title":"Android Code Coverage Guide"},{"location":"writing-running-appium/android/android-coverage/#android-coverage-guide","text":"","title":"Android Coverage Guide"},{"location":"writing-running-appium/android/android-coverage/#requirement","text":"Only Emulators or rooted phones are acceptable Need to add UiAutomator2 support in your apps. That is to say, you need to implement a subclass of Instrumentation . Instrumentation will be responsible to collect your coverage. Need to implement a BroadcastReceiver to export coverage to disk files. This is because Instrumentation only collects data into memory.","title":"Requirement"},{"location":"writing-running-appium/android/android-coverage/#project-structure","text":"You may need the following structure of files: src/main/java/com/example/pkg |____ MainActivity.java Your main activity |____ InstrumentActivityListener.java A customized interface for exporting coverage to files |____ InstrumentActivity.java Activity launched for coverage. But in most cases, this should be same as MainActivity. The only difference is that it will include a `InstrumentActivityListener` to export coverage data to disk files. |____ JacocoInstrumentation.java The instrument class created by you. Also it needs to implement `InstrumentActivitylistener`. |____ EndEmmaBroadCast.java A broadcast receiver which will be invoked by appium-uiautomator2-driver at the end of testing. You need implementing logic to invoke InstrumentActivityListener so as to export coverage to files. Configure followings in your caps: * automationName \uff1a uiautomator2 (case irrelevant) * androidCoverage \uff1a {package}/{instrumentation class}, in our example, com.example.pkg/com.example.pkg.JacocoInstrumentation * appWaitActivity \uff1a the FQCN of the activity of InstrumentActivity, in our example, com.example.pkg.InstrumentActivity * appWaitPackage \uff1a {package}\uff0cin our example, com.example.pkg androidCoverageEndIntent \uff1a The action of the broadcast receiver to invoke the exporting of coverage data to files, in our example com.example.pkg.END_EMMA Methodology Appium (appium-uiautomator2-driver) will launch app via command like\uff1a adb shell am instrument -e coverage true -w com.example.pkg/com.example.pkg.JacocoInstrumentation After testing is done, Appium (appium-uiautomator2-driver) will execute adb shell am broadcast -a com.example.pkg.END_EMMA to export coverage to files\uff08If you implement such export in the broadcast receiver\uff09","title":"Project Structure"},{"location":"writing-running-appium/android/android-coverage/#example","text":"","title":"Example"},{"location":"writing-running-appium/android/android-coverage/#1-appium-testing-project-configure-caps","text":"Please refer to \"Project Structure\" - \"Configure followings in your caps\"","title":"[1] Appium Testing Project - Configure Caps"},{"location":"writing-running-appium/android/android-coverage/#2-android-project","text":"Define instrumentation class and broadcast receiver in AndroidManifest.xml : instrumentation android:name= com.example.pkg.instrumentation.JacocoInstrumentation android:targetPackage= com.example.pkg /instrumentation !-- adb shell am broadcast -a com.example.pkg.END_EMMA -- receiver android:name= com.example.pkg.EndEmmaBroadcast intent-filter action android:name= com.example.pkg.END_EMMA / /intent-filter /receiver Then, EndEmmaBroadcast.java \uff1a package com.example.pkg; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.os.Process; // adb shell am broadcast -a com.example.pkg.END_EMMA public class EndEmmaBroadcast extends BroadcastReceiver { InstrumentActivityListener activityListener; public void setInstrumentActivityListener(InstrumentActivityListener listener){ this.activityListener = listener; } @Override public void onReceive(Context context, Intent intent) { if(this.activityListener!=null){ activityListener.onActivityEnd(); } // once coverage is dumped, the processes is ended. Process.killProcess(Process.myPid()); } } After that, JacocoInstrumentation.java \uff1a package com.example.pkg; import android.app.Activity; import android.app.Instrumentation; import android.content.Intent; import android.content.IntentFilter; import android.os.Bundle; import android.os.Looper; import android.util.Log; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; public class JacocoInstrumentation extends Instrumentation implements InstrumentActivityListener { public static String TAG = JacocoInstrumentation: ; private static String DEFAULT_COVERAGE_FILE_PATH = null; private final Bundle mResults = new Bundle(); private Intent mIntent; private static final boolean LOGD = true; private boolean mCoverage = true; private String mCoverageFilePath; public JacocoInstrumentation() { } @Override public void onCreate(Bundle arguments) { Log.d(TAG, onCreate( + arguments + ) ); super.onCreate(arguments); // bad notation, better use NAME+TimeSeed because you might generate more than 1 corage file DEFAULT_COVERAGE_FILE_PATH = getContext().getFilesDir().getPath().toString() + /coverage.ec ; File file = new File(DEFAULT_COVERAGE_FILE_PATH); if(!file.exists()){ try{ file.createNewFile(); }catch (IOException e){ Log.d(TAG, File Exception \uff1a +e); e.printStackTrace();} } if(arguments != null) { mCoverageFilePath = arguments.getString( coverageFile ); } mIntent = new Intent(getTargetContext(), InstrumentActivity.class); mIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); start(); } @Override public void onStart() { super.onStart(); Looper.prepare(); // Register broadcast receiver and start InstrumentActivity InstrumentActivity activity = (InstrumentActivity) startActivitySync(mIntent); EndEmmaBroadcast broadcast = new EndEmmaBroadcast(); activity.setInstrumentActivityListener(this); broadcast.setInstrumentActivityListener(this); activity.registerReceiver(broadcast, new IntentFilter( com.example.pkg.END_EMMA )); } private String getCoverageFilePath() { if (mCoverageFilePath == null) { return DEFAULT_COVERAGE_FILE_PATH; } else { return mCoverageFilePath; } } private void generateCoverageReport() { Log.d(TAG, generateCoverageReport(): + getCoverageFilePath()); OutputStream out = null; try { out = new FileOutputStream(getCoverageFilePath(), false); Object agent = Class.forName( org.jacoco.agent.rt.RT ) .getMethod( getAgent ) .invoke(null); out.write((byte[]) agent.getClass().getMethod( getExecutionData , boolean.class) .invoke(agent, false)); } catch (Exception e) { Log.d(TAG, e.toString(), e); } finally { if (out != null) { try { out.close(); } catch (IOException e) { e.printStackTrace(); } } } } @Override public void onActivityEnd() { if (LOGD) Log.d(TAG, onActivityFinished() ); if (mCoverage) { generateCoverageReport(); } finish(Activity.RESULT_OK, mResults); } } Then, InstrumentActivityListener.java package com.example.pkg; public interface InstrumentActivityListener { void onActivityEnd(); } InstrumentActivity.java (This is optional, you can use MainActivity) package com.example.pkg; import android.app.Instrumentation; import android.os.Bundle; import android.util.Log; public class InstrumentActivity extends MainActivity { public static String TAG = IntrumentedActivity ; private InstrumentActivityListener listener; public void setInstrumentActivityListener(InstrumentActivityListener listener) { this.listener = listener; } // Generate output report when the activity is destroyed @Override public void onDestroy() { super.onDestroy(); Log.d(TAG, onDestroy() ); super.finish(); if (listener != null) { listener.onActivityEnd(); } } } Finally, the most important part is gradle : .... apply plugin: 'jacoco' // add plugin for jacoco ... android { ... defaultConfig { ... testInstrumentationRunner android.support.test.runner.AndroidJUnitRunner } buildTypes { release { ... } debug{ testCoverageEnabled = true } } } dependencies { ... //uiautomator androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.0' }","title":"[2] Android Project"},{"location":"writing-running-appium/android/android-coverage/#3-now-build-apk-and-run-appium-tests","text":"The coverage.ec will be generated at /data/data/com.example.pkg/files. Pull it out.","title":"[3] Now, build apk and run Appium tests!"},{"location":"writing-running-appium/android/android-coverage/#4-about-generating-html-reports","text":"To get the HTML report of coverage.ec, you need following steps: * [1] pull it into file system by adb pull * [2] create the following task in your gradle file: def coverageSourceDirs = [ './src/main/java' ] task jacocoTestReport(type: JacocoReport) { group = Reporting description = Generate Jacoco coverage reports after running tests. reports { xml.enabled = true html.enabled = true } classDirectories = fileTree( dir: './build/intermediates/classes/debug', excludes: ['**/R*.class', '**/*$InjectAdapter.class', '**/*$ModuleAdapter.class', '**/*$ViewInjector*.class' ]) sourceDirectories = files(coverageSourceDirs) // NOTE: Put your ec file here executionData = files( SOME PATH/coverage.ec ) doFirst { new File( $buildDir/intermediates/classes/ ).eachFileRecurse { file - if (file.name.contains('$$')) { file.renameTo(file.path.replace('$$', '$')) } } } }","title":"[4] About generating HTML reports"},{"location":"writing-running-appium/android/android-ime/","text":"How To Emulate IME Actions Generation Very often Android developers use onEditorAction callback with actionId argument to implement actions handling, for example, when Search or Done button is pressed on the on-screen keyboard. Appium since version 1.9.2 allows to automate the generation of such actions by providing the special mobile: command. mobile: performEditorAction Executes the given editor action on the currently focused element. Supported arguments action : The name or an integer code of the editor action to be executed. The following action names are supported: normal, unspecified, none, go, search, send, next, done, previous . Read https://developer.android.com/reference/android/view/inputmethod/EditorInfo for more details on this topic. Usage examples // Java driver.executeScript( mobile: performEditorAction , ImmutableMap.of( action , Go )); # Python driver.execute_script('mobile: performEditorAction', {'action': 'previous'})","title":"How To Emulate IME Actions Generation"},{"location":"writing-running-appium/android/android-ime/#how-to-emulate-ime-actions-generation","text":"Very often Android developers use onEditorAction callback with actionId argument to implement actions handling, for example, when Search or Done button is pressed on the on-screen keyboard. Appium since version 1.9.2 allows to automate the generation of such actions by providing the special mobile: command.","title":"How To Emulate IME Actions Generation"},{"location":"writing-running-appium/android/android-ime/#mobile-performeditoraction","text":"Executes the given editor action on the currently focused element.","title":"mobile: performEditorAction"},{"location":"writing-running-appium/android/android-ime/#supported-arguments","text":"action : The name or an integer code of the editor action to be executed. The following action names are supported: normal, unspecified, none, go, search, send, next, done, previous . Read https://developer.android.com/reference/android/view/inputmethod/EditorInfo for more details on this topic.","title":"Supported arguments"},{"location":"writing-running-appium/android/android-ime/#usage-examples","text":"// Java driver.executeScript( mobile: performEditorAction , ImmutableMap.of( action , Go )); # Python driver.execute_script('mobile: performEditorAction', {'action': 'previous'})","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/","text":"Automating Mobile Gestures With UiAutomator2 Backend Touch actions are the most advanced and the most complicated way to implement any Android gesture. Although, there is a couple of basic gestures, like swipe, fling or pinch, which are commonly used in Android applications and for which it makes sense to have shortcuts, where only high-level options are configurable. mobile: longClickGesture This gesture performs long click action on the given element/coordinates. Available since Appium v1.19 Supported arguments elementId : The id of the element to be clicked. If the element is missing then both click offset coordinates must be provided. If both the element id and offset are provided then the coordinates are parsed as relative offsets from the top left corner of the element. x : The x-offset coordinate y : The y-offset coordinate duration : Click duration in milliseconds. 500 by default. The value must not be negative Usage examples // Java ((JavascriptExecutor) driver).executeScript( mobile: longClickGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId() )); # Python driver.execute_script('mobile: longClickGesture', {'x': 100, 'y': 100, 'duration': 1000}) mobile: doubleClickGesture This gesture performs double click action on the given element/coordinates. Available since Appium v1.21 Supported arguments elementId : The id of the element to be clicked. If the element is missing then both click offset coordinates must be provided. If both the element id and offset are provided then the coordinates are parsed as relative offsets from the top left corner of the element. x : The x-offset coordinate y : The y-offset coordinate Usage examples // Java ((JavascriptExecutor) driver).executeScript( mobile: doubleClickGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId() )); # Python driver.execute_script('mobile: doubleClickGesture', {'x': 100, 'y': 100}) mobile: dragGesture This gesture performs drag action from the given element/coordinates to the given point. Available since Appium v1.19 Supported arguments elementId : The id of the element to be dragged. If the element id is missing then both start coordinates must be provided. If both the element id and the start coordinates are provided then these coordinates are considered as offsets from the top left element corner. startX : The x-start coordinate startY : The y-start coordinate endX : The x-end coordinate. Mandatory argument endY : The y-end coordinate. Mandatory argument speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 2500 * displayDensity Usage examples // Java ((JavascriptExecutor) driver).executeScript( mobile: dragGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), endX , 100, endY , 100 )); mobile: flingGesture This gesture performs fling gesture on the given element/area. Available since Appium v1.19 Supported arguments elementId : The id of the element to be flinged. If the element id is missing then fling bounding area must be provided. If both the element id and the fling bounding area are provided then this area is effectively ignored. left : The left coordinate of the fling bounding area top : The top coordinate of the fling bounding area width : The width of the fling bounding area height : The height of the fling bounding area direction : Direction of the fling. Mandatory value. Acceptable values are: up , down , left and right (case insensitive) speed : The speed at which to perform this gesture in pixels per second. The value must be greater than the minimum fling velocity for the given view (50 by default). The default value is 7500 * displayDensity Returned value The returned value is a boolean one and equals to true if the object can still scroll in the given direction Usage examples // Java boolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript( mobile: flingGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), direction , down , speed , 500 )); mobile: pinchOpenGesture This gesture performs pinch-open gesture on the given element/area. Available since Appium v1.19 Supported arguments elementId : The id of the element to be pinched. If the element id is missing then pinch bounding area must be provided. If both the element id and the pinch bounding area are provided then the area is effectively ignored. left : The left coordinate of the pinch bounding area top : The top coordinate of the pinch bounding area width : The width of the pinch bounding area height : The height of the pinch bounding area percent : The size of the pinch as a percentage of the pinch area size. Valid values must be float numbers in range 0..1, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 2500 * displayDensity Usage examples // Java ((JavascriptExecutor) driver).executeScript( mobile: pinchOpenGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), percent , 0.75 )); mobile: pinchCloseGesture This gesture performs pinch-close gesture on the given element/area. Available since Appium v1.19 Supported arguments elementId : The id of the element to be pinched. If the element id is missing then pinch bounding area must be provided. If both the element id and the pinch bounding area are provided then the area is effectively ignored. left : The left coordinate of the pinch bounding area top : The top coordinate of the pinch bounding area width : The width of the pinch bounding area height : The height of the pinch bounding area percent : The size of the pinch as a percentage of the pinch area size. Valid values must be float numbers in range 0..1, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 2500 * displayDensity Usage examples // Java ((JavascriptExecutor) driver).executeScript( mobile: pinchCloseGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), percent , 0.75 )); # Python can_scroll_more = driver.execute_script('mobile: pinchCloseGesture', { 'elementId': element.id, 'percent': 0.75 }) mobile: swipeGesture This gesture performs swipe gesture on the given element/area. Available since Appium v1.19 Supported arguments elementId : The id of the element to be swiped. If the element id is missing then swipe bounding area must be provided. If both the element id and the swipe bounding area are provided then the area is effectively ignored. left : The left coordinate of the swipe bounding area top : The top coordinate of the swipe bounding area width : The width of the swipe bounding area height : The height of the swipe bounding area direction : Swipe direction. Mandatory value. Acceptable values are: up , down , left and right (case insensitive) percent : The size of the swipe as a percentage of the swipe area size. Valid values must be float numbers in range 0..1, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 5000 * displayDensity Usage examples // Java ((JavascriptExecutor) driver).executeScript( mobile: swipeGesture , ImmutableMap.of( left , 100, top , 100, width , 200, height , 200, direction , left , percent , 0.75 )); mobile: scrollGesture This gesture performs scroll gesture on the given element/area. Available since Appium v1.19 Supported arguments elementId : The id of the element to be scrolled. If the element id is missing then scroll bounding area must be provided. If both the element id and the scroll bounding area are provided then this area is effectively ignored. left : The left coordinate of the scroll bounding area top : The top coordinate of the scroll bounding area width : The width of the scroll bounding area height : The height of the scroll bounding area direction : Scrolling direction. Mandatory value. Acceptable values are: up , down , left and right (case insensitive) percent : The size of the scroll as a percentage of the scrolling area size. Valid values must be float numbers greater than zero, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 5000 * displayDensity Returned value The returned value is a boolean one and equals to true if the object can still scroll in the given direction Usage examples // Java boolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript( mobile: scrollGesture , ImmutableMap.of( left , 100, top , 100, width , 200, height , 200, direction , down , percent , 3.0 )); # Python can_scroll_more = driver.execute_script('mobile: scrollGesture', { 'left': 100, 'top': 100, 'width': 200, 'height': 200, 'direction': 'down', 'percent': 3.0 })","title":"Automating Mobile Gestures With UiAutomator2 Backend"},{"location":"writing-running-appium/android/android-mobile-gestures/#automating-mobile-gestures-with-uiautomator2-backend","text":"Touch actions are the most advanced and the most complicated way to implement any Android gesture. Although, there is a couple of basic gestures, like swipe, fling or pinch, which are commonly used in Android applications and for which it makes sense to have shortcuts, where only high-level options are configurable.","title":"Automating Mobile Gestures With UiAutomator2 Backend"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-longclickgesture","text":"This gesture performs long click action on the given element/coordinates. Available since Appium v1.19","title":"mobile: longClickGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments","text":"elementId : The id of the element to be clicked. If the element is missing then both click offset coordinates must be provided. If both the element id and offset are provided then the coordinates are parsed as relative offsets from the top left corner of the element. x : The x-offset coordinate y : The y-offset coordinate duration : Click duration in milliseconds. 500 by default. The value must not be negative","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples","text":"// Java ((JavascriptExecutor) driver).executeScript( mobile: longClickGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId() )); # Python driver.execute_script('mobile: longClickGesture', {'x': 100, 'y': 100, 'duration': 1000})","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-doubleclickgesture","text":"This gesture performs double click action on the given element/coordinates. Available since Appium v1.21","title":"mobile: doubleClickGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_1","text":"elementId : The id of the element to be clicked. If the element is missing then both click offset coordinates must be provided. If both the element id and offset are provided then the coordinates are parsed as relative offsets from the top left corner of the element. x : The x-offset coordinate y : The y-offset coordinate","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_1","text":"// Java ((JavascriptExecutor) driver).executeScript( mobile: doubleClickGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId() )); # Python driver.execute_script('mobile: doubleClickGesture', {'x': 100, 'y': 100})","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-draggesture","text":"This gesture performs drag action from the given element/coordinates to the given point. Available since Appium v1.19","title":"mobile: dragGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_2","text":"elementId : The id of the element to be dragged. If the element id is missing then both start coordinates must be provided. If both the element id and the start coordinates are provided then these coordinates are considered as offsets from the top left element corner. startX : The x-start coordinate startY : The y-start coordinate endX : The x-end coordinate. Mandatory argument endY : The y-end coordinate. Mandatory argument speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 2500 * displayDensity","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_2","text":"// Java ((JavascriptExecutor) driver).executeScript( mobile: dragGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), endX , 100, endY , 100 ));","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-flinggesture","text":"This gesture performs fling gesture on the given element/area. Available since Appium v1.19","title":"mobile: flingGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_3","text":"elementId : The id of the element to be flinged. If the element id is missing then fling bounding area must be provided. If both the element id and the fling bounding area are provided then this area is effectively ignored. left : The left coordinate of the fling bounding area top : The top coordinate of the fling bounding area width : The width of the fling bounding area height : The height of the fling bounding area direction : Direction of the fling. Mandatory value. Acceptable values are: up , down , left and right (case insensitive) speed : The speed at which to perform this gesture in pixels per second. The value must be greater than the minimum fling velocity for the given view (50 by default). The default value is 7500 * displayDensity","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#returned-value","text":"The returned value is a boolean one and equals to true if the object can still scroll in the given direction","title":"Returned value"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_3","text":"// Java boolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript( mobile: flingGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), direction , down , speed , 500 ));","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-pinchopengesture","text":"This gesture performs pinch-open gesture on the given element/area. Available since Appium v1.19","title":"mobile: pinchOpenGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_4","text":"elementId : The id of the element to be pinched. If the element id is missing then pinch bounding area must be provided. If both the element id and the pinch bounding area are provided then the area is effectively ignored. left : The left coordinate of the pinch bounding area top : The top coordinate of the pinch bounding area width : The width of the pinch bounding area height : The height of the pinch bounding area percent : The size of the pinch as a percentage of the pinch area size. Valid values must be float numbers in range 0..1, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 2500 * displayDensity","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_4","text":"// Java ((JavascriptExecutor) driver).executeScript( mobile: pinchOpenGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), percent , 0.75 ));","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-pinchclosegesture","text":"This gesture performs pinch-close gesture on the given element/area. Available since Appium v1.19","title":"mobile: pinchCloseGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_5","text":"elementId : The id of the element to be pinched. If the element id is missing then pinch bounding area must be provided. If both the element id and the pinch bounding area are provided then the area is effectively ignored. left : The left coordinate of the pinch bounding area top : The top coordinate of the pinch bounding area width : The width of the pinch bounding area height : The height of the pinch bounding area percent : The size of the pinch as a percentage of the pinch area size. Valid values must be float numbers in range 0..1, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 2500 * displayDensity","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_5","text":"// Java ((JavascriptExecutor) driver).executeScript( mobile: pinchCloseGesture , ImmutableMap.of( elementId , ((RemoteWebElement) element).getId(), percent , 0.75 )); # Python can_scroll_more = driver.execute_script('mobile: pinchCloseGesture', { 'elementId': element.id, 'percent': 0.75 })","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-swipegesture","text":"This gesture performs swipe gesture on the given element/area. Available since Appium v1.19","title":"mobile: swipeGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_6","text":"elementId : The id of the element to be swiped. If the element id is missing then swipe bounding area must be provided. If both the element id and the swipe bounding area are provided then the area is effectively ignored. left : The left coordinate of the swipe bounding area top : The top coordinate of the swipe bounding area width : The width of the swipe bounding area height : The height of the swipe bounding area direction : Swipe direction. Mandatory value. Acceptable values are: up , down , left and right (case insensitive) percent : The size of the swipe as a percentage of the swipe area size. Valid values must be float numbers in range 0..1, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 5000 * displayDensity","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_6","text":"// Java ((JavascriptExecutor) driver).executeScript( mobile: swipeGesture , ImmutableMap.of( left , 100, top , 100, width , 200, height , 200, direction , left , percent , 0.75 ));","title":"Usage examples"},{"location":"writing-running-appium/android/android-mobile-gestures/#mobile-scrollgesture","text":"This gesture performs scroll gesture on the given element/area. Available since Appium v1.19","title":"mobile: scrollGesture"},{"location":"writing-running-appium/android/android-mobile-gestures/#supported-arguments_7","text":"elementId : The id of the element to be scrolled. If the element id is missing then scroll bounding area must be provided. If both the element id and the scroll bounding area are provided then this area is effectively ignored. left : The left coordinate of the scroll bounding area top : The top coordinate of the scroll bounding area width : The width of the scroll bounding area height : The height of the scroll bounding area direction : Scrolling direction. Mandatory value. Acceptable values are: up , down , left and right (case insensitive) percent : The size of the scroll as a percentage of the scrolling area size. Valid values must be float numbers greater than zero, where 1.0 is 100%. Mandatory value. speed : The speed at which to perform this gesture in pixels per second. The value must not be negative. The default value is 5000 * displayDensity","title":"Supported arguments"},{"location":"writing-running-appium/android/android-mobile-gestures/#returned-value_1","text":"The returned value is a boolean one and equals to true if the object can still scroll in the given direction","title":"Returned value"},{"location":"writing-running-appium/android/android-mobile-gestures/#usage-examples_7","text":"// Java boolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript( mobile: scrollGesture , ImmutableMap.of( left , 100, top , 100, width , 200, height , 200, direction , down , percent , 3.0 )); # Python can_scroll_more = driver.execute_script('mobile: scrollGesture', { 'left': 100, 'top': 100, 'width': 200, 'height': 200, 'direction': 'down', 'percent': 3.0 })","title":"Usage examples"},{"location":"writing-running-appium/android/android-screen-streaming/","text":"Android Device Screen Streaming With Appium Since Appium 1.16 there is a possibility to stream the screen of the device under test to one or more remote clients. The currently displayed content is broadcasted as configurable MJPEG stream over http protocol. This allows to observe automated test execution while it is running and catch possible issues earlier. Single MJPEG server supports multiple simultaneous clients that can receive screen updates at the same time. The framerate there depends on the server and device performance, but is close to the real time one and can reach up to 60 frames per second, especially with properly adjusted bitrate and/or scaled screen dimensions. mobile: startScreenStreaming Starts streaming of the device's screen. The streaming can only be started if all the requirements are met: - GStreamer binaries are installed on the server machine. For example, it can be installed using the following command on Mac OS: brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav - The device under test has screenrecord utility available and the utility supports --output-format=h264 option. Emulators only have this utility since API 27. - The adb_screen_streaming server feature is enabled. The command initializes low-level streaming with adb, pipes it to GStreamer pipeline, which converts h264-encoded frames into JPEG images and sends them to a TCP socket. At the end of this sequence there is Node.js http server, which wraps the TCP stream into HTTP protocol, so the video can be viewed with a normal browser. In case the streaming is already running the command just returns silently. Simultaneous streaming on multiple ports/with different configs is not supported. It is necessary to stop the current stream before starting a new one. Supported arguments width : The desired width of the resulting images. This is set to the actual width of the device's screen if unset. The output stream is going to be scaled if the width value is less than the original one. It is recommended to keep the original scale while setting a custom width/height. height : The desired height of the resulting images. This is set to the actual height of the device's screen if unset. The output stream is going to be scaled if the height value is less than the original one. It is recommended to keep the original scale while setting a custom width/height. bitRate : The bit rate of the original h264-encoded video stream. By default it equals to 4000000 bit/s. It is recommended to set it to lower values if you observe serious frame drop in the resulting MJPEG video. host : The IP address/host name to start the HTTP MJPEG server on. You can set it to 0.0.0.0 to trigger the broadcast on all available network interfaces. 127.0.0.1 by default. port : The port number to start the HTTP MJPEG server on. 8093 by default. pathname : The HTTP request path the MJPEG server should be available on. If unset then any pathname on the given host / port combination will work. Note that the value should always start with a single slash: / tcpPort : The port number to start the internal TCP MJPEG broadcast on. This type of broadcast always starts on the loopback interface ( 127.0.0.1 ). 8094 by default. quality : The quality value for the streamed JPEG images. This number should be in range [1, 100], where 100 is the best quality. 70 by default. considerRotation : If set to true then GStreamer pipeline will increase the dimensions of the resulting images to properly fit images in both landscape and portrait orientations. Set it to true if the device rotation is not going to be the same during the broadcasting session. false by default. logPipelineDetails : Whether to log GStreamer pipeline events into the standard log output. Might be useful for debugging purposes. false by default. Usage examples // Java Map String, Object args = new HashMap (); args.put( width , 1080); args.put( height , 1920); args.put( considerRotation , true); args.put( quality , 45); args.put( bitRate , 500000); driver.executeScript( mobile: startScreenStreaming , args); # Python driver.execute_script('mobile: startScreenStreaming', { 'width': 1080, 'height': 1920, 'considerRotation': True, 'quality': 45, 'bitRate': 500000, }) mobile: stopScreenStreaming Stops the running screen streaming session. If no session has been started before then no action is done. Note that screen streaming session is always stopped automatically as soon as the container driver session is terminated. Usage examples // Java driver.executeScript( mobile: stopScreenStreaming ); # Python driver.execute_script('mobile: stopScreenStreaming')","title":"Android Device Screen Streaming"},{"location":"writing-running-appium/android/android-screen-streaming/#android-device-screen-streaming-with-appium","text":"Since Appium 1.16 there is a possibility to stream the screen of the device under test to one or more remote clients. The currently displayed content is broadcasted as configurable MJPEG stream over http protocol. This allows to observe automated test execution while it is running and catch possible issues earlier. Single MJPEG server supports multiple simultaneous clients that can receive screen updates at the same time. The framerate there depends on the server and device performance, but is close to the real time one and can reach up to 60 frames per second, especially with properly adjusted bitrate and/or scaled screen dimensions.","title":"Android Device Screen Streaming With Appium"},{"location":"writing-running-appium/android/android-screen-streaming/#mobile-startscreenstreaming","text":"Starts streaming of the device's screen. The streaming can only be started if all the requirements are met: - GStreamer binaries are installed on the server machine. For example, it can be installed using the following command on Mac OS: brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav - The device under test has screenrecord utility available and the utility supports --output-format=h264 option. Emulators only have this utility since API 27. - The adb_screen_streaming server feature is enabled. The command initializes low-level streaming with adb, pipes it to GStreamer pipeline, which converts h264-encoded frames into JPEG images and sends them to a TCP socket. At the end of this sequence there is Node.js http server, which wraps the TCP stream into HTTP protocol, so the video can be viewed with a normal browser. In case the streaming is already running the command just returns silently. Simultaneous streaming on multiple ports/with different configs is not supported. It is necessary to stop the current stream before starting a new one.","title":"mobile: startScreenStreaming"},{"location":"writing-running-appium/android/android-screen-streaming/#supported-arguments","text":"width : The desired width of the resulting images. This is set to the actual width of the device's screen if unset. The output stream is going to be scaled if the width value is less than the original one. It is recommended to keep the original scale while setting a custom width/height. height : The desired height of the resulting images. This is set to the actual height of the device's screen if unset. The output stream is going to be scaled if the height value is less than the original one. It is recommended to keep the original scale while setting a custom width/height. bitRate : The bit rate of the original h264-encoded video stream. By default it equals to 4000000 bit/s. It is recommended to set it to lower values if you observe serious frame drop in the resulting MJPEG video. host : The IP address/host name to start the HTTP MJPEG server on. You can set it to 0.0.0.0 to trigger the broadcast on all available network interfaces. 127.0.0.1 by default. port : The port number to start the HTTP MJPEG server on. 8093 by default. pathname : The HTTP request path the MJPEG server should be available on. If unset then any pathname on the given host / port combination will work. Note that the value should always start with a single slash: / tcpPort : The port number to start the internal TCP MJPEG broadcast on. This type of broadcast always starts on the loopback interface ( 127.0.0.1 ). 8094 by default. quality : The quality value for the streamed JPEG images. This number should be in range [1, 100], where 100 is the best quality. 70 by default. considerRotation : If set to true then GStreamer pipeline will increase the dimensions of the resulting images to properly fit images in both landscape and portrait orientations. Set it to true if the device rotation is not going to be the same during the broadcasting session. false by default. logPipelineDetails : Whether to log GStreamer pipeline events into the standard log output. Might be useful for debugging purposes. false by default.","title":"Supported arguments"},{"location":"writing-running-appium/android/android-screen-streaming/#usage-examples","text":"// Java Map String, Object args = new HashMap (); args.put( width , 1080); args.put( height , 1920); args.put( considerRotation , true); args.put( quality , 45); args.put( bitRate , 500000); driver.executeScript( mobile: startScreenStreaming , args); # Python driver.execute_script('mobile: startScreenStreaming', { 'width': 1080, 'height': 1920, 'considerRotation': True, 'quality': 45, 'bitRate': 500000, })","title":"Usage examples"},{"location":"writing-running-appium/android/android-screen-streaming/#mobile-stopscreenstreaming","text":"Stops the running screen streaming session. If no session has been started before then no action is done. Note that screen streaming session is always stopped automatically as soon as the container driver session is terminated.","title":"mobile: stopScreenStreaming"},{"location":"writing-running-appium/android/android-screen-streaming/#usage-examples_1","text":"// Java driver.executeScript( mobile: stopScreenStreaming ); # Python driver.execute_script('mobile: stopScreenStreaming')","title":"Usage examples"},{"location":"writing-running-appium/android/android-shell/","text":"How To Execute Shell Commands On The Remote Device It is possible to execute any command on the remote Android device or an emulator under test and get the output from it. This action might be potentially insecure and is disabled on the server side by default. One must provide the --relaxed-security command line argument while starting the server in order to enable remote shell commands execution (and other insecure features, which are disabled by default). An exception will be thrown if the relaxed security has not been enabled on the server side and one tries to invoke mobile: shell endpoint on the client side. mobile: shell Executes the given shell command on the device under test and returns its stdout or both stdout and stderr if includeStderr is set to true . An exception will be thrown if the command's return code is not zero. This command acts in the same manner as it would be executed via adb shell on the host computer. Supported arguments command : The name of the remote command. It can also be a full path to an executable, for example /bin/ls . The parameter is mandatory. args : The list of command arguments represented as an array of strings. If a single string is provided then it will be automatically transformed into one-item array. Optional parameter. includeStderr : Set this argument to true in order to include stderr output to the returned result along with stdout. If enabled then the returned result will be a map of stdout and stderr keys containing the corresponding strings otherwise it is just a simple string. false by default. timeout : The shell command timeout in milliseconds. If the command requires more time to finish execution then an exception is going to be thrown. 20000 ms by default. Usage examples // Java Map String, Object args = new HashMap (); args.put( command , echo ); args.put( args , Lists.newArrayList( arg1 , arg2 )); String output = driver.executeScript( mobile: shell , args); assert output.equals( arg1 arg2 ); # Python result = driver.execute_script('mobile: shell', { 'command': 'echo', 'args': ['arg1', 'arg2'], 'includeStderr': True, 'timeout': 5000 }) assert result['stdout'] == 'arg1 arg2' // Javascript const output = driver.executeScript('mobile: shell', [{ command: 'ls', args: ['/sdcard'], }]);","title":"How To Execute Shell Commands On The Remote Device"},{"location":"writing-running-appium/android/android-shell/#how-to-execute-shell-commands-on-the-remote-device","text":"It is possible to execute any command on the remote Android device or an emulator under test and get the output from it. This action might be potentially insecure and is disabled on the server side by default. One must provide the --relaxed-security command line argument while starting the server in order to enable remote shell commands execution (and other insecure features, which are disabled by default). An exception will be thrown if the relaxed security has not been enabled on the server side and one tries to invoke mobile: shell endpoint on the client side.","title":"How To Execute Shell Commands On The Remote Device"},{"location":"writing-running-appium/android/android-shell/#mobile-shell","text":"Executes the given shell command on the device under test and returns its stdout or both stdout and stderr if includeStderr is set to true . An exception will be thrown if the command's return code is not zero. This command acts in the same manner as it would be executed via adb shell on the host computer.","title":"mobile: shell"},{"location":"writing-running-appium/android/android-shell/#supported-arguments","text":"command : The name of the remote command. It can also be a full path to an executable, for example /bin/ls . The parameter is mandatory. args : The list of command arguments represented as an array of strings. If a single string is provided then it will be automatically transformed into one-item array. Optional parameter. includeStderr : Set this argument to true in order to include stderr output to the returned result along with stdout. If enabled then the returned result will be a map of stdout and stderr keys containing the corresponding strings otherwise it is just a simple string. false by default. timeout : The shell command timeout in milliseconds. If the command requires more time to finish execution then an exception is going to be thrown. 20000 ms by default.","title":"Supported arguments"},{"location":"writing-running-appium/android/android-shell/#usage-examples","text":"// Java Map String, Object args = new HashMap (); args.put( command , echo ); args.put( args , Lists.newArrayList( arg1 , arg2 )); String output = driver.executeScript( mobile: shell , args); assert output.equals( arg1 arg2 ); # Python result = driver.execute_script('mobile: shell', { 'command': 'echo', 'args': ['arg1', 'arg2'], 'includeStderr': True, 'timeout': 5000 }) assert result['stdout'] == 'arg1 arg2' // Javascript const output = driver.executeScript('mobile: shell', [{ command: 'ls', args: ['/sdcard'], }]);","title":"Usage examples"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/","text":"Espresso DataMatcher Selector By delegating to Espresso's Data Matcher , we can target views that are not visible in the viewport without the need to manually scroll the Views on screen. AdapterViews Android apps have special types of Views called AdapterViews (e.g.: ScrollView , ListView , GridView ) which have child views, but only render that child views that are on-screen. The AdapterView has \"adapter\" object which stores all the data for that view's children, including the views that aren't being rendered. When using Espresso's Data Matcher, you can target views that are off-screen by writing a Hamcrest matcher that selects an item from an adapter. If the item is not in the view hierarchy, Espresso automatically scrolls it into view. Example This is a ListView taken from the source XML of an Android App: android.widget.ListView index= 0 package= io.appium.android.apis class= android.widget.ListView checkable= false checked= false clickable= true enabled= true focusable= true focused= false scrollable= true long-clickable= false password= false selected= false visible= true bounds= [0,210][1080,1794] resource-id= android:id/list adapter-type= HashMap adapters= {contentDescription=Animation, title=Animation, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }},{contentDescription=Auto Complete, title=Auto Complete, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }}, ...} android.widget.TextView index= 0 package= io.appium.android.apis class= android.widget.TextView content-desc= Drag and Drop checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,148][1080,274] text= Drag and Drop hint= false resource-id= android:id/text1 / android.widget.TextView index= 1 package= io.appium.android.apis class= android.widget.TextView content-desc= Expandable Lists checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,277][1080,403] text= Expandable Lists hint= false resource-id= android:id/text1 / android.widget.TextView index= 2 package= io.appium.android.apis class= android.widget.TextView content-desc= Focus checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,406][1080,532] text= Focus hint= false resource-id= android:id/text1 / android.widget.TextView index= 3 package= io.appium.android.apis class= android.widget.TextView content-desc= Gallery checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,535][1080,661] text= Gallery hint= false resource-id= android:id/text1 / android.widget.TextView index= 4 package= io.appium.android.apis class= android.widget.TextView content-desc= Game Controller Input checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,664][1080,790] text= Game Controller Input hint= false resource-id= android:id/text1 / android.widget.TextView index= 5 package= io.appium.android.apis class= android.widget.TextView content-desc= Grid checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,793][1080,919] text= Grid hint= false resource-id= android:id/text1 / android.widget.TextView index= 6 package= io.appium.android.apis class= android.widget.TextView content-desc= Hover Events checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,922][1080,1048] text= Hover Events hint= false resource-id= android:id/text1 / android.widget.TextView index= 7 package= io.appium.android.apis class= android.widget.TextView content-desc= ImageButton checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1051][1080,1177] text= ImageButton hint= false resource-id= android:id/text1 / android.widget.TextView index= 8 package= io.appium.android.apis class= android.widget.TextView content-desc= ImageSwitcher checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1180][1080,1306] text= ImageSwitcher hint= false resource-id= android:id/text1 / android.widget.TextView index= 9 package= io.appium.android.apis class= android.widget.TextView content-desc= ImageView checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1309][1080,1435] text= ImageView hint= false resource-id= android:id/text1 / android.widget.TextView index= 10 package= io.appium.android.apis class= android.widget.TextView content-desc= Layout Animation checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1438][1080,1564] text= Layout Animation hint= false resource-id= android:id/text1 / android.widget.TextView index= 11 package= io.appium.android.apis class= android.widget.TextView content-desc= Layouts checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1567][1080,1693] text= Layouts hint= false resource-id= android:id/text1 / android.widget.TextView index= 12 package= io.appium.android.apis class= android.widget.TextView content-desc= Lists checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1696][1080,1822] text= Lists hint= false resource-id= android:id/text1 / /android.widget.ListView This ListView displays menu items [ Drag and Drop , Expandable Lists , ... to Lists ]. This menu has several more items that aren't on-screen and can't be located with standard locators. For example, There's a menu item called TextClock that is not currently visible in the View hierarchy. The ListView node in the above XML has an attribute called adapters that contains the data that \"backs up\" the ListView: { contentDescription = Animation, title = Animation, intent = Intent { cmp = io.appium.android.apis / .ApiDemos(has extras) } }, { contentDescription = Auto Complete, title = Auto Complete, intent = Intent { cmp = io.appium.android.apis / .ApiDemos(has extras) } }, { contentDescription = Buttons, title = Buttons, intent = Intent { cmp = io.appium.android.apis / .view.Buttons1 } }, ... These items can be targeted using a datamatcher selector. Here's a code snippet that shows how to locate and click TextClock : // Javascript example driver.findElementById( list ) .findElement( -android datamatcher , JSON.stringify({ name : hasEntry , args : [ title , TextClock ] })) .click(); # Ruby @driver.find_element(:id, 'list') .find_element(:data_matcher, { name: 'hasEntry', args: ['title', 'TextClock'] }.to_json) .click # Python driver.find_element_by_id('list') .find_element_by_android_data_matcher({ name='hasEntry', args=['title', 'TextClock'] }) .click() This Appium selector is equivalent to writing this matcher in Espresso: // Espresso code (not Appium code) onData(hasEntry( title , textClock ) .inAdapterView(withId( android:id/list)) .perform(click()); In this example, we select the parent AdapterView using an id selector and then find a child of that view by applying a Hamcrest Matcher that matches an object with title=\"TextClock\" . Locating the parent AdapterView is not necessary if the Activity only has one adapter view. In that case, it can be omitted. driver.findElement( -android datamatcher , JSON.stringify({ name : hasEntry , args : [ title , TextClock ] })) .click(); # Ruby @driver.find_element(:data_matcher, { name: 'hasEntry', args: ['title', 'TextClock'] }.to_json).click # Python driver.find_element_by_android_data_matcher({ name='hasEntry', args=['title', 'TextClock'] }).click() Writing the Selector The data matcher selector uses Java reflection to invoke a Hamcrest matcher that's used to locate the adapter object. The matcher is in JSON format and has this format { name : METHOD_NAME , args : [...], The name is a Hamcrest matcher method name. This defaults to the org.hamcrest.Matchers namespace, but fully qualifed matcher method names can be used too (e.g.: android.support.test.espresso.matcher.CursorMatchers.withRowBlob ). The args are a list of args that the method takes (can be undefined if it takes no args). These can be strings, numbers, booleans or other hamcrest matcher JSON definitions. JSON matcher samples Examples of JSON matchers with the equivalent Espresso onData matcher StartsWith // 'startsWith' JSON { name : startsWith , args : substr // if it's a single arg, we don't need args to be an array } // Espresso 'startsWith' example onData(startsWith( substr )); Multiple Matchers // 'multiple matchers' JSON { name : allOf , args : [ { name : instanceOf , args : Map.class }, { name : hasEntry , args : { name : equalTo , args : STR }}, { name : is , args : item: 50 } ] } // Espresso 'multiple matchers' example onData(allOf(is(instanceOf(Map.class)), hasEntry(equalTo( STR ), is( item: 50 )))); Cursor Matchers // 'cursor matchers' JSON { name : is , args : { name : instanceOf , args : Cursor.class }, name : CursorMatchers.withRowString , args : [ job_title , { name : is , args : Barista } ] } // Espresso 'cursor matchers' example onData( is(instanceOf(Cursor.class)), CursorMatchers.withRowString( job_title , is( Barista )) ); Resources Explanation of Views vs. Data in Espresso Espresso lists","title":"Espresso Datamatcher Guide"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#espresso-datamatcher-selector","text":"By delegating to Espresso's Data Matcher , we can target views that are not visible in the viewport without the need to manually scroll the Views on screen.","title":"Espresso DataMatcher Selector"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#adapterviews","text":"Android apps have special types of Views called AdapterViews (e.g.: ScrollView , ListView , GridView ) which have child views, but only render that child views that are on-screen. The AdapterView has \"adapter\" object which stores all the data for that view's children, including the views that aren't being rendered. When using Espresso's Data Matcher, you can target views that are off-screen by writing a Hamcrest matcher that selects an item from an adapter. If the item is not in the view hierarchy, Espresso automatically scrolls it into view.","title":"AdapterViews"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#example","text":"This is a ListView taken from the source XML of an Android App: android.widget.ListView index= 0 package= io.appium.android.apis class= android.widget.ListView checkable= false checked= false clickable= true enabled= true focusable= true focused= false scrollable= true long-clickable= false password= false selected= false visible= true bounds= [0,210][1080,1794] resource-id= android:id/list adapter-type= HashMap adapters= {contentDescription=Animation, title=Animation, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }},{contentDescription=Auto Complete, title=Auto Complete, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }}, ...} android.widget.TextView index= 0 package= io.appium.android.apis class= android.widget.TextView content-desc= Drag and Drop checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,148][1080,274] text= Drag and Drop hint= false resource-id= android:id/text1 / android.widget.TextView index= 1 package= io.appium.android.apis class= android.widget.TextView content-desc= Expandable Lists checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,277][1080,403] text= Expandable Lists hint= false resource-id= android:id/text1 / android.widget.TextView index= 2 package= io.appium.android.apis class= android.widget.TextView content-desc= Focus checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,406][1080,532] text= Focus hint= false resource-id= android:id/text1 / android.widget.TextView index= 3 package= io.appium.android.apis class= android.widget.TextView content-desc= Gallery checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,535][1080,661] text= Gallery hint= false resource-id= android:id/text1 / android.widget.TextView index= 4 package= io.appium.android.apis class= android.widget.TextView content-desc= Game Controller Input checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,664][1080,790] text= Game Controller Input hint= false resource-id= android:id/text1 / android.widget.TextView index= 5 package= io.appium.android.apis class= android.widget.TextView content-desc= Grid checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,793][1080,919] text= Grid hint= false resource-id= android:id/text1 / android.widget.TextView index= 6 package= io.appium.android.apis class= android.widget.TextView content-desc= Hover Events checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,922][1080,1048] text= Hover Events hint= false resource-id= android:id/text1 / android.widget.TextView index= 7 package= io.appium.android.apis class= android.widget.TextView content-desc= ImageButton checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1051][1080,1177] text= ImageButton hint= false resource-id= android:id/text1 / android.widget.TextView index= 8 package= io.appium.android.apis class= android.widget.TextView content-desc= ImageSwitcher checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1180][1080,1306] text= ImageSwitcher hint= false resource-id= android:id/text1 / android.widget.TextView index= 9 package= io.appium.android.apis class= android.widget.TextView content-desc= ImageView checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1309][1080,1435] text= ImageView hint= false resource-id= android:id/text1 / android.widget.TextView index= 10 package= io.appium.android.apis class= android.widget.TextView content-desc= Layout Animation checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1438][1080,1564] text= Layout Animation hint= false resource-id= android:id/text1 / android.widget.TextView index= 11 package= io.appium.android.apis class= android.widget.TextView content-desc= Layouts checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1567][1080,1693] text= Layouts hint= false resource-id= android:id/text1 / android.widget.TextView index= 12 package= io.appium.android.apis class= android.widget.TextView content-desc= Lists checkable= false checked= false clickable= false enabled= true focusable= false focused= false scrollable= false long-clickable= false password= false selected= false visible= true bounds= [0,1696][1080,1822] text= Lists hint= false resource-id= android:id/text1 / /android.widget.ListView This ListView displays menu items [ Drag and Drop , Expandable Lists , ... to Lists ]. This menu has several more items that aren't on-screen and can't be located with standard locators. For example, There's a menu item called TextClock that is not currently visible in the View hierarchy. The ListView node in the above XML has an attribute called adapters that contains the data that \"backs up\" the ListView: { contentDescription = Animation, title = Animation, intent = Intent { cmp = io.appium.android.apis / .ApiDemos(has extras) } }, { contentDescription = Auto Complete, title = Auto Complete, intent = Intent { cmp = io.appium.android.apis / .ApiDemos(has extras) } }, { contentDescription = Buttons, title = Buttons, intent = Intent { cmp = io.appium.android.apis / .view.Buttons1 } }, ... These items can be targeted using a datamatcher selector. Here's a code snippet that shows how to locate and click TextClock : // Javascript example driver.findElementById( list ) .findElement( -android datamatcher , JSON.stringify({ name : hasEntry , args : [ title , TextClock ] })) .click(); # Ruby @driver.find_element(:id, 'list') .find_element(:data_matcher, { name: 'hasEntry', args: ['title', 'TextClock'] }.to_json) .click # Python driver.find_element_by_id('list') .find_element_by_android_data_matcher({ name='hasEntry', args=['title', 'TextClock'] }) .click() This Appium selector is equivalent to writing this matcher in Espresso: // Espresso code (not Appium code) onData(hasEntry( title , textClock ) .inAdapterView(withId( android:id/list)) .perform(click()); In this example, we select the parent AdapterView using an id selector and then find a child of that view by applying a Hamcrest Matcher that matches an object with title=\"TextClock\" . Locating the parent AdapterView is not necessary if the Activity only has one adapter view. In that case, it can be omitted. driver.findElement( -android datamatcher , JSON.stringify({ name : hasEntry , args : [ title , TextClock ] })) .click(); # Ruby @driver.find_element(:data_matcher, { name: 'hasEntry', args: ['title', 'TextClock'] }.to_json).click # Python driver.find_element_by_android_data_matcher({ name='hasEntry', args=['title', 'TextClock'] }).click()","title":"Example"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#writing-the-selector","text":"The data matcher selector uses Java reflection to invoke a Hamcrest matcher that's used to locate the adapter object. The matcher is in JSON format and has this format { name : METHOD_NAME , args : [...], The name is a Hamcrest matcher method name. This defaults to the org.hamcrest.Matchers namespace, but fully qualifed matcher method names can be used too (e.g.: android.support.test.espresso.matcher.CursorMatchers.withRowBlob ). The args are a list of args that the method takes (can be undefined if it takes no args). These can be strings, numbers, booleans or other hamcrest matcher JSON definitions.","title":"Writing the Selector"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#json-matcher-samples","text":"Examples of JSON matchers with the equivalent Espresso onData matcher","title":"JSON matcher samples"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#startswith","text":"// 'startsWith' JSON { name : startsWith , args : substr // if it's a single arg, we don't need args to be an array } // Espresso 'startsWith' example onData(startsWith( substr ));","title":"StartsWith"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#multiple-matchers","text":"// 'multiple matchers' JSON { name : allOf , args : [ { name : instanceOf , args : Map.class }, { name : hasEntry , args : { name : equalTo , args : STR }}, { name : is , args : item: 50 } ] } // Espresso 'multiple matchers' example onData(allOf(is(instanceOf(Map.class)), hasEntry(equalTo( STR ), is( item: 50 ))));","title":"Multiple Matchers"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#cursor-matchers","text":"// 'cursor matchers' JSON { name : is , args : { name : instanceOf , args : Cursor.class }, name : CursorMatchers.withRowString , args : [ job_title , { name : is , args : Barista } ] } // Espresso 'cursor matchers' example onData( is(instanceOf(Cursor.class)), CursorMatchers.withRowString( job_title , is( Barista )) );","title":"Cursor Matchers"},{"location":"writing-running-appium/android/espresso-datamatcher-selector/#resources","text":"Explanation of Views vs. Data in Espresso Espresso lists","title":"Resources"},{"location":"writing-running-appium/android/uiautomator-uiselector/","text":"uiautomator UiSelector Appium enables searching using UiSelectors . UiScrollable is also supported. Note that the index selector is unreliable so prefer instance instead. The following examples are written against the api demos apk using Ruby. Find the first textview. # ruby first_textview = find_element(:uiautomator, 'new UiSelector().className( android.widget.TextView ).instance(0)'); Find the first element by text. # ruby first_text = find_element(:uiautomator, 'new UiSelector().text( Animation )') first_text.text # Animation Find the first scrollable element, then find a TextView with the text \"Tabs\". The \"Tabs\" element will be scrolled into view. # ruby element = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).getChildByText(new UiSelector().className( android.widget.TextView ), Tabs )') As a special case, scrollIntoView returns the element that is scrolled into view. scrollIntoView allows scrolling to any UiSelector. # ruby element = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text( WebView ).instance(0));') element.text # WebView","title":"UiSelector Guide"},{"location":"writing-running-appium/android/uiautomator-uiselector/#uiautomator-uiselector","text":"Appium enables searching using UiSelectors . UiScrollable is also supported. Note that the index selector is unreliable so prefer instance instead. The following examples are written against the api demos apk using Ruby. Find the first textview. # ruby first_textview = find_element(:uiautomator, 'new UiSelector().className( android.widget.TextView ).instance(0)'); Find the first element by text. # ruby first_text = find_element(:uiautomator, 'new UiSelector().text( Animation )') first_text.text # Animation Find the first scrollable element, then find a TextView with the text \"Tabs\". The \"Tabs\" element will be scrolled into view. # ruby element = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).getChildByText(new UiSelector().className( android.widget.TextView ), Tabs )') As a special case, scrollIntoView returns the element that is scrolled into view. scrollIntoView allows scrolling to any UiSelector. # ruby element = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text( WebView ).instance(0));') element.text # WebView","title":"uiautomator UiSelector"},{"location":"writing-running-appium/ios/actions/","text":"Low-Level Insights on iOS Input Events What Are Input Events iOS uses events concept to handle signals received from different input devices. An event is an object, which is generated in response to a signal from an input device. These objects are then delivered to the corresponding kernel subsystem, which processes them and notifies all listening processes about taps, key presses, swipes, etc. This means that in order to emulate a signal generated by an external device, such as touch screen, it is necessary to just send event objects with the same properties and in the same sequence as they would be generated by a real device. Lets Simulate a Single Tap The events API itself is a part of Apple private API and is not open sourced and neither it is documented. XCTest framework also does not expose any public APIs for input events generation. Although, there is a possibility to perform events generation via XCTest private undocumented APIs. In particular, we are interested in XCPointerEventPath and XCSynthesizedEventRecord interfaces. These APIs allow to create chains of input events and supply them to the system kernel for execution. In order to synthesize a single tap it is necessary to: - Create a new XCPointerEventPath instance and init it for touch at the starting point - Add a new liftUp event at 0.125s offset using liftUpAtOffset: method - Add the generated event path object to XCSynthesizedEventRecord instance using addPointerEventPath: method - Execute the events using synthesizeWithError: method of XCSynthesizedEventRecord instance and control the returned error There are several limitations to these APIs: - Each XCPointerEventPath instance can only be executed for a single action. If one tries to add, for example, two taps to a single path, then these are effectively ignored - Each XCPointerEventPath instance can only be initialized for a particular pointer type: touch, mouse (since Xcode 10.2) or keyboard (since Xcode 10.2) - Events can only be added with increasing offset values to an existing XCPointerEventPath instance How About More Complicated Actions Unfortunately, the API is private and has zero documentation. That is why one can only figure out what it really can while playing with it and trying different input combinations. It is known that providing multiple XCPointerEventPath instances with overlapping timeouts will generate a multitouch action with the amount of fingers equal to the amount of the supplied event paths. So, in order to generate two-finger symmetric swipe we need to supply the following events: Create a two XCPointerEventPath instances and init them for touch at the starting point Add a moveToPoint event at 0.525s offset using moveToPoint: method to each path Add a liftUp eventa at 0.525s offset using liftUpAtOffset: method to each path Add the generated event paths to XCSynthesizedEventRecord instance using addPointerEventPath: method Execute the events using synthesizeWithError: method of XCSynthesizedEventRecord instance and control the returned error Further Reading Unfortunately, there is no information on this topic at all (private API \u00af\\_(\u30c4)_/\u00af ). Consider visiting the following resources: https://github.com/appium/WebDriverAgent/tree/master/PrivateHeaders/XCTest https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CTouchActionsIntegrationTests.m https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CMultiTouchActionsIntegrationTests.m https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentLib/Utilities/FBW3CActionsSynthesizer.m","title":"Low-Level Insights on iOS Input Events"},{"location":"writing-running-appium/ios/actions/#low-level-insights-on-ios-input-events","text":"","title":"Low-Level Insights on iOS Input Events"},{"location":"writing-running-appium/ios/actions/#what-are-input-events","text":"iOS uses events concept to handle signals received from different input devices. An event is an object, which is generated in response to a signal from an input device. These objects are then delivered to the corresponding kernel subsystem, which processes them and notifies all listening processes about taps, key presses, swipes, etc. This means that in order to emulate a signal generated by an external device, such as touch screen, it is necessary to just send event objects with the same properties and in the same sequence as they would be generated by a real device.","title":"What Are Input Events"},{"location":"writing-running-appium/ios/actions/#lets-simulate-a-single-tap","text":"The events API itself is a part of Apple private API and is not open sourced and neither it is documented. XCTest framework also does not expose any public APIs for input events generation. Although, there is a possibility to perform events generation via XCTest private undocumented APIs. In particular, we are interested in XCPointerEventPath and XCSynthesizedEventRecord interfaces. These APIs allow to create chains of input events and supply them to the system kernel for execution. In order to synthesize a single tap it is necessary to: - Create a new XCPointerEventPath instance and init it for touch at the starting point - Add a new liftUp event at 0.125s offset using liftUpAtOffset: method - Add the generated event path object to XCSynthesizedEventRecord instance using addPointerEventPath: method - Execute the events using synthesizeWithError: method of XCSynthesizedEventRecord instance and control the returned error There are several limitations to these APIs: - Each XCPointerEventPath instance can only be executed for a single action. If one tries to add, for example, two taps to a single path, then these are effectively ignored - Each XCPointerEventPath instance can only be initialized for a particular pointer type: touch, mouse (since Xcode 10.2) or keyboard (since Xcode 10.2) - Events can only be added with increasing offset values to an existing XCPointerEventPath instance","title":"Lets Simulate a Single Tap"},{"location":"writing-running-appium/ios/actions/#how-about-more-complicated-actions","text":"Unfortunately, the API is private and has zero documentation. That is why one can only figure out what it really can while playing with it and trying different input combinations. It is known that providing multiple XCPointerEventPath instances with overlapping timeouts will generate a multitouch action with the amount of fingers equal to the amount of the supplied event paths. So, in order to generate two-finger symmetric swipe we need to supply the following events: Create a two XCPointerEventPath instances and init them for touch at the starting point Add a moveToPoint event at 0.525s offset using moveToPoint: method to each path Add a liftUp eventa at 0.525s offset using liftUpAtOffset: method to each path Add the generated event paths to XCSynthesizedEventRecord instance using addPointerEventPath: method Execute the events using synthesizeWithError: method of XCSynthesizedEventRecord instance and control the returned error","title":"How About More Complicated Actions"},{"location":"writing-running-appium/ios/actions/#further-reading","text":"Unfortunately, there is no information on this topic at all (private API \u00af\\_(\u30c4)_/\u00af ). Consider visiting the following resources: https://github.com/appium/WebDriverAgent/tree/master/PrivateHeaders/XCTest https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CTouchActionsIntegrationTests.m https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CMultiTouchActionsIntegrationTests.m https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentLib/Utilities/FBW3CActionsSynthesizer.m","title":"Further Reading"},{"location":"writing-running-appium/ios/audio-capture/","text":"Audio Capture From iOS Simulators and Real Devices Client Side API Since Appium 1.18.0 there is a possibility to record iOS audio stream and save it to a file, which could be then retrieved on the client side. Apple does not provide any API to directly retrieve the audio stream from a Simulator or a real device, but it is possible to redirect that stream to the host machine, where it could be captured. mobile: startAudioRecording mobile: stopAudioRecording Server Requirements Appium version should be 1.18.0 or newer. It is mandatory that the host machine has FFMPEG installed and available in PATH. On macOS it could be installed via Brew : brew install ffmpeg . macOS since version 10.15 requires applications that record Microphone audio to be explicitly enabled in System Preferences- Security Privacy- Privacy- Microphone tab. Make sure either FFMPEG itself or the parent Appium process (e.g. Terminal) is present in that list. The feature is potentially unsecure, so it must be explicitly allowed on the server side. The feature name is audio_record . See Security for more details. Simulator Setup The following steps are necessary to setup iOS Simulator audio capture: Install Soundflower Redirect Simulator audio output to Soundflower. From the main Simulator menu select I/O- Audio Output- Soundflower (2ch) Run ffmpeg -f avfoundation -list_devices true -i \"\" command in Terminal to get the identifier of the Soundflower (2ch) device. This identifier prefixed with : will be then used as audioInput argument to mobile: startAudioRecording call Test that your setup works as expected. Run any audio playback in Simulator and execute the following command in Terminal (do not forget to replace the -i argument value with the one you got from the previous step): ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4 . After 5 seconds there should be out.mp4 file on your Desktop containing the recorded audio stream. Real Device Setup The following steps are necessary to setup iOS Real Device audio capture: Connect your device to the Mac host with a cable Run open -a /System/Applications/Utilities/Audio\\ MIDI\\ Setup.app application Find your phone in the list of devices there and click Enable button next to it Run ffmpeg -f avfoundation -list_devices true -i \"\" command in Terminal and find the identifier of your device in the AVFoundation audio devices list. This identifier prefixed with : will be then used as audioInput argument to mobile: startAudioRecording call Test that your setup works as expected. Run any audio playback on the device and execute the following command in Terminal (do not forget to replace the -i argument value with the value you got from the previous step): ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4 . After 5 seconds there should be out.mp4 file on your Desktop containing the recorded audio stream. Apple does not allow phone calls to be redirected this way. You can only record application or system sounds. Further Reading https://github.com/appium/appium-xcuitest-driver/pull/1207 https://www.macobserver.com/tips/quick-tip/iphone-audio-input-mac/ http://www.lorisware.com/blog/2012/04/28/recording-iphone-emulator-video-with-sound/","title":"Audio Capture"},{"location":"writing-running-appium/ios/audio-capture/#audio-capture-from-ios-simulators-and-real-devices","text":"","title":"Audio Capture From iOS Simulators and Real Devices"},{"location":"writing-running-appium/ios/audio-capture/#client-side-api","text":"Since Appium 1.18.0 there is a possibility to record iOS audio stream and save it to a file, which could be then retrieved on the client side. Apple does not provide any API to directly retrieve the audio stream from a Simulator or a real device, but it is possible to redirect that stream to the host machine, where it could be captured. mobile: startAudioRecording mobile: stopAudioRecording","title":"Client Side API"},{"location":"writing-running-appium/ios/audio-capture/#server-requirements","text":"Appium version should be 1.18.0 or newer. It is mandatory that the host machine has FFMPEG installed and available in PATH. On macOS it could be installed via Brew : brew install ffmpeg . macOS since version 10.15 requires applications that record Microphone audio to be explicitly enabled in System Preferences- Security Privacy- Privacy- Microphone tab. Make sure either FFMPEG itself or the parent Appium process (e.g. Terminal) is present in that list. The feature is potentially unsecure, so it must be explicitly allowed on the server side. The feature name is audio_record . See Security for more details.","title":"Server Requirements"},{"location":"writing-running-appium/ios/audio-capture/#simulator-setup","text":"The following steps are necessary to setup iOS Simulator audio capture: Install Soundflower Redirect Simulator audio output to Soundflower. From the main Simulator menu select I/O- Audio Output- Soundflower (2ch) Run ffmpeg -f avfoundation -list_devices true -i \"\" command in Terminal to get the identifier of the Soundflower (2ch) device. This identifier prefixed with : will be then used as audioInput argument to mobile: startAudioRecording call Test that your setup works as expected. Run any audio playback in Simulator and execute the following command in Terminal (do not forget to replace the -i argument value with the one you got from the previous step): ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4 . After 5 seconds there should be out.mp4 file on your Desktop containing the recorded audio stream.","title":"Simulator Setup"},{"location":"writing-running-appium/ios/audio-capture/#real-device-setup","text":"The following steps are necessary to setup iOS Real Device audio capture: Connect your device to the Mac host with a cable Run open -a /System/Applications/Utilities/Audio\\ MIDI\\ Setup.app application Find your phone in the list of devices there and click Enable button next to it Run ffmpeg -f avfoundation -list_devices true -i \"\" command in Terminal and find the identifier of your device in the AVFoundation audio devices list. This identifier prefixed with : will be then used as audioInput argument to mobile: startAudioRecording call Test that your setup works as expected. Run any audio playback on the device and execute the following command in Terminal (do not forget to replace the -i argument value with the value you got from the previous step): ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4 . After 5 seconds there should be out.mp4 file on your Desktop containing the recorded audio stream. Apple does not allow phone calls to be redirected this way. You can only record application or system sounds.","title":"Real Device Setup"},{"location":"writing-running-appium/ios/audio-capture/#further-reading","text":"https://github.com/appium/appium-xcuitest-driver/pull/1207 https://www.macobserver.com/tips/quick-tip/iphone-audio-input-mac/ http://www.lorisware.com/blog/2012/04/28/recording-iphone-emulator-video-with-sound/","title":"Further Reading"},{"location":"writing-running-appium/ios/ios-predicate/","text":"iOS Predicate NOTE : iOS predicates are usable in iOS 9.3 and below using the -ios uiautomation locator strategy and they are usable in iOS 10 and above using the -ios predicate string locator strategy It is worth looking at '-ios uiautomation' search strategy with Predicates . UIAutomation JavaScript API which has the following useful methods: (UIAElement) UIAElementArray.firstWithPredicate(PredicateString predicateString) (UIAElementArray) UIAElementArray.withPredicate(PredicateString predicateString) Native JS search strategy (powered by Apple) provides much more flexibility and is like Xpath. Predicates can be used to restrict an elements set to select only those ones for which some condition is true. '-ios uiautomation' example: // java appiumDriver.findElementsByIosUIAutomation( collectionViews()[0].cells().withPredicate(\\ ANY staticTexts.isVisible == TRUE\\ ) ); '-ios predicate string' example: // java appiumDriver.findElementsByIosNsPredicate( isWDVisible == 1 ); - will select only those UIACollectionCell elements that have visible UIAStaticText child elements, and themselves are childs of 1st UIACollectionView element that should be located under the main app window. Here staticTexts() and isVisible() are methods available in UIAElementArray and UIAElement classes respectively. Note that UIAElementArray numbering begins with 0 unlike Xpath where indexes counting starts from 1 Here's a list of available Predicates (mostly taken from Predicates Programming Guide ) Basic Comparisons = , == - The left-hand expression is equal to the right-hand expression: tableViews()[1].cells().firstWithPredicate( label == 'Olivia' ) same in Xpath: /UIATableView[2]/UIATableCell[@label = 'Olivia'][1] >= , => - The left-hand expression is greater than or equal to the right-hand expression. = , = - The left-hand expression is less than or equal to the right-hand expression. > - The left-hand expression is greater than the right-hand expression. - The left-hand expression is less than the right-hand expression. != , > - The left-hand expression is not equal to the right-hand expression. BETWEEN - The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example, 1 BETWEEN { 0 , 33 } , or $INPUT BETWEEN { $LOWER, $UPPER } . In Objective-C, you could create a BETWEEN predicate as shown in the following example: NSPredicate *betweenPredicate = [NSPredicate predicateWithFormat: @ attributeName BETWEEN %@ , @[@1, @10]]; This creates a predicate that matches ( ( 1 = attributeValue ) ( attributeValue = 10 ) ) Boolean Value Predicates TRUEPREDICATE - A predicate that always evaluates to TRUE . FALSEPREDICATE - A predicate that always evaluates to FALSE . Basic Compound Predicates AND , - Logical AND. OR , || - Logical OR. NOT , ! - Logical NOT. String Comparisons String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters c and d within square braces to specify case and diacritic insensitivity respectively, for example firstName BEGINSWITH[cd] $FIRST_NAME BEGINSWITH - The left-hand expression begins with the right-hand expression. scrollViews()[3].buttons().firstWithPredicate( name BEGINSWITH 'results toggle' ) same in Xpath: /UIAScrollView[4]/UIAButton[starts-with(@name, 'results toggle')][1] CONTAINS - The left-hand expression contains the right-hand expression. tableViews()[1].cells().withPredicate( ANY collectionViews[0].buttons.name CONTAINS 'opera' ) same in Xpath: /UIATableView[2]/UIATableCell[UIACollectionView[1]/UIAButton[contains(@name, 'opera')]] ENDSWITH - The left-hand expression ends with the right-hand expression. LIKE - The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters. tableViews()[0].cells().firstWithPredicate( name LIKE '*Total: $*' ) same in Xpath: /UIATableView[1]/UIATableCell[matches(@name, '.*Total: \\$.*')][1] MATCHES - The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for Regular Expressions ). tableViews().firstWithPredicate( value MATCHES '.*of 7' ) same in Xpath: /UIATableView[matches(@value, '.*of 7')][1] Aggregate Operations ANY , SOME - Specifies any of the elements in the following expression. For example ANY children.age 18 . tableViews()[0].cells().firstWithPredicate( SOME staticTexts.name = 'red' ).staticTexts().withName('red') same in Xpath: /UIATableView[1]/UIATableCell[UIAStaticText/@name = 'red'][1]/UIAStaticText[@name = 'red'] ALL - Specifies all of the elements in the following expression. For example ALL children.age 18 . NONE - Specifies none of the elements in the following expression. For example, NONE children.age 18 . This is logically equivalent to NOT (ANY ...) . IN - Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example, name IN { 'Ben', 'Melissa', 'Matthew' } . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used. array[index] - Specifies the element at the specified index in the array. array[FIRST] - Specifies the first element in the array. array[LAST] - Specifies the last element in the array. array[SIZE] - Specifies the size of the array elements()[0].tableViews()[0].cells().withPredicate( staticTexts[SIZE] 2 ) same in Xpath: /*[1]/UIATableView[1]/UIATableCell[count(UIAStaticText) 2] Identifiers C style identifier - Any C style identifier that is not a reserved word. #symbol - Used to escape a reserved word into a user identifier. [\\]{octaldigit}{3} - Used to escape an octal number ( \\ followed by 3 octal digits). [\\][xX]{hexdigit}{2} - Used to escape a hex number ( \\x or \\X followed by 2 hex digits). [\\][uU]{hexdigit}{4} - Used to escape a Unicode number ( \\u or \\U followed by 4 hex digits). Literals Single and double quotes produce the same result, but they do not terminate each other. For example, \"abc\" and 'abc' are identical, whereas \"a'b'c\" is equivalent to a space-separated concatenation of a, 'b', c . FALSE , NO - Logical false. TRUE , YES - Logical true. NULL , NIL - A null value. SELF - Represents the object being evaluated. \"text\" - A character string. 'text' - A character string. Comma-separated literal array - For example, { 'comma', 'separated', 'literal', 'array' } . Standard integer and fixed-point notations - For example, 1 , 27 , 2.71828 , 19.75 . Floating-point notation with exponentiation - For example, 9.2e-5 . 0x - Prefix used to denote a hexadecimal digit sequence. 0o - Prefix used to denote an octal digit sequence. 0b - Prefix used to denote a binary digit sequence. Reserved Words The following words are reserved: AND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE Appium predicate helpers Appium has helpers for predicate search in app.js: getFirstWithPredicate getFirstWithPredicateWeighted getAllWithPredicate getNameContains Here's a Ruby example: # Ruby example text = 'Various uses' predicate = name contains[c] '#{text}' || label contains[c] '#{text}' || value contains[c] '#{text}' element = execute_script(%Q(au.mainApp().getFirstWithPredicate( #{predicate} );)) puts element.name # Buttons, Various uses of UIButton","title":"iOS Predicate Guide"},{"location":"writing-running-appium/ios/ios-predicate/#ios-predicate","text":"NOTE : iOS predicates are usable in iOS 9.3 and below using the -ios uiautomation locator strategy and they are usable in iOS 10 and above using the -ios predicate string locator strategy It is worth looking at '-ios uiautomation' search strategy with Predicates . UIAutomation JavaScript API which has the following useful methods: (UIAElement) UIAElementArray.firstWithPredicate(PredicateString predicateString) (UIAElementArray) UIAElementArray.withPredicate(PredicateString predicateString) Native JS search strategy (powered by Apple) provides much more flexibility and is like Xpath. Predicates can be used to restrict an elements set to select only those ones for which some condition is true. '-ios uiautomation' example: // java appiumDriver.findElementsByIosUIAutomation( collectionViews()[0].cells().withPredicate(\\ ANY staticTexts.isVisible == TRUE\\ ) ); '-ios predicate string' example: // java appiumDriver.findElementsByIosNsPredicate( isWDVisible == 1 ); - will select only those UIACollectionCell elements that have visible UIAStaticText child elements, and themselves are childs of 1st UIACollectionView element that should be located under the main app window. Here staticTexts() and isVisible() are methods available in UIAElementArray and UIAElement classes respectively. Note that UIAElementArray numbering begins with 0 unlike Xpath where indexes counting starts from 1 Here's a list of available Predicates (mostly taken from Predicates Programming Guide )","title":"iOS Predicate"},{"location":"writing-running-appium/ios/ios-predicate/#basic-comparisons","text":"= , == - The left-hand expression is equal to the right-hand expression: tableViews()[1].cells().firstWithPredicate( label == 'Olivia' ) same in Xpath: /UIATableView[2]/UIATableCell[@label = 'Olivia'][1] >= , => - The left-hand expression is greater than or equal to the right-hand expression. = , = - The left-hand expression is less than or equal to the right-hand expression. > - The left-hand expression is greater than the right-hand expression. - The left-hand expression is less than the right-hand expression. != , > - The left-hand expression is not equal to the right-hand expression. BETWEEN - The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example, 1 BETWEEN { 0 , 33 } , or $INPUT BETWEEN { $LOWER, $UPPER } . In Objective-C, you could create a BETWEEN predicate as shown in the following example: NSPredicate *betweenPredicate = [NSPredicate predicateWithFormat: @ attributeName BETWEEN %@ , @[@1, @10]]; This creates a predicate that matches ( ( 1 = attributeValue ) ( attributeValue = 10 ) )","title":"Basic Comparisons"},{"location":"writing-running-appium/ios/ios-predicate/#boolean-value-predicates","text":"TRUEPREDICATE - A predicate that always evaluates to TRUE . FALSEPREDICATE - A predicate that always evaluates to FALSE .","title":"Boolean Value Predicates"},{"location":"writing-running-appium/ios/ios-predicate/#basic-compound-predicates","text":"AND , - Logical AND. OR , || - Logical OR. NOT , ! - Logical NOT.","title":"Basic Compound Predicates"},{"location":"writing-running-appium/ios/ios-predicate/#string-comparisons","text":"String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters c and d within square braces to specify case and diacritic insensitivity respectively, for example firstName BEGINSWITH[cd] $FIRST_NAME BEGINSWITH - The left-hand expression begins with the right-hand expression. scrollViews()[3].buttons().firstWithPredicate( name BEGINSWITH 'results toggle' ) same in Xpath: /UIAScrollView[4]/UIAButton[starts-with(@name, 'results toggle')][1] CONTAINS - The left-hand expression contains the right-hand expression. tableViews()[1].cells().withPredicate( ANY collectionViews[0].buttons.name CONTAINS 'opera' ) same in Xpath: /UIATableView[2]/UIATableCell[UIACollectionView[1]/UIAButton[contains(@name, 'opera')]] ENDSWITH - The left-hand expression ends with the right-hand expression. LIKE - The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters. tableViews()[0].cells().firstWithPredicate( name LIKE '*Total: $*' ) same in Xpath: /UIATableView[1]/UIATableCell[matches(@name, '.*Total: \\$.*')][1] MATCHES - The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for Regular Expressions ). tableViews().firstWithPredicate( value MATCHES '.*of 7' ) same in Xpath: /UIATableView[matches(@value, '.*of 7')][1]","title":"String Comparisons"},{"location":"writing-running-appium/ios/ios-predicate/#aggregate-operations","text":"ANY , SOME - Specifies any of the elements in the following expression. For example ANY children.age 18 . tableViews()[0].cells().firstWithPredicate( SOME staticTexts.name = 'red' ).staticTexts().withName('red') same in Xpath: /UIATableView[1]/UIATableCell[UIAStaticText/@name = 'red'][1]/UIAStaticText[@name = 'red'] ALL - Specifies all of the elements in the following expression. For example ALL children.age 18 . NONE - Specifies none of the elements in the following expression. For example, NONE children.age 18 . This is logically equivalent to NOT (ANY ...) . IN - Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example, name IN { 'Ben', 'Melissa', 'Matthew' } . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used. array[index] - Specifies the element at the specified index in the array. array[FIRST] - Specifies the first element in the array. array[LAST] - Specifies the last element in the array. array[SIZE] - Specifies the size of the array elements()[0].tableViews()[0].cells().withPredicate( staticTexts[SIZE] 2 ) same in Xpath: /*[1]/UIATableView[1]/UIATableCell[count(UIAStaticText) 2]","title":"Aggregate Operations"},{"location":"writing-running-appium/ios/ios-predicate/#identifiers","text":"C style identifier - Any C style identifier that is not a reserved word. #symbol - Used to escape a reserved word into a user identifier. [\\]{octaldigit}{3} - Used to escape an octal number ( \\ followed by 3 octal digits). [\\][xX]{hexdigit}{2} - Used to escape a hex number ( \\x or \\X followed by 2 hex digits). [\\][uU]{hexdigit}{4} - Used to escape a Unicode number ( \\u or \\U followed by 4 hex digits).","title":"Identifiers"},{"location":"writing-running-appium/ios/ios-predicate/#literals","text":"Single and double quotes produce the same result, but they do not terminate each other. For example, \"abc\" and 'abc' are identical, whereas \"a'b'c\" is equivalent to a space-separated concatenation of a, 'b', c . FALSE , NO - Logical false. TRUE , YES - Logical true. NULL , NIL - A null value. SELF - Represents the object being evaluated. \"text\" - A character string. 'text' - A character string. Comma-separated literal array - For example, { 'comma', 'separated', 'literal', 'array' } . Standard integer and fixed-point notations - For example, 1 , 27 , 2.71828 , 19.75 . Floating-point notation with exponentiation - For example, 9.2e-5 . 0x - Prefix used to denote a hexadecimal digit sequence. 0o - Prefix used to denote an octal digit sequence. 0b - Prefix used to denote a binary digit sequence.","title":"Literals"},{"location":"writing-running-appium/ios/ios-predicate/#reserved-words","text":"The following words are reserved: AND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE","title":"Reserved Words"},{"location":"writing-running-appium/ios/ios-predicate/#appium-predicate-helpers","text":"Appium has helpers for predicate search in app.js: getFirstWithPredicate getFirstWithPredicateWeighted getAllWithPredicate getNameContains Here's a Ruby example: # Ruby example text = 'Various uses' predicate = name contains[c] '#{text}' || label contains[c] '#{text}' || value contains[c] '#{text}' element = execute_script(%Q(au.mainApp().getFirstWithPredicate( #{predicate} );)) puts element.name # Buttons, Various uses of UIButton","title":"Appium predicate helpers"},{"location":"writing-running-appium/ios/ios-touch-id/","text":"Touch ID (see https://github.com/appium/appium-xcuitest-driver/blob/master/docs/touch-id.md )","title":"iOS Touch ID Guide"},{"location":"writing-running-appium/ios/ios-touch-id/#touch-id","text":"(see https://github.com/appium/appium-xcuitest-driver/blob/master/docs/touch-id.md )","title":"Touch ID"},{"location":"writing-running-appium/ios/ios-tvos/","text":"tvOS support Appium 1.13.0+ has tvOS support via XCUITest driver It does not work on Apple TV 4K since ios-deploy does not work on wireless devices Setup You can run tests for tvOS by changing the platformName capability like it is done below. { automationName : XCUITest , platformName : tvOS , // here platformVersion : 12.2 , deviceName : Apple TV , ... } Tips to build WDA for tvOS - Update to the latest Carthage - Be sure tvOS simulator exists in your simulator list if you would like to run your test on tvOS simulators - e.g. xcrun simctl list | grep \"com.apple.CoreSimulator.SimRuntime.tvOS\" shows results - Newer Carthage raises an error like Could not find any available simulators for tvOS if tvOS simulators do not exist in tvOS build Limitations Gesture commands do not work for tvOS. Some commands such as pasteboard do not work as well. We can handle focus on tvOS by simply pressing keys such as up/down/left/right/home. tvOS performs actions on the focused element. You can get the value of the focus attribute via Attributes API . Get active element API returns the focused element. Basic Actions pressButton and getting the focused element by get active element are basic actions for tvOS. Consider using wait methods since tvOS also has animation. # Ruby element = @driver.find_element :accessibility_id, 'element on the app' # Returns true if the element is focused, otherwise false element.focused #= 'true' # Appium moves the focus to the element by pressing the corresponding keys and clicking the element element.click # Get the app state @driver.app_state('test.package.name') # = :running_in_foreground # Press keys @driver.execute_script 'mobile: pressButton', { name: 'Home' } # Move focus and get the focused element @driver.execute_script 'mobile: pressButton', { name: 'Up' } # Get a focused element element = @driver.switch_to.active_element element.label #= Settings # Python element = driver.find_element_by_accessibility_id('element on the app') element.get_attribute('focused') element.click() driver.query_app_state('test.package.name') driver.execute_script('mobile: pressButton', { 'name': 'Home' }) driver.execute_script('mobile: pressButton', { 'name': 'Up' }) element = driver.switch_to.active_element element.get_attribute('label') // Java WebElement element = driver.findElementByAccessibilityId( element on the app ); element.getAttribute( focused ); element.click(); driver.queryAppState( test.package.name ); driver.executeScript( mobile: pressButton , ImmutableMap.of( name , Home )); driver.executeScript( mobile: pressButton , ImmutableMap.of( name , Up )); element = driver.switchTo().activeElement(); element.getAttribute( label ); // webdriver.io example const element = $('~SomeAccessibilityId'); element.getAttribute('focused'); element.click(); driver.execute('mobile: pressButton', {name: 'Home'}); driver.execute('mobile: pressButton', {name: 'Up'}); const activeElement = driver.getActiveElement(); activeElement.getAttribute('label'); // WD example const element = await driver.elementByAccessibilityId('element on the app'); await element.getAttribute('focused'); await element.click(); await driver.execute('mobile: pressButton', {name: 'Home'}); await driver.execute('mobile: pressButton', {name: 'Up'}); const activeElement = await driver.active(); await activeElement.getAttribute('label'); More actions tvOS provides remote controller based actions. Appium provides Buttons actions via mobile: pressButton . These are menu , up/down/left/right , home , playpause and select . Available actions are enumerated in the error message if you send unsupported button name to the server. Appium calculates up/down/left/right and select sequence automatically if the combination of find element/s and click is provided. You should not care about which keys should be pressed to reach an arbitrary element every time. You can also handle setting a focus or starting/pausing a playback pressing button actions. menu button works as back for iOS context in tvOS. Test Running Environment Simulators on your machine or real devices connected to your machine Testing and development on real tvOS devices supported by HeadSpin Resources Related issue: https://github.com/appium/appium/pull/12401 e.g. appium-xcuitest-driver#911 , appium-xcuitest-driver#939 , appium-xcuitest-driver#931 , appium/WebDriverAgent/pull/163","title":"tvOS support"},{"location":"writing-running-appium/ios/ios-tvos/#tvos-support","text":"Appium 1.13.0+ has tvOS support via XCUITest driver It does not work on Apple TV 4K since ios-deploy does not work on wireless devices","title":"tvOS support"},{"location":"writing-running-appium/ios/ios-tvos/#setup","text":"You can run tests for tvOS by changing the platformName capability like it is done below. { automationName : XCUITest , platformName : tvOS , // here platformVersion : 12.2 , deviceName : Apple TV , ... } Tips to build WDA for tvOS - Update to the latest Carthage - Be sure tvOS simulator exists in your simulator list if you would like to run your test on tvOS simulators - e.g. xcrun simctl list | grep \"com.apple.CoreSimulator.SimRuntime.tvOS\" shows results - Newer Carthage raises an error like Could not find any available simulators for tvOS if tvOS simulators do not exist in tvOS build","title":"Setup"},{"location":"writing-running-appium/ios/ios-tvos/#limitations","text":"Gesture commands do not work for tvOS. Some commands such as pasteboard do not work as well. We can handle focus on tvOS by simply pressing keys such as up/down/left/right/home. tvOS performs actions on the focused element. You can get the value of the focus attribute via Attributes API . Get active element API returns the focused element.","title":"Limitations"},{"location":"writing-running-appium/ios/ios-tvos/#basic-actions","text":"pressButton and getting the focused element by get active element are basic actions for tvOS. Consider using wait methods since tvOS also has animation. # Ruby element = @driver.find_element :accessibility_id, 'element on the app' # Returns true if the element is focused, otherwise false element.focused #= 'true' # Appium moves the focus to the element by pressing the corresponding keys and clicking the element element.click # Get the app state @driver.app_state('test.package.name') # = :running_in_foreground # Press keys @driver.execute_script 'mobile: pressButton', { name: 'Home' } # Move focus and get the focused element @driver.execute_script 'mobile: pressButton', { name: 'Up' } # Get a focused element element = @driver.switch_to.active_element element.label #= Settings # Python element = driver.find_element_by_accessibility_id('element on the app') element.get_attribute('focused') element.click() driver.query_app_state('test.package.name') driver.execute_script('mobile: pressButton', { 'name': 'Home' }) driver.execute_script('mobile: pressButton', { 'name': 'Up' }) element = driver.switch_to.active_element element.get_attribute('label') // Java WebElement element = driver.findElementByAccessibilityId( element on the app ); element.getAttribute( focused ); element.click(); driver.queryAppState( test.package.name ); driver.executeScript( mobile: pressButton , ImmutableMap.of( name , Home )); driver.executeScript( mobile: pressButton , ImmutableMap.of( name , Up )); element = driver.switchTo().activeElement(); element.getAttribute( label ); // webdriver.io example const element = $('~SomeAccessibilityId'); element.getAttribute('focused'); element.click(); driver.execute('mobile: pressButton', {name: 'Home'}); driver.execute('mobile: pressButton', {name: 'Up'}); const activeElement = driver.getActiveElement(); activeElement.getAttribute('label'); // WD example const element = await driver.elementByAccessibilityId('element on the app'); await element.getAttribute('focused'); await element.click(); await driver.execute('mobile: pressButton', {name: 'Home'}); await driver.execute('mobile: pressButton', {name: 'Up'}); const activeElement = await driver.active(); await activeElement.getAttribute('label');","title":"Basic Actions"},{"location":"writing-running-appium/ios/ios-tvos/#more-actions","text":"tvOS provides remote controller based actions. Appium provides Buttons actions via mobile: pressButton . These are menu , up/down/left/right , home , playpause and select . Available actions are enumerated in the error message if you send unsupported button name to the server. Appium calculates up/down/left/right and select sequence automatically if the combination of find element/s and click is provided. You should not care about which keys should be pressed to reach an arbitrary element every time. You can also handle setting a focus or starting/pausing a playback pressing button actions. menu button works as back for iOS context in tvOS.","title":"More actions"},{"location":"writing-running-appium/ios/ios-tvos/#test-running-environment","text":"Simulators on your machine or real devices connected to your machine Testing and development on real tvOS devices supported by HeadSpin","title":"Test Running Environment"},{"location":"writing-running-appium/ios/ios-tvos/#resources","text":"Related issue: https://github.com/appium/appium/pull/12401 e.g. appium-xcuitest-driver#911 , appium-xcuitest-driver#939 , appium-xcuitest-driver#931 , appium/WebDriverAgent/pull/163","title":"Resources"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/","text":"Pushing/Pulling files Appium provides Pull Folder , Pull File and Push File to move files. This documentation aims to help to understand how they work for iOS. Format Below is the basic format. @ app_bundle_id : optional_container_type / path_to_the_file_or_folder_inside_container @ app_bundle_id / path_to_the_file_or_folder_inside_container path_to_the_file_or_folder_inside_container Real device Format The format of method argument should be the following: @ app_bundle_id is the application bundle identifier optional_container_type is the container type documents is the only available option You may specify documents container type only for bundle ids returned by ifuse -u udid --list-apps e.g. Below On My iPhone image has Slack folder, but com.tinyspeck.chatlyio does not exist in the output of --list-apps . Thus, we cannot mount it as com.tinyspeck.chatlyio@documents/ - The others work as format 2 - Only apps having the flag UIFileSharingEnabled in their info.plist can be mounted - path_to_the_file_or_folder_inside_container is the target to push/pull to/from them. - If the optional_container_type is documents , this path will be mapped to On My iPhone/ app name in Files app format 3 is not allowed for real devices. Example If you would like to pull Presentation.key form Keynote app, you can get it as below. Pull file // webdriver.io let data = driver.pullFile('@io.appium.example:documents/Presentation.key'); await fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary'); # ruby_lib_core file = @driver.pull_file '@com.apple.Keynote:documents/Presentation.key' File.open('presentation.key', 'wb') { |f| f file } The file is in On My iPhone/Keynote of Files app. Top On My iPhone Keynote If the file is in deeper place like On My iPhone/Keynote/Dir1/Dir2 , then the Ruby command should be: // webdriver.io let data = driver.pullFile('@io.appium.example:documents/Dir1/Dir2/Presentation.key'); await fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary'); # ruby_lib_core file = @driver.pull_file '@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key' File.open('presentation.key', 'wb') { |f| f file } Pull folder You can pull documents root of On My iPhone/Keynote as @driver.pull_folder '@com.apple.Keynote:documents/' . // webdriver.io let data = driver.pullFolder('@io.appium.example:documents/'); await fs.writeFile('documents.zip', Buffer.from(data, 'base64'), 'binary'); # ruby_lib_core file = @driver.pull_folder '@com.apple.Keynote:documents/' File.open('documents.zip', 'wb') { |f| f file } Push file Same as pull: // webdriver.io driver.pushFile('@com.apple.Keynote:documents/text.txt', new Buffer( Hello World ).toString('base64')); # ruby_lib_core @driver.push_file '@com.apple.Keynote:documents/text.txt', (File.read 'path/to/file') Simulator Format The format of method argument should be the following: @ app_bundle_id is the application bundle identifier optional_container_type is the container type app , data , groups or A specific App Group container format 2 case is handled as app container path_to_the_file_or_folder_inside_container is the target to push/pull to/from them format 3 format handles as app container Example // Java // Get AddressBook.sqlitedb in test app package ('app' container) byte[] fileContent = driver.pullFile( Library/AddressBook/AddressBook.sqlitedb ); Path dstPath = Paths.get(new File( /local/path/AddressBook.sqlitedb )); Files.write(dstPath, fileContent); references https://stackoverflow.com/questions/1108076/where-does-the-iphone-simulator-store-its-data https://stackoverflow.com/questions/48884248/how-can-i-add-files-to-the-ios-simulator https://apple.stackexchange.com/questions/299413/how-to-allow-the-files-app-to-save-to-on-my-iphone-or-to-on-my-ipad-in-ios/299565#299565","title":"Pushing/Pulling files"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#pushingpulling-files","text":"Appium provides Pull Folder , Pull File and Push File to move files. This documentation aims to help to understand how they work for iOS.","title":"Pushing/Pulling files"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#format","text":"Below is the basic format. @ app_bundle_id : optional_container_type / path_to_the_file_or_folder_inside_container @ app_bundle_id / path_to_the_file_or_folder_inside_container path_to_the_file_or_folder_inside_container","title":"Format"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#real-device","text":"","title":"Real device"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#format_1","text":"The format of method argument should be the following: @ app_bundle_id is the application bundle identifier optional_container_type is the container type documents is the only available option You may specify documents container type only for bundle ids returned by ifuse -u udid --list-apps e.g. Below On My iPhone image has Slack folder, but com.tinyspeck.chatlyio does not exist in the output of --list-apps . Thus, we cannot mount it as com.tinyspeck.chatlyio@documents/ - The others work as format 2 - Only apps having the flag UIFileSharingEnabled in their info.plist can be mounted - path_to_the_file_or_folder_inside_container is the target to push/pull to/from them. - If the optional_container_type is documents , this path will be mapped to On My iPhone/ app name in Files app format 3 is not allowed for real devices.","title":"Format"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#example","text":"If you would like to pull Presentation.key form Keynote app, you can get it as below. Pull file // webdriver.io let data = driver.pullFile('@io.appium.example:documents/Presentation.key'); await fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary'); # ruby_lib_core file = @driver.pull_file '@com.apple.Keynote:documents/Presentation.key' File.open('presentation.key', 'wb') { |f| f file } The file is in On My iPhone/Keynote of Files app. Top On My iPhone Keynote If the file is in deeper place like On My iPhone/Keynote/Dir1/Dir2 , then the Ruby command should be: // webdriver.io let data = driver.pullFile('@io.appium.example:documents/Dir1/Dir2/Presentation.key'); await fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary'); # ruby_lib_core file = @driver.pull_file '@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key' File.open('presentation.key', 'wb') { |f| f file } Pull folder You can pull documents root of On My iPhone/Keynote as @driver.pull_folder '@com.apple.Keynote:documents/' . // webdriver.io let data = driver.pullFolder('@io.appium.example:documents/'); await fs.writeFile('documents.zip', Buffer.from(data, 'base64'), 'binary'); # ruby_lib_core file = @driver.pull_folder '@com.apple.Keynote:documents/' File.open('documents.zip', 'wb') { |f| f file } Push file Same as pull: // webdriver.io driver.pushFile('@com.apple.Keynote:documents/text.txt', new Buffer( Hello World ).toString('base64')); # ruby_lib_core @driver.push_file '@com.apple.Keynote:documents/text.txt', (File.read 'path/to/file')","title":"Example"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#simulator","text":"","title":"Simulator"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#format_2","text":"The format of method argument should be the following: @ app_bundle_id is the application bundle identifier optional_container_type is the container type app , data , groups or A specific App Group container format 2 case is handled as app container path_to_the_file_or_folder_inside_container is the target to push/pull to/from them format 3 format handles as app container","title":"Format"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#example_1","text":"// Java // Get AddressBook.sqlitedb in test app package ('app' container) byte[] fileContent = driver.pullFile( Library/AddressBook/AddressBook.sqlitedb ); Path dstPath = Paths.get(new File( /local/path/AddressBook.sqlitedb )); Files.write(dstPath, fileContent);","title":"Example"},{"location":"writing-running-appium/ios/ios-xctest-file-movement/#references","text":"https://stackoverflow.com/questions/1108076/where-does-the-iphone-simulator-store-its-data https://stackoverflow.com/questions/48884248/how-can-i-add-files-to-the-ios-simulator https://apple.stackexchange.com/questions/299413/how-to-allow-the-files-app-to-save-to-on-my-iphone-or-to-on-my-ipad-in-ios/299565#299565","title":"references"},{"location":"writing-running-appium/ios/ios-xctest-install-certificate/","text":"Automating Installation of Self-Signed Certificate on iOS Unfortunately, Apple does not provide any command line options which can help to install self-signed certificate on a real device or Simulator. However, there is over-the-air enrollment technology, which allows the deployment of several entity types, including such certificates, by simply downloading specially prepared configuration files with the built-in web browser. After the configuration is downloaded it can be installed and trusted by going through several simple wizard steps. mobile: installCertificate","title":"iOS Install Certificate"},{"location":"writing-running-appium/ios/ios-xctest-install-certificate/#automating-installation-of-self-signed-certificate-on-ios","text":"Unfortunately, Apple does not provide any command line options which can help to install self-signed certificate on a real device or Simulator. However, there is over-the-air enrollment technology, which allows the deployment of several entity types, including such certificates, by simply downloading specially prepared configuration files with the built-in web browser. After the configuration is downloaded it can be installed and trusted by going through several simple wizard steps. mobile: installCertificate","title":"Automating Installation of Self-Signed Certificate on iOS"},{"location":"writing-running-appium/ios/ios-xctest-mobile-apps-management/","text":"Advanced Applications Management Commands For iOS With WebDriverAgent/XCTest Backend Since Xcode9 there is a possibility to manage multiple applications in scope of a single session. It makes it possible to open iOS preferences and change values there while the application under test is in background and then restore it back to foreground or check scenarios, where the application under test is terminated and then started again. Appium for iOS has special set of mobile: subcommands, which provides user interface to such features. Important note: Make sure you don't cache WebElement instances between application restarts, since they are going to be invalidated after each restart. mobile: installApp mobile: removeApp mobile: isAppInstalled mobile: launchApp mobile: terminateApp mobile: activateApp mobile: queryAppState","title":"XCUITest Mobile App Management"},{"location":"writing-running-appium/ios/ios-xctest-mobile-apps-management/#advanced-applications-management-commands-for-ios-with-webdriveragentxctest-backend","text":"Since Xcode9 there is a possibility to manage multiple applications in scope of a single session. It makes it possible to open iOS preferences and change values there while the application under test is in background and then restore it back to foreground or check scenarios, where the application under test is terminated and then started again. Appium for iOS has special set of mobile: subcommands, which provides user interface to such features. Important note: Make sure you don't cache WebElement instances between application restarts, since they are going to be invalidated after each restart. mobile: installApp mobile: removeApp mobile: isAppInstalled mobile: launchApp mobile: terminateApp mobile: activateApp mobile: queryAppState","title":"Advanced Applications Management Commands For iOS With WebDriverAgent/XCTest Backend"},{"location":"writing-running-appium/ios/ios-xctest-mobile-gestures/","text":"Automating Mobile Gestures For iOS With WebDriverAgent/XCTest Backend Unfortunately Apple's XCTest framework does not natively support W3C standards for TouchAction interface implementation. Although, it provides rich set of gestures, including these, that are unique for iOS platform. It is possible to directly invoke these gestures in Appium starting from version 1.6.4-beta. It is important to remember that XCTest and WDA are being constantly changed. This means all \"mobile: *\" commands can be also subject of change in Appium without any preliminary notice. mobile: swipe mobile: scroll mobile: pinch mobile: doubleTap mobile: touchAndHold mobile: twoFingerTap mobile: tap mobile: dragFromToForDuration mobile: selectPickerWheelValue mobile: rotateElement mobile: tapWithNumberOfTaps Advanced Topics Check WDA Element Commands API to get the information about the gestures implemented in Facebook WebDriverAgent. Check Apple XCTest documentation on XCUIElement and XCUICoordinate methods list to get the information about all gestures available there.","title":"XCUITest Mobile Gestures"},{"location":"writing-running-appium/ios/ios-xctest-mobile-gestures/#automating-mobile-gestures-for-ios-with-webdriveragentxctest-backend","text":"Unfortunately Apple's XCTest framework does not natively support W3C standards for TouchAction interface implementation. Although, it provides rich set of gestures, including these, that are unique for iOS platform. It is possible to directly invoke these gestures in Appium starting from version 1.6.4-beta. It is important to remember that XCTest and WDA are being constantly changed. This means all \"mobile: *\" commands can be also subject of change in Appium without any preliminary notice. mobile: swipe mobile: scroll mobile: pinch mobile: doubleTap mobile: touchAndHold mobile: twoFingerTap mobile: tap mobile: dragFromToForDuration mobile: selectPickerWheelValue mobile: rotateElement mobile: tapWithNumberOfTaps","title":"Automating Mobile Gestures For iOS With WebDriverAgent/XCTest Backend"},{"location":"writing-running-appium/ios/ios-xctest-mobile-gestures/#advanced-topics","text":"Check WDA Element Commands API to get the information about the gestures implemented in Facebook WebDriverAgent. Check Apple XCTest documentation on XCUIElement and XCUICoordinate methods list to get the information about all gestures available there.","title":"Advanced Topics"},{"location":"writing-running-appium/ios/ios-xctest-pasteboard/","text":"Automating Simulator Pasteboard Actions For iOS With WebDriverAgent/XCTest Backend There is a possibility in Appium to set the content of the iOS Simulator pasteboard and read the content from there if needed. Each Simulator maintains its own pasteboard. This feature is only available since Xcode SDK 8.1. On real devices this functionaliry is available with several security limitations. Please check Get Clipboard / Set Clipboard for more details. mobile: setPasteboard mobile: getPasteboard","title":"iOS Pasteboard Guide"},{"location":"writing-running-appium/ios/ios-xctest-pasteboard/#automating-simulator-pasteboard-actions-for-ios-with-webdriveragentxctest-backend","text":"There is a possibility in Appium to set the content of the iOS Simulator pasteboard and read the content from there if needed. Each Simulator maintains its own pasteboard. This feature is only available since Xcode SDK 8.1. On real devices this functionaliry is available with several security limitations. Please check Get Clipboard / Set Clipboard for more details. mobile: setPasteboard mobile: getPasteboard","title":"Automating Simulator Pasteboard Actions For iOS With WebDriverAgent/XCTest Backend"},{"location":"writing-running-appium/ios/ios-xctest-performance/","text":"Automating Performance Metrics Measurement Apple provides the instruments tool with quite a rich set of features for desktop and mobile applications performance measurement. The collected data can be then visualized with Instruments.app , which is a part of Xcode DevTools. By default Xcode provides several measurement templates, like Activity Monitor or Time Profiler , but one can also create their own profiles and select a custom set of metrics to record and visualize. Read https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide to get a more detailed overview of available tool features. mobile: startPerfRecord mobile: stopPerfRecord","title":"Ios xctest performance"},{"location":"writing-running-appium/ios/ios-xctest-performance/#automating-performance-metrics-measurement","text":"Apple provides the instruments tool with quite a rich set of features for desktop and mobile applications performance measurement. The collected data can be then visualized with Instruments.app , which is a part of Xcode DevTools. By default Xcode provides several measurement templates, like Activity Monitor or Time Profiler , but one can also create their own profiles and select a custom set of metrics to record and visualize. Read https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide to get a more detailed overview of available tool features. mobile: startPerfRecord mobile: stopPerfRecord","title":"Automating Performance Metrics Measurement"},{"location":"writing-running-appium/other/appium-bindings/","text":"Appium Client Libraries Please read List of client libraries with Appium server support about clients. Lock Lock the screen. # ruby lock 5 # python driver.lock(5) // java driver.lockScreen(3); // javascript driver.lock(3) // c# driver.LockDevice(3); Background app Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. There are 2 types of parameters which may be passed to this method: An integer (in seconds): how long to background the app for. -1 means to deactivate the app entirely. This style of parameter is deprecated. An object that looks like {\"timeout\": secs} , where secs is again an integer with the semantics mentioned just above in 1, or null (which means to deactivate entirely). # ruby background_app 5 # background app for 5 seconds background_app -1 # deactivate app # python driver.background_app(5) # background for 5 seconds driver.background_app(-1) # deactivate app driver.background_app({'timeout': None}) # deactivate app // java driver.runAppInBackground(5); // for 5 seconds driver.runAppInBackground(-1); // deactivate completely // javascript driver.backgroundApp(5); // for 5 seconds driver.backgroundApp(-1); // deactivate app driver.backgroundApp({timeout: null}); // deactivate app // c# driver.BackgroundApp(5); driver.BackgroundApp(-1); Hide Keyboard Hide the keyboard. Note : on iOS, this helper function is not guaranteed to work. There is no automation hook for hiding the keyboard, and apps are free to allow the user to hide the keyboard using any of a variety of different strategies, whether that is tapping outside the keyboard, swiping down, etc... We encourage you, rather than using this method, to think about how a user would hide the keyboard in your app, and tell Appium to do that instead (swipe, tap on a certain coordinate, etc...). That being said, the default behavior here might help you. # ruby hide_keyboard # python driver.hide_keyboard() // java driver.hideKeyboard(); // javascript driver.hideKeyboard() // c# driver.HideKeyboard( Done ); Start Activity Open an activity in the current app or start a new app and open an activity Android only // java driver.startActivity( appPackage , com.example.android.apis , null, null); // javascript driver.startActivity({appPackage: 'com.example.android.apis', appActivity: '.Foo'}, cb); # python driver.start_activity('com.example.android.apis', '.Foo') # ruby start_activity app_package: 'io.appium.android.apis', app_activity: '.accessibility.AccessibilityNodeProviderActivity' // c# driver.StartActivity( com.example.android.apis , .Foo ); Open Notifications Open the notification shade Android only // java driver.openNotifications(); // javascript driver.openNotifications(cb); # python driver.open_notifications() # ruby open_notifications // c# driver.OpenNotifications(); Is installed Check if an app is installed # ruby is_installed? com.example.android.apis # python driver.is_app_installed('com.example.android.apis') // java driver.isAppInstalled( com.example.android.apis ) // javascript driver.isAppInstalled( com.example.android.apis ) .then(function (isAppInstalled) { /*...*/ }) // c# driver.IsAppInstalled( com.example.android.apis- ); Install App Install an app to the device. # ruby install 'path/to/my.apk' # python driver.install_app('path/to/my.apk') // java driver.installApp( path/to/my.apk ) // javascript driver.installApp( path/to/my.apk ) // c# driver.InstallApp( path/to/my.apk ); Remove App Remove an app from the device. # ruby remove 'com.example.android.apis' # python driver.remove_app('com.example.android.apis') // java driver.removeApp( com.example.android.apis ) // javascript driver.removeApp( com.example.android.apis ) // c# driver.RemoveApp( com.example.android.apis ); Shake Simulate the device shaking. # ruby shake # python driver.shake() // java driver.shake() // javascript driver.shake() // c# driver.ShakeDevice(); Close app Close the app # ruby close_app # python driver.close_app(); // java driver.closeApp() // javascript driver.closeApp() // c# driver.CloseApp(); Launch Launch the session for the desired capabilities. Note that this is the companion to the autoLaunch=false capability. This is not for launching arbitrary apps/activities---for that use start_activity . This is for continuing the initialization (\"launch\") process if you have used autoLaunch=false. # ruby launch_app # python driver.launch_app() // java driver.launchApp() // javascript driver.launchApp() // c# driver.LaunchApp(); Reset Reset the app. # ruby driver.reset # python driver.reset() // java driver.resetApp() // javascript driver.resetApp() // c# driver.ResetApp(); Available Contexts List all available contexts # ruby context_array = available_contexts # python driver.contexts // java driver.getContextHandles() // javascript driver.contexts().then(function (contexts) { /*...*/ }) // c# driver.GetContexts() Current context List the current context # ruby context = current_context # python driver.current_context // java driver.getContext() // javascript driver.currentContext().then(function (context) { /*...*/ }) // c# driver.GetContext() Switch to default context Change the context to the default. # ruby switch_to_default_context # python driver.switch_to.context(None) // java driver.context(); // javascript driver.context() // c# driver.SetContext(); App Strings Get the app's strings. # ruby app_strings # python driver.app_strings // java driver.getAppStrings(); // javascript driver.getAppStrings().then(function (appStrings) { /*...*/ }) // c# driver.GetAppStrings(); Key Event Send a key event to the device. # ruby key_event 176 # python driver.keyevent(176) // java driver.sendKeyEvent(AndroidKeyCode.HOME); // javascript driver.deviceKeyEvent(wd.SPECIAL_KEYS.Home) // c# driver.KeyEvent( 176 ); Current Activity Android only. Get the current activity. # ruby current_activity # python driver.current_activity // java driver.currentActivity(); // javascript driver.getCurrentActivity().then(function (activity) { /*...*/ }) // c# driver.GetCurrentActivity(); Current Package Android only. Get the current package. # ruby current_package # python driver.current_package // java driver.getCurrentPackage(); // javascript driver.getCurrentPackage().then(function (package) { /*...*/ }) // c# driver.GetCurrentPackage(); TouchAction / MultiTouchAction An API for generating touch actions. This section of the documentation will be expanded upon soon. # ruby touch_action = Appium::TouchAction.new element = find_element :accessibility_id, 'Buttons, Various uses of UIButton' touch_action.press(element: element, x: 10, y: 10).perform # python action = TouchAction(driver) action.press(element=el, x=10, y=10).release().perform() // java TouchAction action = new TouchAction(driver) .press(mapview, 10, 10) .release(). perform(); // javascript var action = new wd.TouchAction(driver); action .tap({el: el, x: 10, y: 10}) .release(); return action.perform(); // returns a promise // c# ITouchAction action = new TouchAction(driver); action.Press(el, 10, 10).Release(); action.Perform (); Swipe Simulate a user swipe. # ruby swipe start_x: 75, start_y: 500, end_x: 75, end_y: 0, duration: 0.8 # python driver.swipe(start_x=75, start_y=500, end_x=75, end_y=0, duration=800) // java driver.swipe(75, 500, 75, 0, 0.8) // javascript function swipe(opts) { var action = new wd.TouchAction(this); action .press({x: opts.startX, y: opts.startY}) .wait(opts.duration) .moveTo({x: opts.endX, y: opts.endY}) .release(); return action.perform(); } wd.addPromiseChainMethod('swipe', swipe); // ... return driver.swipe({ startX: 75, startY: 500, endX: 75, endY: 0, duration: 800 }); // c# todo: c# Pinch Pinch the screen. # ruby pinch 75 # python driver.pinch(element=el) // java driver.pinch(element); // javascript function pinch(el) { return Q.all([ el.getSize(), el.getLocation(), ]).then(function(res) { var size = res[0]; var loc = res[1]; var center = { x: loc.x + size.width / 2, y: loc.y + size.height / 2 }; var a1 = new wd.TouchAction(this); a1.press({el: el, x: center.x, y:center.y - 100}).moveTo({el: el}).release(); var a2 = new wd.TouchAction(this); a2.press({el: el, x: center.x, y: center.y + 100}).moveTo({el: el}).release(); var m = new wd.MultiAction(this); m.add(a1, a2); return m.perform(); }.bind(this)); }; wd.addPromiseChainMethod('pinch', pinch); wd.addElementPromiseChainMethod('pinch', function() { return this.browser.pinch(this); }); // ... return driver.pinch(el); // ... return el.pinch(); // c# driver.Pinch(25, 25) Zoom Zoom the screen. # ruby zoom 200 # python driver.zoom(element=el) // java driver.zoom(element); // javascript function zoom(el) { return Q.all([ this.getWindowSize(), this.getLocation(el), ]).then(function(res) { var size = res[0]; var loc = res[1]; var center = { x: loc.x + size.width / 2, y: loc.y + size.height / 2 }; var a1 = new wd.TouchAction(this); a1.press({el: el}).moveTo({el: el, x: center.x, y: center.y - 100}).release(); var a2 = new wd.TouchAction(this); a2.press({el: el}).moveTo({el: el, x: center.x, y: center.y + 100}).release(); var m = new wd.MultiAction(this); m.add(a1, a2); return m.perform(); }.bind(this)); }; wd.addPromiseChainMethod('zoom', zoom); wd.addElementPromiseChainMethod('zoom', function() { return this.browser.zoom(this); }); // ... return driver.zoom(el); // ... return el.zoom(); // c# driver.Zoom(100, 200); Scroll To Scroll to an element. # ruby element = find_element :accessibility_id, Element ID execute_script mobile: scroll , direction: down , element: element.ref # python driver.execute_script( mobile: scroll , { direction : down , element : element.id}) // java JavascriptExecutor js = (JavascriptExecutor) driver; HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( direction , down ); scrollObject.put( element , ((RemoteWebElement) element).getId()); js.executeScript( mobile: scroll , scrollObject); // javascript return driver.elementByAccessibilityId().then(function (el) { driver.execute( mobile: scroll , [{direction: down , element: el.value}]); }); // c# Dictionary string, string scrollObject = new Dictionary string, string (); scrollObject.Add( direction , down ); scrollObject.Add( element , element_id ); ((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject)); Pull file Pulls a file from the device. # ruby pull_file 'Library/AddressBook/AddressBook.sqlitedb' # python driver.pull_file('Library/AddressBook/AddressBook.sqlitedb') // java driver.pullFile( Library/AddressBook/AddressBook.sqlitedb ); // javascript driver.pullFile( Library/AddressBook/AddressBook.sqlitedb ) .then(function (base64File) { /*...*/ }) // c# driver.PullFile( Library/AddressBook/AddressBook.sqlitedb ); Push File Pushes a file to the device. # ruby data = some data for the file path = /data/local/tmp/file.txt push_file path, data # python data = some data for the file path = /data/local/tmp/file.txt driver.push_file(path, data.encode('base64')) // java byte[] data = Base64.encodeBase64( some data for the file .getBytes()); String path = /data/local/tmp/file.txt ; driver.pushFile(path, data) // javascript driver.pushFile(path, data) // c# driver.PushFile( /data/local/tmp/file.txt , some data for the file ); Settings Here you will find sample code for getting/setting appium serverSetting. For more information on how they work, and which settings are supported, see the settings docs . # ruby current_settings = get_settings update_settings someSetting: true # python current_settings = driver.get_settings() driver.update_settings({ someSetting : true}) // java JsonObject settings = driver.getSettings() // java-client doesn't support setting arbitrary settings, just settings which are already provided by appium. // So for the 'ignoreUnimportantViews' setting, the following method exists: driver.ignoreUnimportantViews(true); // javascript var settings = driver.settings(); browser.updateSettings({'someSetting': true}); // c# Dictionary String, Object settings = driver.GetSettings(); // dotnet-driver doesn't support setting arbitrary settings, just settings which are already provided by appium. // So for the 'ignoreUnimportantViews' setting, the following method exists: driver.IgnoreUnimportantViews(true); Appium Desktop Apps Appium's desktop app supports OS X, Windows and Linux. Appium Desktop","title":"Appium bindings"},{"location":"writing-running-appium/other/appium-bindings/#appium-client-libraries","text":"Please read List of client libraries with Appium server support about clients.","title":"Appium Client Libraries"},{"location":"writing-running-appium/other/appium-bindings/#lock","text":"Lock the screen. # ruby lock 5 # python driver.lock(5) // java driver.lockScreen(3); // javascript driver.lock(3) // c# driver.LockDevice(3);","title":"Lock"},{"location":"writing-running-appium/other/appium-bindings/#background-app","text":"Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. There are 2 types of parameters which may be passed to this method: An integer (in seconds): how long to background the app for. -1 means to deactivate the app entirely. This style of parameter is deprecated. An object that looks like {\"timeout\": secs} , where secs is again an integer with the semantics mentioned just above in 1, or null (which means to deactivate entirely). # ruby background_app 5 # background app for 5 seconds background_app -1 # deactivate app # python driver.background_app(5) # background for 5 seconds driver.background_app(-1) # deactivate app driver.background_app({'timeout': None}) # deactivate app // java driver.runAppInBackground(5); // for 5 seconds driver.runAppInBackground(-1); // deactivate completely // javascript driver.backgroundApp(5); // for 5 seconds driver.backgroundApp(-1); // deactivate app driver.backgroundApp({timeout: null}); // deactivate app // c# driver.BackgroundApp(5); driver.BackgroundApp(-1);","title":"Background app"},{"location":"writing-running-appium/other/appium-bindings/#hide-keyboard","text":"Hide the keyboard. Note : on iOS, this helper function is not guaranteed to work. There is no automation hook for hiding the keyboard, and apps are free to allow the user to hide the keyboard using any of a variety of different strategies, whether that is tapping outside the keyboard, swiping down, etc... We encourage you, rather than using this method, to think about how a user would hide the keyboard in your app, and tell Appium to do that instead (swipe, tap on a certain coordinate, etc...). That being said, the default behavior here might help you. # ruby hide_keyboard # python driver.hide_keyboard() // java driver.hideKeyboard(); // javascript driver.hideKeyboard() // c# driver.HideKeyboard( Done );","title":"Hide Keyboard"},{"location":"writing-running-appium/other/appium-bindings/#start-activity","text":"Open an activity in the current app or start a new app and open an activity Android only // java driver.startActivity( appPackage , com.example.android.apis , null, null); // javascript driver.startActivity({appPackage: 'com.example.android.apis', appActivity: '.Foo'}, cb); # python driver.start_activity('com.example.android.apis', '.Foo') # ruby start_activity app_package: 'io.appium.android.apis', app_activity: '.accessibility.AccessibilityNodeProviderActivity' // c# driver.StartActivity( com.example.android.apis , .Foo );","title":"Start Activity"},{"location":"writing-running-appium/other/appium-bindings/#open-notifications","text":"Open the notification shade Android only // java driver.openNotifications(); // javascript driver.openNotifications(cb); # python driver.open_notifications() # ruby open_notifications // c# driver.OpenNotifications();","title":"Open Notifications"},{"location":"writing-running-appium/other/appium-bindings/#is-installed","text":"Check if an app is installed # ruby is_installed? com.example.android.apis # python driver.is_app_installed('com.example.android.apis') // java driver.isAppInstalled( com.example.android.apis ) // javascript driver.isAppInstalled( com.example.android.apis ) .then(function (isAppInstalled) { /*...*/ }) // c# driver.IsAppInstalled( com.example.android.apis- );","title":"Is installed"},{"location":"writing-running-appium/other/appium-bindings/#install-app","text":"Install an app to the device. # ruby install 'path/to/my.apk' # python driver.install_app('path/to/my.apk') // java driver.installApp( path/to/my.apk ) // javascript driver.installApp( path/to/my.apk ) // c# driver.InstallApp( path/to/my.apk );","title":"Install App"},{"location":"writing-running-appium/other/appium-bindings/#remove-app","text":"Remove an app from the device. # ruby remove 'com.example.android.apis' # python driver.remove_app('com.example.android.apis') // java driver.removeApp( com.example.android.apis ) // javascript driver.removeApp( com.example.android.apis ) // c# driver.RemoveApp( com.example.android.apis );","title":"Remove App"},{"location":"writing-running-appium/other/appium-bindings/#shake","text":"Simulate the device shaking. # ruby shake # python driver.shake() // java driver.shake() // javascript driver.shake() // c# driver.ShakeDevice();","title":"Shake"},{"location":"writing-running-appium/other/appium-bindings/#close-app","text":"Close the app # ruby close_app # python driver.close_app(); // java driver.closeApp() // javascript driver.closeApp() // c# driver.CloseApp();","title":"Close app"},{"location":"writing-running-appium/other/appium-bindings/#launch","text":"Launch the session for the desired capabilities. Note that this is the companion to the autoLaunch=false capability. This is not for launching arbitrary apps/activities---for that use start_activity . This is for continuing the initialization (\"launch\") process if you have used autoLaunch=false. # ruby launch_app # python driver.launch_app() // java driver.launchApp() // javascript driver.launchApp() // c# driver.LaunchApp();","title":"Launch"},{"location":"writing-running-appium/other/appium-bindings/#reset","text":"Reset the app. # ruby driver.reset # python driver.reset() // java driver.resetApp() // javascript driver.resetApp() // c# driver.ResetApp();","title":"Reset"},{"location":"writing-running-appium/other/appium-bindings/#available-contexts","text":"List all available contexts # ruby context_array = available_contexts # python driver.contexts // java driver.getContextHandles() // javascript driver.contexts().then(function (contexts) { /*...*/ }) // c# driver.GetContexts()","title":"Available Contexts"},{"location":"writing-running-appium/other/appium-bindings/#current-context","text":"List the current context # ruby context = current_context # python driver.current_context // java driver.getContext() // javascript driver.currentContext().then(function (context) { /*...*/ }) // c# driver.GetContext()","title":"Current context"},{"location":"writing-running-appium/other/appium-bindings/#switch-to-default-context","text":"Change the context to the default. # ruby switch_to_default_context # python driver.switch_to.context(None) // java driver.context(); // javascript driver.context() // c# driver.SetContext();","title":"Switch to default context"},{"location":"writing-running-appium/other/appium-bindings/#app-strings","text":"Get the app's strings. # ruby app_strings # python driver.app_strings // java driver.getAppStrings(); // javascript driver.getAppStrings().then(function (appStrings) { /*...*/ }) // c# driver.GetAppStrings();","title":"App Strings"},{"location":"writing-running-appium/other/appium-bindings/#key-event","text":"Send a key event to the device. # ruby key_event 176 # python driver.keyevent(176) // java driver.sendKeyEvent(AndroidKeyCode.HOME); // javascript driver.deviceKeyEvent(wd.SPECIAL_KEYS.Home) // c# driver.KeyEvent( 176 );","title":"Key Event"},{"location":"writing-running-appium/other/appium-bindings/#current-activity","text":"Android only. Get the current activity. # ruby current_activity # python driver.current_activity // java driver.currentActivity(); // javascript driver.getCurrentActivity().then(function (activity) { /*...*/ }) // c# driver.GetCurrentActivity();","title":"Current Activity"},{"location":"writing-running-appium/other/appium-bindings/#current-package","text":"Android only. Get the current package. # ruby current_package # python driver.current_package // java driver.getCurrentPackage(); // javascript driver.getCurrentPackage().then(function (package) { /*...*/ }) // c# driver.GetCurrentPackage();","title":"Current Package"},{"location":"writing-running-appium/other/appium-bindings/#touchaction-multitouchaction","text":"An API for generating touch actions. This section of the documentation will be expanded upon soon. # ruby touch_action = Appium::TouchAction.new element = find_element :accessibility_id, 'Buttons, Various uses of UIButton' touch_action.press(element: element, x: 10, y: 10).perform # python action = TouchAction(driver) action.press(element=el, x=10, y=10).release().perform() // java TouchAction action = new TouchAction(driver) .press(mapview, 10, 10) .release(). perform(); // javascript var action = new wd.TouchAction(driver); action .tap({el: el, x: 10, y: 10}) .release(); return action.perform(); // returns a promise // c# ITouchAction action = new TouchAction(driver); action.Press(el, 10, 10).Release(); action.Perform ();","title":"TouchAction / MultiTouchAction"},{"location":"writing-running-appium/other/appium-bindings/#swipe","text":"Simulate a user swipe. # ruby swipe start_x: 75, start_y: 500, end_x: 75, end_y: 0, duration: 0.8 # python driver.swipe(start_x=75, start_y=500, end_x=75, end_y=0, duration=800) // java driver.swipe(75, 500, 75, 0, 0.8) // javascript function swipe(opts) { var action = new wd.TouchAction(this); action .press({x: opts.startX, y: opts.startY}) .wait(opts.duration) .moveTo({x: opts.endX, y: opts.endY}) .release(); return action.perform(); } wd.addPromiseChainMethod('swipe', swipe); // ... return driver.swipe({ startX: 75, startY: 500, endX: 75, endY: 0, duration: 800 }); // c# todo: c#","title":"Swipe"},{"location":"writing-running-appium/other/appium-bindings/#pinch","text":"Pinch the screen. # ruby pinch 75 # python driver.pinch(element=el) // java driver.pinch(element); // javascript function pinch(el) { return Q.all([ el.getSize(), el.getLocation(), ]).then(function(res) { var size = res[0]; var loc = res[1]; var center = { x: loc.x + size.width / 2, y: loc.y + size.height / 2 }; var a1 = new wd.TouchAction(this); a1.press({el: el, x: center.x, y:center.y - 100}).moveTo({el: el}).release(); var a2 = new wd.TouchAction(this); a2.press({el: el, x: center.x, y: center.y + 100}).moveTo({el: el}).release(); var m = new wd.MultiAction(this); m.add(a1, a2); return m.perform(); }.bind(this)); }; wd.addPromiseChainMethod('pinch', pinch); wd.addElementPromiseChainMethod('pinch', function() { return this.browser.pinch(this); }); // ... return driver.pinch(el); // ... return el.pinch(); // c# driver.Pinch(25, 25)","title":"Pinch"},{"location":"writing-running-appium/other/appium-bindings/#zoom","text":"Zoom the screen. # ruby zoom 200 # python driver.zoom(element=el) // java driver.zoom(element); // javascript function zoom(el) { return Q.all([ this.getWindowSize(), this.getLocation(el), ]).then(function(res) { var size = res[0]; var loc = res[1]; var center = { x: loc.x + size.width / 2, y: loc.y + size.height / 2 }; var a1 = new wd.TouchAction(this); a1.press({el: el}).moveTo({el: el, x: center.x, y: center.y - 100}).release(); var a2 = new wd.TouchAction(this); a2.press({el: el}).moveTo({el: el, x: center.x, y: center.y + 100}).release(); var m = new wd.MultiAction(this); m.add(a1, a2); return m.perform(); }.bind(this)); }; wd.addPromiseChainMethod('zoom', zoom); wd.addElementPromiseChainMethod('zoom', function() { return this.browser.zoom(this); }); // ... return driver.zoom(el); // ... return el.zoom(); // c# driver.Zoom(100, 200);","title":"Zoom"},{"location":"writing-running-appium/other/appium-bindings/#scroll-to","text":"Scroll to an element. # ruby element = find_element :accessibility_id, Element ID execute_script mobile: scroll , direction: down , element: element.ref # python driver.execute_script( mobile: scroll , { direction : down , element : element.id}) // java JavascriptExecutor js = (JavascriptExecutor) driver; HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( direction , down ); scrollObject.put( element , ((RemoteWebElement) element).getId()); js.executeScript( mobile: scroll , scrollObject); // javascript return driver.elementByAccessibilityId().then(function (el) { driver.execute( mobile: scroll , [{direction: down , element: el.value}]); }); // c# Dictionary string, string scrollObject = new Dictionary string, string (); scrollObject.Add( direction , down ); scrollObject.Add( element , element_id ); ((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject));","title":"Scroll To"},{"location":"writing-running-appium/other/appium-bindings/#pull-file","text":"Pulls a file from the device. # ruby pull_file 'Library/AddressBook/AddressBook.sqlitedb' # python driver.pull_file('Library/AddressBook/AddressBook.sqlitedb') // java driver.pullFile( Library/AddressBook/AddressBook.sqlitedb ); // javascript driver.pullFile( Library/AddressBook/AddressBook.sqlitedb ) .then(function (base64File) { /*...*/ }) // c# driver.PullFile( Library/AddressBook/AddressBook.sqlitedb );","title":"Pull file"},{"location":"writing-running-appium/other/appium-bindings/#push-file","text":"Pushes a file to the device. # ruby data = some data for the file path = /data/local/tmp/file.txt push_file path, data # python data = some data for the file path = /data/local/tmp/file.txt driver.push_file(path, data.encode('base64')) // java byte[] data = Base64.encodeBase64( some data for the file .getBytes()); String path = /data/local/tmp/file.txt ; driver.pushFile(path, data) // javascript driver.pushFile(path, data) // c# driver.PushFile( /data/local/tmp/file.txt , some data for the file );","title":"Push File"},{"location":"writing-running-appium/other/appium-bindings/#settings","text":"Here you will find sample code for getting/setting appium serverSetting. For more information on how they work, and which settings are supported, see the settings docs . # ruby current_settings = get_settings update_settings someSetting: true # python current_settings = driver.get_settings() driver.update_settings({ someSetting : true}) // java JsonObject settings = driver.getSettings() // java-client doesn't support setting arbitrary settings, just settings which are already provided by appium. // So for the 'ignoreUnimportantViews' setting, the following method exists: driver.ignoreUnimportantViews(true); // javascript var settings = driver.settings(); browser.updateSettings({'someSetting': true}); // c# Dictionary String, Object settings = driver.GetSettings(); // dotnet-driver doesn't support setting arbitrary settings, just settings which are already provided by appium. // So for the 'ignoreUnimportantViews' setting, the following method exists: driver.IgnoreUnimportantViews(true);","title":"Settings"},{"location":"writing-running-appium/other/appium-bindings/#appium-desktop-apps","text":"Appium's desktop app supports OS X, Windows and Linux. Appium Desktop","title":"Appium Desktop Apps"},{"location":"writing-running-appium/other/network-connection/","text":"Adjusting Network Connection The Selenium Mobile JSON Wire Protocol Specification supports an API for getting and setting the network connection for a device. The API works through a bitmask, assigning an integer to each possible state: Value (Alias) Data Wifi Airplane Mode 0 (None) 0 0 0 1 (Airplane Mode) 0 0 1 2 (Wifi only) 0 1 0 4 (Data only) 1 0 0 6 (All network on) 1 1 0 iOS Unfortunately, at the moment Appium does not support the Selenium network connection API for iOS. Android There are the following limitations: Real Devices Changing Airplane Mode state only works for Android 6 and older Chaning data connection state works for Android 4.4 and older. Newer OS releases (5.0+) must be rooted in order to make the feature working (e. g. su binary should available) Changing Wi-Fi connection state should work for all Android versions Emulators Changing Airplane Mode state only works for Android 6 and older Chaning data connection state should work for all Android versions Changing Wi-Fi connection state should work for all Android versions Windows Unfortunately, at the moment Appium does not support the Selenium network connection API for Windows. // javascript // set airplane mode driver.setNetworkConnection(1) // set wifi only driver.setNetworkConnection(2) // set data only driver.setNetworkConnection(4) // set wifi and data driver.setNetworkConnection(6) Retrieving the network connection settings returns the same bitmask, from which the status can be decoded. // javascript driver.getNetworkConnection().then(function (connectionType) { switch (connectionType) { case 0: // no network connection break; case 1: // airplane mode break; case 2: // wifi break; case 4: // data break; case 6: // wifi and data break; } });","title":"Network Connection Guide"},{"location":"writing-running-appium/other/network-connection/#adjusting-network-connection","text":"The Selenium Mobile JSON Wire Protocol Specification supports an API for getting and setting the network connection for a device. The API works through a bitmask, assigning an integer to each possible state: Value (Alias) Data Wifi Airplane Mode 0 (None) 0 0 0 1 (Airplane Mode) 0 0 1 2 (Wifi only) 0 1 0 4 (Data only) 1 0 0 6 (All network on) 1 1 0","title":"Adjusting Network Connection"},{"location":"writing-running-appium/other/network-connection/#ios","text":"Unfortunately, at the moment Appium does not support the Selenium network connection API for iOS.","title":"iOS"},{"location":"writing-running-appium/other/network-connection/#android","text":"There are the following limitations:","title":"Android"},{"location":"writing-running-appium/other/network-connection/#real-devices","text":"Changing Airplane Mode state only works for Android 6 and older Chaning data connection state works for Android 4.4 and older. Newer OS releases (5.0+) must be rooted in order to make the feature working (e. g. su binary should available) Changing Wi-Fi connection state should work for all Android versions","title":"Real Devices"},{"location":"writing-running-appium/other/network-connection/#emulators","text":"Changing Airplane Mode state only works for Android 6 and older Chaning data connection state should work for all Android versions Changing Wi-Fi connection state should work for all Android versions","title":"Emulators"},{"location":"writing-running-appium/other/network-connection/#windows","text":"Unfortunately, at the moment Appium does not support the Selenium network connection API for Windows. // javascript // set airplane mode driver.setNetworkConnection(1) // set wifi only driver.setNetworkConnection(2) // set data only driver.setNetworkConnection(4) // set wifi and data driver.setNetworkConnection(6) Retrieving the network connection settings returns the same bitmask, from which the status can be decoded. // javascript driver.getNetworkConnection().then(function (connectionType) { switch (connectionType) { case 0: // no network connection break; case 1: // airplane mode break; case 2: // wifi break; case 4: // data break; case 6: // wifi and data break; } });","title":"Windows"},{"location":"writing-running-appium/other/reset-strategies/","text":"Reset Strategies Automation Name default fullReset noReset iOS (including XCUITest) Shut down sim after test. Do not destroy sim. If it is a simulator and app capability is provided, uninstalls the app-under-test* but does not destroy simulator. If it is a real device or a simulator with only bundleId capability, does not uninstall app-under-test. Uninstall app before and after real device test, destroy Simulator before and after sim test. They happen only before if resetOnSessionStartOnly: true is provided Do not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in Android Stop and clear app data after test. Do not uninstall apk Stop app, clear app data and uninstall apk before session starts and after test Do not stop app, do not clear app data, and do not uninstall apk. *: Make sure the local data has been deleted from the simulator environment rather than they remain unexpectedly.","title":"Reset Strategies"},{"location":"writing-running-appium/other/reset-strategies/#reset-strategies","text":"Automation Name default fullReset noReset iOS (including XCUITest) Shut down sim after test. Do not destroy sim. If it is a simulator and app capability is provided, uninstalls the app-under-test* but does not destroy simulator. If it is a real device or a simulator with only bundleId capability, does not uninstall app-under-test. Uninstall app before and after real device test, destroy Simulator before and after sim test. They happen only before if resetOnSessionStartOnly: true is provided Do not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in Android Stop and clear app data after test. Do not uninstall apk Stop app, clear app data and uninstall apk before session starts and after test Do not stop app, do not clear app data, and do not uninstall apk. *: Make sure the local data has been deleted from the simulator environment rather than they remain unexpectedly.","title":"Reset Strategies"},{"location":"writing-running-appium/other/troubleshooting/","text":"Troubleshooting Appium Here's what to do if you're experiencing problems, before you submit a ticket to github or write to the appium-discuss discussion group . General Make sure you've followed the getting started steps in the README Make sure your system is set up appropriately (i.e., XCode is updated, Android SDK is installed and ANDROID_HOME is set. Make sure the paths to your applications are correct On windows run appium.app as administrator or when running from source you need to run cmd as administrator. When installing on Mac, make sure the user has write permissions for /usr/local/lib or install Appium with the command npm install -g appium --unsafe-perm=true --allow-root If you're running Appium.app Update the app and restart. If you get a message saying the app can't be updated, re-download it from appium.io . If you're running Appium from source git pull to make sure you're running the latest code Remove old dependencies: rm -rf node_modules Re-install dependencies: npm install Re-transpile the code: gulp transpile You can also use Appium Doctor to determine whether your system is configured correctly for Appium. If you get this error after upgrading to Android SDK 22: {ANDROID_HOME}/tools/ant/uibuild.xml:155: SDK does not have any Build Tools installed. In the Android SDK 22, the platform and build tools are split up into their own items in the SDK manager. Make sure you install the build-tools and platform-tools. Android Make sure the Android emulator is up and running. It's sometimes useful to run adb kill-server adb devices . This can reset the connection to the Android device. If you're running the Android emulator using Fastboot and the emulator isn't being detected by adb, try doing a cold boot: Android Studio Tools AVD Manager Actions Cold Boot Now Make sure you set ANDROID_HOME pointing to the Android SDK directory After setting power state to off (e.g.: driver.setPowerAC(PowerACState.OFF); ) you must create a new session. When using -wipe-data in avdArgs the noReset capability will be ignored if set to true. Make sure proper developer options are enabled. Some devices have custom options to make the device testable. Android Espresso Appium is supposed to disable animations by default, but if it doesn't work try following the Espresso setup instructions which advises that \"To avoid flakiness, we highly recommend that you turn off system animations on the virtual or physical devices used for testing. On your device, under Settings Developer options, disable the following 3 settings: Window animation scale, Transition animation scale, Animator Duration scale\" Windows Make sure developer mode is on Make sure command prompt is Admin Check that the URL Appium server is listening to matches the one specified in test script IOS Make sure Instruments.app is not open If you're running the simulator, make sure your actual device is not plugged in Make sure the accessibility helper is turned off in your Settings app Make sure the app is compiled for the version of the simulator that's being run Make sure the app is compiled for the simulator (or real device) as appropriate (e.g., in debug mode for the simulator), or you might get a posix spawn error. If you've ever run Appium with sudo, you might need to sudo rm /tmp/instruments_sock and try again as not-sudo. If this is the first time you've run Appium, make sure to authorize the use of Instruments. See the UIAutomation Driver doc. If Instruments is crashing when running against a physical device (\"exited with code 253\"), ensure Xcode has downloaded device symbols. Go to Window - Devices, and it should start automatically. This is needed after iOS version upgrades. If you see iOS Simulator failed to install the application. and the paths are correct, try restarting the computer. Make sure your macOS keychain that holds the certificate(s) needed for building your app and the WebDriverAgent is unlocked. Especialy if you are using ssh. General symptom to look for is codesign failure. If you have custom elements in your app, they will not be automatable by UIAutomation (and therefore Appium) by default. You need to set the accessibility status to 'enabled' on them. The way to do this in code is: center [myCustomView setAccessibilityEnabled:YES]; Tests on iOS may exhibit symptoms similar to a memory leak including sluggish performance or hangs. If you experience this problem, it's likely due to a known issue with NSLog. One option is to remove NSLog from your code. However, there are several more nuanced approaches that may also help without requiring that you refactor. ### Workaround 1 NSLog is a macro and can be redefined. E.g., ```objectivec // You'll need to define TEST or TEST2 and then recompile. #ifdef TEST #define NSLog(...) _BlackHoleTestLogger( VA_ARGS ); #endif // TEST #ifdef TEST2 #define NSLog(...) _StdoutTestLogger( VA_ARGS ); #endif // TEST2 void _BlackHoleTestLogger(NSString *format, ...) { // } void _StdoutTestLogger(NSString *format, ...) { va_list argumentList; va_start(argumentList, format); NSMutableString * message = [[NSMutableString alloc] initWithFormat:format arguments:argumentList]; printf(message); va_end(argumentList); [message release]; } ``` ### Workaround 2 Manually replace the underlying function that NSLog wraps. This method was recommended by Apple in a similar context. ```objectivec extern void _NSSetLogCStringFunction(void( )(const char , unsigned, BOOL)); static void _GarbageFreeLogCString(const char *message, unsigned length, BOOL withSyslogBanner) { fprintf(stderr, \"%s\\n\", message); } int main (int argc, const char argv[]) { NSAutoreleasePool pool = [[NSAutoreleasePool alloc] init]; int exitCode; setbuf(stderr, NULL); _NSSetLogCStringFunction(_GarbageFreeLogCString); exitCode = WOApplicationMain(@\"Application\", argc, argv); [pool release]; return exitCode; } `` * Get Unable to launch WebDriverAgent because of xcodebuild failure: Command 'Scripts/bootstrap.sh -d' exited with code 1 error message in failing xcodebuild - Make sure xcodebuild -checkFirstLaunchStatus returns status code 0 - If it returns 69 , you should call xcodebuild -runFirstLaunch once to prevent the root error, Install Started Install Failed: Error Domain=DVTDownloadableErrors Code=3 \"The authorization was denied since no user interaction was possible.\" UserInfo={AuthorizationErrorCode=-60007, NSLocalizedDescription=The authorization was denied since no user interaction was possible.}` - example: https://github.com/appium/WebDriverAgent/pull/165#discussion_r281458167 Webview/Hybrid/Safari app support Make Sure you enable the 'Web Inspector' on the real device. Make Sure you enable the Safari - Advance Preferences- Developer menu for simulators. Make sure you are properly switching contexts using the context appium commands provided by your client library. If you getting this error: select_port() failed, when trying to open the proxy, see this discussion In a Safari session, if the logs indicate that the initial url cannot be entered, make sure that you have the software keyboard enabled. See this discussion . Let the community know Once you've tried the above steps and your issue still isn't resolved, here's what you can do: If you're having trouble getting Appium working and the error messages Appium provides are not clear, join the discussion group and send a message. Please include the following: How you're running Appium (Appium.app, npm, source) What operating system you are using What device and version you are testing against (i.e. Android 4.4, or iOS 7.1) Whether you are running against a real device or a simulator/emulator The client-side and server-side errors you're getting (i.e., \"In Python this is the exception I get in my test script, and here's a link to a paste of the Appium server output) Per above, it's very important to include a paste of the Appium server output when it's run in verbose mode so that we can diagnose what's going on. If you've found what you believe is a bug, go straight to the issue tracker and submit an issue describing the bug and a repro case. Known Issues If you've installed Node from the Node website, it requires that you use sudo for npm . This is not ideal. Try to get node with nvm , n or brew install node instead! Webview support works on real iOS devices with a proxy, see discussion . Sometimes iOS UI elements become invalidated milliseconds after they are found. This results in an error that looks like (null) cannot be tapped . Sometimes the only solution is to put the finding-and-clicking code in a retry block. Appium may have difficulties finding the node executable if you've installed Node and npm via MacPorts. You must make sure that the MacPorts bin folder ( /opt/local/bin by default) is added to PATH somewhere in your ~/.profile , ~/.bash_profile or ~/.bashrc . Specific Errors Action Error Resolution Running ios test [INST STDERR] posix spawn failure; aborting launch Your app is not compiled correctly for the simulator or device. Running mobile safari test error: Could not prepare mobile safari with version '7.1' You probably need to run the authorize script again to make the iOS SDK files writeable. See the UIAutomation Driver","title":"Troubleshooting"},{"location":"writing-running-appium/other/troubleshooting/#troubleshooting-appium","text":"Here's what to do if you're experiencing problems, before you submit a ticket to github or write to the appium-discuss discussion group .","title":"Troubleshooting Appium"},{"location":"writing-running-appium/other/troubleshooting/#general","text":"Make sure you've followed the getting started steps in the README Make sure your system is set up appropriately (i.e., XCode is updated, Android SDK is installed and ANDROID_HOME is set. Make sure the paths to your applications are correct On windows run appium.app as administrator or when running from source you need to run cmd as administrator. When installing on Mac, make sure the user has write permissions for /usr/local/lib or install Appium with the command npm install -g appium --unsafe-perm=true --allow-root","title":"General"},{"location":"writing-running-appium/other/troubleshooting/#if-youre-running-appiumapp","text":"Update the app and restart. If you get a message saying the app can't be updated, re-download it from appium.io .","title":"If you're running Appium.app"},{"location":"writing-running-appium/other/troubleshooting/#if-youre-running-appium-from-source","text":"git pull to make sure you're running the latest code Remove old dependencies: rm -rf node_modules Re-install dependencies: npm install Re-transpile the code: gulp transpile You can also use Appium Doctor to determine whether your system is configured correctly for Appium. If you get this error after upgrading to Android SDK 22: {ANDROID_HOME}/tools/ant/uibuild.xml:155: SDK does not have any Build Tools installed. In the Android SDK 22, the platform and build tools are split up into their own items in the SDK manager. Make sure you install the build-tools and platform-tools.","title":"If you're running Appium from source"},{"location":"writing-running-appium/other/troubleshooting/#android","text":"Make sure the Android emulator is up and running. It's sometimes useful to run adb kill-server adb devices . This can reset the connection to the Android device. If you're running the Android emulator using Fastboot and the emulator isn't being detected by adb, try doing a cold boot: Android Studio Tools AVD Manager Actions Cold Boot Now Make sure you set ANDROID_HOME pointing to the Android SDK directory After setting power state to off (e.g.: driver.setPowerAC(PowerACState.OFF); ) you must create a new session. When using -wipe-data in avdArgs the noReset capability will be ignored if set to true. Make sure proper developer options are enabled. Some devices have custom options to make the device testable.","title":"Android"},{"location":"writing-running-appium/other/troubleshooting/#android-espresso","text":"Appium is supposed to disable animations by default, but if it doesn't work try following the Espresso setup instructions which advises that \"To avoid flakiness, we highly recommend that you turn off system animations on the virtual or physical devices used for testing. On your device, under Settings Developer options, disable the following 3 settings: Window animation scale, Transition animation scale, Animator Duration scale\"","title":"Android Espresso"},{"location":"writing-running-appium/other/troubleshooting/#windows","text":"Make sure developer mode is on Make sure command prompt is Admin Check that the URL Appium server is listening to matches the one specified in test script","title":"Windows"},{"location":"writing-running-appium/other/troubleshooting/#ios","text":"Make sure Instruments.app is not open If you're running the simulator, make sure your actual device is not plugged in Make sure the accessibility helper is turned off in your Settings app Make sure the app is compiled for the version of the simulator that's being run Make sure the app is compiled for the simulator (or real device) as appropriate (e.g., in debug mode for the simulator), or you might get a posix spawn error. If you've ever run Appium with sudo, you might need to sudo rm /tmp/instruments_sock and try again as not-sudo. If this is the first time you've run Appium, make sure to authorize the use of Instruments. See the UIAutomation Driver doc. If Instruments is crashing when running against a physical device (\"exited with code 253\"), ensure Xcode has downloaded device symbols. Go to Window - Devices, and it should start automatically. This is needed after iOS version upgrades. If you see iOS Simulator failed to install the application. and the paths are correct, try restarting the computer. Make sure your macOS keychain that holds the certificate(s) needed for building your app and the WebDriverAgent is unlocked. Especialy if you are using ssh. General symptom to look for is codesign failure. If you have custom elements in your app, they will not be automatable by UIAutomation (and therefore Appium) by default. You need to set the accessibility status to 'enabled' on them. The way to do this in code is: center [myCustomView setAccessibilityEnabled:YES]; Tests on iOS may exhibit symptoms similar to a memory leak including sluggish performance or hangs. If you experience this problem, it's likely due to a known issue with NSLog. One option is to remove NSLog from your code. However, there are several more nuanced approaches that may also help without requiring that you refactor. ### Workaround 1 NSLog is a macro and can be redefined. E.g., ```objectivec // You'll need to define TEST or TEST2 and then recompile. #ifdef TEST #define NSLog(...) _BlackHoleTestLogger( VA_ARGS ); #endif // TEST #ifdef TEST2 #define NSLog(...) _StdoutTestLogger( VA_ARGS ); #endif // TEST2 void _BlackHoleTestLogger(NSString *format, ...) { // } void _StdoutTestLogger(NSString *format, ...) { va_list argumentList; va_start(argumentList, format); NSMutableString * message = [[NSMutableString alloc] initWithFormat:format arguments:argumentList]; printf(message); va_end(argumentList); [message release]; } ``` ### Workaround 2 Manually replace the underlying function that NSLog wraps. This method was recommended by Apple in a similar context. ```objectivec extern void _NSSetLogCStringFunction(void( )(const char , unsigned, BOOL)); static void _GarbageFreeLogCString(const char *message, unsigned length, BOOL withSyslogBanner) { fprintf(stderr, \"%s\\n\", message); } int main (int argc, const char argv[]) { NSAutoreleasePool pool = [[NSAutoreleasePool alloc] init]; int exitCode; setbuf(stderr, NULL); _NSSetLogCStringFunction(_GarbageFreeLogCString); exitCode = WOApplicationMain(@\"Application\", argc, argv); [pool release]; return exitCode; } `` * Get Unable to launch WebDriverAgent because of xcodebuild failure: Command 'Scripts/bootstrap.sh -d' exited with code 1 error message in failing xcodebuild - Make sure xcodebuild -checkFirstLaunchStatus returns status code 0 - If it returns 69 , you should call xcodebuild -runFirstLaunch once to prevent the root error, Install Started Install Failed: Error Domain=DVTDownloadableErrors Code=3 \"The authorization was denied since no user interaction was possible.\" UserInfo={AuthorizationErrorCode=-60007, NSLocalizedDescription=The authorization was denied since no user interaction was possible.}` - example: https://github.com/appium/WebDriverAgent/pull/165#discussion_r281458167","title":"IOS"},{"location":"writing-running-appium/other/troubleshooting/#webviewhybridsafari-app-support","text":"Make Sure you enable the 'Web Inspector' on the real device. Make Sure you enable the Safari - Advance Preferences- Developer menu for simulators. Make sure you are properly switching contexts using the context appium commands provided by your client library. If you getting this error: select_port() failed, when trying to open the proxy, see this discussion In a Safari session, if the logs indicate that the initial url cannot be entered, make sure that you have the software keyboard enabled. See this discussion .","title":"Webview/Hybrid/Safari app support"},{"location":"writing-running-appium/other/troubleshooting/#let-the-community-know","text":"Once you've tried the above steps and your issue still isn't resolved, here's what you can do: If you're having trouble getting Appium working and the error messages Appium provides are not clear, join the discussion group and send a message. Please include the following: How you're running Appium (Appium.app, npm, source) What operating system you are using What device and version you are testing against (i.e. Android 4.4, or iOS 7.1) Whether you are running against a real device or a simulator/emulator The client-side and server-side errors you're getting (i.e., \"In Python this is the exception I get in my test script, and here's a link to a paste of the Appium server output) Per above, it's very important to include a paste of the Appium server output when it's run in verbose mode so that we can diagnose what's going on. If you've found what you believe is a bug, go straight to the issue tracker and submit an issue describing the bug and a repro case.","title":"Let the community know"},{"location":"writing-running-appium/other/troubleshooting/#known-issues","text":"If you've installed Node from the Node website, it requires that you use sudo for npm . This is not ideal. Try to get node with nvm , n or brew install node instead! Webview support works on real iOS devices with a proxy, see discussion . Sometimes iOS UI elements become invalidated milliseconds after they are found. This results in an error that looks like (null) cannot be tapped . Sometimes the only solution is to put the finding-and-clicking code in a retry block. Appium may have difficulties finding the node executable if you've installed Node and npm via MacPorts. You must make sure that the MacPorts bin folder ( /opt/local/bin by default) is added to PATH somewhere in your ~/.profile , ~/.bash_profile or ~/.bashrc .","title":"Known Issues"},{"location":"writing-running-appium/other/troubleshooting/#specific-errors","text":"Action Error Resolution Running ios test [INST STDERR] posix spawn failure; aborting launch Your app is not compiled correctly for the simulator or device. Running mobile safari test error: Could not prepare mobile safari with version '7.1' You probably need to run the authorize script again to make the iOS SDK files writeable. See the UIAutomation Driver","title":"Specific Errors"},{"location":"writing-running-appium/other/unicode/","text":"Multi-lingual Support One problem with dealing with non-Latin characters programmatically is that, for characters with accents, there can be multiple ways of encoding the form. So, for the letter \u00e9 , there are two encodings: a single combining character \u00e9 (Unicode's LATIN SMALL LETTER E WITH ACUTE ), and the combination of the letter e followed by the accent, \u0301 ( COMBINING ACUTE ACCENT ). In order to deal with this, there is normalization , an operation that makes \"equivalent strings have a unique binary representation\" . Luckily, normalizing ASCII text (i.e., text that doesn't need to be normalized) does not cause any changes, and performing the operation multiple times does not have an effect. Thus a normalization function can be called on text without risking adverse effects. // javascript var unorm = require('unorm'); 'some ASCII text' === unorm.nfd('some ASCII text'); unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9') === unorm.nfd(unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9')); So, when dealing with unicode text within a test, you need to normalize, preferably on both the text expected and that received from Appium. There are a number of ways to do the normalization, so be sure to perform the same operation on both strings! // javascript var unorm = require('unorm'); driver .elementByAccessibilityId('find') .text() .then(function (txt) { unorm.nfd(txt).should.be(unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d )); }); One tell-tale sign that the problem is with the encoding of the unicode text is an assertion that fails but reports what look to be the same string: AssertionError: expected 'Fran\u00e7ois G\u00e9rard' to deeply equal 'Fran\u00e7ois G\u00e9rard' + expected - actual + Fran\u00e7ois G\u00e9rard - Fran\u00e7ois G\u00e9rard Since the error is just encoding, the output looks the same. Normalized, these should equal programmatically as well as visually. Finders Finding by text can also require normalization. For instance, if you have a button in an iOS app with the name \u041d\u0430\u0439\u0442\u0438 you may need to normalize the text within the find command. // javascript var unorm = require('unorm'); driver .findElementByXPath(unorm.nfd( //UIAButton[@name='\u041d\u0430\u0439\u0442\u0438'] )) .should.eventually.exist; Otherwise the elements may not be found. Text Fields By default the automation tools for both iOS and Android do not support non-ASCII characters sent to editable fields through the keyboard. iOS Appium sends non-ASCII characters to iOS editable fields directly, bypassing the keyboard altogether. While this allows the text to be inputted in tests, it should be kept in mind that any business logic triggered by keyboard input will therefore not be tested. As above, the text received may need to be normalized before asserting on it. // javascript var unorm = require('unorm'); var testText = unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d ); driver .elementsByClassName('UIATextField').at(1) .sendKeys(testText) .text() .should.become(testText) .nodeify(done); Android Android tests allow for Unicode input by installing and using a specialized keyboard that allows the text to be passed as ASCII text between Appium and the application being tested. In order to utilize this functionality, set the unicodeKeyboard desired capability is set to true . If the keyboard should be returned to its original state, the resetKeyboard desired capability should also be set to true . Otherwise Appium's Unicode keyboard will remain enabled on the device after the tests are completed. Then tests can pass Unicode text to editable fields using send_keys . // javascript var desired = { app: '/path/to/app', deviceName: 'Android Emulator', deviceVersion: '4.4', platformName: 'Android', unicodeKeyboard: true, resetKeyboard: true }; var testText = '\u00e9 \u0152 \u00f9 \u1e0d'; driver .elementByClassName('android.widget.EditText') .sendKeys(testText) .text() .should.eventually.become(testText) .nodeify(done);","title":"Using Unicode with Appium"},{"location":"writing-running-appium/other/unicode/#multi-lingual-support","text":"One problem with dealing with non-Latin characters programmatically is that, for characters with accents, there can be multiple ways of encoding the form. So, for the letter \u00e9 , there are two encodings: a single combining character \u00e9 (Unicode's LATIN SMALL LETTER E WITH ACUTE ), and the combination of the letter e followed by the accent, \u0301 ( COMBINING ACUTE ACCENT ). In order to deal with this, there is normalization , an operation that makes \"equivalent strings have a unique binary representation\" . Luckily, normalizing ASCII text (i.e., text that doesn't need to be normalized) does not cause any changes, and performing the operation multiple times does not have an effect. Thus a normalization function can be called on text without risking adverse effects. // javascript var unorm = require('unorm'); 'some ASCII text' === unorm.nfd('some ASCII text'); unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9') === unorm.nfd(unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9')); So, when dealing with unicode text within a test, you need to normalize, preferably on both the text expected and that received from Appium. There are a number of ways to do the normalization, so be sure to perform the same operation on both strings! // javascript var unorm = require('unorm'); driver .elementByAccessibilityId('find') .text() .then(function (txt) { unorm.nfd(txt).should.be(unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d )); }); One tell-tale sign that the problem is with the encoding of the unicode text is an assertion that fails but reports what look to be the same string: AssertionError: expected 'Fran\u00e7ois G\u00e9rard' to deeply equal 'Fran\u00e7ois G\u00e9rard' + expected - actual + Fran\u00e7ois G\u00e9rard - Fran\u00e7ois G\u00e9rard Since the error is just encoding, the output looks the same. Normalized, these should equal programmatically as well as visually.","title":"Multi-lingual Support"},{"location":"writing-running-appium/other/unicode/#finders","text":"Finding by text can also require normalization. For instance, if you have a button in an iOS app with the name \u041d\u0430\u0439\u0442\u0438 you may need to normalize the text within the find command. // javascript var unorm = require('unorm'); driver .findElementByXPath(unorm.nfd( //UIAButton[@name='\u041d\u0430\u0439\u0442\u0438'] )) .should.eventually.exist; Otherwise the elements may not be found.","title":"Finders"},{"location":"writing-running-appium/other/unicode/#text-fields","text":"By default the automation tools for both iOS and Android do not support non-ASCII characters sent to editable fields through the keyboard.","title":"Text Fields"},{"location":"writing-running-appium/other/unicode/#ios","text":"Appium sends non-ASCII characters to iOS editable fields directly, bypassing the keyboard altogether. While this allows the text to be inputted in tests, it should be kept in mind that any business logic triggered by keyboard input will therefore not be tested. As above, the text received may need to be normalized before asserting on it. // javascript var unorm = require('unorm'); var testText = unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d ); driver .elementsByClassName('UIATextField').at(1) .sendKeys(testText) .text() .should.become(testText) .nodeify(done);","title":"iOS"},{"location":"writing-running-appium/other/unicode/#android","text":"Android tests allow for Unicode input by installing and using a specialized keyboard that allows the text to be passed as ASCII text between Appium and the application being tested. In order to utilize this functionality, set the unicodeKeyboard desired capability is set to true . If the keyboard should be returned to its original state, the resetKeyboard desired capability should also be set to true . Otherwise Appium's Unicode keyboard will remain enabled on the device after the tests are completed. Then tests can pass Unicode text to editable fields using send_keys . // javascript var desired = { app: '/path/to/app', deviceName: 'Android Emulator', deviceVersion: '4.4', platformName: 'Android', unicodeKeyboard: true, resetKeyboard: true }; var testText = '\u00e9 \u0152 \u00f9 \u1e0d'; driver .elementByClassName('android.widget.EditText') .sendKeys(testText) .text() .should.eventually.become(testText) .nodeify(done);","title":"Android"},{"location":"writing-running-appium/tutorial/swipe-tutorial/","text":"Scroll / Swipe actions tutorial Android vs iOS UI differences Appium uses XCUITest driver for iOS and UIAutomator2, Espresso for Android. The default driver for Android is UIAutomator2. With default driver settings we can see elements outside of the view port on iOS, but cannot interact with them. We can check their values, but touches are not reliable. Android UIAutomator2 with default settings allows you to see only elements located in the current view port. Android 'Espresso' TODO . These behaviors/limitations coming from Apple XCUITest and Google UIAutomator2 frameworks. While interacting with elements you should always keep in mind these differences. Simple swipe actions Screen swipe Element swipe Partial Screen swipe Android: 'UIScrollable' swipe Simple example Multiple scroll views example Add scroll layout Tricks and Tips iOS: 'mobile:scroll', 'mobile:swipe' swipe Screen swipe Element swipe Element search swipe iOS: 'pickerWheels' swipe Fast '.setValue()' Slow 'mobile:selectPickerWheelValue' Swipe troubleshoot guide Swipe troubleshoot guide","title":"Swipe Tutorial"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#scroll-swipe-actions-tutorial","text":"","title":"Scroll / Swipe actions tutorial"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#android-vs-ios-ui-differences","text":"Appium uses XCUITest driver for iOS and UIAutomator2, Espresso for Android. The default driver for Android is UIAutomator2. With default driver settings we can see elements outside of the view port on iOS, but cannot interact with them. We can check their values, but touches are not reliable. Android UIAutomator2 with default settings allows you to see only elements located in the current view port. Android 'Espresso' TODO . These behaviors/limitations coming from Apple XCUITest and Google UIAutomator2 frameworks. While interacting with elements you should always keep in mind these differences.","title":"Android vs iOS UI differences"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#simple-swipe-actions","text":"Screen swipe Element swipe Partial Screen swipe","title":"Simple swipe actions"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#android-uiscrollable-swipe","text":"Simple example Multiple scroll views example Add scroll layout Tricks and Tips","title":"Android: 'UIScrollable' swipe"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#ios-mobilescroll-mobileswipe-swipe","text":"Screen swipe Element swipe Element search swipe","title":"iOS: 'mobile:scroll', 'mobile:swipe' swipe"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#ios-pickerwheels-swipe","text":"Fast '.setValue()' Slow 'mobile:selectPickerWheelValue'","title":"iOS: 'pickerWheels' swipe"},{"location":"writing-running-appium/tutorial/swipe-tutorial/#swipe-troubleshoot-guide","text":"Swipe troubleshoot guide","title":"Swipe troubleshoot guide"},{"location":"writing-running-appium/tutorial/swipe/android-layout-direction/","text":"Android 'UIScrollable' swipe: Add scroll layout There are horizontal or vertical scroll views. If UIAutomator fails to automatically perform the scroll then explicitly specifying the layout could solve the issue. Set scroll view layout // setAsVerticalList // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).setAsVerticalList() + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); // setAsHorizontalList // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).setAsHorizontalList() + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"Add scroll layout"},{"location":"writing-running-appium/tutorial/swipe/android-layout-direction/#android-uiscrollable-swipe-add-scroll-layout","text":"There are horizontal or vertical scroll views. If UIAutomator fails to automatically perform the scroll then explicitly specifying the layout could solve the issue.","title":"Android 'UIScrollable' swipe: Add scroll layout"},{"location":"writing-running-appium/tutorial/swipe/android-layout-direction/#set-scroll-view-layout","text":"// setAsVerticalList // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).setAsVerticalList() + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); // setAsHorizontalList // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).setAsHorizontalList() + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"Set scroll view layout"},{"location":"writing-running-appium/tutorial/swipe/android-multiple/","text":"Android 'UIScrollable' swipe: Multiple scroll views example With more then one scrollView on the screen, there is a chance, that UIScrollable fails to scroll to the destination subview. In such case we would need to specify the locator of the destination subview as \"new UiSelector().scrollable(true)\". By instance // first scrollView // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true).instance(0)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); // second scrollView // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true).instance(1)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); By id // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).scrollable(true)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"Multiple scroll views"},{"location":"writing-running-appium/tutorial/swipe/android-multiple/#android-uiscrollable-swipe-multiple-scroll-views-example","text":"With more then one scrollView on the screen, there is a chance, that UIScrollable fails to scroll to the destination subview. In such case we would need to specify the locator of the destination subview as \"new UiSelector().scrollable(true)\".","title":"Android 'UIScrollable' swipe: Multiple scroll views example"},{"location":"writing-running-appium/tutorial/swipe/android-multiple/#by-instance","text":"// first scrollView // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true).instance(0)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); // second scrollView // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true).instance(1)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"By instance"},{"location":"writing-running-appium/tutorial/swipe/android-multiple/#by-id","text":"// FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).scrollable(true)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"By id"},{"location":"writing-running-appium/tutorial/swipe/android-simple/","text":"Android 'UIScrollable' swipe: Simple example UIScrollable is a powerful Android class that performs element lookups in scrollable layouts. In most cases you should use \"scrollIntoView\" class which performs scroll action until the destination element is found on the screen. Android developer documentation for UIScrollable. We can use UIScrollable swipe in following cases: - search elements in a list (e.g. country list) - search elements outside of the screen (e.g. input field, text or button) ScrollIntoView has UiSelector as search criteria input that allows you to find elements by: - by text (exact, contains, match, starts with or regex) - id (exact or regex) - some other methods (rarely used) see in Android developer documentation - a combination of available search methods Android developer documentation for UiSelector. In a simple example we assume that we have one scrolling view and scroll direction from the bottom to the top of the screen. Search by text // Page object @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ) MobileElement element; @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().textContains(\\ part_text\\ )) ) MobileElement element; // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().textContains(\\ part_text\\ )) )); Search by id // Page object @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ )) ) MobileElement element; // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ )) )); Search by id and text // Page object @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).text(\\ exact_text\\ )) ) MobileElement element; // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).text(\\ exact_text\\ )) )); Long view issue For some longer views it is necessary to increase \"setMaxSearchSwipes\". This value allows to set the maximum count of swipe retries made until the search is stopped. // set max swipes to 10 // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).setMaxSearchSwipes(10) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"Simple"},{"location":"writing-running-appium/tutorial/swipe/android-simple/#android-uiscrollable-swipe-simple-example","text":"UIScrollable is a powerful Android class that performs element lookups in scrollable layouts. In most cases you should use \"scrollIntoView\" class which performs scroll action until the destination element is found on the screen. Android developer documentation for UIScrollable. We can use UIScrollable swipe in following cases: - search elements in a list (e.g. country list) - search elements outside of the screen (e.g. input field, text or button) ScrollIntoView has UiSelector as search criteria input that allows you to find elements by: - by text (exact, contains, match, starts with or regex) - id (exact or regex) - some other methods (rarely used) see in Android developer documentation - a combination of available search methods Android developer documentation for UiSelector. In a simple example we assume that we have one scrolling view and scroll direction from the bottom to the top of the screen.","title":"Android 'UIScrollable' swipe: Simple example"},{"location":"writing-running-appium/tutorial/swipe/android-simple/#search-by-text","text":"// Page object @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ) MobileElement element; @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().textContains(\\ part_text\\ )) ) MobileElement element; // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )); MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().textContains(\\ part_text\\ )) ));","title":"Search by text"},{"location":"writing-running-appium/tutorial/swipe/android-simple/#search-by-id","text":"// Page object @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ )) ) MobileElement element; // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ )) ));","title":"Search by id"},{"location":"writing-running-appium/tutorial/swipe/android-simple/#search-by-id-and-text","text":"// Page object @AndroidFindBy(uiAutomator = new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).text(\\ exact_text\\ )) ) MobileElement element; // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)) + .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).text(\\ exact_text\\ )) ));","title":"Search by id and text"},{"location":"writing-running-appium/tutorial/swipe/android-simple/#long-view-issue","text":"For some longer views it is necessary to increase \"setMaxSearchSwipes\". This value allows to set the maximum count of swipe retries made until the search is stopped. // set max swipes to 10 // FindElement MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).setMaxSearchSwipes(10) + .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));","title":"Long view issue"},{"location":"writing-running-appium/tutorial/swipe/android-tricks/","text":"Android 'UIScrollable' swipe: Tricks and Tips While Appium does not allow you to use the full power 'UIScrollable' directly, it is possible to ignore errors and do the trick. Scroll forward // scrollForward (moves exactly one view) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollForward() )); } catch (InvalidSelectorException e) { // ignore } // flingForward (performs quick swipe) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingForward() )); } catch (InvalidSelectorException e) { // ignore } Scroll backward // scrollBackward (moves exactly one view) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollBackward() )); } catch (InvalidSelectorException e) { // ignore } // flingBackward (performs quick swipe) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingBackward() )); } catch (InvalidSelectorException e) { // ignore } Scroll to beginning // scrollToBeginning (moves exactly by one view. 10 scrolls max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollToBeginning(10) )); } catch (InvalidSelectorException e) { // ignore } // flingToBeginning (performs quick swipes. 10 swipes max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingToBeginning(10) )); } catch (InvalidSelectorException e) { // ignore } Scroll to end // scrollToEnd (moves exactly by one view. 10 scrolls max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollToEnd(10) )); } catch (InvalidSelectorException e) { // ignore } // flingToEnd (performs quick swipes. 10 swipes max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingToEnd(10) )); } catch (InvalidSelectorException e) { // ignore }","title":"Tricks and Tips"},{"location":"writing-running-appium/tutorial/swipe/android-tricks/#android-uiscrollable-swipe-tricks-and-tips","text":"While Appium does not allow you to use the full power 'UIScrollable' directly, it is possible to ignore errors and do the trick.","title":"Android 'UIScrollable' swipe: Tricks and Tips"},{"location":"writing-running-appium/tutorial/swipe/android-tricks/#scroll-forward","text":"// scrollForward (moves exactly one view) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollForward() )); } catch (InvalidSelectorException e) { // ignore } // flingForward (performs quick swipe) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingForward() )); } catch (InvalidSelectorException e) { // ignore }","title":"Scroll forward"},{"location":"writing-running-appium/tutorial/swipe/android-tricks/#scroll-backward","text":"// scrollBackward (moves exactly one view) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollBackward() )); } catch (InvalidSelectorException e) { // ignore } // flingBackward (performs quick swipe) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingBackward() )); } catch (InvalidSelectorException e) { // ignore }","title":"Scroll backward"},{"location":"writing-running-appium/tutorial/swipe/android-tricks/#scroll-to-beginning","text":"// scrollToBeginning (moves exactly by one view. 10 scrolls max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollToBeginning(10) )); } catch (InvalidSelectorException e) { // ignore } // flingToBeginning (performs quick swipes. 10 swipes max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingToBeginning(10) )); } catch (InvalidSelectorException e) { // ignore }","title":"Scroll to beginning"},{"location":"writing-running-appium/tutorial/swipe/android-tricks/#scroll-to-end","text":"// scrollToEnd (moves exactly by one view. 10 scrolls max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).scrollToEnd(10) )); } catch (InvalidSelectorException e) { // ignore } // flingToEnd (performs quick swipes. 10 swipes max) try { driver.findElement(MobileBy.AndroidUIAutomator( new UiScrollable(new UiSelector().scrollable(true)).flingToEnd(10) )); } catch (InvalidSelectorException e) { // ignore }","title":"Scroll to end"},{"location":"writing-running-appium/tutorial/swipe/ios-mobile-element-search/","text":"iOS 'mobile:': Element search swipe To search an element or a scroll view use: - element id with name argument - or specify NSPredicate string using predicateString argument NSPredicate examples available here or https://kapeli.com/cheat_sheets/NSPredicate.docset/Contents/Resources/Documents/index is a good NSPredicate cheat sheet. NSPredicate covers element id search with 'name == accessibilityIdentifier' predicate string. String pre = label == 'exact_text' ; MobileElement el = (MobileElement) driver.findElement(MobileBy.id( element_id )); mobileScrollToElementIOS(el, pre); /** * Performs element scroll by predicate string * * @param el the element to scroll * @param pre the predicate string * @version java-client: 7.3.0 **/ public void mobileScrollToElementIOS(MobileElement el, String pre) { System.out.println( mobileScrollToElementIOS(): pre: ' + pre + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( element , el.getId()); scrollObject.put( predicateString , pre); try { driver.executeScript( mobile:scroll , scrollObject); Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileScrollToElementIOS(): FAILED\\n + e.getMessage()); return; } } 'mobileScrollToElementIOS' works UNRELIABLE and often missing needed element while scrolling (especially in complex views). Sometimes helps set simpleIsVisibleCheck' capability to true. As workaround try use combination of simple scroll(screen or element) and check that the destination element is visible on each step. Example of screen scroll and element visibility check. String pre = label == 'exact_text' ; mobileScrollScreenByPredicateIOS(pre, Direction.DOWN); /** * Performs screen scroll by predicate string * * @param pre the predicate string * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void mobileScrollScreenByPredicateIOS(String pre, Direction dir) { System.out.println( mobileScrollScreenByPredicateIOS(): dir: ' + dir + ' ); // always log your actions final int MAX_SWIPES = 5; // limit maximum swipes for (int i = 0; i MAX_SWIPES; i++) { try { if (driver.findElement(MobileBy.iOSNsPredicateString(pre)).isDisplayed()) break; } catch (Exception e) { // ignore } mobileScrollScreenIOS(dir); } }","title":"Element search"},{"location":"writing-running-appium/tutorial/swipe/ios-mobile-element-search/#ios-mobile-element-search-swipe","text":"To search an element or a scroll view use: - element id with name argument - or specify NSPredicate string using predicateString argument NSPredicate examples available here or https://kapeli.com/cheat_sheets/NSPredicate.docset/Contents/Resources/Documents/index is a good NSPredicate cheat sheet. NSPredicate covers element id search with 'name == accessibilityIdentifier' predicate string. String pre = label == 'exact_text' ; MobileElement el = (MobileElement) driver.findElement(MobileBy.id( element_id )); mobileScrollToElementIOS(el, pre); /** * Performs element scroll by predicate string * * @param el the element to scroll * @param pre the predicate string * @version java-client: 7.3.0 **/ public void mobileScrollToElementIOS(MobileElement el, String pre) { System.out.println( mobileScrollToElementIOS(): pre: ' + pre + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); scrollObject.put( element , el.getId()); scrollObject.put( predicateString , pre); try { driver.executeScript( mobile:scroll , scrollObject); Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileScrollToElementIOS(): FAILED\\n + e.getMessage()); return; } } 'mobileScrollToElementIOS' works UNRELIABLE and often missing needed element while scrolling (especially in complex views). Sometimes helps set simpleIsVisibleCheck' capability to true. As workaround try use combination of simple scroll(screen or element) and check that the destination element is visible on each step. Example of screen scroll and element visibility check. String pre = label == 'exact_text' ; mobileScrollScreenByPredicateIOS(pre, Direction.DOWN); /** * Performs screen scroll by predicate string * * @param pre the predicate string * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void mobileScrollScreenByPredicateIOS(String pre, Direction dir) { System.out.println( mobileScrollScreenByPredicateIOS(): dir: ' + dir + ' ); // always log your actions final int MAX_SWIPES = 5; // limit maximum swipes for (int i = 0; i MAX_SWIPES; i++) { try { if (driver.findElement(MobileBy.iOSNsPredicateString(pre)).isDisplayed()) break; } catch (Exception e) { // ignore } mobileScrollScreenIOS(dir); } }","title":"iOS 'mobile:': Element search swipe"},{"location":"writing-running-appium/tutorial/swipe/ios-mobile-element/","text":"iOS 'mobile:': Element swipe To swipe inside of an element you need to add the id of this element into swipe methods. // find element to swipe inside MobileElement el = (MobileElement) driver.findElement(MobileBy.id( my_id )); // execute scroll mobileScrollElementIOS(el, Direction.RIGHT); mobileScrollElementIOS(el, Direction.LEFT); // execute swipe // !remember! to execute swipe in same direction as scroll use reverse direction mobileSwipeElementIOS(el, Direction.LEFT); mobileSwipeElementIOS(el, Direction.RIGHT); /** * Performs scroll inside element * * @param el the element to scroll * @param dir the direction of scroll * @version java-client: 7.3.0 **/ public void mobileScrollElementIOS(MobileElement el, Direction dir) { System.out.println( mobileScrollElementIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from down to up (! differs from mobile:swipe) case UP: // from up to down (! differs from mobile:swipe) case LEFT: // from left to right (! differs from mobile:swipe) case RIGHT: // from right to left (! differs from mobile:swipe) scrollObject.put( direction , dir.name().toLowerCase()); break; default: throw new IllegalArgumentException( mobileScrollElementIOS(): dir: ' + dir + ' NOT supported ); } scrollObject.put( element , el.getId()); try { driver.executeScript( mobile:scroll , scrollObject); // swipe faster then scroll Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileScrollElementIOS(): FAILED\\n + e.getMessage()); return; } } /** * Performs swipe inside element * * @param el the element to swipe * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void mobileSwipeElementIOS(MobileElement el, Direction dir) { System.out.println( mobileSwipeElementIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from up to down (! differs from mobile:scroll) case UP: // from down to up (! differs from mobile:scroll) case LEFT: // from right to left (! differs from mobile:scroll) case RIGHT: // from left to right (! differs from mobile:scroll) scrollObject.put( direction , dir.name().toLowerCase()); break; default: throw new IllegalArgumentException( mobileSwipeElementIOS(): dir: ' + dir + ' NOT supported ); } scrollObject.put( element , el.getId()); try { driver.executeScript( mobile:swipe , scrollObject); Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileSwipeElementIOS(): FAILED\\n + e.getMessage()); return; } }","title":"Element"},{"location":"writing-running-appium/tutorial/swipe/ios-mobile-element/#ios-mobile-element-swipe","text":"To swipe inside of an element you need to add the id of this element into swipe methods. // find element to swipe inside MobileElement el = (MobileElement) driver.findElement(MobileBy.id( my_id )); // execute scroll mobileScrollElementIOS(el, Direction.RIGHT); mobileScrollElementIOS(el, Direction.LEFT); // execute swipe // !remember! to execute swipe in same direction as scroll use reverse direction mobileSwipeElementIOS(el, Direction.LEFT); mobileSwipeElementIOS(el, Direction.RIGHT); /** * Performs scroll inside element * * @param el the element to scroll * @param dir the direction of scroll * @version java-client: 7.3.0 **/ public void mobileScrollElementIOS(MobileElement el, Direction dir) { System.out.println( mobileScrollElementIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from down to up (! differs from mobile:swipe) case UP: // from up to down (! differs from mobile:swipe) case LEFT: // from left to right (! differs from mobile:swipe) case RIGHT: // from right to left (! differs from mobile:swipe) scrollObject.put( direction , dir.name().toLowerCase()); break; default: throw new IllegalArgumentException( mobileScrollElementIOS(): dir: ' + dir + ' NOT supported ); } scrollObject.put( element , el.getId()); try { driver.executeScript( mobile:scroll , scrollObject); // swipe faster then scroll Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileScrollElementIOS(): FAILED\\n + e.getMessage()); return; } } /** * Performs swipe inside element * * @param el the element to swipe * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void mobileSwipeElementIOS(MobileElement el, Direction dir) { System.out.println( mobileSwipeElementIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from up to down (! differs from mobile:scroll) case UP: // from down to up (! differs from mobile:scroll) case LEFT: // from right to left (! differs from mobile:scroll) case RIGHT: // from left to right (! differs from mobile:scroll) scrollObject.put( direction , dir.name().toLowerCase()); break; default: throw new IllegalArgumentException( mobileSwipeElementIOS(): dir: ' + dir + ' NOT supported ); } scrollObject.put( element , el.getId()); try { driver.executeScript( mobile:swipe , scrollObject); Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileSwipeElementIOS(): FAILED\\n + e.getMessage()); return; } }","title":"iOS 'mobile:': Element swipe"},{"location":"writing-running-appium/tutorial/swipe/ios-mobile-screen/","text":"iOS 'mobile:': Screen swipe XCTest framework supports unique gestures like \"mobile:scroll\" and \"mobile:swipe\". They are not so flexible as UIScrollable but still useful. More info https://developer.apple.com/documentation/xctest/xcuielement in 'Scrolling' and 'Performing Gestures' sections. As usual swipe performs swipe action while scroll tries to change one visible view port only. !Note! Scroll direction differs between scroll and swipe commands /** * Performs screen scroll * * @param dir the direction of scroll * @version java-client: 7.3.0 **/ public void mobileScrollScreenIOS(Direction dir) { System.out.println( mobileScrollScreenIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from down to up (! differs from mobile:swipe) scrollObject.put( direction , down ); break; case UP: // from up to down (! differs from mobile:swipe) scrollObject.put( direction , up ); break; case LEFT: // from left to right (! differs from mobile:swipe) scrollObject.put( direction , left ); break; case RIGHT: // from right to left (! differs from mobile:swipe) scrollObject.put( direction , right ); break; default: throw new IllegalArgumentException( mobileScrollIOS(): dir: ' + dir + ' NOT supported ); } try { driver.executeScript( mobile:scroll , scrollObject); // swipe faster then scroll Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileScrollIOS(): FAILED\\n + e.getMessage()); return; } } /** * Performs screen swipe * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void mobileSwipeScreenIOS(Direction dir) { System.out.println( mobileSwipeScreenIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from up to down (! differs from mobile:scroll) scrollObject.put( direction , down ); break; case UP: // from down to up (! differs from mobile:scroll) scrollObject.put( direction , up ); break; case LEFT: // from right to left (! differs from mobile:scroll) scrollObject.put( direction , left ); break; case RIGHT: // from left to right (! differs from mobile:scroll) scrollObject.put( direction , right ); break; default: throw new IllegalArgumentException( mobileSwipeScreenIOS(): dir: ' + dir + ' NOT supported ); } try { driver.executeScript( mobile:swipe , scrollObject); Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileSwipeScreenIOS(): FAILED\\n + e.getMessage()); return; } }","title":"Screen"},{"location":"writing-running-appium/tutorial/swipe/ios-mobile-screen/#ios-mobile-screen-swipe","text":"XCTest framework supports unique gestures like \"mobile:scroll\" and \"mobile:swipe\". They are not so flexible as UIScrollable but still useful. More info https://developer.apple.com/documentation/xctest/xcuielement in 'Scrolling' and 'Performing Gestures' sections. As usual swipe performs swipe action while scroll tries to change one visible view port only. !Note! Scroll direction differs between scroll and swipe commands /** * Performs screen scroll * * @param dir the direction of scroll * @version java-client: 7.3.0 **/ public void mobileScrollScreenIOS(Direction dir) { System.out.println( mobileScrollScreenIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from down to up (! differs from mobile:swipe) scrollObject.put( direction , down ); break; case UP: // from up to down (! differs from mobile:swipe) scrollObject.put( direction , up ); break; case LEFT: // from left to right (! differs from mobile:swipe) scrollObject.put( direction , left ); break; case RIGHT: // from right to left (! differs from mobile:swipe) scrollObject.put( direction , right ); break; default: throw new IllegalArgumentException( mobileScrollIOS(): dir: ' + dir + ' NOT supported ); } try { driver.executeScript( mobile:scroll , scrollObject); // swipe faster then scroll Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileScrollIOS(): FAILED\\n + e.getMessage()); return; } } /** * Performs screen swipe * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void mobileSwipeScreenIOS(Direction dir) { System.out.println( mobileSwipeScreenIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final HashMap String, String scrollObject = new HashMap String, String (); switch (dir) { case DOWN: // from up to down (! differs from mobile:scroll) scrollObject.put( direction , down ); break; case UP: // from down to up (! differs from mobile:scroll) scrollObject.put( direction , up ); break; case LEFT: // from right to left (! differs from mobile:scroll) scrollObject.put( direction , left ); break; case RIGHT: // from left to right (! differs from mobile:scroll) scrollObject.put( direction , right ); break; default: throw new IllegalArgumentException( mobileSwipeScreenIOS(): dir: ' + dir + ' NOT supported ); } try { driver.executeScript( mobile:swipe , scrollObject); Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete } catch (Exception e) { System.err.println( mobileSwipeScreenIOS(): FAILED\\n + e.getMessage()); return; } }","title":"iOS 'mobile:': Screen swipe"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-mobile/","text":"iOS pickerWheels: Slow 'mobile:selectPickerWheelValue' example If .setValue() fails then mobile: selectPickerWheelValue helper could be used as a workaround. This mobile method allows to select the next or the previous picker value. It is necessary to keep changing picker wheel values until the current one is equal the desired one or the count of retries exceeds. documentation Select PickerWheel example Assert.assertTrue(setPickerWheel( my_text , Order.NEXT), setPickerWheel(): FAILED ); /** * Set PickerWheel value * * @param text the text to select * @param order the direction of search * @return result of set * @version java-client: 7.3.0 **/ public boolean setPickerWheel(String text, Order order) { System.out.println( setPickerWheel(): text: ' + text + ',order: ' + order + ' ); // always log your actions // find pickerWheel MobileElement pickerWheel = (MobileElement) driver.findElement(MobileBy.className( XCUIElementTypePickerWheel )); // limit search time to avoid infinite loops String resultText; Long startTime = System.currentTimeMillis(); do { resultText = pickerWheel.getText(); if (resultText.equals(text)) return true; if (!selectPickerWheelIOS(pickerWheel, order)) return false; } while (System.currentTimeMillis() startTime + 60 * 1000); // 60 sec MAX return false; } /** * Performs set next or previous value * * @param el the pickerWheel element * @param order the order to select * @return result of select * @version java-client: 7.3.0 **/ public boolean selectPickerWheelIOS(MobileElement el, Order order) { System.out.println( selectPickerWheelIOS(): order: ' + order + ' ); // always log your actions HashMap String, Object params = new HashMap (); params.put( order , order.name().toLowerCase()); params.put( offset , 0.2 ); // tap offset params.put( element , el.getId()); // pickerWheel element try { driver.executeScript( mobile: selectPickerWheelValue , params); return true; } catch (InvalidElementStateException e1) { System.out.println( selectPickerWheelIOS(): FAILED\\n + e1.getMessage()); } catch (InvalidArgumentException e2) { System.out.println( selectPickerWheelIOS(): FAILED\\n + e2.getMessage()); } return false; } public enum Order { NEXT, PREVIOUS; }","title":"Slow"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-mobile/#ios-pickerwheels-slow-mobileselectpickerwheelvalue-example","text":"If .setValue() fails then mobile: selectPickerWheelValue helper could be used as a workaround. This mobile method allows to select the next or the previous picker value. It is necessary to keep changing picker wheel values until the current one is equal the desired one or the count of retries exceeds. documentation","title":"iOS pickerWheels: Slow 'mobile:selectPickerWheelValue' example"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-mobile/#select-pickerwheel-example","text":"Assert.assertTrue(setPickerWheel( my_text , Order.NEXT), setPickerWheel(): FAILED ); /** * Set PickerWheel value * * @param text the text to select * @param order the direction of search * @return result of set * @version java-client: 7.3.0 **/ public boolean setPickerWheel(String text, Order order) { System.out.println( setPickerWheel(): text: ' + text + ',order: ' + order + ' ); // always log your actions // find pickerWheel MobileElement pickerWheel = (MobileElement) driver.findElement(MobileBy.className( XCUIElementTypePickerWheel )); // limit search time to avoid infinite loops String resultText; Long startTime = System.currentTimeMillis(); do { resultText = pickerWheel.getText(); if (resultText.equals(text)) return true; if (!selectPickerWheelIOS(pickerWheel, order)) return false; } while (System.currentTimeMillis() startTime + 60 * 1000); // 60 sec MAX return false; } /** * Performs set next or previous value * * @param el the pickerWheel element * @param order the order to select * @return result of select * @version java-client: 7.3.0 **/ public boolean selectPickerWheelIOS(MobileElement el, Order order) { System.out.println( selectPickerWheelIOS(): order: ' + order + ' ); // always log your actions HashMap String, Object params = new HashMap (); params.put( order , order.name().toLowerCase()); params.put( offset , 0.2 ); // tap offset params.put( element , el.getId()); // pickerWheel element try { driver.executeScript( mobile: selectPickerWheelValue , params); return true; } catch (InvalidElementStateException e1) { System.out.println( selectPickerWheelIOS(): FAILED\\n + e1.getMessage()); } catch (InvalidArgumentException e2) { System.out.println( selectPickerWheelIOS(): FAILED\\n + e2.getMessage()); } return false; } public enum Order { NEXT, PREVIOUS; }","title":"Select PickerWheel example"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/","text":"iOS pickerWheels: Fast '.setValue()' example Unfortunately, XCTest cannot always properly interact with picker wheel controls. Sometimes the setValue() call might not have any effect. How to make picker wheel controls more compatible to XCTest: - if PickerWheel view is simple e.g. any text: month name, date or country name in most cases '.setValue()' works. - if PickerWheel value complicated e.g. country flag image and country text then the probability of failure increases. One PickerWheel String txt = exact_text ; MobileElement el = (MobileElement) driver.findElement(MobileBy.className( XCUIElementTypePickerWheel )); el.setValue(txt); Multiple PickerWheels String txt = exact_text ; List MobileElement el = driver.findElements(MobileBy.className( XCUIElementTypePickerWheel )); // set first PickerWheel el.get(0).setValue(txt); // set second PickerWheel el.get(1).setValue(txt);","title":"Fast"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/#ios-pickerwheels-fast-setvalue-example","text":"Unfortunately, XCTest cannot always properly interact with picker wheel controls. Sometimes the setValue() call might not have any effect. How to make picker wheel controls more compatible to XCTest: - if PickerWheel view is simple e.g. any text: month name, date or country name in most cases '.setValue()' works. - if PickerWheel value complicated e.g. country flag image and country text then the probability of failure increases.","title":"iOS pickerWheels: Fast '.setValue()' example"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/#one-pickerwheel","text":"String txt = exact_text ; MobileElement el = (MobileElement) driver.findElement(MobileBy.className( XCUIElementTypePickerWheel )); el.setValue(txt);","title":"One PickerWheel"},{"location":"writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/#multiple-pickerwheels","text":"String txt = exact_text ; List MobileElement el = driver.findElements(MobileBy.className( XCUIElementTypePickerWheel )); // set first PickerWheel el.get(0).setValue(txt); // set second PickerWheel el.get(1).setValue(txt);","title":"Multiple PickerWheels"},{"location":"writing-running-appium/tutorial/swipe/simple-element/","text":"Simple Element swipe Android: UIAutomator2 By default UIAutomator2 driver only returns elements, which are visible on the screen. If a container is split between the visible and invisible parts of the viewport then a part of its content won't be visible. /** * Performs swipe inside an element * * @param el the element to swipe * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeElementAndroid(MobileElement el, Direction dir) { System.out.println( swipeElementAndroid(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms int edgeBorder; PointOption pointOptionStart, pointOptionEnd; // init screen variables Rectangle rect = el.getRect(); // sometimes it is needed to configure edgeBorders // you can also improve borders to have vertical/horizontal // or left/right/up/down border variables edgeBorder = 0; switch (dir) { case DOWN: // from up to down pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + edgeBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - edgeBorder); break; case UP: // from down to up pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - edgeBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + edgeBorder); break; case LEFT: // from right to left pointOptionStart = PointOption.point(rect.x + rect.width - edgeBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + edgeBorder, rect.y + rect.height / 2); break; case RIGHT: // from left to right pointOptionStart = PointOption.point(rect.x + edgeBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + rect.width - edgeBorder, rect.y + rect.height / 2); break; default: throw new IllegalArgumentException( swipeElementAndroid(): dir: ' + dir + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeElementAndroid(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } } iOS: XCUITest XCUITest shows elements outside screen. It is strongly advised to use either screen swipe or 'mobile:scroll' / 'mobile:swipe' methods. If you still need or prefer to try element method you should consider the following: 1. Check that both start and end points are on screen. 2. Scrollview is often a background element. Any header/footer or other elements overlap it and limit swipe possibilities. Try to fix it by configuring correct borders. If borders differ per screen - make them configurable via swipe function variables. /** * Performs swipe inside an element * * @param el the element to swipe * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeElementIOS(MobileElement el, Direction dir) { System.out.println( swipeElementIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 500; // ms // init screen variables Dimension dims = driver.manage().window().getSize(); Rectangle rect = el.getRect(); // check element overlaps screen if (rect.x = dims.width || rect.x + rect.width = 0 || rect.y = dims.height || rect.y + rect.height = 0) { throw new IllegalArgumentException( swipeElementIOS(): Element outside screen ); } // init borders per your app screen // or make them configurable with function variables int leftBorder, rightBorder, upBorder, downBorder; leftBorder = 0; rightBorder = 0; upBorder = 0; downBorder = 0; // find rect that overlap screen if (rect.x 0) { rect.width = rect.width + rect.x; rect.x = 0; } if (rect.y 0) { rect.height = rect.height + rect.y; rect.y = 0; } if (rect.width dims.width) rect.width = dims.width; if (rect.height dims.height) rect.height = dims.height; PointOption pointOptionStart, pointOptionEnd; switch (dir) { case DOWN: // from up to down pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + upBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - downBorder); break; case UP: // from down to up pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - downBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + upBorder); break; case LEFT: // from right to left pointOptionStart = PointOption.point(rect.x + rect.width - rightBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + leftBorder, rect.y + rect.height / 2); break; case RIGHT: // from left to right pointOptionStart = PointOption.point(rect.x + leftBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + rect.width - rightBorder, rect.y + rect.height / 2); break; default: throw new IllegalArgumentException( swipeElementIOS(): dir: ' + dir + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeElementIOS(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } }","title":"Element"},{"location":"writing-running-appium/tutorial/swipe/simple-element/#simple-element-swipe","text":"","title":"Simple Element swipe"},{"location":"writing-running-appium/tutorial/swipe/simple-element/#android-uiautomator2","text":"By default UIAutomator2 driver only returns elements, which are visible on the screen. If a container is split between the visible and invisible parts of the viewport then a part of its content won't be visible. /** * Performs swipe inside an element * * @param el the element to swipe * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeElementAndroid(MobileElement el, Direction dir) { System.out.println( swipeElementAndroid(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms int edgeBorder; PointOption pointOptionStart, pointOptionEnd; // init screen variables Rectangle rect = el.getRect(); // sometimes it is needed to configure edgeBorders // you can also improve borders to have vertical/horizontal // or left/right/up/down border variables edgeBorder = 0; switch (dir) { case DOWN: // from up to down pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + edgeBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - edgeBorder); break; case UP: // from down to up pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - edgeBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + edgeBorder); break; case LEFT: // from right to left pointOptionStart = PointOption.point(rect.x + rect.width - edgeBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + edgeBorder, rect.y + rect.height / 2); break; case RIGHT: // from left to right pointOptionStart = PointOption.point(rect.x + edgeBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + rect.width - edgeBorder, rect.y + rect.height / 2); break; default: throw new IllegalArgumentException( swipeElementAndroid(): dir: ' + dir + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeElementAndroid(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } }","title":"Android: UIAutomator2"},{"location":"writing-running-appium/tutorial/swipe/simple-element/#ios-xcuitest","text":"XCUITest shows elements outside screen. It is strongly advised to use either screen swipe or 'mobile:scroll' / 'mobile:swipe' methods. If you still need or prefer to try element method you should consider the following: 1. Check that both start and end points are on screen. 2. Scrollview is often a background element. Any header/footer or other elements overlap it and limit swipe possibilities. Try to fix it by configuring correct borders. If borders differ per screen - make them configurable via swipe function variables. /** * Performs swipe inside an element * * @param el the element to swipe * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeElementIOS(MobileElement el, Direction dir) { System.out.println( swipeElementIOS(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 500; // ms // init screen variables Dimension dims = driver.manage().window().getSize(); Rectangle rect = el.getRect(); // check element overlaps screen if (rect.x = dims.width || rect.x + rect.width = 0 || rect.y = dims.height || rect.y + rect.height = 0) { throw new IllegalArgumentException( swipeElementIOS(): Element outside screen ); } // init borders per your app screen // or make them configurable with function variables int leftBorder, rightBorder, upBorder, downBorder; leftBorder = 0; rightBorder = 0; upBorder = 0; downBorder = 0; // find rect that overlap screen if (rect.x 0) { rect.width = rect.width + rect.x; rect.x = 0; } if (rect.y 0) { rect.height = rect.height + rect.y; rect.y = 0; } if (rect.width dims.width) rect.width = dims.width; if (rect.height dims.height) rect.height = dims.height; PointOption pointOptionStart, pointOptionEnd; switch (dir) { case DOWN: // from up to down pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + upBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - downBorder); break; case UP: // from down to up pointOptionStart = PointOption.point(rect.x + rect.width / 2, rect.y + rect.height - downBorder); pointOptionEnd = PointOption.point(rect.x + rect.width / 2, rect.y + upBorder); break; case LEFT: // from right to left pointOptionStart = PointOption.point(rect.x + rect.width - rightBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + leftBorder, rect.y + rect.height / 2); break; case RIGHT: // from left to right pointOptionStart = PointOption.point(rect.x + leftBorder, rect.y + rect.height / 2); pointOptionEnd = PointOption.point(rect.x + rect.width - rightBorder, rect.y + rect.height / 2); break; default: throw new IllegalArgumentException( swipeElementIOS(): dir: ' + dir + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeElementIOS(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } }","title":"iOS: XCUITest"},{"location":"writing-running-appium/tutorial/swipe/simple-partial-screen/","text":"Simple Partial Screen swipe There are some situations when we need just a small screen swipe. 1. iOS: 'mobile:scroll' that is used for precise scroll fails. 2. Speed concern: Touch action scroll is faster than any other swipe method. We could use existing swipe from screen center and reduce move action. /** * Performs small swipe from the center of screen * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeScreenSmall(Direction dir) { System.out.println( swipeScreenSmall(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms PointOption pointOptionStart, pointOptionEnd; // init screen variables Dimension dims = driver.manage().window().getSize(); // init start point = center of screen pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2); // reduce swipe move into multiplier times comparing to swipeScreen move int mult = 10; // multiplier switch (dir) { case DOWN: // center of footer pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) + (dims.height / 2) / mult); break; case UP: // center of header pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) - (dims.height / 2) / mult); break; case LEFT: // center of left side pointOptionEnd = PointOption.point((dims.width / 2) - (dims.width / 2) / mult, dims.height / 2); break; case RIGHT: // center of right side pointOptionEnd = PointOption.point((dims.width / 2) + (dims.width / 2) / mult, dims.height / 2); break; default: throw new IllegalArgumentException( swipeScreenSmall(): dir: ' + dir.toString() + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeScreenSmall(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } }","title":"Partial screen"},{"location":"writing-running-appium/tutorial/swipe/simple-partial-screen/#simple-partial-screen-swipe","text":"There are some situations when we need just a small screen swipe. 1. iOS: 'mobile:scroll' that is used for precise scroll fails. 2. Speed concern: Touch action scroll is faster than any other swipe method. We could use existing swipe from screen center and reduce move action. /** * Performs small swipe from the center of screen * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeScreenSmall(Direction dir) { System.out.println( swipeScreenSmall(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms PointOption pointOptionStart, pointOptionEnd; // init screen variables Dimension dims = driver.manage().window().getSize(); // init start point = center of screen pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2); // reduce swipe move into multiplier times comparing to swipeScreen move int mult = 10; // multiplier switch (dir) { case DOWN: // center of footer pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) + (dims.height / 2) / mult); break; case UP: // center of header pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) - (dims.height / 2) / mult); break; case LEFT: // center of left side pointOptionEnd = PointOption.point((dims.width / 2) - (dims.width / 2) / mult, dims.height / 2); break; case RIGHT: // center of right side pointOptionEnd = PointOption.point((dims.width / 2) + (dims.width / 2) / mult, dims.height / 2); break; default: throw new IllegalArgumentException( swipeScreenSmall(): dir: ' + dir.toString() + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeScreenSmall(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } }","title":"Simple Partial Screen swipe"},{"location":"writing-running-appium/tutorial/swipe/simple-screen/","text":"Simple Screen swipe Swipe has start and end points. The start point of swipe is most important. The following elements may prevent swipe start: - application interface/menu e.g. header or footer - elements that are waiting tap and do not pass touch to scroll view It is better to start swipe actions at the center of the screen to make them more reliable. /** * Performs swipe from the center of screen * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeScreen(Direction dir) { System.out.println( swipeScreen(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms int edgeBorder = 10; // better avoid edges PointOption pointOptionStart, pointOptionEnd; // init screen variables Dimension dims = driver.manage().window().getSize(); // init start point = center of screen pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2); switch (dir) { case DOWN: // center of footer pointOptionEnd = PointOption.point(dims.width / 2, dims.height - edgeBorder); break; case UP: // center of header pointOptionEnd = PointOption.point(dims.width / 2, edgeBorder); break; case LEFT: // center of left side pointOptionEnd = PointOption.point(edgeBorder, dims.height / 2); break; case RIGHT: // center of right side pointOptionEnd = PointOption.point(dims.width - edgeBorder, dims.height / 2); break; default: throw new IllegalArgumentException( swipeScreen(): dir: ' + dir + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeScreen(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } } public enum Direction { UP, DOWN, LEFT, RIGHT; }","title":"Screen"},{"location":"writing-running-appium/tutorial/swipe/simple-screen/#simple-screen-swipe","text":"Swipe has start and end points. The start point of swipe is most important. The following elements may prevent swipe start: - application interface/menu e.g. header or footer - elements that are waiting tap and do not pass touch to scroll view It is better to start swipe actions at the center of the screen to make them more reliable. /** * Performs swipe from the center of screen * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeScreen(Direction dir) { System.out.println( swipeScreen(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms int edgeBorder = 10; // better avoid edges PointOption pointOptionStart, pointOptionEnd; // init screen variables Dimension dims = driver.manage().window().getSize(); // init start point = center of screen pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2); switch (dir) { case DOWN: // center of footer pointOptionEnd = PointOption.point(dims.width / 2, dims.height - edgeBorder); break; case UP: // center of header pointOptionEnd = PointOption.point(dims.width / 2, edgeBorder); break; case LEFT: // center of left side pointOptionEnd = PointOption.point(edgeBorder, dims.height / 2); break; case RIGHT: // center of right side pointOptionEnd = PointOption.point(dims.width - edgeBorder, dims.height / 2); break; default: throw new IllegalArgumentException( swipeScreen(): dir: ' + dir + ' NOT supported ); } // execute swipe using TouchAction try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeScreen(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } } public enum Direction { UP, DOWN, LEFT, RIGHT; }","title":"Simple Screen swipe"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/","text":"Swipe troubleshoot guide Simple swipe actions With touch action swipe problems execute following steps to check: Add logs to touch coordinates. Swipe screen example with logs: /** * Performs swipe from the center of screen * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeScreenWithLogs(Direction dir) { System.out.println( swipeScreen(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms int edgeBorder = 10; // better avoid edges Point pointStart, pointEnd; PointOption pointOptionStart, pointOptionEnd; // init screen variables Dimension dims = driver.manage().window().getSize(); // init start point = center of screen pointStart = new Point(dims.width / 2, dims.height / 2); switch (dir) { case DOWN: // center of footer pointEnd = new Point(dims.width / 2, dims.height - edgeBorder); break; case UP: // center of header pointEnd = new Point(dims.width / 2, edgeBorder); break; case LEFT: // center of left side pointEnd = new Point(edgeBorder, dims.height / 2); break; case RIGHT: // center of right side pointEnd = new Point(dims.width - edgeBorder, dims.height / 2); break; default: throw new IllegalArgumentException( swipeScreen(): dir: ' + dir.toString() + ' NOT supported ); } // execute swipe using TouchAction pointOptionStart = PointOption.point(pointStart.x, pointStart.y); pointOptionEnd = PointOption.point(pointEnd.x, pointEnd.y); System.out.println( swipeScreen(): pointStart: { + pointStart.x + , + pointStart.y + } ); System.out.println( swipeScreen(): pointEnd: { + pointEnd.x + , + pointEnd.y + } ); System.out.println( swipeScreen(): screenSize: { + dims.width + , + dims.height + } ); try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeScreen(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } } Example output: swipeScreen(): dir: 'DOWN' swipeScreen(): pointStart: {187,333} swipeScreen(): pointEnd: {187,657} swipeScreen(): screenSize: {375,667} swipeScreen(): dir: 'UP' swipeScreen(): pointStart: {187,333} swipeScreen(): pointEnd: {187,10} swipeScreen(): screenSize: {375,667} In Android enable 'Show Taps' and 'Pointer location' in 'Settings - System - Developer options - Input tab' to see touches visually. Check swipe manually using the same start and end points. Android: 'UIScrollable' swipe Scroll does not start: Check number of scrollViews on screen. If more then one - specify scrollView by instance/resource-id/classname/... Check scrollView layout and use 'setAsVerticalList' or 'setAsHorizontalList'. Use combination of specifying scrollView element and layout. All fails - switch to simple element swipe. Missed the search element: Add pause in test before search and manually swipe to needed element while test in pause. After pause add code to check element search. E.g. if you specified search element by text: MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiSelector().text(\\ exact_text\\ ) )); // or MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiSelector().textContains(\\ part_text\\ ) )); try { System.out.println( Element found: + !element.getId().isEmpty()); } catch (Exception e) { System.out.println( Element found: false ); } iOS: 'mobile:scroll', 'mobile:swipe' swipe Scroll does not start: Check direction. Note that 'scroll' and 'swipe' method directions differ! All fails - switch to simple element swipe. Missed the search element: If you need precise swipe prefer scroll method. Sometimes when search element appeared partly tap on it will fail. Use strategy of simple-partial-element swipe (like simple-partial-screen example) on tap fail and repeat tap again after partial element swipe.","title":"Guide"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#swipe-troubleshoot-guide","text":"","title":"Swipe troubleshoot guide"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#simple-swipe-actions","text":"With touch action swipe problems execute following steps to check: Add logs to touch coordinates. Swipe screen example with logs: /** * Performs swipe from the center of screen * * @param dir the direction of swipe * @version java-client: 7.3.0 **/ public void swipeScreenWithLogs(Direction dir) { System.out.println( swipeScreen(): dir: ' + dir + ' ); // always log your actions // Animation default time: // - Android: 300 ms // - iOS: 200 ms // final value depends on your app and could be greater final int ANIMATION_TIME = 200; // ms final int PRESS_TIME = 200; // ms int edgeBorder = 10; // better avoid edges Point pointStart, pointEnd; PointOption pointOptionStart, pointOptionEnd; // init screen variables Dimension dims = driver.manage().window().getSize(); // init start point = center of screen pointStart = new Point(dims.width / 2, dims.height / 2); switch (dir) { case DOWN: // center of footer pointEnd = new Point(dims.width / 2, dims.height - edgeBorder); break; case UP: // center of header pointEnd = new Point(dims.width / 2, edgeBorder); break; case LEFT: // center of left side pointEnd = new Point(edgeBorder, dims.height / 2); break; case RIGHT: // center of right side pointEnd = new Point(dims.width - edgeBorder, dims.height / 2); break; default: throw new IllegalArgumentException( swipeScreen(): dir: ' + dir.toString() + ' NOT supported ); } // execute swipe using TouchAction pointOptionStart = PointOption.point(pointStart.x, pointStart.y); pointOptionEnd = PointOption.point(pointEnd.x, pointEnd.y); System.out.println( swipeScreen(): pointStart: { + pointStart.x + , + pointStart.y + } ); System.out.println( swipeScreen(): pointEnd: { + pointEnd.x + , + pointEnd.y + } ); System.out.println( swipeScreen(): screenSize: { + dims.width + , + dims.height + } ); try { new TouchAction(driver) .press(pointOptionStart) // a bit more reliable when we add small wait .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME))) .moveTo(pointOptionEnd) .release().perform(); } catch (Exception e) { System.err.println( swipeScreen(): TouchAction FAILED\\n + e.getMessage()); return; } // always allow swipe action to complete try { Thread.sleep(ANIMATION_TIME); } catch (InterruptedException e) { // ignore } } Example output: swipeScreen(): dir: 'DOWN' swipeScreen(): pointStart: {187,333} swipeScreen(): pointEnd: {187,657} swipeScreen(): screenSize: {375,667} swipeScreen(): dir: 'UP' swipeScreen(): pointStart: {187,333} swipeScreen(): pointEnd: {187,10} swipeScreen(): screenSize: {375,667} In Android enable 'Show Taps' and 'Pointer location' in 'Settings - System - Developer options - Input tab' to see touches visually. Check swipe manually using the same start and end points.","title":"Simple swipe actions"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#android-uiscrollable-swipe","text":"","title":"Android: 'UIScrollable' swipe"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#scroll-does-not-start","text":"Check number of scrollViews on screen. If more then one - specify scrollView by instance/resource-id/classname/... Check scrollView layout and use 'setAsVerticalList' or 'setAsHorizontalList'. Use combination of specifying scrollView element and layout. All fails - switch to simple element swipe.","title":"Scroll does not start:"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#missed-the-search-element","text":"Add pause in test before search and manually swipe to needed element while test in pause. After pause add code to check element search. E.g. if you specified search element by text: MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiSelector().text(\\ exact_text\\ ) )); // or MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator( new UiSelector().textContains(\\ part_text\\ ) )); try { System.out.println( Element found: + !element.getId().isEmpty()); } catch (Exception e) { System.out.println( Element found: false ); }","title":"Missed the search element:"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#ios-mobilescroll-mobileswipe-swipe","text":"","title":"iOS: 'mobile:scroll', 'mobile:swipe' swipe"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#scroll-does-not-start_1","text":"Check direction. Note that 'scroll' and 'swipe' method directions differ! All fails - switch to simple element swipe.","title":"Scroll does not start:"},{"location":"writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#missed-the-search-element_1","text":"If you need precise swipe prefer scroll method. Sometimes when search element appeared partly tap on it will fail. Use strategy of simple-partial-element swipe (like simple-partial-screen example) on tap fail and repeat tap again after partial element swipe.","title":"Missed the search element:"},{"location":"writing-running-appium/web/chromedriver/","text":"Chromedriver Appium supports automating Android web pages (in Chrome and the built-in Browser) and hybrid apps that are Chrome-backed, by managing a Chromedriver instance and proxying commands to it when necessary. It comes bundled with the latest version of Chromedriver , installed through the npm package appium-chromedriver (Github: appium-chromedriver ). With each update to Chromedriver there is an increase in the minimum supported version of Chrome, such that older devices are often unable to be automated with the bundled version. In the Appium server logs there will be an error like: An unknown server-side error occurred while processing the command. Original error: unknown error: Chrome version must be = 55.0.2883.0 To get around this it is necessary to provide Appium with a proper Chromedriver binary, that matches to the Chrome engine version running on the device under test. Read the Chromedriver/Chrome compatibility topic below to know more about finding a matching Chromedriver executable. There are several ways to provide a customized Chromedriver to Appium: When installing the server Provide --chromedriver_version command line argument containing the actual version number npm install appium --chromedriver_version= 2.16 Or specify the Chromedriver version in the CHROMEDRIVER_VERSION environment variable, e.g, CHROMEDRIVER_VERSION=2.20 npm install appium This can also be set to LATEST to get the most recent version. When starting the server Chromedriver version can be specified at runtime, by specifying the --chromedriver-executable server flag, along with the full path to the Chromedriver executable which was manually downloaded and put to the server file system, e.g., appium --chromedriver-executable /path/to/my/chromedriver When starting a session (manual discovery) Chromedriver version can be specified in session capabilities, by providing the chromedriverExecutable cap, containing the full path to a matching Chromedriver executable, which must be manually downloaded and put to the server file system. See http://appium.io/docs/en/writing-running-appium/caps/ for more details When starting a session (automated discovery) Appium could also try to detect the version of the target Chrome engine and download matching chromedriver for it automatically if it does not exist on the local file system. Read the Automatic discovery of compatible Chromedriver topic below for more details. Chromedriver/Chrome compatibility The list of Chromedriver versions and their matching minimum Chrome versions could be found at https://raw.githubusercontent.com/appium/appium-chromedriver/master/config/mapping.json Since version 2.46 Google has changed the rules for Chromedriver versioning, so now the major Chromedriver version corresponds to the major web view/browser version, that it can automate. Follow the Version Selection document in order to manually find the Chromedriver, that supports your current browser/web view if its major version is equal or above 73 . To find the minimum supported browsers for older Chromedriver versions (below 73 ), get the Chromium source code , check out the release commit, and check the variable kMinimumSupportedChromeVersion in the file src/chrome/test/chromedriver/chrome/version.cc . (To find the release commits, you can use git log --pretty=format:'%h | %s%d' | grep -i \"Release Chromedriver version\" .) The complete list of available Chromedriver releases and release notes is here . Automatic discovery of compatible Chromedriver Beginning with Appium 1.8.0, Appium is able to pick the correct Chromedriver for the version of Chrome under test. While Appium only comes bundled with the Chromedriver most recently released at the time of the Appium version's release, more Chromedriver versions can be downloaded and either placed inside the Appium installation ( not recommended since upgrading Appium will remove them) or in a custom location, which can be indicated to Appium with the chromedriverExecutableDir desired capability. This capability is the absolute path to the directory in which you have placed one or more Chromedriver executables. As well, since new versions of Chromedriver may be available that were not when an Appium version was released, a custom mapping of Chromedrivers to the minimum Chrome version they support can be given to Appium through the chromedriverChromeMappingFile desired capability. This should be the absolute path to a file with the mapping in it. The contents of the file need to be parsable as a JSON object, like: { 2.42 : 63.0.3239 , 2.41 : 62.0.3202 } Since Appium 1.15.0 there is a possibility to automatically download the necessary chromedriver(s) into chromedriverExecutableDir from the official Google storage. The script will automatically search for the newest chromedriver version that supports the given browser/web view, download it (the hash sum is verified as well for the downloaded archive) and add to the chromedriverChromeMappingFile mapping. Everything, which is needed to be done from your side is to execute the server with chromedriver_autodownload feature enabled (like appium --allow-insecure chromedriver_autodownload ). You can also check the Security document for more details on how to control potentially insecure server features. Troubleshooting network issues When Appium is installed it needs to download Chromedriver, so there is the possibility that there could be network problems that make the install fail. By default Chromedriver is retrieved from https://chromedriver.storage.googleapis.com/ . To use a mirror of the ChromeDriver binaries use npm config property chromedriver_cdnurl . npm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver Or add the property into your .npmrc file. chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver Another option is to use PATH variable CHROMEDRIVER_CDNURL . CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver npm install appium-chromedriver It may also be necessary to adjust network proxy and firewall settings to allow the download to occur. W3C support Chromedriver didn't follow the W3C standard until version 75. If you encounter proxy command error like this issue , please update your Chromedriver version. Old Android devices can't use newer chrome drivers. You can avoid the error if you run tests with the Mobile JSON Wire Protocol. Since major version 75 W3C mode is the default one for Chromedriver, although it could be still switched to JSONWP one depending on the passed session capabilities. You can read the history of W3C support in Chromedriver from downloads .","title":"Using Chromedriver"},{"location":"writing-running-appium/web/chromedriver/#chromedriver","text":"Appium supports automating Android web pages (in Chrome and the built-in Browser) and hybrid apps that are Chrome-backed, by managing a Chromedriver instance and proxying commands to it when necessary. It comes bundled with the latest version of Chromedriver , installed through the npm package appium-chromedriver (Github: appium-chromedriver ). With each update to Chromedriver there is an increase in the minimum supported version of Chrome, such that older devices are often unable to be automated with the bundled version. In the Appium server logs there will be an error like: An unknown server-side error occurred while processing the command. Original error: unknown error: Chrome version must be = 55.0.2883.0 To get around this it is necessary to provide Appium with a proper Chromedriver binary, that matches to the Chrome engine version running on the device under test. Read the Chromedriver/Chrome compatibility topic below to know more about finding a matching Chromedriver executable. There are several ways to provide a customized Chromedriver to Appium:","title":"Chromedriver"},{"location":"writing-running-appium/web/chromedriver/#when-installing-the-server","text":"Provide --chromedriver_version command line argument containing the actual version number npm install appium --chromedriver_version= 2.16 Or specify the Chromedriver version in the CHROMEDRIVER_VERSION environment variable, e.g, CHROMEDRIVER_VERSION=2.20 npm install appium This can also be set to LATEST to get the most recent version.","title":"When installing the server"},{"location":"writing-running-appium/web/chromedriver/#when-starting-the-server","text":"Chromedriver version can be specified at runtime, by specifying the --chromedriver-executable server flag, along with the full path to the Chromedriver executable which was manually downloaded and put to the server file system, e.g., appium --chromedriver-executable /path/to/my/chromedriver","title":"When starting the server"},{"location":"writing-running-appium/web/chromedriver/#when-starting-a-session-manual-discovery","text":"Chromedriver version can be specified in session capabilities, by providing the chromedriverExecutable cap, containing the full path to a matching Chromedriver executable, which must be manually downloaded and put to the server file system. See http://appium.io/docs/en/writing-running-appium/caps/ for more details","title":"When starting a session (manual discovery)"},{"location":"writing-running-appium/web/chromedriver/#when-starting-a-session-automated-discovery","text":"Appium could also try to detect the version of the target Chrome engine and download matching chromedriver for it automatically if it does not exist on the local file system. Read the Automatic discovery of compatible Chromedriver topic below for more details.","title":"When starting a session (automated discovery)"},{"location":"writing-running-appium/web/chromedriver/#chromedriverchrome-compatibility","text":"The list of Chromedriver versions and their matching minimum Chrome versions could be found at https://raw.githubusercontent.com/appium/appium-chromedriver/master/config/mapping.json Since version 2.46 Google has changed the rules for Chromedriver versioning, so now the major Chromedriver version corresponds to the major web view/browser version, that it can automate. Follow the Version Selection document in order to manually find the Chromedriver, that supports your current browser/web view if its major version is equal or above 73 . To find the minimum supported browsers for older Chromedriver versions (below 73 ), get the Chromium source code , check out the release commit, and check the variable kMinimumSupportedChromeVersion in the file src/chrome/test/chromedriver/chrome/version.cc . (To find the release commits, you can use git log --pretty=format:'%h | %s%d' | grep -i \"Release Chromedriver version\" .) The complete list of available Chromedriver releases and release notes is here .","title":"Chromedriver/Chrome compatibility"},{"location":"writing-running-appium/web/chromedriver/#automatic-discovery-of-compatible-chromedriver","text":"Beginning with Appium 1.8.0, Appium is able to pick the correct Chromedriver for the version of Chrome under test. While Appium only comes bundled with the Chromedriver most recently released at the time of the Appium version's release, more Chromedriver versions can be downloaded and either placed inside the Appium installation ( not recommended since upgrading Appium will remove them) or in a custom location, which can be indicated to Appium with the chromedriverExecutableDir desired capability. This capability is the absolute path to the directory in which you have placed one or more Chromedriver executables. As well, since new versions of Chromedriver may be available that were not when an Appium version was released, a custom mapping of Chromedrivers to the minimum Chrome version they support can be given to Appium through the chromedriverChromeMappingFile desired capability. This should be the absolute path to a file with the mapping in it. The contents of the file need to be parsable as a JSON object, like: { 2.42 : 63.0.3239 , 2.41 : 62.0.3202 } Since Appium 1.15.0 there is a possibility to automatically download the necessary chromedriver(s) into chromedriverExecutableDir from the official Google storage. The script will automatically search for the newest chromedriver version that supports the given browser/web view, download it (the hash sum is verified as well for the downloaded archive) and add to the chromedriverChromeMappingFile mapping. Everything, which is needed to be done from your side is to execute the server with chromedriver_autodownload feature enabled (like appium --allow-insecure chromedriver_autodownload ). You can also check the Security document for more details on how to control potentially insecure server features.","title":"Automatic discovery of compatible Chromedriver"},{"location":"writing-running-appium/web/chromedriver/#troubleshooting-network-issues","text":"When Appium is installed it needs to download Chromedriver, so there is the possibility that there could be network problems that make the install fail. By default Chromedriver is retrieved from https://chromedriver.storage.googleapis.com/ . To use a mirror of the ChromeDriver binaries use npm config property chromedriver_cdnurl . npm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver Or add the property into your .npmrc file. chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver Another option is to use PATH variable CHROMEDRIVER_CDNURL . CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver npm install appium-chromedriver It may also be necessary to adjust network proxy and firewall settings to allow the download to occur.","title":"Troubleshooting network issues"},{"location":"writing-running-appium/web/chromedriver/#w3c-support","text":"Chromedriver didn't follow the W3C standard until version 75. If you encounter proxy command error like this issue , please update your Chromedriver version. Old Android devices can't use newer chrome drivers. You can avoid the error if you run tests with the Mobile JSON Wire Protocol. Since major version 75 W3C mode is the default one for Chromedriver, although it could be still switched to JSONWP one depending on the passed session capabilities. You can read the history of W3C support in Chromedriver from downloads .","title":"W3C support"},{"location":"writing-running-appium/web/hybrid/","text":"Automating hybrid apps One of the core principles of Appium is that you shouldn't have to change your app to test it. In line with that methodology, it is possible to test hybrid apps the same way you can with Selenium for web apps. There is a bit of technical complexity required so that Appium knows whether you want to automate the native aspects of the app or the web views. But, thankfully, we can stay within the Selenium WebDriver protocol for everything. Once the test is in a web view context the command set that is available is the full Selenium WebDriver API . Entering the web view context Here are the steps required to talk to a web view in your Appium test: Navigate to a portion of your app where a web view is active Retrieve the currently available contexts This returns a list of contexts we can access, like 'NATIVE_APP' or 'WEBVIEW_1' Set the context with the id of the context you want to access This puts your Appium session into a mode where all commands are interpreted as being intended for automating the web view, rather than the native portion of the app. For example, if you run getElementByTagName , it will operate on the DOM of the web view, rather than return native elements. Of course, certain WebDriver methods only make sense in one context or another, so in the wrong context you will receive an error message. To stop automating in the web view context and go back to automating the native portion of the app, simply set the context again with the native context id (generally 'NATIVE_APP' ) to leave the web context and once again access the native commands. Automatically entering the web view context on session start If your application begins in a web view, and you do not want to automate the native application before entering it, you can have Appium automatically enter the web view context on session initialization by setting the autoWebview desired capability to true . Examples // javascript // assuming we have an initialized `driver` object for an app driver .contexts().then(function (contexts) { // get list of available views. Returns array: [ NATIVE_APP , WEBVIEW_1 ] return driver.context(contexts[1]); // choose the webview context }) // do some web testing .elementsByCss('.green_button').click() .context('NATIVE_APP') // leave webview context // do more native stuff here if we want .quit() // stop webdrivage // java // assuming we have a set of capabilities driver = new AppiumDriver(new URL( http://127.0.0.1:4723/wd/hub ), capabilities); Set String contextNames = driver.getContextHandles(); for (String contextName : contextNames) { System.out.println(contextName); //prints out something like NATIVE_APP \\n WEBVIEW_1 } driver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1 //do some web testing String myText = driver.findElement(By.cssSelector( .green_button )).click(); driver.context( NATIVE_APP ); // do more native testing if we want driver.quit(); # ruby_lib_core # assuming we have a set of capabilities @driver = Appium::Core.for(url: SERVER_URL, desired_capabilities: capabilities).start_driver # ruby_lib # opts = { caps: capabilities, appium_lib: { custom_url: SERVER_URL }} # @driver = Appium::Driver.new(opts, true).start_driver # I switch to the last context because its always the webview in our case, in other cases you may need to specify a context # View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID # Then switch to it using @driver.switch_to.context( WEBVIEW_6 ) Given(/^I switch to webview$/) do webview = @driver.available_contexts.last @driver.switch_to.context(webview) end Given(/^I switch out of webview$/) do @driver.switch_to.context(@driver.contexts.first) end # Now you can use CSS to select an element inside your webview And(/^I click a webview button $/) do @driver.find_element(:css, .green_button ).click end # python # assuming we have an initialized `driver` object for an app # switch to webview webview = driver.contexts.last driver.switch_to.context(webview) # do some webby stuff driver.find_element(By.CSS, .green_button ).click # switch back to native view driver.switch_to.context(driver.contexts.first) # do more native testing if we want driver.quit() Automating hybrid Android apps Appium comes with built-in hybrid support via Chromedriver , which allow the automation of any Chrome-backed Android web views. There is an additional step necessary within your app build, unfortunately. As described in the Android remote debugging docs it is necessary to set to true the setWebContentsDebuggingEnabled property on the android.webkit.WebView element. Once you have set your desired capabilities and started an Appium session, follow the generalized instructions above. Automating hybrid iOS apps To interact with a web view Appium establishes a connection using a custom remote debugger. When executing against a simulator this connection is established directly as the simulator and the Appium server are on the same machine. Appium can automate WkWebView and UIWebView elements. Unfortunately, it is not currently able to handle SafariViewController elements. Once you've set your desired capabilities and started an Appium session, follow the generalized instructions above. Execution against an iOS real device When executing against an iOS real device, Appium is unable to access the web view directly. Therefore the connection has to be established through the USB cable. Appium can establish the connection natively since version 1.15 via appium-ios-device . ios-webkit-debugger-proxy is only necessary for Appium below version 1.15. For instruction on how to install and run ios-webkit-debugger-proxy see the iOS webkit debug proxy documentation. Now you can start an Appium test session and follow the generalized instructions above.","title":"Automating Hybrid Apps"},{"location":"writing-running-appium/web/hybrid/#automating-hybrid-apps","text":"One of the core principles of Appium is that you shouldn't have to change your app to test it. In line with that methodology, it is possible to test hybrid apps the same way you can with Selenium for web apps. There is a bit of technical complexity required so that Appium knows whether you want to automate the native aspects of the app or the web views. But, thankfully, we can stay within the Selenium WebDriver protocol for everything. Once the test is in a web view context the command set that is available is the full Selenium WebDriver API .","title":"Automating hybrid apps"},{"location":"writing-running-appium/web/hybrid/#entering-the-web-view-context","text":"Here are the steps required to talk to a web view in your Appium test: Navigate to a portion of your app where a web view is active Retrieve the currently available contexts This returns a list of contexts we can access, like 'NATIVE_APP' or 'WEBVIEW_1' Set the context with the id of the context you want to access This puts your Appium session into a mode where all commands are interpreted as being intended for automating the web view, rather than the native portion of the app. For example, if you run getElementByTagName , it will operate on the DOM of the web view, rather than return native elements. Of course, certain WebDriver methods only make sense in one context or another, so in the wrong context you will receive an error message. To stop automating in the web view context and go back to automating the native portion of the app, simply set the context again with the native context id (generally 'NATIVE_APP' ) to leave the web context and once again access the native commands.","title":"Entering the web view context"},{"location":"writing-running-appium/web/hybrid/#automatically-entering-the-web-view-context-on-session-start","text":"If your application begins in a web view, and you do not want to automate the native application before entering it, you can have Appium automatically enter the web view context on session initialization by setting the autoWebview desired capability to true .","title":"Automatically entering the web view context on session start"},{"location":"writing-running-appium/web/hybrid/#examples","text":"// javascript // assuming we have an initialized `driver` object for an app driver .contexts().then(function (contexts) { // get list of available views. Returns array: [ NATIVE_APP , WEBVIEW_1 ] return driver.context(contexts[1]); // choose the webview context }) // do some web testing .elementsByCss('.green_button').click() .context('NATIVE_APP') // leave webview context // do more native stuff here if we want .quit() // stop webdrivage // java // assuming we have a set of capabilities driver = new AppiumDriver(new URL( http://127.0.0.1:4723/wd/hub ), capabilities); Set String contextNames = driver.getContextHandles(); for (String contextName : contextNames) { System.out.println(contextName); //prints out something like NATIVE_APP \\n WEBVIEW_1 } driver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1 //do some web testing String myText = driver.findElement(By.cssSelector( .green_button )).click(); driver.context( NATIVE_APP ); // do more native testing if we want driver.quit(); # ruby_lib_core # assuming we have a set of capabilities @driver = Appium::Core.for(url: SERVER_URL, desired_capabilities: capabilities).start_driver # ruby_lib # opts = { caps: capabilities, appium_lib: { custom_url: SERVER_URL }} # @driver = Appium::Driver.new(opts, true).start_driver # I switch to the last context because its always the webview in our case, in other cases you may need to specify a context # View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID # Then switch to it using @driver.switch_to.context( WEBVIEW_6 ) Given(/^I switch to webview$/) do webview = @driver.available_contexts.last @driver.switch_to.context(webview) end Given(/^I switch out of webview$/) do @driver.switch_to.context(@driver.contexts.first) end # Now you can use CSS to select an element inside your webview And(/^I click a webview button $/) do @driver.find_element(:css, .green_button ).click end # python # assuming we have an initialized `driver` object for an app # switch to webview webview = driver.contexts.last driver.switch_to.context(webview) # do some webby stuff driver.find_element(By.CSS, .green_button ).click # switch back to native view driver.switch_to.context(driver.contexts.first) # do more native testing if we want driver.quit()","title":"Examples"},{"location":"writing-running-appium/web/hybrid/#automating-hybrid-android-apps","text":"Appium comes with built-in hybrid support via Chromedriver , which allow the automation of any Chrome-backed Android web views. There is an additional step necessary within your app build, unfortunately. As described in the Android remote debugging docs it is necessary to set to true the setWebContentsDebuggingEnabled property on the android.webkit.WebView element. Once you have set your desired capabilities and started an Appium session, follow the generalized instructions above.","title":"Automating hybrid Android apps"},{"location":"writing-running-appium/web/hybrid/#automating-hybrid-ios-apps","text":"To interact with a web view Appium establishes a connection using a custom remote debugger. When executing against a simulator this connection is established directly as the simulator and the Appium server are on the same machine. Appium can automate WkWebView and UIWebView elements. Unfortunately, it is not currently able to handle SafariViewController elements. Once you've set your desired capabilities and started an Appium session, follow the generalized instructions above.","title":"Automating hybrid iOS apps"},{"location":"writing-running-appium/web/hybrid/#execution-against-an-ios-real-device","text":"When executing against an iOS real device, Appium is unable to access the web view directly. Therefore the connection has to be established through the USB cable. Appium can establish the connection natively since version 1.15 via appium-ios-device . ios-webkit-debugger-proxy is only necessary for Appium below version 1.15. For instruction on how to install and run ios-webkit-debugger-proxy see the iOS webkit debug proxy documentation. Now you can start an Appium test session and follow the generalized instructions above.","title":"Execution against an iOS real device"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/","text":"iOS WebKit Debug Proxy For accessing web views on real iOS device appium uses ios_webkit_debug_proxy . Installation Using Homebrew To install the latest tagged version of the ios-webkit-debug-proxy using Homebrew, run the following commands in the terminal: shell # The first command is only required if you don't have brew installed. $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" $ brew update $ brew install ios-webkit-debug-proxy Building ios-webkit-debug-proxy from source Open the command terminal on your linux machine. You can find instructions on how to open the terminal via your favorite search engine. $ cd ~ $ sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev $ git clone https://github.com/google/ios-webkit-debug-proxy.git $ cd ios-webkit-debug-proxy $ ./autogen.sh $ make $ sudo make install Running ios-webkit-debug-proxy Once installed you can start the proxy with the following command: # Change the udid to be the udid of the attached device and make sure to set the port to 27753 # as that is the port the remote-debugger uses. You can learn how to retrieve the UDID from # Apple's developer resources. ios_webkit_debug_proxy -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d You can also set the desired capability called startIWDP to true (see the desired capabilities docs ). This will run the above command as a subprocess from within Appium and will set the udid, so you don't have to run ios_webkit_debug_proxy yourself anymore. It monitors the proxy for crashes and relaunches when needed. // example desired capabilities { browserName : Safari , platformName : iOS , deviceName : iPhone 7 , automationName : XCUITest , startIWDP : true, udid : auto } You may also use ios-webkit-debug-proxy-launcher , a small script included with the Appium codebase, to launch the proxy. It monitors the proxy log for errors, and relaunch the proxy where needed. This is also optional and may help with recent devices: # change the udid # note, this is run from an Appium repository ./bin/ios-webkit-debug-proxy-launcher.js -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d NOTE: the proxy requires the \"web inspector\" to be turned on to allow a connection to be established. Turn it on by going to settings safari advanced . Specifying non-default port Appium expects ios-webkit-debug-proxy to be running on port 27753 . If, for whatever reason, this needs to be changed, the webkitDebugProxyPort desired capability can be set with the port on which it the proxy is running.","title":"Using ios-webkit-debug-proxy"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/#ios-webkit-debug-proxy","text":"For accessing web views on real iOS device appium uses ios_webkit_debug_proxy .","title":"iOS WebKit Debug Proxy"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/#installation","text":"","title":"Installation"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/#using-homebrew","text":"To install the latest tagged version of the ios-webkit-debug-proxy using Homebrew, run the following commands in the terminal: shell # The first command is only required if you don't have brew installed. $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" $ brew update $ brew install ios-webkit-debug-proxy","title":"Using Homebrew"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/#building-ios-webkit-debug-proxy-from-source","text":"Open the command terminal on your linux machine. You can find instructions on how to open the terminal via your favorite search engine. $ cd ~ $ sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev $ git clone https://github.com/google/ios-webkit-debug-proxy.git $ cd ios-webkit-debug-proxy $ ./autogen.sh $ make $ sudo make install","title":"Building ios-webkit-debug-proxy from source"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/#running-ios-webkit-debug-proxy","text":"Once installed you can start the proxy with the following command: # Change the udid to be the udid of the attached device and make sure to set the port to 27753 # as that is the port the remote-debugger uses. You can learn how to retrieve the UDID from # Apple's developer resources. ios_webkit_debug_proxy -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d You can also set the desired capability called startIWDP to true (see the desired capabilities docs ). This will run the above command as a subprocess from within Appium and will set the udid, so you don't have to run ios_webkit_debug_proxy yourself anymore. It monitors the proxy for crashes and relaunches when needed. // example desired capabilities { browserName : Safari , platformName : iOS , deviceName : iPhone 7 , automationName : XCUITest , startIWDP : true, udid : auto } You may also use ios-webkit-debug-proxy-launcher , a small script included with the Appium codebase, to launch the proxy. It monitors the proxy log for errors, and relaunch the proxy where needed. This is also optional and may help with recent devices: # change the udid # note, this is run from an Appium repository ./bin/ios-webkit-debug-proxy-launcher.js -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d NOTE: the proxy requires the \"web inspector\" to be turned on to allow a connection to be established. Turn it on by going to settings safari advanced .","title":"Running ios-webkit-debug-proxy"},{"location":"writing-running-appium/web/ios-webkit-debug-proxy/#specifying-non-default-port","text":"Appium expects ios-webkit-debug-proxy to be running on port 27753 . If, for whatever reason, this needs to be changed, the webkitDebugProxyPort desired capability can be set with the port on which it the proxy is running.","title":"Specifying non-default port"},{"location":"writing-running-appium/web/mobile-web/","text":"Automating mobile web apps If you're interested in automating your web app in Mobile Safari on iOS or Chrome on Android, Appium can help you. Basically, you write a normal WebDriver test, and use Appium as the Selenium server with a special set of desired capabilities. iOS mobile web automation Appium can automate the Safari browser on real and simulated iOS devices. It is accessed by setting the browserName desired capabilty to \"Safari\" while leaving the app capability empty. You must run Safari on the device before attempting to use Appium, in order for the correct preferences to have been set. Then, use desired capabilities like these to run your test in mobile Safari: // javascript { platformName: 'iOS' , platformVersion: '13.2' , automationName: 'XCUITest' , browserName: 'Safari' , deviceName: 'iPhone 11' } # python { 'platformName': 'iOS', 'platformVersion': '13.2', 'automationName': 'XCUITest', 'browserName': 'Safari', 'deviceName': 'iPhone 11' } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, iOS ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 13.2 ); capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, XCUITest ); capabilities.setCapability(MobileCapabilityType.BROWSER_NAME, Safari ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, iPhone 11 ); { platformName: 'iOS', platformVersion: '13.2', automationName: 'XCUITest', deviceName: 'iPhone 11', browserName: 'Safari' } Mobile Safari on Simulator First of all, make sure developer mode is turned on in your Safari preferences so that the remote debugger port is open. Mobile Safari on a Real iOS Device For XCUITest We use appium-ios-device to handle Safari since Appium 1.15. You no longer need to install additional dependencies. For Instruments For iOS 9.3 and below (pre-XCUITest), we use the SafariLauncher App app to launch Safari and run tests against mobile Safari. This is because Safari is an app that is owned by Apple, and Instruments cannot launch it on real devices. Once Safari has been launched by SafariLauncher , the Remote Debugger automatically connects using the ios-webkit-debug-proxy . When working with ios-webkit-debug-proxy , you have to trust the machine before you can can run tests against your iOS device. For instruction on how to install and run ios-webkit-debugger-proxy see iOS WebKit debug proxy documentation. Setup for an iOS real device Before you can run your tests against Safari on a real device you will need to: XCUITest and Instruments Turn on web inspector on iOS device ( settings safari advanced ) Only for Instruments Have the ios-webkit-debug-proxy installed, running and listening on port 27753 (see the hybrid docs for instructions) Make sure that SafariLauncher will work (see the SafariLauncher docs for instructions) Running your test To configure you test to run against safari simply set the \"browserName\" to be \"Safari\" . // java //setup the web driver and launch the webview app. DesiredCapabilities desiredCapabilities = new DesiredCapabilities(); desiredCapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, Safari ); desiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, XCUITest ); URL url = new URL( http://127.0.0.1:4723/wd/hub ); AppiumDriver driver = new AppiumDriver(url, desiredCapabilities); // Navigate to the page and interact with the elements on the guinea-pig page using id. driver.get( http://saucelabs.com/test/guinea-pig ); WebElement div = driver.findElement(By.id( i_am_an_id )); Assert.assertEquals( I am a div , div.getText()); //check the text retrieved matches expected value driver.findElement(By.id( comments )).sendKeys( My comment ); //populate the comments field by id. //close the app. driver.quit(); # python # setup the web driver and launch the webview app. capabilities = { 'browserName': 'Safari', 'automationName': 'XCUITest' } driver = webdriver.Remote('http://localhost:4723/wd/hub', capabilities) # Navigate to the page and interact with the elements on the guinea-pig page using id. driver.get('http://saucelabs.com/test/guinea-pig'); div = driver.find_element_by_id('i_am_an_id') # check the text retrieved matches expected value assertEqual('I am a div', div.text) # populate the comments field by id driver.find_element_by_id('comments').send_keys('My comment') # close the driver driver.quit() Android mobile web automation Appium supports automating the Chrome browser both real and emulated Android devices. Pre-requisites: Make sure Chrome is installed on your device or emulator. Chromedriver needs to be installed (a default version comes with Appium) and configured for automating the specific version of Chrome available on the device. See here for more information and details about compatibility. Then, use desired capabilties like these to run your test in Chrome: // javascript { platformName: 'Android' , platformVersion: '9.0' , deviceName: 'Android Emulator' , automationName: 'UIAutomator2' , browserName: 'Chrome' }; # python { 'platformName': 'Android', 'platformVersion': '9.0', 'deviceName': 'Android Emulator', 'automationName': 'UIAutomator2', 'browserName': 'Chrome' } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, Android ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 9.0 ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, Android Emulator ); capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, UIAutomator2 ); capabilities.setCapability(MobileCapabilityType.BROWSER_NAME, Chrome ); { platformName: 'Android', platformVersion: '9.0', deviceName: 'Android Emulator', automationName: 'UIAutomator2', browserName: 'Chrome' } Note that on 4.4+ devices, you can also use the 'Browser' browserName cap to automate the built-in browser. On all devices you can use the 'Chromium' browserName cap to automate a build of Chromium which you have installed. Troubleshooting Chromedriver If your test target requires newer Chromedriver version, chromedriver_autodownload feature will help. It has been available since Appium 1.15.0 with the security option. Read the linked documentation to learn how to use it. chromedriverExecutableDir capability also helps when you need a specific Chromedriver version. As of Chrome version 33, a rooted device is no longer required. If running tests on older versions of Chrome, devices needed to be rooted as Chromedriver required write access to the /data/local directory to set Chrome's command line arguments. If testing on Chrome app prior to version 33, ensure adb shell has read/write access to /data/local directory on the device: $ adb shell su -c chmod 777 /data/local There is a desired capability showChromedriverLog which, when set to true , writes the Chromedriver logs inline with the Appium logs. This can be helpful for debugging. For more Chromedriver specific documentation see ChromeDriver documentation .","title":"Mobile Web Testing"},{"location":"writing-running-appium/web/mobile-web/#automating-mobile-web-apps","text":"If you're interested in automating your web app in Mobile Safari on iOS or Chrome on Android, Appium can help you. Basically, you write a normal WebDriver test, and use Appium as the Selenium server with a special set of desired capabilities.","title":"Automating mobile web apps"},{"location":"writing-running-appium/web/mobile-web/#ios-mobile-web-automation","text":"Appium can automate the Safari browser on real and simulated iOS devices. It is accessed by setting the browserName desired capabilty to \"Safari\" while leaving the app capability empty. You must run Safari on the device before attempting to use Appium, in order for the correct preferences to have been set. Then, use desired capabilities like these to run your test in mobile Safari: // javascript { platformName: 'iOS' , platformVersion: '13.2' , automationName: 'XCUITest' , browserName: 'Safari' , deviceName: 'iPhone 11' } # python { 'platformName': 'iOS', 'platformVersion': '13.2', 'automationName': 'XCUITest', 'browserName': 'Safari', 'deviceName': 'iPhone 11' } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, iOS ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 13.2 ); capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, XCUITest ); capabilities.setCapability(MobileCapabilityType.BROWSER_NAME, Safari ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, iPhone 11 ); { platformName: 'iOS', platformVersion: '13.2', automationName: 'XCUITest', deviceName: 'iPhone 11', browserName: 'Safari' }","title":"iOS mobile web automation"},{"location":"writing-running-appium/web/mobile-web/#mobile-safari-on-simulator","text":"First of all, make sure developer mode is turned on in your Safari preferences so that the remote debugger port is open.","title":"Mobile Safari on Simulator"},{"location":"writing-running-appium/web/mobile-web/#mobile-safari-on-a-real-ios-device","text":"","title":"Mobile Safari on a Real iOS Device"},{"location":"writing-running-appium/web/mobile-web/#for-xcuitest","text":"We use appium-ios-device to handle Safari since Appium 1.15. You no longer need to install additional dependencies.","title":"For XCUITest"},{"location":"writing-running-appium/web/mobile-web/#for-instruments","text":"For iOS 9.3 and below (pre-XCUITest), we use the SafariLauncher App app to launch Safari and run tests against mobile Safari. This is because Safari is an app that is owned by Apple, and Instruments cannot launch it on real devices. Once Safari has been launched by SafariLauncher , the Remote Debugger automatically connects using the ios-webkit-debug-proxy . When working with ios-webkit-debug-proxy , you have to trust the machine before you can can run tests against your iOS device. For instruction on how to install and run ios-webkit-debugger-proxy see iOS WebKit debug proxy documentation.","title":"For Instruments"},{"location":"writing-running-appium/web/mobile-web/#setup-for-an-ios-real-device","text":"Before you can run your tests against Safari on a real device you will need to: XCUITest and Instruments Turn on web inspector on iOS device ( settings safari advanced ) Only for Instruments Have the ios-webkit-debug-proxy installed, running and listening on port 27753 (see the hybrid docs for instructions) Make sure that SafariLauncher will work (see the SafariLauncher docs for instructions)","title":"Setup for an iOS real device"},{"location":"writing-running-appium/web/mobile-web/#running-your-test","text":"To configure you test to run against safari simply set the \"browserName\" to be \"Safari\" . // java //setup the web driver and launch the webview app. DesiredCapabilities desiredCapabilities = new DesiredCapabilities(); desiredCapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, Safari ); desiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, XCUITest ); URL url = new URL( http://127.0.0.1:4723/wd/hub ); AppiumDriver driver = new AppiumDriver(url, desiredCapabilities); // Navigate to the page and interact with the elements on the guinea-pig page using id. driver.get( http://saucelabs.com/test/guinea-pig ); WebElement div = driver.findElement(By.id( i_am_an_id )); Assert.assertEquals( I am a div , div.getText()); //check the text retrieved matches expected value driver.findElement(By.id( comments )).sendKeys( My comment ); //populate the comments field by id. //close the app. driver.quit(); # python # setup the web driver and launch the webview app. capabilities = { 'browserName': 'Safari', 'automationName': 'XCUITest' } driver = webdriver.Remote('http://localhost:4723/wd/hub', capabilities) # Navigate to the page and interact with the elements on the guinea-pig page using id. driver.get('http://saucelabs.com/test/guinea-pig'); div = driver.find_element_by_id('i_am_an_id') # check the text retrieved matches expected value assertEqual('I am a div', div.text) # populate the comments field by id driver.find_element_by_id('comments').send_keys('My comment') # close the driver driver.quit()","title":"Running your test"},{"location":"writing-running-appium/web/mobile-web/#android-mobile-web-automation","text":"Appium supports automating the Chrome browser both real and emulated Android devices. Pre-requisites: Make sure Chrome is installed on your device or emulator. Chromedriver needs to be installed (a default version comes with Appium) and configured for automating the specific version of Chrome available on the device. See here for more information and details about compatibility. Then, use desired capabilties like these to run your test in Chrome: // javascript { platformName: 'Android' , platformVersion: '9.0' , deviceName: 'Android Emulator' , automationName: 'UIAutomator2' , browserName: 'Chrome' }; # python { 'platformName': 'Android', 'platformVersion': '9.0', 'deviceName': 'Android Emulator', 'automationName': 'UIAutomator2', 'browserName': 'Chrome' } // java DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, Android ); capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, 9.0 ); capabilities.setCapability(MobileCapabilityType.DEVICE_NAME, Android Emulator ); capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, UIAutomator2 ); capabilities.setCapability(MobileCapabilityType.BROWSER_NAME, Chrome ); { platformName: 'Android', platformVersion: '9.0', deviceName: 'Android Emulator', automationName: 'UIAutomator2', browserName: 'Chrome' } Note that on 4.4+ devices, you can also use the 'Browser' browserName cap to automate the built-in browser. On all devices you can use the 'Chromium' browserName cap to automate a build of Chromium which you have installed.","title":"Android mobile web automation"},{"location":"writing-running-appium/web/mobile-web/#troubleshooting-chromedriver","text":"If your test target requires newer Chromedriver version, chromedriver_autodownload feature will help. It has been available since Appium 1.15.0 with the security option. Read the linked documentation to learn how to use it. chromedriverExecutableDir capability also helps when you need a specific Chromedriver version. As of Chrome version 33, a rooted device is no longer required. If running tests on older versions of Chrome, devices needed to be rooted as Chromedriver required write access to the /data/local directory to set Chrome's command line arguments. If testing on Chrome app prior to version 33, ensure adb shell has read/write access to /data/local directory on the device: $ adb shell su -c chmod 777 /data/local There is a desired capability showChromedriverLog which, when set to true , writes the Chromedriver logs inline with the Appium logs. This can be helpful for debugging. For more Chromedriver specific documentation see ChromeDriver documentation .","title":"Troubleshooting Chromedriver"}]}