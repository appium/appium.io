{
    "docs": [
        {
            "location": "/about-appium/intro/", 
            "text": "Introduction to Appium\n\n\nAppium is an open-source tool for automating native, mobile web, and hybrid\napplications on iOS mobile, Android mobile, and Windows desktop platforms.\n\nNative apps\n are those written using the iOS, Android, or Windows SDKs.\n\nMobile web apps\n are web apps accessed using a mobile browser (Appium\nsupports Safari on iOS and Chrome or the built-in 'Browser' app on Android).\n\nHybrid apps\n have a wrapper around a \"webview\" -- a native control that\nenables interaction with web content. Projects like \nApache Cordova\n\nmake it easy to build apps using web technologies that are then bundled\ninto a native wrapper, creating a hybrid app.\n\n\nImportantly, Appium is \"cross-platform\": it allows you to write tests against\nmultiple platforms (iOS, Android, Windows), using the same API. This enables\ncode reuse between iOS, Android, and Windows testsuites.\n\n\nFor specific information about what it means for Appium to \"support\" its\nplatforms, and automation modalities, please see the \nplatform support\ndoc\n.\n\n\nAppium Philosophy\n\n\nAppium was designed to meet mobile automation needs according to a philosophy\noutlined by the following four tenets:\n\n\n\n\nYou shouldn't have to recompile your app or modify it in any way in order to\n   automate it.\n\n\nYou shouldn't be locked into a specific language or framework to write and\n   run your tests.\n\n\nA mobile automation framework shouldn't reinvent the wheel when it comes to\n   automation APIs.\n\n\nA mobile automation framework should be open source, in spirit and practice\n   as well as in name!\n\n\n\n\nAppium Design\n\n\nSo how does the structure of the Appium project live out this philosophy? We\nmeet requirement #1 by using vendor-provided automation frameworks under the\nhood. That way, we don't need to compile in any Appium-specific or third-party\ncode or frameworks to your app. This means \nyou're testing the same app you're\nshipping\n. The vendor-provided frameworks we use are:\n\n\n\n\niOS 9.3 and above: Apple's \nXCUITest\n\n\niOS 9.3 and lower: Apple's \nUIAutomation\n\n\nAndroid 4.3+: Google's \nUiAutomator/UiAutomator2\n\n\nWindows: Microsoft's \nWinAppDriver\n\n\n\n\nWe meet requirement #2 by wrapping the vendor-provided frameworks in one API,\nthe \nWebDriver\n API.\nWebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol\n(known as the \nJSON Wire Protocol\n).\nGiven this client-server architecture, a client written in any language can\nbe used to send the appropriate HTTP requests to the server. There are\nalready \nclients written in every popular programming language\n. This also\nmeans that you're free to use whatever test runner and test framework you\nwant; the client libraries are simply HTTP clients and can be mixed into your\ncode any way you please. In other words, Appium \n WebDriver clients are not\ntechnically \"test frameworks\" -- they are \"automation libraries\". You can\nmanage your test environment any way you like!\n\n\nWe meet requirement #3 in the same way: WebDriver has become the de facto\nstandard for automating web browsers, and is a \nW3C Working\nDraft\n.  Why\ndo something totally different for mobile? Instead we have \nextended the\nprotocol\n\nwith extra API methods useful for mobile automation.\n\n\nIt should be obvious that requirement #4 is a given -- you're reading this\nbecause \nAppium is open source\n.\n\n\nAppium Concepts\n\n\nClient/Server Architecture\n\nAppium is at its heart a webserver that exposes a REST API. It receives\nconnections from a client, listens for commands, executes those commands on\na mobile device, and responds with an HTTP response representing the result of\nthe command execution. The fact that we have a client/server architecture opens\nup a lot of possibilities: we can write our test code in any language that has\na http client API, but it is easier to use one of the \nAppium client\nlibraries\n. We can put the server on a different\nmachine than our tests are running on. We can write test code and rely on\na cloud service like \nSauce Labs\n \n \nLambdaTest\n to receive and\ninterpret the commands.\n\n\nSession\n\nAutomation is always performed in the context of a session. Clients initiate\na session with a server in ways specific to each library,\nbut they all end up sending a \nPOST /session\n request to the server,\nwith a JSON object called  the 'desired capabilities' object. At this point\nthe server will start up the automation session and respond with a session ID\nwhich is used for sending further commands.\n\n\nDesired Capabilities\n\nDesired capabilities are a set of keys and values (i.e., a map or hash) sent to\nthe Appium server to tell the server what kind of automation session we're\ninterested in starting up. There are also various capabilities which can modify\nthe behavior of the server during automation.  For example, we might set the\n\nplatformName\n capability to \niOS\n to tell Appium that we want an iOS session,\nrather than an Android or Windows one. Or we might set the \nsafariAllowPopups\n\ncapability to \ntrue\n in order to ensure that, during a Safari automation\nsession, we're allowed to use JavaScript to open up new windows. See the\n\ncapabilities doc\n for the complete\nlist of capabilities available for Appium.\n\n\nAppium Server\n\nAppium is a server written in Node.js. It can be built and installed \nfrom\nsource\n\nor installed directly from \nNPM\n:\n\n\n$ npm install -g appium\n$ appium\n\n\n\n\nThe \nbeta\n of Appium is available via NPM with \nnpm install -g appium@beta\n.\nIt is the development version so it might have breaking changes.\nPlease uninstall \nappium@beta\n (\nnpm uninstall -g appium@beta\n) before installing\nnew versions in order to have a clean set of dependencies.\n\n\nAppium Clients\n\nThere are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#)\nwhich support Appium's extensions to the WebDriver protocol. When using Appium,\nyou want to use these client libraries instead of your regular WebDriver\nclient. You can view the full list of libraries\n\nhere\n.\n\n\nAppium Desktop\n\nThere is a GUI wrapper around the Appium server that can be downloaded for any\nplatform.  It comes bundled with everything required to run the Appium server,\nso you don't need to worry about Node. It also comes with an Inspector, which\nenables you to check out the hierarchy of your app. This can come in handy when\nwriting tests.\n\n\nGetting Started\n\n\nCongratulations! You are now armed with enough knowledge to begin using Appium.\nWhy not head to the \ngetting started\ndoc\n for more detailed requirements\nand instructions?", 
            "title": "Home"
        }, 
        {
            "location": "/about-appium/intro/#introduction-to-appium", 
            "text": "Appium is an open-source tool for automating native, mobile web, and hybrid\napplications on iOS mobile, Android mobile, and Windows desktop platforms. Native apps  are those written using the iOS, Android, or Windows SDKs. Mobile web apps  are web apps accessed using a mobile browser (Appium\nsupports Safari on iOS and Chrome or the built-in 'Browser' app on Android). Hybrid apps  have a wrapper around a \"webview\" -- a native control that\nenables interaction with web content. Projects like  Apache Cordova \nmake it easy to build apps using web technologies that are then bundled\ninto a native wrapper, creating a hybrid app.  Importantly, Appium is \"cross-platform\": it allows you to write tests against\nmultiple platforms (iOS, Android, Windows), using the same API. This enables\ncode reuse between iOS, Android, and Windows testsuites.  For specific information about what it means for Appium to \"support\" its\nplatforms, and automation modalities, please see the  platform support\ndoc .", 
            "title": "Introduction to Appium"
        }, 
        {
            "location": "/about-appium/intro/#appium-philosophy", 
            "text": "Appium was designed to meet mobile automation needs according to a philosophy\noutlined by the following four tenets:   You shouldn't have to recompile your app or modify it in any way in order to\n   automate it.  You shouldn't be locked into a specific language or framework to write and\n   run your tests.  A mobile automation framework shouldn't reinvent the wheel when it comes to\n   automation APIs.  A mobile automation framework should be open source, in spirit and practice\n   as well as in name!", 
            "title": "Appium Philosophy"
        }, 
        {
            "location": "/about-appium/intro/#appium-design", 
            "text": "So how does the structure of the Appium project live out this philosophy? We\nmeet requirement #1 by using vendor-provided automation frameworks under the\nhood. That way, we don't need to compile in any Appium-specific or third-party\ncode or frameworks to your app. This means  you're testing the same app you're\nshipping . The vendor-provided frameworks we use are:   iOS 9.3 and above: Apple's  XCUITest  iOS 9.3 and lower: Apple's  UIAutomation  Android 4.3+: Google's  UiAutomator/UiAutomator2  Windows: Microsoft's  WinAppDriver   We meet requirement #2 by wrapping the vendor-provided frameworks in one API,\nthe  WebDriver  API.\nWebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol\n(known as the  JSON Wire Protocol ).\nGiven this client-server architecture, a client written in any language can\nbe used to send the appropriate HTTP requests to the server. There are\nalready  clients written in every popular programming language . This also\nmeans that you're free to use whatever test runner and test framework you\nwant; the client libraries are simply HTTP clients and can be mixed into your\ncode any way you please. In other words, Appium   WebDriver clients are not\ntechnically \"test frameworks\" -- they are \"automation libraries\". You can\nmanage your test environment any way you like!  We meet requirement #3 in the same way: WebDriver has become the de facto\nstandard for automating web browsers, and is a  W3C Working\nDraft .  Why\ndo something totally different for mobile? Instead we have  extended the\nprotocol \nwith extra API methods useful for mobile automation.  It should be obvious that requirement #4 is a given -- you're reading this\nbecause  Appium is open source .", 
            "title": "Appium Design"
        }, 
        {
            "location": "/about-appium/intro/#appium-concepts", 
            "text": "Client/Server Architecture \nAppium is at its heart a webserver that exposes a REST API. It receives\nconnections from a client, listens for commands, executes those commands on\na mobile device, and responds with an HTTP response representing the result of\nthe command execution. The fact that we have a client/server architecture opens\nup a lot of possibilities: we can write our test code in any language that has\na http client API, but it is easier to use one of the  Appium client\nlibraries . We can put the server on a different\nmachine than our tests are running on. We can write test code and rely on\na cloud service like  Sauce Labs     LambdaTest  to receive and\ninterpret the commands.  Session \nAutomation is always performed in the context of a session. Clients initiate\na session with a server in ways specific to each library,\nbut they all end up sending a  POST /session  request to the server,\nwith a JSON object called  the 'desired capabilities' object. At this point\nthe server will start up the automation session and respond with a session ID\nwhich is used for sending further commands.  Desired Capabilities \nDesired capabilities are a set of keys and values (i.e., a map or hash) sent to\nthe Appium server to tell the server what kind of automation session we're\ninterested in starting up. There are also various capabilities which can modify\nthe behavior of the server during automation.  For example, we might set the platformName  capability to  iOS  to tell Appium that we want an iOS session,\nrather than an Android or Windows one. Or we might set the  safariAllowPopups \ncapability to  true  in order to ensure that, during a Safari automation\nsession, we're allowed to use JavaScript to open up new windows. See the capabilities doc  for the complete\nlist of capabilities available for Appium.  Appium Server \nAppium is a server written in Node.js. It can be built and installed  from\nsource \nor installed directly from  NPM :  $ npm install -g appium\n$ appium  The  beta  of Appium is available via NPM with  npm install -g appium@beta .\nIt is the development version so it might have breaking changes.\nPlease uninstall  appium@beta  ( npm uninstall -g appium@beta ) before installing\nnew versions in order to have a clean set of dependencies.  Appium Clients \nThere are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#)\nwhich support Appium's extensions to the WebDriver protocol. When using Appium,\nyou want to use these client libraries instead of your regular WebDriver\nclient. You can view the full list of libraries here .  Appium Desktop \nThere is a GUI wrapper around the Appium server that can be downloaded for any\nplatform.  It comes bundled with everything required to run the Appium server,\nso you don't need to worry about Node. It also comes with an Inspector, which\nenables you to check out the hierarchy of your app. This can come in handy when\nwriting tests.", 
            "title": "Appium Concepts"
        }, 
        {
            "location": "/about-appium/intro/#getting-started", 
            "text": "Congratulations! You are now armed with enough knowledge to begin using Appium.\nWhy not head to the  getting started\ndoc  for more detailed requirements\nand instructions?", 
            "title": "Getting Started"
        }, 
        {
            "location": "/about-appium/intro/", 
            "text": "Introduction to Appium\n\n\nAppium is an open-source tool for automating native, mobile web, and hybrid\napplications on iOS mobile, Android mobile, and Windows desktop platforms.\n\nNative apps\n are those written using the iOS, Android, or Windows SDKs.\n\nMobile web apps\n are web apps accessed using a mobile browser (Appium\nsupports Safari on iOS and Chrome or the built-in 'Browser' app on Android).\n\nHybrid apps\n have a wrapper around a \"webview\" -- a native control that\nenables interaction with web content. Projects like \nApache Cordova\n\nmake it easy to build apps using web technologies that are then bundled\ninto a native wrapper, creating a hybrid app.\n\n\nImportantly, Appium is \"cross-platform\": it allows you to write tests against\nmultiple platforms (iOS, Android, Windows), using the same API. This enables\ncode reuse between iOS, Android, and Windows testsuites.\n\n\nFor specific information about what it means for Appium to \"support\" its\nplatforms, and automation modalities, please see the \nplatform support\ndoc\n.\n\n\nAppium Philosophy\n\n\nAppium was designed to meet mobile automation needs according to a philosophy\noutlined by the following four tenets:\n\n\n\n\nYou shouldn't have to recompile your app or modify it in any way in order to\n   automate it.\n\n\nYou shouldn't be locked into a specific language or framework to write and\n   run your tests.\n\n\nA mobile automation framework shouldn't reinvent the wheel when it comes to\n   automation APIs.\n\n\nA mobile automation framework should be open source, in spirit and practice\n   as well as in name!\n\n\n\n\nAppium Design\n\n\nSo how does the structure of the Appium project live out this philosophy? We\nmeet requirement #1 by using vendor-provided automation frameworks under the\nhood. That way, we don't need to compile in any Appium-specific or third-party\ncode or frameworks to your app. This means \nyou're testing the same app you're\nshipping\n. The vendor-provided frameworks we use are:\n\n\n\n\niOS 9.3 and above: Apple's \nXCUITest\n\n\niOS 9.3 and lower: Apple's \nUIAutomation\n\n\nAndroid 4.3+: Google's \nUiAutomator/UiAutomator2\n\n\nWindows: Microsoft's \nWinAppDriver\n\n\n\n\nWe meet requirement #2 by wrapping the vendor-provided frameworks in one API,\nthe \nWebDriver\n API.\nWebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol\n(known as the \nJSON Wire Protocol\n).\nGiven this client-server architecture, a client written in any language can\nbe used to send the appropriate HTTP requests to the server. There are\nalready \nclients written in every popular programming language\n. This also\nmeans that you're free to use whatever test runner and test framework you\nwant; the client libraries are simply HTTP clients and can be mixed into your\ncode any way you please. In other words, Appium \n WebDriver clients are not\ntechnically \"test frameworks\" -- they are \"automation libraries\". You can\nmanage your test environment any way you like!\n\n\nWe meet requirement #3 in the same way: WebDriver has become the de facto\nstandard for automating web browsers, and is a \nW3C Working\nDraft\n.  Why\ndo something totally different for mobile? Instead we have \nextended the\nprotocol\n\nwith extra API methods useful for mobile automation.\n\n\nIt should be obvious that requirement #4 is a given -- you're reading this\nbecause \nAppium is open source\n.\n\n\nAppium Concepts\n\n\nClient/Server Architecture\n\nAppium is at its heart a webserver that exposes a REST API. It receives\nconnections from a client, listens for commands, executes those commands on\na mobile device, and responds with an HTTP response representing the result of\nthe command execution. The fact that we have a client/server architecture opens\nup a lot of possibilities: we can write our test code in any language that has\na http client API, but it is easier to use one of the \nAppium client\nlibraries\n. We can put the server on a different\nmachine than our tests are running on. We can write test code and rely on\na cloud service like \nSauce Labs\n \n \nLambdaTest\n to receive and\ninterpret the commands.\n\n\nSession\n\nAutomation is always performed in the context of a session. Clients initiate\na session with a server in ways specific to each library,\nbut they all end up sending a \nPOST /session\n request to the server,\nwith a JSON object called  the 'desired capabilities' object. At this point\nthe server will start up the automation session and respond with a session ID\nwhich is used for sending further commands.\n\n\nDesired Capabilities\n\nDesired capabilities are a set of keys and values (i.e., a map or hash) sent to\nthe Appium server to tell the server what kind of automation session we're\ninterested in starting up. There are also various capabilities which can modify\nthe behavior of the server during automation.  For example, we might set the\n\nplatformName\n capability to \niOS\n to tell Appium that we want an iOS session,\nrather than an Android or Windows one. Or we might set the \nsafariAllowPopups\n\ncapability to \ntrue\n in order to ensure that, during a Safari automation\nsession, we're allowed to use JavaScript to open up new windows. See the\n\ncapabilities doc\n for the complete\nlist of capabilities available for Appium.\n\n\nAppium Server\n\nAppium is a server written in Node.js. It can be built and installed \nfrom\nsource\n\nor installed directly from \nNPM\n:\n\n\n$ npm install -g appium\n$ appium\n\n\n\n\nThe \nbeta\n of Appium is available via NPM with \nnpm install -g appium@beta\n.\nIt is the development version so it might have breaking changes.\nPlease uninstall \nappium@beta\n (\nnpm uninstall -g appium@beta\n) before installing\nnew versions in order to have a clean set of dependencies.\n\n\nAppium Clients\n\nThere are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#)\nwhich support Appium's extensions to the WebDriver protocol. When using Appium,\nyou want to use these client libraries instead of your regular WebDriver\nclient. You can view the full list of libraries\n\nhere\n.\n\n\nAppium Desktop\n\nThere is a GUI wrapper around the Appium server that can be downloaded for any\nplatform.  It comes bundled with everything required to run the Appium server,\nso you don't need to worry about Node. It also comes with an Inspector, which\nenables you to check out the hierarchy of your app. This can come in handy when\nwriting tests.\n\n\nGetting Started\n\n\nCongratulations! You are now armed with enough knowledge to begin using Appium.\nWhy not head to the \ngetting started\ndoc\n for more detailed requirements\nand instructions?", 
            "title": "Introduction"
        }, 
        {
            "location": "/about-appium/intro/#introduction-to-appium", 
            "text": "Appium is an open-source tool for automating native, mobile web, and hybrid\napplications on iOS mobile, Android mobile, and Windows desktop platforms. Native apps  are those written using the iOS, Android, or Windows SDKs. Mobile web apps  are web apps accessed using a mobile browser (Appium\nsupports Safari on iOS and Chrome or the built-in 'Browser' app on Android). Hybrid apps  have a wrapper around a \"webview\" -- a native control that\nenables interaction with web content. Projects like  Apache Cordova \nmake it easy to build apps using web technologies that are then bundled\ninto a native wrapper, creating a hybrid app.  Importantly, Appium is \"cross-platform\": it allows you to write tests against\nmultiple platforms (iOS, Android, Windows), using the same API. This enables\ncode reuse between iOS, Android, and Windows testsuites.  For specific information about what it means for Appium to \"support\" its\nplatforms, and automation modalities, please see the  platform support\ndoc .", 
            "title": "Introduction to Appium"
        }, 
        {
            "location": "/about-appium/intro/#appium-philosophy", 
            "text": "Appium was designed to meet mobile automation needs according to a philosophy\noutlined by the following four tenets:   You shouldn't have to recompile your app or modify it in any way in order to\n   automate it.  You shouldn't be locked into a specific language or framework to write and\n   run your tests.  A mobile automation framework shouldn't reinvent the wheel when it comes to\n   automation APIs.  A mobile automation framework should be open source, in spirit and practice\n   as well as in name!", 
            "title": "Appium Philosophy"
        }, 
        {
            "location": "/about-appium/intro/#appium-design", 
            "text": "So how does the structure of the Appium project live out this philosophy? We\nmeet requirement #1 by using vendor-provided automation frameworks under the\nhood. That way, we don't need to compile in any Appium-specific or third-party\ncode or frameworks to your app. This means  you're testing the same app you're\nshipping . The vendor-provided frameworks we use are:   iOS 9.3 and above: Apple's  XCUITest  iOS 9.3 and lower: Apple's  UIAutomation  Android 4.3+: Google's  UiAutomator/UiAutomator2  Windows: Microsoft's  WinAppDriver   We meet requirement #2 by wrapping the vendor-provided frameworks in one API,\nthe  WebDriver  API.\nWebDriver (aka \"Selenium WebDriver\") specifies a client-server protocol\n(known as the  JSON Wire Protocol ).\nGiven this client-server architecture, a client written in any language can\nbe used to send the appropriate HTTP requests to the server. There are\nalready  clients written in every popular programming language . This also\nmeans that you're free to use whatever test runner and test framework you\nwant; the client libraries are simply HTTP clients and can be mixed into your\ncode any way you please. In other words, Appium   WebDriver clients are not\ntechnically \"test frameworks\" -- they are \"automation libraries\". You can\nmanage your test environment any way you like!  We meet requirement #3 in the same way: WebDriver has become the de facto\nstandard for automating web browsers, and is a  W3C Working\nDraft .  Why\ndo something totally different for mobile? Instead we have  extended the\nprotocol \nwith extra API methods useful for mobile automation.  It should be obvious that requirement #4 is a given -- you're reading this\nbecause  Appium is open source .", 
            "title": "Appium Design"
        }, 
        {
            "location": "/about-appium/intro/#appium-concepts", 
            "text": "Client/Server Architecture \nAppium is at its heart a webserver that exposes a REST API. It receives\nconnections from a client, listens for commands, executes those commands on\na mobile device, and responds with an HTTP response representing the result of\nthe command execution. The fact that we have a client/server architecture opens\nup a lot of possibilities: we can write our test code in any language that has\na http client API, but it is easier to use one of the  Appium client\nlibraries . We can put the server on a different\nmachine than our tests are running on. We can write test code and rely on\na cloud service like  Sauce Labs     LambdaTest  to receive and\ninterpret the commands.  Session \nAutomation is always performed in the context of a session. Clients initiate\na session with a server in ways specific to each library,\nbut they all end up sending a  POST /session  request to the server,\nwith a JSON object called  the 'desired capabilities' object. At this point\nthe server will start up the automation session and respond with a session ID\nwhich is used for sending further commands.  Desired Capabilities \nDesired capabilities are a set of keys and values (i.e., a map or hash) sent to\nthe Appium server to tell the server what kind of automation session we're\ninterested in starting up. There are also various capabilities which can modify\nthe behavior of the server during automation.  For example, we might set the platformName  capability to  iOS  to tell Appium that we want an iOS session,\nrather than an Android or Windows one. Or we might set the  safariAllowPopups \ncapability to  true  in order to ensure that, during a Safari automation\nsession, we're allowed to use JavaScript to open up new windows. See the capabilities doc  for the complete\nlist of capabilities available for Appium.  Appium Server \nAppium is a server written in Node.js. It can be built and installed  from\nsource \nor installed directly from  NPM :  $ npm install -g appium\n$ appium  The  beta  of Appium is available via NPM with  npm install -g appium@beta .\nIt is the development version so it might have breaking changes.\nPlease uninstall  appium@beta  ( npm uninstall -g appium@beta ) before installing\nnew versions in order to have a clean set of dependencies.  Appium Clients \nThere are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#)\nwhich support Appium's extensions to the WebDriver protocol. When using Appium,\nyou want to use these client libraries instead of your regular WebDriver\nclient. You can view the full list of libraries here .  Appium Desktop \nThere is a GUI wrapper around the Appium server that can be downloaded for any\nplatform.  It comes bundled with everything required to run the Appium server,\nso you don't need to worry about Node. It also comes with an Inspector, which\nenables you to check out the hierarchy of your app. This can come in handy when\nwriting tests.", 
            "title": "Appium Concepts"
        }, 
        {
            "location": "/about-appium/intro/#getting-started", 
            "text": "Congratulations! You are now armed with enough knowledge to begin using Appium.\nWhy not head to the  getting started\ndoc  for more detailed requirements\nand instructions?", 
            "title": "Getting Started"
        }, 
        {
            "location": "/about-appium/appium-clients/", 
            "text": "List of client libraries with Appium server support\n\n\nThese libraries wrap standard Selenium client libraries to provide all the regular selenium commands dictated by the \nJSON Wire protocol\n, and add extra commands related to controlling mobile devices, such as \nmulti-touch gestures\n and \nscreen orientation\n.\n\n\nAppium client libraries implement the \nMobile JSON Wire Protocol\n (an official draft extension to the standard protocol), and elements of the \nW3C Webdriver spec\n (a transport-agnostic automation spec; this is where the MultiAction API is defined).\n\n\nThe Appium server itself defines custom extensions to the official protocols, giving Appium users helpful access to various device behaviors (such as installing/uninstalling apps during the course of a test session). This is why we need Appium-specific clients, not just the 'vanilla' Selenium clients. Of course, Appium client libraries only \nadd\n functionality (in fact, they simply extend the standard Selenium clients), so they can still be used to run regular Selenium sessions.\n\n\nAppium repository\n\n\n\n\n\n\n\n\nLanguage/Framework\n\n\nGithub Repo and Installation Instructions\n\n\n\n\n\n\n\n\n\n\nRuby\n\n\nhttps://github.com/appium/ruby_lib\n, \nhttps://github.com/appium/ruby_lib_core\n\n\n\n\n\n\nPython\n\n\nhttps://github.com/appium/python-client\n\n\n\n\n\n\nJava\n\n\nhttps://github.com/appium/java-client\n\n\n\n\n\n\nC# (.NET)\n\n\nhttps://github.com/appium/appium-dotnet-driver\n\n\n\n\n\n\n\n\nCommunity based\n\n\n\n\n\n\n\n\nLanguage/Framework\n\n\nGithub Repo and Installation Instructions\n\n\n\n\n\n\n\n\n\n\n[Deprecated] JavaScript (Node.js)\n\n\nhttps://github.com/admc/wd\n\n\n\n\n\n\nJavaScript (Node.js)\n\n\nhttps://github.com/webdriverio/webdriverio\n\n\n\n\n\n\nJavaScript (Browser)\n\n\nhttps://github.com/projectxyzio/web2driver\n\n\n\n\n\n\nRobotFramework\n\n\nhttps://github.com/serhatbolsu/robotframework-appiumlibrary\n\n\n\n\n\n\n\n\nW3C WebDriver protocol compatible clients also work.", 
            "title": "The Appium Clients"
        }, 
        {
            "location": "/about-appium/appium-clients/#list-of-client-libraries-with-appium-server-support", 
            "text": "These libraries wrap standard Selenium client libraries to provide all the regular selenium commands dictated by the  JSON Wire protocol , and add extra commands related to controlling mobile devices, such as  multi-touch gestures  and  screen orientation .  Appium client libraries implement the  Mobile JSON Wire Protocol  (an official draft extension to the standard protocol), and elements of the  W3C Webdriver spec  (a transport-agnostic automation spec; this is where the MultiAction API is defined).  The Appium server itself defines custom extensions to the official protocols, giving Appium users helpful access to various device behaviors (such as installing/uninstalling apps during the course of a test session). This is why we need Appium-specific clients, not just the 'vanilla' Selenium clients. Of course, Appium client libraries only  add  functionality (in fact, they simply extend the standard Selenium clients), so they can still be used to run regular Selenium sessions.", 
            "title": "List of client libraries with Appium server support"
        }, 
        {
            "location": "/about-appium/appium-clients/#appium-repository", 
            "text": "Language/Framework  Github Repo and Installation Instructions      Ruby  https://github.com/appium/ruby_lib ,  https://github.com/appium/ruby_lib_core    Python  https://github.com/appium/python-client    Java  https://github.com/appium/java-client    C# (.NET)  https://github.com/appium/appium-dotnet-driver", 
            "title": "Appium repository"
        }, 
        {
            "location": "/about-appium/appium-clients/#community-based", 
            "text": "Language/Framework  Github Repo and Installation Instructions      [Deprecated] JavaScript (Node.js)  https://github.com/admc/wd    JavaScript (Node.js)  https://github.com/webdriverio/webdriverio    JavaScript (Browser)  https://github.com/projectxyzio/web2driver    RobotFramework  https://github.com/serhatbolsu/robotframework-appiumlibrary     W3C WebDriver protocol compatible clients also work.", 
            "title": "Community based"
        }, 
        {
            "location": "/about-appium/getting-started/", 
            "text": "Getting Started\n\n\nThis doc will get you up and running with a simple Appium test and introduce\nyou to some basic Appium ideas. For a more comprehensive introduction to Appium concepts,\nplease check out the \nconceptual introduction\n.\n\n\nInstalling Appium\n\n\nAppium can be installed in one of two ways: via \nNPM\n or by\ndownloading \nAppium Desktop\n, which\nis a graphical, desktop-based way to launch the Appium server.\n\n\nInstallation via NPM\n\n\nIf you want to run Appium via an \nnpm install\n, hack with Appium, or contribute\nto Appium, you will need \nNode.js and NPM\n (use\n\nnvm\n,\n\nn\n, or \nbrew install node\n to install\nNode.js. Make sure you have not installed Node or Appium with \nsudo\n, otherwise\nyou'll run into problems). We recommend the latest stable version, though\nAppium supports Node 10+.\n\n\nThe actual installation is as simple as:\n\n\nnpm install -g appium\n\n\n\n\nInstallation via Desktop App Download\n\n\nSimply download the latest version of Appium Desktop from the \nreleases\npage\n.\n\n\nDriver-Specific Setup\n\n\nYou probably want to use Appium to automate something specific, like an iOS or\nAndroid application. Support for the automation of a particular platform is\nprovided by an Appium \"driver\". There are a number of such drivers that give\nyou access to different kinds of automation technologies, and each come with\ntheir own particular setup requirements. Most of these requirements are the\nsame requirements as for app development on a specific platform. For example,\nto automate Android applications using one of our Android drivers, you'll need\nthe Android SDK configured on your system.\n\n\nAt some point, make sure you review the driver documentation for the platform\nyou want to automate, so your system is set up correctly:\n\n\n\n\nThe \nXCUITest Driver\n (for iOS and tvOS apps)\n\n\nThe \nEspresso Driver\n (for Android apps)\n\n\nThe \nUiAutomator2 Driver\n (for Android apps)\n\n\nThe \nWindows Driver\n (for Windows Desktop apps)\n\n\nThe \nMac Driver\n (for Mac Desktop apps)\n\n\n\n\nVerifying the Installation\n\n\nTo verify that all of Appium's dependencies are met you can use\n\nappium-doctor\n. Install it with \nnpm install -g appium-doctor\n, then run the\n\nappium-doctor\n command, supplying the \n--ios\n or \n--android\n flags to verify\nthat all of the dependencies are set up correctly.\n\n\nAppium Clients\n\n\nWhen all is said and done, Appium is just an HTTP server. It sits and waits for\nconnections from a client, which then instructs Appium what kind of session to\nstart and what kind of automation behaviors to enact once a session is started.\nThis means that you never use Appium just by itself. You always have to use it\nwith a client library of some kind (or, if you're adventurous, cURL!).\n\n\nLuckily, Appium speaks the same protocol as\n\nSelenium\n, called the WebDriver Protocol. You can\ndo a lot of things with Appium just by using one of the standard Selenium\nclients. You may even have one of these on your system already. It's enough to\nget started, especially if you're using Appium for the purpose of testing web\nbrowsers on mobile platforms.\n\n\nAppium can do things that Selenium can't, though, just like mobile devices can\ndo things that web browsers can't. For that reason, we have a set of Appium\nclients in a variety of programming languages, that extend the regular old\nSelenium clients with additional functionality. You can see the list of clients\nand links to download instructions at the \nAppium clients\nlist\n.\n\n\nBefore moving forward, make sure you have a client downloaded in your favorite\nlanguage and ready to go.\n\n\nStarting Appium\n\n\nNow we can kick up an Appium server, either by running it from the command line\nlike so (assuming the NPM install was successful):\n\n\nappium\n\n\n\n\nOr by clicking the huge Start Server button inside of Appium Desktop.\n\n\nAppium will now show you a little welcome message showing the version of Appium\nyou're running and what port it's listening on (the default is \n4723\n). This\nport information is vital since you will have to direct your test client to\nmake sure to connect to Appium on this port. If you want to change, the port,\nyou can do so by using the \n-p\n flag when starting Appium (be sure to check out\nthe full list of \nserver\nparameters\n).\n\n\nRunning Your First Test\n\n\nIn this section we'll run a basic \"Hello World\" Android test. We've chosen\nAndroid because it's available on all platforms. We'll be using the\n\nUiAutomator2 Driver\n so ensure\nyou've read through that doc and gotten your system set up appropriately. We'll\nalso be using JavaScript as the language so that we don't have to deal with\nadditional dependencies.\n\n\n(Chances are, you'll eventually want to automate something other than Android\nusing something other than JavaScript. In that case, check out our\n\nsample-code\n, which has code\nsamples for many languages and platforms.)\n\n\nPrerequisites\n\n\n\n\nWe'll assume you have an Android 8.0 emulator configured and running (the\n  example will work on lower versions, just fix the version numbers\n  accordingly)\n\n\nWe'll assume you have \nthis test\n  APK\n\n  downloaded and available on your local filesystem\n\n\n\n\nSetting up the Appium Client\n\n\nFor this example, we'll use \nWebdriver.io\n as our Appium\nclient. Create a directory for this example, then run:\n\n\nnpm init -y\n\n\n\n\nOnce the project has been initialized, install \nwebdriverio\n:\n\n\nnpm install webdriverio\n\n\n\n\nSession Initialization\n\n\nNow we can create our test file, named \nindex.js\n, and initialize the\nclient object:\n\n\n// javascript\nconst wdio = require(\nwebdriverio\n);\n\n\n\n\nThe next thing we need to do is to start an Appium session. We do this by\ndefining a set of server options and Desired Capabilities, and calling\n\nwdio.remote()\n with them. Desired Capabilities are just a set of keys and\nvalues that get sent to the Appium server during session initialization, that\ntell Appium what kind of thing we want to automate. The minimum set of required\ncapabilities for any Appium driver should include:\n\n\n\n\nplatformName\n: the name of the platform to automate\n\n\nplatformVersion\n: the version of the platform to automate\n\n\ndeviceName\n: the kind of device to automate\n\n\napp\n: the path to the app you want to automate (but use the \nbrowserName\n\n  capability instead in the case of automating a web browser)\n\n\nautomationName\n: the name of the driver you wish to use\n\n\n\n\nFor more information on Desired Capabilities and for a list of all the\nCapabilities you can use in Appium, see our \nCapabilities\ndoc\n.\n\n\nSo here is how we begin to construct a session in our test file:\n\n\n// javascript\nconst opts = {\n  path: '/wd/hub',\n  port: 4723,\n  capabilities: {\n    platformName: \nAndroid\n,\n    platformVersion: \n8\n,\n    deviceName: \nAndroid Emulator\n,\n    app: \n/path/to/the/downloaded/ApiDemos-debug.apk\n,\n    appPackage: \nio.appium.android.apis\n,\n    appActivity: \n.view.TextFields\n,\n    automationName: \nUiAutomator2\n\n  }\n};\n\nasync function main () {\n  const client = await wdio.remote(opts);\n\n  await client.deleteSession();\n}\n\nmain();\n\n\n\n\nRunning Test Commands\n\n\nYou can see that we've specified our Appium port and also constructed our\nDesired Capabilities to match our requirements (but don't forget to replace the\npath with the actual download path for your system). We've registered this fact\nwith \nwebdriverio\n and now have a client object which will represent the\nconnection to the Appium server. From here, we can go ahead and start the\nsession, perform some test commands, and end the session. In our case, we will\nsimply type into a text field and check that the correct text was entered:\n\n\n// javascript\n\nconst field = await client.$(\nandroid.widget.EditText\n);\nawait field.setValue(\nHello World!\n);\nconst value = await field.getText();\nassert.strictEqual(value, \nHello World!\n);\n\n\n\n\nWhat's going on here is that after creating a session and launching our app,\nwe're instructing Appium to find an element in the app hierarchy and type into\nit. The same field is then queried for its text, which is asserted to be what we\nexpect.\n\n\nPutting it all together, the file should look like:\n\n\n// javascript\n\nconst wdio = require(\nwebdriverio\n);\nconst assert = require(\nassert\n);\n\nconst opts = {\n  path: '/wd/hub',\n  port: 4723,\n  capabilities: {\n    platformName: \nAndroid\n,\n    platformVersion: \n8\n,\n    deviceName: \nAndroid Emulator\n,\n    app: \n/path/to/the/downloaded/ApiDemos-debug.apk\n,\n    appPackage: \nio.appium.android.apis\n,\n    appActivity: \n.view.TextFields\n,\n    automationName: \nUiAutomator2\n\n  }\n};\n\nasync function main () {\n  const client = await wdio.remote(opts);\n\n  const field = await client.$(\nandroid.widget.EditText\n);\n  await field.setValue(\nHello World!\n);\n  const value = await field.getText();\n  assert.strictEqual(value,\nHello World!\n);\n\n  await client.deleteSession();\n}\n\nmain();\n\n\n\n\nYou can try and run this test on your own. Simply save it and execute it using\n\nnode\n:\n\n\nnode index.js\n\n\n\n\nIf everything is set up correctly, you'll see Appium begin spitting out\nlots of logs and eventually the app will pop up on the screen and start\nbehaving as if an invisible user were tapping on it!\n\n\nWhat's Next\n\n\nWe've only scratched the surface of what you can do with Appium. Check out\nthese resources to help you on your journey:\n\n\n\n\nThe Appium \ncommand reference\n - learn about what commands are available, how to use them with specific client libraries, etc...\n\n\n\n\nThe \nsample-code\n directory, where lots more code samples are available\n\n\n\n\n\n\ndiscuss.appium.io\n - this is the Appium community forum, which is a great first place to go for help getting started, or if you think you may have run into a bug\n\n\n\n\nThe Appium \nissue tracker\n - let the Appium maintainers know here if you think you've found a bug", 
            "title": "Getting Started"
        }, 
        {
            "location": "/about-appium/getting-started/#getting-started", 
            "text": "This doc will get you up and running with a simple Appium test and introduce\nyou to some basic Appium ideas. For a more comprehensive introduction to Appium concepts,\nplease check out the  conceptual introduction .", 
            "title": "Getting Started"
        }, 
        {
            "location": "/about-appium/getting-started/#installing-appium", 
            "text": "Appium can be installed in one of two ways: via  NPM  or by\ndownloading  Appium Desktop , which\nis a graphical, desktop-based way to launch the Appium server.", 
            "title": "Installing Appium"
        }, 
        {
            "location": "/about-appium/getting-started/#installation-via-npm", 
            "text": "If you want to run Appium via an  npm install , hack with Appium, or contribute\nto Appium, you will need  Node.js and NPM  (use nvm , n , or  brew install node  to install\nNode.js. Make sure you have not installed Node or Appium with  sudo , otherwise\nyou'll run into problems). We recommend the latest stable version, though\nAppium supports Node 10+.  The actual installation is as simple as:  npm install -g appium", 
            "title": "Installation via NPM"
        }, 
        {
            "location": "/about-appium/getting-started/#installation-via-desktop-app-download", 
            "text": "Simply download the latest version of Appium Desktop from the  releases\npage .", 
            "title": "Installation via Desktop App Download"
        }, 
        {
            "location": "/about-appium/getting-started/#driver-specific-setup", 
            "text": "You probably want to use Appium to automate something specific, like an iOS or\nAndroid application. Support for the automation of a particular platform is\nprovided by an Appium \"driver\". There are a number of such drivers that give\nyou access to different kinds of automation technologies, and each come with\ntheir own particular setup requirements. Most of these requirements are the\nsame requirements as for app development on a specific platform. For example,\nto automate Android applications using one of our Android drivers, you'll need\nthe Android SDK configured on your system.  At some point, make sure you review the driver documentation for the platform\nyou want to automate, so your system is set up correctly:   The  XCUITest Driver  (for iOS and tvOS apps)  The  Espresso Driver  (for Android apps)  The  UiAutomator2 Driver  (for Android apps)  The  Windows Driver  (for Windows Desktop apps)  The  Mac Driver  (for Mac Desktop apps)", 
            "title": "Driver-Specific Setup"
        }, 
        {
            "location": "/about-appium/getting-started/#verifying-the-installation", 
            "text": "To verify that all of Appium's dependencies are met you can use appium-doctor . Install it with  npm install -g appium-doctor , then run the appium-doctor  command, supplying the  --ios  or  --android  flags to verify\nthat all of the dependencies are set up correctly.", 
            "title": "Verifying the Installation"
        }, 
        {
            "location": "/about-appium/getting-started/#appium-clients", 
            "text": "When all is said and done, Appium is just an HTTP server. It sits and waits for\nconnections from a client, which then instructs Appium what kind of session to\nstart and what kind of automation behaviors to enact once a session is started.\nThis means that you never use Appium just by itself. You always have to use it\nwith a client library of some kind (or, if you're adventurous, cURL!).  Luckily, Appium speaks the same protocol as Selenium , called the WebDriver Protocol. You can\ndo a lot of things with Appium just by using one of the standard Selenium\nclients. You may even have one of these on your system already. It's enough to\nget started, especially if you're using Appium for the purpose of testing web\nbrowsers on mobile platforms.  Appium can do things that Selenium can't, though, just like mobile devices can\ndo things that web browsers can't. For that reason, we have a set of Appium\nclients in a variety of programming languages, that extend the regular old\nSelenium clients with additional functionality. You can see the list of clients\nand links to download instructions at the  Appium clients\nlist .  Before moving forward, make sure you have a client downloaded in your favorite\nlanguage and ready to go.", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/about-appium/getting-started/#starting-appium", 
            "text": "Now we can kick up an Appium server, either by running it from the command line\nlike so (assuming the NPM install was successful):  appium  Or by clicking the huge Start Server button inside of Appium Desktop.  Appium will now show you a little welcome message showing the version of Appium\nyou're running and what port it's listening on (the default is  4723 ). This\nport information is vital since you will have to direct your test client to\nmake sure to connect to Appium on this port. If you want to change, the port,\nyou can do so by using the  -p  flag when starting Appium (be sure to check out\nthe full list of  server\nparameters ).", 
            "title": "Starting Appium"
        }, 
        {
            "location": "/about-appium/getting-started/#running-your-first-test", 
            "text": "In this section we'll run a basic \"Hello World\" Android test. We've chosen\nAndroid because it's available on all platforms. We'll be using the UiAutomator2 Driver  so ensure\nyou've read through that doc and gotten your system set up appropriately. We'll\nalso be using JavaScript as the language so that we don't have to deal with\nadditional dependencies.  (Chances are, you'll eventually want to automate something other than Android\nusing something other than JavaScript. In that case, check out our sample-code , which has code\nsamples for many languages and platforms.)", 
            "title": "Running Your First Test"
        }, 
        {
            "location": "/about-appium/getting-started/#prerequisites", 
            "text": "We'll assume you have an Android 8.0 emulator configured and running (the\n  example will work on lower versions, just fix the version numbers\n  accordingly)  We'll assume you have  this test\n  APK \n  downloaded and available on your local filesystem", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/about-appium/getting-started/#setting-up-the-appium-client", 
            "text": "For this example, we'll use  Webdriver.io  as our Appium\nclient. Create a directory for this example, then run:  npm init -y  Once the project has been initialized, install  webdriverio :  npm install webdriverio", 
            "title": "Setting up the Appium Client"
        }, 
        {
            "location": "/about-appium/getting-started/#session-initialization", 
            "text": "Now we can create our test file, named  index.js , and initialize the\nclient object:  // javascript\nconst wdio = require( webdriverio );  The next thing we need to do is to start an Appium session. We do this by\ndefining a set of server options and Desired Capabilities, and calling wdio.remote()  with them. Desired Capabilities are just a set of keys and\nvalues that get sent to the Appium server during session initialization, that\ntell Appium what kind of thing we want to automate. The minimum set of required\ncapabilities for any Appium driver should include:   platformName : the name of the platform to automate  platformVersion : the version of the platform to automate  deviceName : the kind of device to automate  app : the path to the app you want to automate (but use the  browserName \n  capability instead in the case of automating a web browser)  automationName : the name of the driver you wish to use   For more information on Desired Capabilities and for a list of all the\nCapabilities you can use in Appium, see our  Capabilities\ndoc .  So here is how we begin to construct a session in our test file:  // javascript\nconst opts = {\n  path: '/wd/hub',\n  port: 4723,\n  capabilities: {\n    platformName:  Android ,\n    platformVersion:  8 ,\n    deviceName:  Android Emulator ,\n    app:  /path/to/the/downloaded/ApiDemos-debug.apk ,\n    appPackage:  io.appium.android.apis ,\n    appActivity:  .view.TextFields ,\n    automationName:  UiAutomator2 \n  }\n};\n\nasync function main () {\n  const client = await wdio.remote(opts);\n\n  await client.deleteSession();\n}\n\nmain();", 
            "title": "Session Initialization"
        }, 
        {
            "location": "/about-appium/getting-started/#running-test-commands", 
            "text": "You can see that we've specified our Appium port and also constructed our\nDesired Capabilities to match our requirements (but don't forget to replace the\npath with the actual download path for your system). We've registered this fact\nwith  webdriverio  and now have a client object which will represent the\nconnection to the Appium server. From here, we can go ahead and start the\nsession, perform some test commands, and end the session. In our case, we will\nsimply type into a text field and check that the correct text was entered:  // javascript\n\nconst field = await client.$( android.widget.EditText );\nawait field.setValue( Hello World! );\nconst value = await field.getText();\nassert.strictEqual(value,  Hello World! );  What's going on here is that after creating a session and launching our app,\nwe're instructing Appium to find an element in the app hierarchy and type into\nit. The same field is then queried for its text, which is asserted to be what we\nexpect.  Putting it all together, the file should look like:  // javascript\n\nconst wdio = require( webdriverio );\nconst assert = require( assert );\n\nconst opts = {\n  path: '/wd/hub',\n  port: 4723,\n  capabilities: {\n    platformName:  Android ,\n    platformVersion:  8 ,\n    deviceName:  Android Emulator ,\n    app:  /path/to/the/downloaded/ApiDemos-debug.apk ,\n    appPackage:  io.appium.android.apis ,\n    appActivity:  .view.TextFields ,\n    automationName:  UiAutomator2 \n  }\n};\n\nasync function main () {\n  const client = await wdio.remote(opts);\n\n  const field = await client.$( android.widget.EditText );\n  await field.setValue( Hello World! );\n  const value = await field.getText();\n  assert.strictEqual(value, Hello World! );\n\n  await client.deleteSession();\n}\n\nmain();  You can try and run this test on your own. Simply save it and execute it using node :  node index.js  If everything is set up correctly, you'll see Appium begin spitting out\nlots of logs and eventually the app will pop up on the screen and start\nbehaving as if an invisible user were tapping on it!", 
            "title": "Running Test Commands"
        }, 
        {
            "location": "/about-appium/getting-started/#whats-next", 
            "text": "We've only scratched the surface of what you can do with Appium. Check out\nthese resources to help you on your journey:   The Appium  command reference  - learn about what commands are available, how to use them with specific client libraries, etc...   The  sample-code  directory, where lots more code samples are available    discuss.appium.io  - this is the Appium community forum, which is a great first place to go for help getting started, or if you think you may have run into a bug   The Appium  issue tracker  - let the Appium maintainers know here if you think you've found a bug", 
            "title": "What's Next"
        }, 
        {
            "location": "/about-appium/platform-support/", 
            "text": "Appium Platform Support\n\n\nAppium supports a variety of platforms and testing modalities (native,\nhybrid, web, real devices, simulators, etc...). This document is designed to\nmake explicit the level of support and requirements for each of these,\nor guide each driver to proper page.\n\n\nAppium team support\n\n\nThis section lists drivers that are supported by Appium team.\n\n\niOS Support\n\n\niOS automation is supported with two drivers:\n\n\n\n\nThe \nXCUITest Driver\n\n\nThe (deprecated) \nUIAutomation Driver\n\n\nThe \nsafaridriver\n for Apple's \nsafaridriver\n\n\n\n\nPlease refer to these driver docs for setup instructions.\n\n\n\n\nVersions: 12.2 and up (as a rule, Appium supports the latest two iOS versions)\n\n\nDevices: Simulator and real device for iPhone, iPad and tvOS\n\n\nNative app support: Yes, with debug version of .app (simulator),\n  or correctly-signed .ipa (real devices). Underlying support is provided by\n  Apple's \nXCUITest\n (or \nUIAutomation\n for older versions)\n  framework.\n\n\nMobile web support: Yes, via automation of mobile Safari. See the \nmobile web doc\n for instructions.\n\n\nHybrid support: Yes. See the \nhybrid doc\n for instructions.\n\n\nSupport for automating multiple apps in one session: No\n\n\nSupport for automating multiple devices simultaneously: Yes\n\n\nSupport for automating vendor-provided or third-party apps: Yes, apps which are already installed on the device\n\n\nSupport for automating custom, non-standard UI controls: Minimal. You need to\n  set accessibility information on the control which enables some basic\n  automation.\n\n\n\n\nAndroid Support\n\n\nAndroid automation is supported with two drivers:\n\n\n\n\nThe \nUiAutomator2 Driver\n\n\nThe \nEspresso Driver\n\n\nThe (deprecated) \nUiAutomator Driver\n\n\nThe \ngeckodriver\n for Firefox and \nGeckoView\n\n\n\n\nPlease refer to these driver docs for setup instructions.\n\n\n\n\nVersions: 4.3 and up\n\n\nVersions 4.3 and up are supported via Appium's \nUiAutomator and UiAutomator2\n\n    libraries. UiAutomator is the default driver.\n\n\nDevices: Android emulators and real Android devices\n\n\nNative app support: Yes\n\n\nMobile web support: Yes. Automation\n  is effected using a bundled \nChromedriver\n\n  server as a proxy. With 4.3, automation works on official Chrome\n  browser or Chromium only. With 4.4+, automation also works on the built-in\n  \"Browser\" app. Chrome/Chromium/Browser must already be installed on the\n  device under test. See the \nmobile web doc\n for instructions.\n\n\nHybrid support: Yes. See the \nhybrid doc\n for instructions.\n\n\nWith default Appium automation backend: versions 4.4 and up\n\n\nSupport for automating multiple apps in one session: Yes\n\n\nSupport for automating multiple devices simultaneously: Yes,\n  though Appium must be started using different ports for the server\n  parameters \n--port\n, \n--bootstrap-port\n and/or\n  \n--chromedriver-port\n. See the \nserver args doc\n for more\n  information on these parameters.\n\n\nSupport for automating vendor-provided or third-party apps: Yes\n\n\nSupport for automating custom, non-standard UI controls: No\n\n\n\n\nmacOS Support\n\n\nmacOS automation is supported with below drivers.\n\n\n\n\nThe \nMac2Driver\n is for macOS 10.15 or later\n\n\nThe (deprecated) \nMacDriver\n is for lower macOS versions\n\n\n\n\nWindows Desktop Support\n\n\nWindows automation is supported with below drivers.\n\n\n\n\nThe \nWinAppDriver\n\n\nThe \ngeckodriver\n for Firefox and \nGeckoView\n\n\n\n\nVendors/Community based drivers\n\n\nThis section lists drivers that are supported by vendors and community.\n\n\nYou.i Engine Support\n\n\n\n\nThe \nYou.i Engine\n\n\n\n\nFlutter Support\n\n\n\n\nThe \nFlutter Driver\n\n\n\n\nRoku Support\n\n\n\n\nThe \nRoku Driver\n\n\n\n\nWebOS Support\n\n\n\n\nThe \nWebOS Driver", 
            "title": "Supported Platforms"
        }, 
        {
            "location": "/about-appium/platform-support/#appium-platform-support", 
            "text": "Appium supports a variety of platforms and testing modalities (native,\nhybrid, web, real devices, simulators, etc...). This document is designed to\nmake explicit the level of support and requirements for each of these,\nor guide each driver to proper page.", 
            "title": "Appium Platform Support"
        }, 
        {
            "location": "/about-appium/platform-support/#appium-team-support", 
            "text": "This section lists drivers that are supported by Appium team.", 
            "title": "Appium team support"
        }, 
        {
            "location": "/about-appium/platform-support/#ios-support", 
            "text": "iOS automation is supported with two drivers:   The  XCUITest Driver  The (deprecated)  UIAutomation Driver  The  safaridriver  for Apple's  safaridriver   Please refer to these driver docs for setup instructions.   Versions: 12.2 and up (as a rule, Appium supports the latest two iOS versions)  Devices: Simulator and real device for iPhone, iPad and tvOS  Native app support: Yes, with debug version of .app (simulator),\n  or correctly-signed .ipa (real devices). Underlying support is provided by\n  Apple's  XCUITest  (or  UIAutomation  for older versions)\n  framework.  Mobile web support: Yes, via automation of mobile Safari. See the  mobile web doc  for instructions.  Hybrid support: Yes. See the  hybrid doc  for instructions.  Support for automating multiple apps in one session: No  Support for automating multiple devices simultaneously: Yes  Support for automating vendor-provided or third-party apps: Yes, apps which are already installed on the device  Support for automating custom, non-standard UI controls: Minimal. You need to\n  set accessibility information on the control which enables some basic\n  automation.", 
            "title": "iOS Support"
        }, 
        {
            "location": "/about-appium/platform-support/#android-support", 
            "text": "Android automation is supported with two drivers:   The  UiAutomator2 Driver  The  Espresso Driver  The (deprecated)  UiAutomator Driver  The  geckodriver  for Firefox and  GeckoView   Please refer to these driver docs for setup instructions.   Versions: 4.3 and up  Versions 4.3 and up are supported via Appium's  UiAutomator and UiAutomator2 \n    libraries. UiAutomator is the default driver.  Devices: Android emulators and real Android devices  Native app support: Yes  Mobile web support: Yes. Automation\n  is effected using a bundled  Chromedriver \n  server as a proxy. With 4.3, automation works on official Chrome\n  browser or Chromium only. With 4.4+, automation also works on the built-in\n  \"Browser\" app. Chrome/Chromium/Browser must already be installed on the\n  device under test. See the  mobile web doc  for instructions.  Hybrid support: Yes. See the  hybrid doc  for instructions.  With default Appium automation backend: versions 4.4 and up  Support for automating multiple apps in one session: Yes  Support for automating multiple devices simultaneously: Yes,\n  though Appium must be started using different ports for the server\n  parameters  --port ,  --bootstrap-port  and/or\n   --chromedriver-port . See the  server args doc  for more\n  information on these parameters.  Support for automating vendor-provided or third-party apps: Yes  Support for automating custom, non-standard UI controls: No", 
            "title": "Android Support"
        }, 
        {
            "location": "/about-appium/platform-support/#macos-support", 
            "text": "macOS automation is supported with below drivers.   The  Mac2Driver  is for macOS 10.15 or later  The (deprecated)  MacDriver  is for lower macOS versions", 
            "title": "macOS Support"
        }, 
        {
            "location": "/about-appium/platform-support/#windows-desktop-support", 
            "text": "Windows automation is supported with below drivers.   The  WinAppDriver  The  geckodriver  for Firefox and  GeckoView", 
            "title": "Windows Desktop Support"
        }, 
        {
            "location": "/about-appium/platform-support/#vendorscommunity-based-drivers", 
            "text": "This section lists drivers that are supported by vendors and community.", 
            "title": "Vendors/Community based drivers"
        }, 
        {
            "location": "/about-appium/platform-support/#youi-engine-support", 
            "text": "The  You.i Engine", 
            "title": "You.i Engine Support"
        }, 
        {
            "location": "/about-appium/platform-support/#flutter-support", 
            "text": "The  Flutter Driver", 
            "title": "Flutter Support"
        }, 
        {
            "location": "/about-appium/platform-support/#roku-support", 
            "text": "The  Roku Driver", 
            "title": "Roku Support"
        }, 
        {
            "location": "/about-appium/platform-support/#webos-support", 
            "text": "The  WebOS Driver", 
            "title": "WebOS Support"
        }, 
        {
            "location": "/about-appium/api/", 
            "text": "Appium API Documentation\n\n\n\n\n\n\n    \nStatus\n\n    \nExecute Mobile Command\n\n    \nSession\n    \nCreate\n\n    \nEnd\n\n    \nGet Session Capabilities\n\n    \nGo Back\n\n    \nScreenshot\n\n    \nSource\n\n    \nTimeouts\n    \nTimeouts\n\n    \nImplicit Wait\n\n    \nAsync Script\n\n\n\n    \nOrientation\n    \nGet Orientation\n\n    \nSet Orientation\n\n\n\n    \nGeolocation\n    \nGet Geolocation\n\n    \nSet Geolocation\n\n\n\n    \nLogs\n    \nGet Log Types\n\n    \nGet Logs\n\n\n\n    \nEvents\n    \nLog event\n\n    \nGet events\n\n\n\n    \nSettings\n    \nUpdate Settings\n\n    \nGet Device Settings\n\n\n\n    \nExecute Driver Script\n\n\n\n    \nDevice\n    \nActivity\n    \nStart Activity\n\n    \nCurrent Activity\n\n    \nCurrent Package\n\n\n\n    \nApp\n    \nInstall App\n\n    \nIs App Installed\n\n    \nLaunch App\n\n    \nBackground App\n\n    \nClose App\n\n    \nReset App\n\n    \nRemove App\n\n    \nActivate App\n\n    \nTerminate App\n\n    \nGet App State\n\n    \nGet App Strings\n\n    \nEnd Test Coverage\n\n\n\n    \nClipboard\n    \nGet Clipboard\n\n    \nSet Clipboard\n\n\n\n    \nEmulator\n    \nPower AC\n\n    \nPower Capacity\n\n\n\n    \nFiles\n    \nPush File\n\n    \nPull File\n\n    \nPull Folder\n\n\n\n    \nInteractions\n    \nShake\n\n    \nLock\n\n    \nUnlock\n\n    \nIs Locked\n\n    \nRotate\n\n\n\n    \nKeys\n    \nPress keycode\n\n    \nLong press keycode\n\n    \nHide Keyboard\n\n    \nIs Keyboard Shown\n\n\n\n    \nNetwork\n    \nToggle Airplane Mode\n\n    \nToggle Data\n\n    \nToggle WiFi\n\n    \nToggle Location Services\n\n    \nSend SMS\n\n    \nGSM Call\n\n    \nGSM Signal\n\n    \nGSM Voice\n\n    \nNetwork Speed\n\n\n\n    \nPerformance Data\n    \nGet Performance Data\n\n    \nPerformance Data Types\n\n\n\n    \nScreen Recording\n    \nStart Screen Recording\n\n    \nStop Screen Recording\n\n\n\n    \nSimulator\n    \nPerform Touch ID\n\n    \nToggle Touch ID Enrollment\n\n\n\n    \nSystem\n    \nOpen Notifications\n\n    \nSystem Bars\n\n    \nSystem Time\n\n    \nDisplay density\n\n\n\n    \nAuthentication\n    \nFinger Print\n\n\n\n\n\n    \nElement\n    \nFind Element\n\n    \nFind Elements\n\n    \nActions\n    \nClick\n\n    \nSend Keys\n\n    \nClear\n\n\n\n    \nAttributes\n    \nText\n\n    \nName\n\n    \nAttribute\n\n    \nSelected\n\n    \nEnabled\n\n    \nDisplayed\n\n    \nLocation\n\n    \nSize\n\n    \nRect\n\n    \nCSS Property\n\n    \nLocation in View\n\n\n\n    \nOther\n    \nSubmit\n\n    \nActive Element\n\n    \nEquals Element\n\n\n\n\n\n    \nContext\n    \nGet Context\n\n    \nGet All Contexts\n\n    \nSet Context\n\n\n\n    \nInteractions\n    \nMouse\n    \nMove To\n\n    \nClick\n\n    \nDouble Click\n\n    \nButton Down\n\n    \nButton Up\n\n\n\n    \nTouch\n    \nSingle Tap\n\n    \nDouble Tap\n\n    \nMove\n\n    \nTouch Down\n\n    \nTouch Up\n\n    \nLong Press\n\n    \nScroll\n\n    \nFlick\n\n    \nMulti Touch Perform\n\n    \nTouch Perform\n\n\n\n    \nW3C Actions\n\n\n\n    \nWeb\n    \nWindow\n    \nSet Window\n\n    \nClose Window\n\n    \nGet Handle\n\n    \nGet Handles\n\n    \nGet Title\n\n    \nGet Window Size\n\n    \nSet Window Size\n\n    \nGet Window Position\n\n    \nSet Window Position\n\n    \nMaximize Window\n\n\n\n    \nNavigation\n    \nGo to URL\n\n    \nGet URL\n\n    \nBack\n\n    \nForward\n\n    \nRefresh\n\n\n\n    \nStorage\n    \nGet All Cookies\n\n    \nSet Cookie\n\n    \nDelete Cookie\n\n    \nDelete All Cookies\n\n\n\n    \nFrame\n    \nSwitch to Frame\n\n    \nSwitch to Parent Frame\n\n\n\n    \nExecute Async\n\n    \nExecute", 
            "title": "API Documentation"
        }, 
        {
            "location": "/about-appium/api/#appium-api-documentation", 
            "text": "Status \n     Execute Mobile Command \n     Session      Create \n     End \n     Get Session Capabilities \n     Go Back \n     Screenshot \n     Source \n     Timeouts      Timeouts \n     Implicit Wait \n     Async Script  \n     Orientation      Get Orientation \n     Set Orientation  \n     Geolocation      Get Geolocation \n     Set Geolocation  \n     Logs      Get Log Types \n     Get Logs  \n     Events      Log event \n     Get events  \n     Settings      Update Settings \n     Get Device Settings  \n     Execute Driver Script  \n     Device      Activity      Start Activity \n     Current Activity \n     Current Package  \n     App      Install App \n     Is App Installed \n     Launch App \n     Background App \n     Close App \n     Reset App \n     Remove App \n     Activate App \n     Terminate App \n     Get App State \n     Get App Strings \n     End Test Coverage  \n     Clipboard      Get Clipboard \n     Set Clipboard  \n     Emulator      Power AC \n     Power Capacity  \n     Files      Push File \n     Pull File \n     Pull Folder  \n     Interactions      Shake \n     Lock \n     Unlock \n     Is Locked \n     Rotate  \n     Keys      Press keycode \n     Long press keycode \n     Hide Keyboard \n     Is Keyboard Shown  \n     Network      Toggle Airplane Mode \n     Toggle Data \n     Toggle WiFi \n     Toggle Location Services \n     Send SMS \n     GSM Call \n     GSM Signal \n     GSM Voice \n     Network Speed  \n     Performance Data      Get Performance Data \n     Performance Data Types  \n     Screen Recording      Start Screen Recording \n     Stop Screen Recording  \n     Simulator      Perform Touch ID \n     Toggle Touch ID Enrollment  \n     System      Open Notifications \n     System Bars \n     System Time \n     Display density  \n     Authentication      Finger Print   \n     Element      Find Element \n     Find Elements \n     Actions      Click \n     Send Keys \n     Clear  \n     Attributes      Text \n     Name \n     Attribute \n     Selected \n     Enabled \n     Displayed \n     Location \n     Size \n     Rect \n     CSS Property \n     Location in View  \n     Other      Submit \n     Active Element \n     Equals Element   \n     Context      Get Context \n     Get All Contexts \n     Set Context  \n     Interactions      Mouse      Move To \n     Click \n     Double Click \n     Button Down \n     Button Up  \n     Touch      Single Tap \n     Double Tap \n     Move \n     Touch Down \n     Touch Up \n     Long Press \n     Scroll \n     Flick \n     Multi Touch Perform \n     Touch Perform  \n     W3C Actions  \n     Web      Window      Set Window \n     Close Window \n     Get Handle \n     Get Handles \n     Get Title \n     Get Window Size \n     Set Window Size \n     Get Window Position \n     Set Window Position \n     Maximize Window  \n     Navigation      Go to URL \n     Get URL \n     Back \n     Forward \n     Refresh  \n     Storage      Get All Cookies \n     Set Cookie \n     Delete Cookie \n     Delete All Cookies  \n     Frame      Switch to Frame \n     Switch to Parent Frame  \n     Execute Async \n     Execute", 
            "title": "Appium API Documentation"
        }, 
        {
            "location": "/drivers/ios-xcuitest/", 
            "text": "The XCUITest Driver for iOS\n\n\nAppium's primary support for automating iOS apps is via the \nXCUITest\n driver.\n\n(New to Appium? Read our \nintroduction to Appium drivers\n)\n. This driver\nleverages Apple's\n\nXCUITest\n\nlibraries under the hood in order to facilitate automation of your app . This\naccess to XCUITest is mediated by the\n\nWebDriverAgent\n server.\nWebDriverAgent (also referred to as \"WDA\") is a project managed by Facebook, to\nwhich the Appium core team contributes heavily. WDA is a WebDriver-compatible\nserver that runs in the context of an iOS simulator or device and exposes the\nXCUITest API. Appium's XCUITest driver manages WDA as a subprocess opaque to\nthe Appium user, proxies commands to/from WDA, and provides a host of\nadditional functionality (like simulator management and other methods, for\nexample).\n\n\nDevelopment of the XCUITest driver happens at the\n\nappium-xcuitest-driver\n\nrepo.\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nApple's XCUITest library is only available on iOS simulators and devices that\n  are running iOS 9.3 or higher.\n\n\nA Mac computer with macOS 10.11 or 10.12 is required.\n\n\nXcode 7 or higher is required.\n\n\nThe XCUITest driver was available in Appium starting with Appium 1.6.\n\n\nFor correct functioning of the driver, additional system libraries are\n  required (see the Setup sections below).\n\n\n\n\nMigrating from the UIAutomation Driver\n\n\nIf you are migrating to the XCUITest driver from Appium's old\n\nUIAutomation-based driver\n, you may wish\nto consult this \nmigration\nguide\n.\n\n\nUsage\n\n\nThe way to start a session using the XCUITest driver is to include the\n\nautomationName\n \ncapability\n in your \nnew session request\n, with\nthe value \nXCUITest\n. Of course, you must also include appropriate\n\nplatformName\n, \nplatformVersion\n, \ndeviceName\n, and \napp\n capabilities, at\na minimum.\n\n\nThe \nplatformName\n should be \niOS\n for iPhone or iPad. tvOS devices are available if the \nplatformName\n is \ntvOS\n.\n\n\n\n\niOS\n   \njson\n   {\n      \"automationName\": \"XCUITest\",\n      \"platformName\": \"iOS\",\n      \"platformVersion\": \"12.2\",\n      \"deviceName\": \"iPhone 8\",\n      ...\n   }\n\n\ntvOS\n   \njson\n   {\n      \"automationName\": \"XCUITest\",\n      \"platformName\": \"tvOS\",\n      \"platformVersion\": \"12.2\",\n      \"deviceName\": \"Apple TV\",\n      ...\n   }\n\n\n\n\nCapabilities\n\n\nThe XCUITest driver supports a number of standard \nAppium\ncapabilities\n, but has an additional\nset of capabilities that modulate the behavior of the driver. These can be\nfound currently at the \nappium-xcuitest-driver\nREADME\n.\n\n\nTo automate Safari instead of your own application, leave the \napp\n capability\nempty and instead set the \nbrowserName\n capability to \nSafari\n.\n\n\nCommands\n\n\nTo see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the XCUITest driver, see the \nAPI\nReference\n.\n\n\nBasic Setup\n\n\n(We recommend the use of \nHomebrew\n for installing system\ndependencies)\n\n\n\n\nEnsure that you have Appium's general dependencies (e.g., Node\n   \n NPM) installed and configured.\n\n\n\n\nIf you don't need to automate real devices, you're done! To automate an app on\nthe simulator, the \napp\n capability should be set to an absolute path or url\npointing to your \n.app\n or \n.app.zip\n file, built for the sim.\n\n\nReal Device Setup\n\n\nAutomating a real device with XCUITest is considerably more complicated, due to\nApple's restrictions around running apps on real devices. Please refer to the\n\nXCUITest real device setup doc\n for\ninstructions.\n\n\nOnce set up, running a session on a real device is achieved by using the\nfollowing desired capabilities:\n\n\n\n\napp\n or \nbundleId\n - specifies the application (local path or url referencing\n   your signed \n.ipa\n file) , or, if it is already installed, simply the bundle\n   identifier of the app so that Appium can launch it.\n\n\nudid\n - the specific id of the device to test on. This can also be set to\n   \nauto\n if there is only a single device, in which case Appium will determine\n   the device id and use it.\n\n\n\n\nOptional Setup\n\n\n\n\n\n\nInstall idb for better handling of various iOS Simulator operations,\nsuch as: biometrics, geolocation setting and window focussing.\n\n\n\n\nRead https://github.com/appium/appium-idb#installation to install necessary libraries (since Appium 1.14.0)\n\n\n\n\n\n\n\n\nInstall \nAppleSimulatorUtils\n\nto use the \npermissions capability\n\n\n\n\n\n\nFiles generated by test runs\n\n\nTesting on iOS generates files that can sometimes get large. These include\nlogs, temporary files, and derived data from Xcode runs. Generally the\nfollowing locations are where they are found, should they need to be deleted:\n\n\n$HOME/Library/Logs/CoreSimulator/*\n$HOME/Library/Developer/Xcode/DerivedData/*\n\n\n\n\nConfigure keyboards\n\n\nOver Appium 1.14.0, Appium configures keyboard preferences by default to make test running more stable. You can change some of them via settings API.\n\n\n\n\nTurn \nAuto-Correction\n in \nKeyboards\n off\n\n\nTurn \nPredictive\n in \nKeyboards\n off\n\n\nMark keyboard tutorial as complete\n\n\n(Only for Simulator) Toggle software keyboard on\n\n\n\n\nAccessibility preferences fine-tuning\n\n\nIn some cases, enabling of the below preferences helps to make some view elements accessible.\nAppium does not modify these settings automatically, since they could affect the way your application under test performs.\nPlease change them manually if needed.\n\n\n\n\nTurn \nSpoken Content\n in \nSettings \n Accessibility\n on\n\n\nTurn \nSpeak Selection\n in \nSettings \n Accessibility\n on", 
            "title": "XCUITest (iOS)"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#the-xcuitest-driver-for-ios", 
            "text": "Appium's primary support for automating iOS apps is via the  XCUITest  driver. (New to Appium? Read our  introduction to Appium drivers ) . This driver\nleverages Apple's XCUITest \nlibraries under the hood in order to facilitate automation of your app . This\naccess to XCUITest is mediated by the WebDriverAgent  server.\nWebDriverAgent (also referred to as \"WDA\") is a project managed by Facebook, to\nwhich the Appium core team contributes heavily. WDA is a WebDriver-compatible\nserver that runs in the context of an iOS simulator or device and exposes the\nXCUITest API. Appium's XCUITest driver manages WDA as a subprocess opaque to\nthe Appium user, proxies commands to/from WDA, and provides a host of\nadditional functionality (like simulator management and other methods, for\nexample).  Development of the XCUITest driver happens at the appium-xcuitest-driver \nrepo.", 
            "title": "The XCUITest Driver for iOS"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Apple's XCUITest library is only available on iOS simulators and devices that\n  are running iOS 9.3 or higher.  A Mac computer with macOS 10.11 or 10.12 is required.  Xcode 7 or higher is required.  The XCUITest driver was available in Appium starting with Appium 1.6.  For correct functioning of the driver, additional system libraries are\n  required (see the Setup sections below).", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#migrating-from-the-uiautomation-driver", 
            "text": "If you are migrating to the XCUITest driver from Appium's old UIAutomation-based driver , you may wish\nto consult this  migration\nguide .", 
            "title": "Migrating from the UIAutomation Driver"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#usage", 
            "text": "The way to start a session using the XCUITest driver is to include the automationName   capability  in your  new session request , with\nthe value  XCUITest . Of course, you must also include appropriate platformName ,  platformVersion ,  deviceName , and  app  capabilities, at\na minimum.  The  platformName  should be  iOS  for iPhone or iPad. tvOS devices are available if the  platformName  is  tvOS .   iOS\n    json\n   {\n      \"automationName\": \"XCUITest\",\n      \"platformName\": \"iOS\",\n      \"platformVersion\": \"12.2\",\n      \"deviceName\": \"iPhone 8\",\n      ...\n   }  tvOS\n    json\n   {\n      \"automationName\": \"XCUITest\",\n      \"platformName\": \"tvOS\",\n      \"platformVersion\": \"12.2\",\n      \"deviceName\": \"Apple TV\",\n      ...\n   }", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#capabilities", 
            "text": "The XCUITest driver supports a number of standard  Appium\ncapabilities , but has an additional\nset of capabilities that modulate the behavior of the driver. These can be\nfound currently at the  appium-xcuitest-driver\nREADME .  To automate Safari instead of your own application, leave the  app  capability\nempty and instead set the  browserName  capability to  Safari .", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#commands", 
            "text": "To see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the XCUITest driver, see the  API\nReference .", 
            "title": "Commands"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#basic-setup", 
            "text": "(We recommend the use of  Homebrew  for installing system\ndependencies)   Ensure that you have Appium's general dependencies (e.g., Node\n     NPM) installed and configured.   If you don't need to automate real devices, you're done! To automate an app on\nthe simulator, the  app  capability should be set to an absolute path or url\npointing to your  .app  or  .app.zip  file, built for the sim.", 
            "title": "Basic Setup"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#real-device-setup", 
            "text": "Automating a real device with XCUITest is considerably more complicated, due to\nApple's restrictions around running apps on real devices. Please refer to the XCUITest real device setup doc  for\ninstructions.  Once set up, running a session on a real device is achieved by using the\nfollowing desired capabilities:   app  or  bundleId  - specifies the application (local path or url referencing\n   your signed  .ipa  file) , or, if it is already installed, simply the bundle\n   identifier of the app so that Appium can launch it.  udid  - the specific id of the device to test on. This can also be set to\n    auto  if there is only a single device, in which case Appium will determine\n   the device id and use it.", 
            "title": "Real Device Setup"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#optional-setup", 
            "text": "Install idb for better handling of various iOS Simulator operations,\nsuch as: biometrics, geolocation setting and window focussing.   Read https://github.com/appium/appium-idb#installation to install necessary libraries (since Appium 1.14.0)     Install  AppleSimulatorUtils \nto use the  permissions capability", 
            "title": "Optional Setup"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#files-generated-by-test-runs", 
            "text": "Testing on iOS generates files that can sometimes get large. These include\nlogs, temporary files, and derived data from Xcode runs. Generally the\nfollowing locations are where they are found, should they need to be deleted:  $HOME/Library/Logs/CoreSimulator/*\n$HOME/Library/Developer/Xcode/DerivedData/*", 
            "title": "Files generated by test runs"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#configure-keyboards", 
            "text": "Over Appium 1.14.0, Appium configures keyboard preferences by default to make test running more stable. You can change some of them via settings API.   Turn  Auto-Correction  in  Keyboards  off  Turn  Predictive  in  Keyboards  off  Mark keyboard tutorial as complete  (Only for Simulator) Toggle software keyboard on", 
            "title": "Configure keyboards"
        }, 
        {
            "location": "/drivers/ios-xcuitest/#accessibility-preferences-fine-tuning", 
            "text": "In some cases, enabling of the below preferences helps to make some view elements accessible.\nAppium does not modify these settings automatically, since they could affect the way your application under test performs.\nPlease change them manually if needed.   Turn  Spoken Content  in  Settings   Accessibility  on  Turn  Speak Selection  in  Settings   Accessibility  on", 
            "title": "Accessibility preferences fine-tuning"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/", 
            "text": "Appium XCUITest Driver Real Device Setup\n\n\nInstalling dependencies\n\n\nFrom Appium 1.15.0, Appium communicates with a real device via \nappium-ios-device\n.\nYou no longer install extra dependencies.\n\n\nXCUITest driver installs a helper application called \nWebDriverAgent-Runner\n onto the device,\nand handles the application under test via it.\nWhile this is simple in theory, the hoops of code signing and provisioning applications for\ndevelopment and testing can make this a bit of a headache.\n\n\nThe device should be available to Xcode. Please make sure the device under test can connect to Xcode without issues. You could confirm it with \nDevices and Simulators\n Xcode dialog.\n\n\nThe documentation on \nappium-xcuitest-driver\n is also helpful to resolve dependencies.\n\n\nBasic (automatic) configuration\n\n\nThe easiest way to get up-and-running with Appium's XCUITest support on iOS\nreal devices is to use the automatic configuration strategy. There are two ways\nto do this:\n\n\n\n\nUse the \nxcodeOrgId\n and \nxcodeSigningId\n desired capabilities:\n\n\n\n\n    {\n      \nxcodeOrgId\n: \nTeam ID\n,\n      \nxcodeSigningId\n: \niPhone Developer\n\n    }\n\n\n\n\n\n\nCreate a \n.xcconfig\n file somewhere on your file system and add the following to it:\n\n\n\n\n    DEVELOPMENT_TEAM = \nTeam ID\n\n    CODE_SIGN_IDENTITY = iPhone Developer\n\n\n\n\nIn either case, the Team ID is a unique 10-character string generated by Apple\nthat is assigned to your team. You can find your Team ID using your developer\naccount. Sign in to \ndeveloper.apple.com/account\n,\nand click Membership in the sidebar. Your Team ID appears in the Membership\nInformation section under the team name. You can also find your team ID listed\nunder the \"Organizational Unit\" field in your iPhone Developer certificate in\nyour keychain.\n\n\nNote that these are mutually exclusive strategies; use \neither\n the\n\nxcodeConfigFile\n capability or the combination of \nxcodeOrgId\n and \nxcodeSigningId\n.\n\n\nOnce this configuration is done, it should just be a matter of starting your test\nspecifying a real device in your \nudid\n desired capability.\n\n\nIf this has not worked it will usually manifest itself in the Appium server logs\nas some error followed by \ninfo XCUITest xcodebuild exited with code '65' and\nsignal 'null'\n. This usually means that the necessary code signing is not set up\ncorrectly. Go on to the \nBasic (manual) configuration\n\nto fix.\n\n\nIf the \nWebDriverAgentRunner\n is successfully installed on the device, but in the\nAppium logs there is an error message something like:\n\n\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12 \nUnable to launch com.apple.test.WebDriverAgentRunner-Runner\n UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1 \n(null)\n UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}}\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5 \nEarly unexpected exit, operation never finished bootstrapping - no restart will be attempted\n UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted}\n\nTesting failed:\n    Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted)\n\n\n\n\nThe problem is that the developer is not trusted on the device. If you manually\ntry to run the \nWebDriverAgentRunner\n app on the device, you will see a popup\nmessage:\n\n\n\n\nYou can go to Settings =\n General =\n Device Management on the device to trust\nthe developer and allow the \nWebDriverAgentRunner\n app to be run (see \nApple\ndocumentation for more information\n).\n\n\nBasic (manual) configuration\n\n\nThere are many cases in which the basic automatic configuration is not enough. This\nusually has to do with code signing and the configuration of the project to be\nable to be run on the real device under test. Often this happens when the\ndevelopment account being used is a \"Free\" one, in which case it is not possible\nto create a wildcard provisioning profile, and will often not create one for the\ndefault application bundle.\n\n\nThis will manifest as something like an error that Xcode \nfailed to create\nprovisioning profile\n:\n\n\n\n\nThe easiest way around this is to create a provisioning profile by opening\n\nXcode\n and creating a new project:\n\n\n\n\nThe type does not matter, other than it being \"iOS\". \"Single View Application\"\nis the easiest:\n\n\n\n\nThe important part is to use a unique \"Product Name\" and \"Organization Name\". Also,\nat this point, specify your \"Team\".\n\n\n\n\nYou can confirm that the provisioning profile was created by looking at the \"Project\"\ntab:\n\n\n\n\nOr by going into your account preferences and seeing the provisioning profile:\n\n\n\n\nAt this point you have a valid provisioning profile. Make note of the bundle id\nyou associated with it, and add that in the \nupdatedWDABundleId\n desired\ncapability for your tests. Then follow the \ninitial instructions for automatic\nconfiguration\n.\n\n\nFull manual configuration\n\n\nAlternatively, the provisioning profile can be manually associated with the\nproject (keep in mind that this will have to be done each time the\nWebDriverAgent is updated, which includes every time a new version of Appium is\ninstalled, and is \nnot\n recommended):\n\n\n\n\nFind out where your Appium installation is:\n\n\n\n\n    $ which appium\n    /path/where/installed/bin/appium\n\n\n\n\n\n\nGiven this installation location, \n/path/where/installed/bin/appium\n, \nWebDriverAgent\n project\n    will be found in \n/path/where/installed/lib/node_modules/appium/node_modules/appium-webdriveragent\n.\n    Open a terminal and go to the location, then run the next script.\n\n\n\n\n    mkdir -p Resources/WebDriverAgent.bundle\n\n\n\n\n\n\n(Only for Appium versions below 1.20) Run the next script on the same terminal.\n\n\n\n\n    ./Scripts/bootstrap.sh -d\n\n\n\n\n\n\n\n\nOpen \nWebDriverAgent.xcodeproj\n in Xcode. For \nboth\n the \nWebDriverAgentLib\n\n    and \nWebDriverAgentRunner\n targets, select \"Automatically manage signing\"\n    in the \"General\" tab, and then select your \nDevelopment Team\n. This\n    should also auto select \nSigning Ceritificate\n. The outcome should look as\n    shown below:\n\n\n\n\n\n\nXcode may fail to create a provisioning profile for the \nWebDriverAgentRunner\n\n  target:\n\n\n\n\n\n\n\n\nThis necessitates manually changing the bundle id for the target by going\n  into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\"\n  from \ncom.facebook.WebDriverAgentRunner\n to something that Xcode will accept:\n\n\n\n\n\n\n\n\nGoing back to the \"General\" tab for the \nWebDriverAgentRunner\n target, you\n  should now see that it has created a provisioning profile and all is well:\n\n\n\n\n\n\n\n\n\n\nFinally, you can verify that everything works. Build the project:\n\n\n\n\n\n\n    xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=\nudid\n' test\n\n\n\n\nIf this was successful, the output should end with something like:\n\n\n    Test Suite 'All tests' started at 2017-01-23 15:49:12.585\n    Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586\n    Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587\n    Test Case '-[UITestingUITests testRunner]' started.\n        t =     0.00s     Start Test at 2017-01-23 15:49:12.588\n        t =     0.00s     Set Up\n\n\n\n\nIf the command fails, try passing the \n-allowProvisioningUpdates\n flag like this (see \n#16212\n):\n\n\n    xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=\nudid\n' -allowProvisioningUpdates test\n\n\n\n\n\n\nTo completely verify, you can try accessing the WebDriverAgent server status\n    (\nnote:\n you \nmust\n be on the same network as the device, and know its IP\n    address, from Settings =\n Wi-Fi =\n Current Network):\n\n\n\n\n    export DEVICE_URL='http://\ndevice IP\n:8100'\n    export JSON_HEADER='-H \nContent-Type: application/json;charset=UTF-8, accept: application/json\n'\n    curl -X GET $JSON_HEADER $DEVICE_URL/status\n\n\n\n\nYou ought to get back output something like this:\n\n\n\n    {\n      \nvalue\n : {\n        \nstate\n : \nsuccess\n,\n        \nos\n : {\n          \nname\n : \niOS\n,\n          \nversion\n : \n10.2\n\n        },\n        \nios\n : {\n          \nsimulatorVersion\n : \n10.2\n,\n          \nip\n : \n192.168.0.7\n\n        },\n        \nbuild\n : {\n          \ntime\n : \nJan 23 2017 14:59:57\n\n        }\n      },\n      \nsessionId\n : \n8951A6DD-F3AD-410E-A5DB-D042F42F68A7\n,\n      \nstatus\n : 0\n    }\n\n\n\n\nConfiguring the app under test\n\n\nNot only does WebDriverAgent need to be configured to run on your device, but\nyour app must also be able to run on your device. The central requirements are\nthe same: to have a build of your app (an \n.ipa\n file) signed with\na development provisioning profile. A good overview of the process can be found\n\nhere\n\nand\n\nhere\n.\n\n\nIn a little more detail, to get started on a real device, you will need the following:\n\n\n\n\nAn \nApple Developer ID\n and a valid\nDeveloper Account with a configured development certificate and provisioning\nprofile. (Please make sure the provisioning profile has \niOS Distribution\n type)\n\n\nA valid iOS Development Certificate and Provisioning Profile are necessary to\ntest on a real device. Your app will also need to be signed. You can find\ninformation about this in the \nApple documentation\n.\n\n\nAn iPad or iPhone. Make sure this has been set up for development in Xcode.\n\n\nA signed \n.app\n or \n.ipa\n file of your app, or the source code to build one.\n\n\nA Mac with \nXcode\n and the Xcode Command\nLine Developer Tools.\n\n\n\n\n(Only for Appium versions below 1.15.0) Appium handles installing the application to the device, using\n\nideviceinstaller\n (which is installed as part of \nlibimobiledevice\n), but it\nis sometimes easier to pre-install your app using Xcode to ensure there are no\nproblems (see again the \nApple\ndocumentation\n\nfor this).\n\n\nTroubleshooting ideas\n\n\n\n\nMake sure UDID is correct by checking it in Xcode Organizer or iTunes. It\n   is a long string (20+ chars).\n\n\nMake sure that you can run your tests against the Simulator.\n\n\nMake sure the following settings are \nenabled\n on your device:\n\n\nSettings -\n Developer -\n \nEnable UI Automation\n\n\nSettings -\n Safari -\n Advanced -\n \nWeb Inspector\n and \nRemote Automation\n\n\nPlease read \nAutomating mobile web apps\n for more details about WebView\n\n\n\n\n\n\n\n\n\n\nConsider generating a provisioning profile with \n.xctrunner\n identifier if you do not want to generate a wildcard one for manual configuration. The \n.xctrunner\n config support has been added since Xcode 11. \nA reference\n\n\nMake sure the provisioning profile has \niOS Distribution\n certificate\n\n\nAn active Xcode/xcodebuild connection/session is necessary to interact with WebDriverAgentRunner because of Apple's security design. The certificate affects the limitation (\nissue\n)\n\n\n\n\n\n\nMake sure the keyboard preference in the device under test is Apple official one and the input language is set to English to send texts to \nXCUIElementTypeSecureTextField\n\n\nNon-official or non-English keyboards may not be able to send keys to \nXCUIElementTypeSecureTextField\n. e.g. \nissues#15647\n\n\n\n\n\n\n\n\nNotice\n\n\nAppium team does not test xcuitest driver against jailbroken devices, so we cannot guaranteer it is going to work as expected as same as non-jailbroken devices.\n\n\ne.g., \ncom.apple.mobile.installation_proxy\n service error to manage Apps on the device\n\n\nPlease use it at your own risk.", 
            "title": "XCUITest Real Devices (iOS)"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#appium-xcuitest-driver-real-device-setup", 
            "text": "", 
            "title": "Appium XCUITest Driver Real Device Setup"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#installing-dependencies", 
            "text": "From Appium 1.15.0, Appium communicates with a real device via  appium-ios-device .\nYou no longer install extra dependencies.  XCUITest driver installs a helper application called  WebDriverAgent-Runner  onto the device,\nand handles the application under test via it.\nWhile this is simple in theory, the hoops of code signing and provisioning applications for\ndevelopment and testing can make this a bit of a headache.  The device should be available to Xcode. Please make sure the device under test can connect to Xcode without issues. You could confirm it with  Devices and Simulators  Xcode dialog.  The documentation on  appium-xcuitest-driver  is also helpful to resolve dependencies.", 
            "title": "Installing dependencies"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#basic-automatic-configuration", 
            "text": "The easiest way to get up-and-running with Appium's XCUITest support on iOS\nreal devices is to use the automatic configuration strategy. There are two ways\nto do this:   Use the  xcodeOrgId  and  xcodeSigningId  desired capabilities:       {\n       xcodeOrgId :  Team ID ,\n       xcodeSigningId :  iPhone Developer \n    }   Create a  .xcconfig  file somewhere on your file system and add the following to it:       DEVELOPMENT_TEAM =  Team ID \n    CODE_SIGN_IDENTITY = iPhone Developer  In either case, the Team ID is a unique 10-character string generated by Apple\nthat is assigned to your team. You can find your Team ID using your developer\naccount. Sign in to  developer.apple.com/account ,\nand click Membership in the sidebar. Your Team ID appears in the Membership\nInformation section under the team name. You can also find your team ID listed\nunder the \"Organizational Unit\" field in your iPhone Developer certificate in\nyour keychain.  Note that these are mutually exclusive strategies; use  either  the xcodeConfigFile  capability or the combination of  xcodeOrgId  and  xcodeSigningId .  Once this configuration is done, it should just be a matter of starting your test\nspecifying a real device in your  udid  desired capability.  If this has not worked it will usually manifest itself in the Appium server logs\nas some error followed by  info XCUITest xcodebuild exited with code '65' and\nsignal 'null' . This usually means that the necessary code signing is not set up\ncorrectly. Go on to the  Basic (manual) configuration \nto fix.  If the  WebDriverAgentRunner  is successfully installed on the device, but in the\nAppium logs there is an error message something like:  2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12  Unable to launch com.apple.test.WebDriverAgentRunner-Runner  UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1  (null)  UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}}\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5  Early unexpected exit, operation never finished bootstrapping - no restart will be attempted  UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted}\n\nTesting failed:\n    Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted)  The problem is that the developer is not trusted on the device. If you manually\ntry to run the  WebDriverAgentRunner  app on the device, you will see a popup\nmessage:   You can go to Settings =  General =  Device Management on the device to trust\nthe developer and allow the  WebDriverAgentRunner  app to be run (see  Apple\ndocumentation for more information ).", 
            "title": "Basic (automatic) configuration"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#basic-manual-configuration", 
            "text": "There are many cases in which the basic automatic configuration is not enough. This\nusually has to do with code signing and the configuration of the project to be\nable to be run on the real device under test. Often this happens when the\ndevelopment account being used is a \"Free\" one, in which case it is not possible\nto create a wildcard provisioning profile, and will often not create one for the\ndefault application bundle.  This will manifest as something like an error that Xcode  failed to create\nprovisioning profile :   The easiest way around this is to create a provisioning profile by opening Xcode  and creating a new project:   The type does not matter, other than it being \"iOS\". \"Single View Application\"\nis the easiest:   The important part is to use a unique \"Product Name\" and \"Organization Name\". Also,\nat this point, specify your \"Team\".   You can confirm that the provisioning profile was created by looking at the \"Project\"\ntab:   Or by going into your account preferences and seeing the provisioning profile:   At this point you have a valid provisioning profile. Make note of the bundle id\nyou associated with it, and add that in the  updatedWDABundleId  desired\ncapability for your tests. Then follow the  initial instructions for automatic\nconfiguration .", 
            "title": "Basic (manual) configuration"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#full-manual-configuration", 
            "text": "Alternatively, the provisioning profile can be manually associated with the\nproject (keep in mind that this will have to be done each time the\nWebDriverAgent is updated, which includes every time a new version of Appium is\ninstalled, and is  not  recommended):   Find out where your Appium installation is:       $ which appium\n    /path/where/installed/bin/appium   Given this installation location,  /path/where/installed/bin/appium ,  WebDriverAgent  project\n    will be found in  /path/where/installed/lib/node_modules/appium/node_modules/appium-webdriveragent .\n    Open a terminal and go to the location, then run the next script.       mkdir -p Resources/WebDriverAgent.bundle   (Only for Appium versions below 1.20) Run the next script on the same terminal.       ./Scripts/bootstrap.sh -d    Open  WebDriverAgent.xcodeproj  in Xcode. For  both  the  WebDriverAgentLib \n    and  WebDriverAgentRunner  targets, select \"Automatically manage signing\"\n    in the \"General\" tab, and then select your  Development Team . This\n    should also auto select  Signing Ceritificate . The outcome should look as\n    shown below:    Xcode may fail to create a provisioning profile for the  WebDriverAgentRunner \n  target:     This necessitates manually changing the bundle id for the target by going\n  into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\"\n  from  com.facebook.WebDriverAgentRunner  to something that Xcode will accept:     Going back to the \"General\" tab for the  WebDriverAgentRunner  target, you\n  should now see that it has created a provisioning profile and all is well:      Finally, you can verify that everything works. Build the project:        xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id= udid ' test  If this was successful, the output should end with something like:      Test Suite 'All tests' started at 2017-01-23 15:49:12.585\n    Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586\n    Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587\n    Test Case '-[UITestingUITests testRunner]' started.\n        t =     0.00s     Start Test at 2017-01-23 15:49:12.588\n        t =     0.00s     Set Up  If the command fails, try passing the  -allowProvisioningUpdates  flag like this (see  #16212 ):      xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id= udid ' -allowProvisioningUpdates test   To completely verify, you can try accessing the WebDriverAgent server status\n    ( note:  you  must  be on the same network as the device, and know its IP\n    address, from Settings =  Wi-Fi =  Current Network):       export DEVICE_URL='http:// device IP :8100'\n    export JSON_HEADER='-H  Content-Type: application/json;charset=UTF-8, accept: application/json '\n    curl -X GET $JSON_HEADER $DEVICE_URL/status  You ought to get back output something like this:      {\n       value  : {\n         state  :  success ,\n         os  : {\n           name  :  iOS ,\n           version  :  10.2 \n        },\n         ios  : {\n           simulatorVersion  :  10.2 ,\n           ip  :  192.168.0.7 \n        },\n         build  : {\n           time  :  Jan 23 2017 14:59:57 \n        }\n      },\n       sessionId  :  8951A6DD-F3AD-410E-A5DB-D042F42F68A7 ,\n       status  : 0\n    }", 
            "title": "Full manual configuration"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#configuring-the-app-under-test", 
            "text": "Not only does WebDriverAgent need to be configured to run on your device, but\nyour app must also be able to run on your device. The central requirements are\nthe same: to have a build of your app (an  .ipa  file) signed with\na development provisioning profile. A good overview of the process can be found here \nand here .  In a little more detail, to get started on a real device, you will need the following:   An  Apple Developer ID  and a valid\nDeveloper Account with a configured development certificate and provisioning\nprofile. (Please make sure the provisioning profile has  iOS Distribution  type)  A valid iOS Development Certificate and Provisioning Profile are necessary to\ntest on a real device. Your app will also need to be signed. You can find\ninformation about this in the  Apple documentation .  An iPad or iPhone. Make sure this has been set up for development in Xcode.  A signed  .app  or  .ipa  file of your app, or the source code to build one.  A Mac with  Xcode  and the Xcode Command\nLine Developer Tools.   (Only for Appium versions below 1.15.0) Appium handles installing the application to the device, using ideviceinstaller  (which is installed as part of  libimobiledevice ), but it\nis sometimes easier to pre-install your app using Xcode to ensure there are no\nproblems (see again the  Apple\ndocumentation \nfor this).", 
            "title": "Configuring the app under test"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#troubleshooting-ideas", 
            "text": "Make sure UDID is correct by checking it in Xcode Organizer or iTunes. It\n   is a long string (20+ chars).  Make sure that you can run your tests against the Simulator.  Make sure the following settings are  enabled  on your device:  Settings -  Developer -   Enable UI Automation  Settings -  Safari -  Advanced -   Web Inspector  and  Remote Automation  Please read  Automating mobile web apps  for more details about WebView      Consider generating a provisioning profile with  .xctrunner  identifier if you do not want to generate a wildcard one for manual configuration. The  .xctrunner  config support has been added since Xcode 11.  A reference  Make sure the provisioning profile has  iOS Distribution  certificate  An active Xcode/xcodebuild connection/session is necessary to interact with WebDriverAgentRunner because of Apple's security design. The certificate affects the limitation ( issue )    Make sure the keyboard preference in the device under test is Apple official one and the input language is set to English to send texts to  XCUIElementTypeSecureTextField  Non-official or non-English keyboards may not be able to send keys to  XCUIElementTypeSecureTextField . e.g.  issues#15647", 
            "title": "Troubleshooting ideas"
        }, 
        {
            "location": "/drivers/ios-xcuitest-real-devices/#notice", 
            "text": "Appium team does not test xcuitest driver against jailbroken devices, so we cannot guaranteer it is going to work as expected as same as non-jailbroken devices.  e.g.,  com.apple.mobile.installation_proxy  service error to manage Apps on the device  Please use it at your own risk.", 
            "title": "Notice"
        }, 
        {
            "location": "/drivers/ios-uiautomation/", 
            "text": "The UIAutomation Driver for iOS\n\n\n\n\nNote\n: This driver is \nDEPRECATED\n and should not be used unless\nabsolutely necessary. The information in this doc may not keep up to date\nwith reality, and the driver will be removed in a future version of Appium.\nTo begin iOS automation with Appium today, please use the \nXCUITest\nDriver\n instead.\n\n\n\n\nAppium's former method for iOS app automation was based on \nUIAutomation\n, an\nApple-provided framework that shipped with the iOS SDK until iOS 10, when it\nwas removed. \nUIAutomation\n was one of the tools included in Apple's\nInstruments profiling system, and provided a JavaScript API that ran\nsynchronously in the context of a single app. The Appium UIAutomation driver\nestablished an asynchronous, session-based WebDriver front end for this API.\n\n\nDevelopment of the UIAutomation driver is done at the\n\nappium-ios-driver\n repo.\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nXcode 7 or lower.\n\n\niOS simulators or devices with version 9.3 or lower.\n\n\nAll versions of Appium ship with this driver.\n\n\nFor correct functioning of the driver, see additional setup below.\n\n\n\n\nUsage\n\n\nThe way to start a session using the UIAutomation driver is to set the\n\nplatformName\n \ncapability\n in your \nnew session request\n to the\nvalue of \niOS\n. Of course, you must also include appropriate \nplatformVersion\n,\n\ndeviceName\n, and \napp\n capabilities, at a minimum.\n\n\nCapabilities\n\n\nThe UIAutomation driver supports a number of standard \nAppium\ncapabilities\n, but has an additional\nset of capabilities that work for this driver only (see the \niOS\nsection\n of the\naforementioned doc).\n\n\nTo automate Safari instead of your own application, leave the \napp\n capability\nempty and instead set the \nbrowserName\n capability to \nSafari\n.\n\n\nCommands\n\n\nTo see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the UIAutomation driver, see the \nAPI\nReference\n.\n\n\nSimulator Setup\n\n\n(Note that due to limitations of Xcode and the iOS simulator, only one\nsimulator may be open, and automated, at any given time. For multiple simulator\nsupport, you will need to upgrade to the \nXCUITest driver\n).\n\n\n\n\n\n\nFor best results, launch each simulator you wish to use and ensure the following:\n\n\n\n\nThe soft keyboard is enabled (Command+K in the Simulator app)\n\n\nUIAutomation is enabled in the Developer settings menu\n\n\nThere is not more than one simulator with the same name in Xcode's\n  \"Devices\" organizer\n\n\n\n\n\n\n\n\nReal Device Setup\n\n\nRunning tests on real devices is considerably more complicated due to code\nsigning and additional workarounds to Apple limitations. The basic process for\na successful automation strategy using this driver are as follows:\n\n\n\n\n\n\nBuild your app with a Debug configuration, for the specific type of real\n   device you will run the test on, ensuring that the app is also signed for\n   running on your specific device. For example:\n\n\nxcodebuild -sdk \niphoneos\n -target \ntarget_name\n -configuration Debug \\\n    CODE_SIGN_IDENTITY=\"iPhone Developer: Mister Smith\" \\\n    PROVISIONING_PROFILE=\"XXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\"\n\n\n\n\n\n\nInstall the built app (usually now located in a build directory specified in\n   Xcode) to your test device yourself, ensuring it exists on the device and\n   there are no signing issues. There are a number of methods for installing\n   apps onto devices. One is to just use Xcode itself. Another is to use the\n   \nideviceinstaller\n tool provided as part of the \nlibimobiledevice\n suite.\n   A third is to use \nios-deploy\n.\n   Here's an example for \nideviceinstaller\n:\n\n\n```\n\n\nfirst install ideviceinstaller, using Homebrew (http://brew.sh)\n\n\nbrew install libimobiledevice\nideviceinstaller -u \n -i \n\n```\n\n\n\n\n\n\nUse the bundle ID of your application as the value of the \napp\n capability.\n\n\n\n\nUse the UDID of your device as the \nudid\n capability.\n\n\nAs above, ensure that UI Automation is enabled in the Developer settings.\n\n\n\n\nFollowing these steps should ensure your success! If you're using newer\nversions of Xcode (7.x, for example), you may wish to consult the \nXCUITest\nDriver Real Device Docs\n as they\nmay contain some pertinent information as well.\n\n\nReal Device Hybrid / Web Testing\n\n\nFor hybrid and web testing, Appium requires the use of the Remote Debugging\nProtocol to send JavaScript to execute inside a web view. For real iOS devices,\nthis protocol is encrypted and access must be facilitated using a 3rd-party\ntool, provided by Google, called\n\nios-webkit-debug-proxy\n\n(IWDP). For information on installing and using IWDP within Appium, check out\nthe \nIWDP doc\n.\n\n\nFor web testing, i.e., tests that run in the Safari browser, we have another\nhurdle to jump. On real devices, apps that are not signed by the developer\ncannot be instrumented with UIAutomation. Safari is one such app. Thus we have\na helper app called \nSafariLauncher\n, which \ncan\n be signed by the developer.\nIts sole purpose upon launching is to turn around and launch Safari, which can\nthen be automated via the Remote Debugger in conjunction with IWDP. Unfortunately\nyou cannot, in this case, move into the native context and do any automation of\nthe browser itself.\n\n\nFor instructions on setting up \nSafariLauncher\n, check out the \nSafariLauncher\ndoc\n.\n\n\nFiles generated by iOS test runs\n\n\nTesting on iOS generates files that can sometimes get large. These include\nlogs, temporary files, and derived data from Xcode runs. Generally the\nfollowing locations are where they are found, should they need to be deleted:\n\n\n$HOME/Library/Logs/CoreSimulator/*\n/Library/Caches/com.apple.dt.instruments/*\n\n\n\n\nRunning iOS tests using Jenkins\n\n\nFirst download the \njenkins-cli.jar\n and verify that the Mac successfully\nconnects to Jenkins master.\n\n\nwget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar\n\njava -jar jenkins-cli.jar \\\n -s https://team-appium.ci.cloudbees.com \\\n -i ~/.ssh/id_rsa \\\n on-premise-executor \\\n -fsroot ~/jenkins \\\n -labels osx \\\n -name mac_appium\n\n\n\n\nNext define a LaunchAgent for Jenkins to launch automatically on login.\nA LaunchDaemon will not work because daemons don't have GUI access. Make sure\nthe plist doesn't contain the \nSessionCreate\n or \nUser\n key as that may prevent\ntests from running. You'll see a \nFailed to authorize rights\n error if\nmisconfigured.\n\n\n$ sudo nano /Library/LaunchAgents/com.jenkins.ci.plist\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!DOCTYPE plist PUBLIC \n-//Apple//DTD PLIST 1.0//EN\n \nhttp://www.apple.com/DTDs/PropertyList-1.0.dtd\n\n\nplist version=\n1.0\n\n\ndict\n\n    \nkey\nLabel\n/key\n\n    \nstring\ncom.jenkins.ci\n/string\n\n    \nkey\nProgramArguments\n/key\n\n    \narray\n\n        \nstring\njava\n/string\n\n        \nstring\n-Djava.awt.headless=true\n/string\n\n        \nstring\n-jar\n/string\n\n        \nstring\n/Users/appium/jenkins/jenkins-cli.jar\n/string\n\n        \nstring\n-s\n/string\n\n        \nstring\nhttps://instructure.ci.cloudbees.com\n/string\n\n        \nstring\non-premise-executor\n/string\n\n        \nstring\n-fsroot\n/string\n\n        \nstring\n/Users/appium/jenkins\n/string\n\n        \nstring\n-executors\n/string\n\n        \nstring\n1\n/string\n\n        \nstring\n-labels\n/string\n\n        \nstring\nmac\n/string\n\n        \nstring\n-name\n/string\n\n        \nstring\nmac_appium\n/string\n\n        \nstring\n-persistent\n/string\n\n    \n/array\n\n    \nkey\nKeepAlive\n/key\n\n    \ntrue/\n\n    \nkey\nStandardOutPath\n/key\n\n    \nstring\n/Users/appium/jenkins/stdout.log\n/string\n\n    \nkey\nStandardErrorPath\n/key\n\n    \nstring\n/Users/appium/jenkins/error.log\n/string\n\n\n/dict\n\n\n/plist\n\n\n\n\n\nFinally set the owner, permissions, and then start the agent.\n\n\nsudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist\nsudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist\n\nlaunchctl load /Library/LaunchAgents/com.jenkins.ci.plist\nlaunchctl start com.jenkins.ci", 
            "title": "UIAutomation (iOS)"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#the-uiautomation-driver-for-ios", 
            "text": "Note : This driver is  DEPRECATED  and should not be used unless\nabsolutely necessary. The information in this doc may not keep up to date\nwith reality, and the driver will be removed in a future version of Appium.\nTo begin iOS automation with Appium today, please use the  XCUITest\nDriver  instead.   Appium's former method for iOS app automation was based on  UIAutomation , an\nApple-provided framework that shipped with the iOS SDK until iOS 10, when it\nwas removed.  UIAutomation  was one of the tools included in Apple's\nInstruments profiling system, and provided a JavaScript API that ran\nsynchronously in the context of a single app. The Appium UIAutomation driver\nestablished an asynchronous, session-based WebDriver front end for this API.  Development of the UIAutomation driver is done at the appium-ios-driver  repo.", 
            "title": "The UIAutomation Driver for iOS"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Xcode 7 or lower.  iOS simulators or devices with version 9.3 or lower.  All versions of Appium ship with this driver.  For correct functioning of the driver, see additional setup below.", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#usage", 
            "text": "The way to start a session using the UIAutomation driver is to set the platformName   capability  in your  new session request  to the\nvalue of  iOS . Of course, you must also include appropriate  platformVersion , deviceName , and  app  capabilities, at a minimum.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#capabilities", 
            "text": "The UIAutomation driver supports a number of standard  Appium\ncapabilities , but has an additional\nset of capabilities that work for this driver only (see the  iOS\nsection  of the\naforementioned doc).  To automate Safari instead of your own application, leave the  app  capability\nempty and instead set the  browserName  capability to  Safari .", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#commands", 
            "text": "To see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the UIAutomation driver, see the  API\nReference .", 
            "title": "Commands"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#simulator-setup", 
            "text": "(Note that due to limitations of Xcode and the iOS simulator, only one\nsimulator may be open, and automated, at any given time. For multiple simulator\nsupport, you will need to upgrade to the  XCUITest driver ).    For best results, launch each simulator you wish to use and ensure the following:   The soft keyboard is enabled (Command+K in the Simulator app)  UIAutomation is enabled in the Developer settings menu  There is not more than one simulator with the same name in Xcode's\n  \"Devices\" organizer", 
            "title": "Simulator Setup"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#real-device-setup", 
            "text": "Running tests on real devices is considerably more complicated due to code\nsigning and additional workarounds to Apple limitations. The basic process for\na successful automation strategy using this driver are as follows:    Build your app with a Debug configuration, for the specific type of real\n   device you will run the test on, ensuring that the app is also signed for\n   running on your specific device. For example:  xcodebuild -sdk  iphoneos  -target  target_name  -configuration Debug \\\n    CODE_SIGN_IDENTITY=\"iPhone Developer: Mister Smith\" \\\n    PROVISIONING_PROFILE=\"XXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\"    Install the built app (usually now located in a build directory specified in\n   Xcode) to your test device yourself, ensuring it exists on the device and\n   there are no signing issues. There are a number of methods for installing\n   apps onto devices. One is to just use Xcode itself. Another is to use the\n    ideviceinstaller  tool provided as part of the  libimobiledevice  suite.\n   A third is to use  ios-deploy .\n   Here's an example for  ideviceinstaller :  ```", 
            "title": "Real Device Setup"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#first-install-ideviceinstaller-using-homebrew-httpbrewsh", 
            "text": "brew install libimobiledevice\nideviceinstaller -u   -i  \n```    Use the bundle ID of your application as the value of the  app  capability.   Use the UDID of your device as the  udid  capability.  As above, ensure that UI Automation is enabled in the Developer settings.   Following these steps should ensure your success! If you're using newer\nversions of Xcode (7.x, for example), you may wish to consult the  XCUITest\nDriver Real Device Docs  as they\nmay contain some pertinent information as well.", 
            "title": "first install ideviceinstaller, using Homebrew (http://brew.sh)"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#real-device-hybrid-web-testing", 
            "text": "For hybrid and web testing, Appium requires the use of the Remote Debugging\nProtocol to send JavaScript to execute inside a web view. For real iOS devices,\nthis protocol is encrypted and access must be facilitated using a 3rd-party\ntool, provided by Google, called ios-webkit-debug-proxy \n(IWDP). For information on installing and using IWDP within Appium, check out\nthe  IWDP doc .  For web testing, i.e., tests that run in the Safari browser, we have another\nhurdle to jump. On real devices, apps that are not signed by the developer\ncannot be instrumented with UIAutomation. Safari is one such app. Thus we have\na helper app called  SafariLauncher , which  can  be signed by the developer.\nIts sole purpose upon launching is to turn around and launch Safari, which can\nthen be automated via the Remote Debugger in conjunction with IWDP. Unfortunately\nyou cannot, in this case, move into the native context and do any automation of\nthe browser itself.  For instructions on setting up  SafariLauncher , check out the  SafariLauncher\ndoc .", 
            "title": "Real Device Hybrid / Web Testing"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#files-generated-by-ios-test-runs", 
            "text": "Testing on iOS generates files that can sometimes get large. These include\nlogs, temporary files, and derived data from Xcode runs. Generally the\nfollowing locations are where they are found, should they need to be deleted:  $HOME/Library/Logs/CoreSimulator/*\n/Library/Caches/com.apple.dt.instruments/*", 
            "title": "Files generated by iOS test runs"
        }, 
        {
            "location": "/drivers/ios-uiautomation/#running-ios-tests-using-jenkins", 
            "text": "First download the  jenkins-cli.jar  and verify that the Mac successfully\nconnects to Jenkins master.  wget https://jenkins.ci.cloudbees.com/jnlpJars/jenkins-cli.jar\n\njava -jar jenkins-cli.jar \\\n -s https://team-appium.ci.cloudbees.com \\\n -i ~/.ssh/id_rsa \\\n on-premise-executor \\\n -fsroot ~/jenkins \\\n -labels osx \\\n -name mac_appium  Next define a LaunchAgent for Jenkins to launch automatically on login.\nA LaunchDaemon will not work because daemons don't have GUI access. Make sure\nthe plist doesn't contain the  SessionCreate  or  User  key as that may prevent\ntests from running. You'll see a  Failed to authorize rights  error if\nmisconfigured.  $ sudo nano /Library/LaunchAgents/com.jenkins.ci.plist ?xml version= 1.0  encoding= UTF-8 ?  !DOCTYPE plist PUBLIC  -//Apple//DTD PLIST 1.0//EN   http://www.apple.com/DTDs/PropertyList-1.0.dtd  plist version= 1.0  dict \n     key Label /key \n     string com.jenkins.ci /string \n     key ProgramArguments /key \n     array \n         string java /string \n         string -Djava.awt.headless=true /string \n         string -jar /string \n         string /Users/appium/jenkins/jenkins-cli.jar /string \n         string -s /string \n         string https://instructure.ci.cloudbees.com /string \n         string on-premise-executor /string \n         string -fsroot /string \n         string /Users/appium/jenkins /string \n         string -executors /string \n         string 1 /string \n         string -labels /string \n         string mac /string \n         string -name /string \n         string mac_appium /string \n         string -persistent /string \n     /array \n     key KeepAlive /key \n     true/ \n     key StandardOutPath /key \n     string /Users/appium/jenkins/stdout.log /string \n     key StandardErrorPath /key \n     string /Users/appium/jenkins/error.log /string  /dict  /plist   Finally set the owner, permissions, and then start the agent.  sudo chown root:wheel /Library/LaunchAgents/com.jenkins.ci.plist\nsudo chmod 644 /Library/LaunchAgents/com.jenkins.ci.plist\n\nlaunchctl load /Library/LaunchAgents/com.jenkins.ci.plist\nlaunchctl start com.jenkins.ci", 
            "title": "Running iOS tests using Jenkins"
        }, 
        {
            "location": "/drivers/ios-uiautomation-safari-launcher/", 
            "text": "SafariLauncher Setup Instructions\n\n\nRunning mobile web tests on iOS real devices with iOS 9.3 or below, using Instruments,\nrequires the introduction of a third-party app, \nSafariLauncher\n.\nThis is necessary because with Instruments there is no way to start the Safari\napp on the device. The \nSafariLauncher\n app just launches, and then launches\nSafari. Simple!\n\n\nIn some configurations, Appium is able to automatically build, sign, and install\n\nSafariLauncher\n as it needs, and there is nothing else necessary to be done. If,\nhowever, this is not the case, as is more often so with later versions of\n\nXcode\n, the following configuration needs to\nbe done before Safari tests on real devices can be successfully run.\n\n\nAutomatic SafariLauncher configuration\n\n\nThe only thing needed for automatic \nSafariLauncher\n configuration is to create\na \nprovisioning profile\n that can be used to deploy the \nSafariLauncher\n App.\nThis requires, in particular, a wildcard certificate, which is not possible if\nyour Apple developer account is a free one. If that is the case, skip to the\nmanual configuration below.\n\n\nTo create a profile for the launcher go into the \nApple Developers Member Center\n and:\n\n\n\n\nStep 1:\n Create a \nnew App Id\n and select the WildCard App ID option and set it to \"*\"\n\n\nStep 2:\n Create a \nnew Development Profile\n and for App Id select the one created in step 1.\n\n\nStep 3:\n Select your \ncertificate(s) and device(s)\n and click next.\n\n\nStep 4:\n Set the profile name and \ngenerate the profile\n.\n\n\nStep 5:\n Download the profile and open it with a text editor.\n\n\nStep 6:\n Search for the \nUUID\n and the string for it is your \nidentity code\n.\n\n\n\n\nNow simply include your UDID and device name in your desired capabilities:\n\n\n{\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari'\n}\n\n\n\n\nManual SafariLauncher configuration\n\n\nNote:\n This procedure assumes you have \nXcode\n 7.3 or 7.3.1.\n\n\nIt is possible to use the version of \nSafariLauncher\n\nthat comes with the \nappium-ios-driver\n,\nbut if you do, each time you update Appium the procedure will have to be done again.\n\n\nTo get a local copy of \nSafariLauncher\n, first clone it from \nGitHub\n:\n\n\ngit clone https://github.com/snevesbarros/SafariLauncher.git\n\n\n\n\nOnce you have a local copy of the source code for the \nSafariLauncher\n app, open\n\nXcode\n and then open the \nSafariLauncher\n project\n\n\n\n\nIn the \nSafariLauncher\n target pane you will see an error, saying that there needs\nto be a provisioning profile for this app\n\n\n\n\nIn order to fix this, you first need to enter a \"Bundle Identifier\" for the app. The default\nexpected by Appium is \ncom.bytearc.SafariLauncher\n, but this might not be available\nfor you to build. In that case, choose something else, and make note of it. Then\nchoose a \"Team\", and allow the provisioning profile to be created\n\n\n\n\nFinally, make sure your device is connected to the computer, and choose it as the\ntarget\n\n\n\n\nAnd run the build and install actions to compile the app and push it onto your\ndevice\n\n\n\n\nNow you have a working \nSafariLauncher\n on your device. The app itself is a plain\nscreen that will launch \nSafari\n at the click of a button\n\n\n\n\nThe last step is only necessary if you chose a bundle identifier for the app that\nis different from the default (\ncom.bytearc.SafariLauncher\n). If you did, it is\nnecessary to send that to Appium when creating a session, using the \nbundleId\n\ndesired capability:\n\n\n{\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari',\n  bundleId: 'com.imurchie.SafariLauncher'\n}", 
            "title": "UIAutomation Safari Launcher (iOS)"
        }, 
        {
            "location": "/drivers/ios-uiautomation-safari-launcher/#safarilauncher-setup-instructions", 
            "text": "Running mobile web tests on iOS real devices with iOS 9.3 or below, using Instruments,\nrequires the introduction of a third-party app,  SafariLauncher .\nThis is necessary because with Instruments there is no way to start the Safari\napp on the device. The  SafariLauncher  app just launches, and then launches\nSafari. Simple!  In some configurations, Appium is able to automatically build, sign, and install SafariLauncher  as it needs, and there is nothing else necessary to be done. If,\nhowever, this is not the case, as is more often so with later versions of Xcode , the following configuration needs to\nbe done before Safari tests on real devices can be successfully run.", 
            "title": "SafariLauncher Setup Instructions"
        }, 
        {
            "location": "/drivers/ios-uiautomation-safari-launcher/#automatic-safarilauncher-configuration", 
            "text": "The only thing needed for automatic  SafariLauncher  configuration is to create\na  provisioning profile  that can be used to deploy the  SafariLauncher  App.\nThis requires, in particular, a wildcard certificate, which is not possible if\nyour Apple developer account is a free one. If that is the case, skip to the\nmanual configuration below.  To create a profile for the launcher go into the  Apple Developers Member Center  and:   Step 1:  Create a  new App Id  and select the WildCard App ID option and set it to \"*\"  Step 2:  Create a  new Development Profile  and for App Id select the one created in step 1.  Step 3:  Select your  certificate(s) and device(s)  and click next.  Step 4:  Set the profile name and  generate the profile .  Step 5:  Download the profile and open it with a text editor.  Step 6:  Search for the  UUID  and the string for it is your  identity code .   Now simply include your UDID and device name in your desired capabilities:  {\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari'\n}", 
            "title": "Automatic SafariLauncher configuration"
        }, 
        {
            "location": "/drivers/ios-uiautomation-safari-launcher/#manual-safarilauncher-configuration", 
            "text": "Note:  This procedure assumes you have  Xcode  7.3 or 7.3.1.  It is possible to use the version of  SafariLauncher \nthat comes with the  appium-ios-driver ,\nbut if you do, each time you update Appium the procedure will have to be done again.  To get a local copy of  SafariLauncher , first clone it from  GitHub :  git clone https://github.com/snevesbarros/SafariLauncher.git  Once you have a local copy of the source code for the  SafariLauncher  app, open Xcode  and then open the  SafariLauncher  project   In the  SafariLauncher  target pane you will see an error, saying that there needs\nto be a provisioning profile for this app   In order to fix this, you first need to enter a \"Bundle Identifier\" for the app. The default\nexpected by Appium is  com.bytearc.SafariLauncher , but this might not be available\nfor you to build. In that case, choose something else, and make note of it. Then\nchoose a \"Team\", and allow the provisioning profile to be created   Finally, make sure your device is connected to the computer, and choose it as the\ntarget   And run the build and install actions to compile the app and push it onto your\ndevice   Now you have a working  SafariLauncher  on your device. The app itself is a plain\nscreen that will launch  Safari  at the click of a button   The last step is only necessary if you chose a bundle identifier for the app that\nis different from the default ( com.bytearc.SafariLauncher ). If you did, it is\nnecessary to send that to Appium when creating a session, using the  bundleId \ndesired capability:  {\n  udid: '...',\n  deviceName: '...',\n  platformName: 'iOS',\n  platformVersion: '9.3',\n  browserName: 'Safari',\n  bundleId: 'com.imurchie.SafariLauncher'\n}", 
            "title": "Manual SafariLauncher configuration"
        }, 
        {
            "location": "/drivers/android-uiautomator/", 
            "text": "The UiAutomator Driver for Android\n\n\nAppium's older support for automating Android apps is via the \nUiAutomator\n\ndriver.  \n(New to Appium? Read our \nintroduction to Appium drivers\n)\n.\nThis driver leverages Google's\n\nUiAutomator\n\ntechnology to launch automation sessions on a device.\n\n\nDevelopment of the UiAutomator driver happens at the\n\nappium-android-driver\n\nrepo.\n\n\nWe recommend you upgrade to the \nUiAutomator2 Driver\n\nand use that driver instead, since this driver will not be supported moving\nforward.\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nJava 7 installed and configured correctly for your platform\n\n\nMac, Windows, or Linux OS with the ability to run the Android SDK\n\n\n\n\nUsage\n\n\nThe way to start a session using the UiAutomator driver is to include the\n\nplatformName\n \ncapability\n in your \nnew session request\n, with\nthe value \nAndroid\n. Of course, you must also include appropriate\n\nplatformVersion\n, \ndeviceName\n, and \napp\n capabilities, at a minimum. In the\ncase of this driver, for Appium versions below \n1.14.0\n no \nautomationName\n\ncapability should be used, while for version \n1.14.0\n and above the \nautomationName\n\nshould be set to \nUiAutomator1\n.\n\n\nIt is highly recommended to also set the \nappPackage\n and \nappActivity\n\ncapabilities in order to let Appium know exactly which package and activity\nshould be launched for your application. Otherwise, Appium will try to\ndetermine these automatically from your app manifest.\n\n\nCapabilities\n\n\nThe UiAutomator driver supports a number of standard \nAppium\ncapabilities\n, but has an additional\nset of capabilities that modulate the behavior of the driver. These can be\nfound currently at the \nAndroid\nsection\n of the\naforementioned doc.\n\n\nFor web tests, to automate Chrome instead of your own application, leave the\n\napp\n capability empty and instead set the \nbrowserName\n capability to\n\nChrome\n. Note that you are responsible for ensuring that Chrome is on the\nemulator/device, and that it is of a version compatible with Chromedriver.\n\n\nCommands\n\n\nTo see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the UiAutomator driver, see the \nAPI\nReference\n.\n\n\nSetup\n\n\nGiven that the setup instructions for this driver and the newer UiAutomator2\nDriver are identical, please refer to the system, emulator, and device setup\ninstructions on the \nUiAutomator2\nDriver\n doc.", 
            "title": "UIAutomator (Android)"
        }, 
        {
            "location": "/drivers/android-uiautomator/#the-uiautomator-driver-for-android", 
            "text": "Appium's older support for automating Android apps is via the  UiAutomator \ndriver.   (New to Appium? Read our  introduction to Appium drivers ) .\nThis driver leverages Google's UiAutomator \ntechnology to launch automation sessions on a device.  Development of the UiAutomator driver happens at the appium-android-driver \nrepo.  We recommend you upgrade to the  UiAutomator2 Driver \nand use that driver instead, since this driver will not be supported moving\nforward.", 
            "title": "The UiAutomator Driver for Android"
        }, 
        {
            "location": "/drivers/android-uiautomator/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Java 7 installed and configured correctly for your platform  Mac, Windows, or Linux OS with the ability to run the Android SDK", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/android-uiautomator/#usage", 
            "text": "The way to start a session using the UiAutomator driver is to include the platformName   capability  in your  new session request , with\nthe value  Android . Of course, you must also include appropriate platformVersion ,  deviceName , and  app  capabilities, at a minimum. In the\ncase of this driver, for Appium versions below  1.14.0  no  automationName \ncapability should be used, while for version  1.14.0  and above the  automationName \nshould be set to  UiAutomator1 .  It is highly recommended to also set the  appPackage  and  appActivity \ncapabilities in order to let Appium know exactly which package and activity\nshould be launched for your application. Otherwise, Appium will try to\ndetermine these automatically from your app manifest.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/android-uiautomator/#capabilities", 
            "text": "The UiAutomator driver supports a number of standard  Appium\ncapabilities , but has an additional\nset of capabilities that modulate the behavior of the driver. These can be\nfound currently at the  Android\nsection  of the\naforementioned doc.  For web tests, to automate Chrome instead of your own application, leave the app  capability empty and instead set the  browserName  capability to Chrome . Note that you are responsible for ensuring that Chrome is on the\nemulator/device, and that it is of a version compatible with Chromedriver.", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/android-uiautomator/#commands", 
            "text": "To see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the UiAutomator driver, see the  API\nReference .", 
            "title": "Commands"
        }, 
        {
            "location": "/drivers/android-uiautomator/#setup", 
            "text": "Given that the setup instructions for this driver and the newer UiAutomator2\nDriver are identical, please refer to the system, emulator, and device setup\ninstructions on the  UiAutomator2\nDriver  doc.", 
            "title": "Setup"
        }, 
        {
            "location": "/drivers/android-uiautomator2/", 
            "text": "The UiAutomator2 Driver for Android\n\n\nAppium's flagship support for automating Android apps is via the \nUiAutomator2\n\ndriver.  \n(New to Appium? Read our \nintroduction to Appium drivers\n)\n.\nThis driver leverages Google's\n\nUiAutomator2\n\ntechnology to facilitate automation on a device or emulator.\n\n\nDevelopment of the UiAutomator2 driver happens at the\n\nappium-uiautomator2-driver\n\nrepo.\n\n\nOlder Android-based drivers include:\n* The \nUiAutomator Driver\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nJava 8 installed and configured correctly for your platform\n\n\nMac, Windows, or Linux OS with the ability to run the Android SDK\n\n\nThe minimum required Android SDK Build Tools version is 24\n\n\n\n\nFurther, the UiAutomator2 driver does not support Android versions below 5.0\n(Lollipop, API level 21). If you are automating such versions, consider using\nthe \nUiAutomator driver\n;\n\n\nUsage\n\n\nThe way to start a session using the UiAutomator2 driver is to include the\n\nautomationName\n \ncapability\n in your \nnew session request\n, with\nthe value \nUiAutomator2\n. Of course, you must also include appropriate\n\nplatformName\n (=\nAndroid\n), \nplatformVersion\n, \ndeviceName\n, and \napp\n\ncapabilities, at a minimum.\n\n\nIt is highly recommended to also set the \nappPackage\n and \nappActivity\n\ncapabilities in order to let Appium know exactly which package and activity\nshould be launched for your application. Otherwise, Appium will try to\ndetermine these automatically from your app manifest.\n\n\nCapabilities\n\n\nThe UiAutomator2 driver supports a number of standard \nAppium\ncapabilities\n, but has an additional\nset of capabilities that modulate the behavior of the driver. These can be\nfound currently at the \nAndroid\nsection\n of the\naforementioned doc.\n\n\nFor web tests, to automate Chrome instead of your own application, leave the\n\napp\n capability empty and instead set the \nbrowserName\n capability to\n\nChrome\n. Note that you are responsible for ensuring that Chrome is on the\nemulator/device, and that it is of a \nversion compatible with\nChromedriver\n.\n\n\nCommands\n\n\nTo see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the UiAutomator2 driver, see the \nAPI\nReference\n.\n\n\nBasic Setup\n\n\n\n\n\n\nEnsure that you have Appium's general dependencies (e.g., Node\n   \n NPM) installed and configured.\n\n\n\n\n\n\nEnsure that Java (the JDK, not just the JRE) is installed and Java binaries\n   are added to your path. The instructions for this step differ for Mac/Linux\n   and for Windows. Please consult platform-specific documentation, as this is\n   a common task. An example of how to change the PATH on Windows is\n   \nhere\n.\n\n\n\n\n\n\nEnsure that the \nJAVA_HOME\n environment variable is also set to the JDK\n   path. For Mac/Linux, for example (the specifics of this path will vary\n   greatly by system), put this in your login script:\n\n\nexport JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\"\n\n\n\n\n\n\nOn Windows, this will be done by setting the environment variable in the\n   control panel, using the same strategy as for setting PATH above.\n   \nAndroid Studio\n also has JDK\n   in the path like \n/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home\n (Mac).\n   You can specify the path, too.\n\n\n\n\n\n\nInstall the \nAndroid SDK\n. The\n   supported way of doing this nowadays is to use \nAndroid\n   Studio\n. Use the provided\n   GUI to install the Android SDK to a path of your choosing.\n\n\n\n\n\n\nSet the \nANDROID_HOME\n environment variable to match this path. For example,\n   if you installed the SDK to \n/usr/local/adt\n, then there will typically be\n   a \nsdk\n folder inside of that which contains the SDK files. In that case, on\n   Mac and Linux, add the following line to your login script (e.g.,\n   \n~/.bashrc\n, \n~/.bash_profile\n, etc...):\n\n\nexport ANDROID_HOME=\"/usr/local/adt/sdk\"\n\n\n\n\n\n\nOn Windows, follow the same steps as before to set the environment variable\n   in the control panel.\n\n\n\n\n\n\nUsing the SDK manager, ensure you have installed the SDK for Android API\n   levels you wish to automate (e.g., 24).\n\n\n\n\n\n\nOn Windows, ensure that you always run Appium in Administrator mode.\n\n\n\n\n\n\nAt this point, your general system setup is done. Follow the steps below based\non whether you want to automate an emulator or a real device. In addition you\nwill need your app's APK (preferably built in Debug mode), whose path or URL\nyou will use as the value of the \napp\n capability when running your tests.\n\n\nEmulator Setup\n\n\nTo run tests on emulators, use the AVD Manager included with Android Studio or\nthe SDK. With this tool, create the emulator that matches your needs. With the\nemulator launched, Appium will automatically find and use it for its tests.\nOtherwise, if you specify the \navd\n capability with the value matching the name\nof your emulator, then Appium will attempt to launch the emulator for you.\n\n\nAdditional tips for emulators:\n\n\n\n\nThere exists a hardware accelerated emulator for Android, though it has its\n  own limitations. It can be installed from Intel's website, or through the\n  Android SDK Manager. For more information, go\n  \nhere\n.\n\n\nMake sure that \nhw.battery=yes\n in your AVD's \nconfig.ini\n, if you want to\n  run any of the Appium tests, or use any of the power commands. (As of Android\n  5.0, this is the default.)\n\n\n\n\nReal Device Setup\n\n\nFor Android automation, no additional setup is required for testing on real\ndevices, other than these simple requirements:\n\n\n\n\nEnsure that \nDeveloper\n  mode\n is turned\n  on for the device.\n\n\nEnsure that the device is connected via USB to the Appium host, and can be\n  seen by \nADB\n\n  (run \nadb devices\n to make sure).\n\n\nEnsure that \"Verify Apps\" in settings is disabled, to allow Appium's helper\n  apps to function without manual intervention.\n\n\n\n\n(For some specific commands, the device might need to be rooted, though this is\nnot the norm.)", 
            "title": "UIAutomator2 (Android)"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#the-uiautomator2-driver-for-android", 
            "text": "Appium's flagship support for automating Android apps is via the  UiAutomator2 \ndriver.   (New to Appium? Read our  introduction to Appium drivers ) .\nThis driver leverages Google's UiAutomator2 \ntechnology to facilitate automation on a device or emulator.  Development of the UiAutomator2 driver happens at the appium-uiautomator2-driver \nrepo.  Older Android-based drivers include:\n* The  UiAutomator Driver", 
            "title": "The UiAutomator2 Driver for Android"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Java 8 installed and configured correctly for your platform  Mac, Windows, or Linux OS with the ability to run the Android SDK  The minimum required Android SDK Build Tools version is 24   Further, the UiAutomator2 driver does not support Android versions below 5.0\n(Lollipop, API level 21). If you are automating such versions, consider using\nthe  UiAutomator driver ;", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#usage", 
            "text": "The way to start a session using the UiAutomator2 driver is to include the automationName   capability  in your  new session request , with\nthe value  UiAutomator2 . Of course, you must also include appropriate platformName  (= Android ),  platformVersion ,  deviceName , and  app \ncapabilities, at a minimum.  It is highly recommended to also set the  appPackage  and  appActivity \ncapabilities in order to let Appium know exactly which package and activity\nshould be launched for your application. Otherwise, Appium will try to\ndetermine these automatically from your app manifest.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#capabilities", 
            "text": "The UiAutomator2 driver supports a number of standard  Appium\ncapabilities , but has an additional\nset of capabilities that modulate the behavior of the driver. These can be\nfound currently at the  Android\nsection  of the\naforementioned doc.  For web tests, to automate Chrome instead of your own application, leave the app  capability empty and instead set the  browserName  capability to Chrome . Note that you are responsible for ensuring that Chrome is on the\nemulator/device, and that it is of a  version compatible with\nChromedriver .", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#commands", 
            "text": "To see the various commands Appium supports, and specifically for information\non how the commands map to behaviors for the UiAutomator2 driver, see the  API\nReference .", 
            "title": "Commands"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#basic-setup", 
            "text": "Ensure that you have Appium's general dependencies (e.g., Node\n     NPM) installed and configured.    Ensure that Java (the JDK, not just the JRE) is installed and Java binaries\n   are added to your path. The instructions for this step differ for Mac/Linux\n   and for Windows. Please consult platform-specific documentation, as this is\n   a common task. An example of how to change the PATH on Windows is\n    here .    Ensure that the  JAVA_HOME  environment variable is also set to the JDK\n   path. For Mac/Linux, for example (the specifics of this path will vary\n   greatly by system), put this in your login script:  export JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\"    On Windows, this will be done by setting the environment variable in the\n   control panel, using the same strategy as for setting PATH above.\n    Android Studio  also has JDK\n   in the path like  /Applications/Android Studio.app/Contents/jre/jdk/Contents/Home  (Mac).\n   You can specify the path, too.    Install the  Android SDK . The\n   supported way of doing this nowadays is to use  Android\n   Studio . Use the provided\n   GUI to install the Android SDK to a path of your choosing.    Set the  ANDROID_HOME  environment variable to match this path. For example,\n   if you installed the SDK to  /usr/local/adt , then there will typically be\n   a  sdk  folder inside of that which contains the SDK files. In that case, on\n   Mac and Linux, add the following line to your login script (e.g.,\n    ~/.bashrc ,  ~/.bash_profile , etc...):  export ANDROID_HOME=\"/usr/local/adt/sdk\"    On Windows, follow the same steps as before to set the environment variable\n   in the control panel.    Using the SDK manager, ensure you have installed the SDK for Android API\n   levels you wish to automate (e.g., 24).    On Windows, ensure that you always run Appium in Administrator mode.    At this point, your general system setup is done. Follow the steps below based\non whether you want to automate an emulator or a real device. In addition you\nwill need your app's APK (preferably built in Debug mode), whose path or URL\nyou will use as the value of the  app  capability when running your tests.", 
            "title": "Basic Setup"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#emulator-setup", 
            "text": "To run tests on emulators, use the AVD Manager included with Android Studio or\nthe SDK. With this tool, create the emulator that matches your needs. With the\nemulator launched, Appium will automatically find and use it for its tests.\nOtherwise, if you specify the  avd  capability with the value matching the name\nof your emulator, then Appium will attempt to launch the emulator for you.  Additional tips for emulators:   There exists a hardware accelerated emulator for Android, though it has its\n  own limitations. It can be installed from Intel's website, or through the\n  Android SDK Manager. For more information, go\n   here .  Make sure that  hw.battery=yes  in your AVD's  config.ini , if you want to\n  run any of the Appium tests, or use any of the power commands. (As of Android\n  5.0, this is the default.)", 
            "title": "Emulator Setup"
        }, 
        {
            "location": "/drivers/android-uiautomator2/#real-device-setup", 
            "text": "For Android automation, no additional setup is required for testing on real\ndevices, other than these simple requirements:   Ensure that  Developer\n  mode  is turned\n  on for the device.  Ensure that the device is connected via USB to the Appium host, and can be\n  seen by  ADB \n  (run  adb devices  to make sure).  Ensure that \"Verify Apps\" in settings is disabled, to allow Appium's helper\n  apps to function without manual intervention.   (For some specific commands, the device might need to be rooted, though this is\nnot the norm.)", 
            "title": "Real Device Setup"
        }, 
        {
            "location": "/drivers/android-espresso/", 
            "text": "The Espresso Driver for Android\n\n\nAppium currently has support for the\n\nEspresso\n\nautomation technology via its own Espresso driver. This driver works by kicking\noff an Espresso run on a device, with our own automation server as part of the\nEspresso test APK.  Appium can then communicate with this automation server and\ntrigger Espresso commands as the result of Appium client calls.\n\n\nDevelopment of the Espresso driver happens at the\n\nappium-espresso-driver\n\nrepo.\n\n\nAppium also supports Android automation using the\n\nUiAutomator2 Driver\n.)\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nJava 8 installed and configured correctly for your platform\n\n\nMac, Windows, or Linux OS with the ability to run the Android SDK\n\n\nThe minimum required Android SDK Build Tools version is 24\n\n\n\n\nUsage\n\n\nThe way to start a session using the Espresso driver is to include the\n\nautomationName\n \ncapability\n in your \nnew session request\n, with\nthe value \nEspresso\n. Of course, you must also include appropriate\n\nplatformName\n (=\nAndroid\n), \nplatformVersion\n, \ndeviceName\n, and \napp\n\ncapabilities, at a minimum.\n\n\nCapabilities\n\n\nThe Espresso driver currently supports a subset of the standard \nAndroid\ncapabilities\n.\n\n\nSetup\n\n\nSetup for the Espresso driver basically entails getting the Android SDK and\nbuild tools ready to go. You can follow the instructions at the \nUiAutomator2\nDriver doc\n, since the steps are the same.", 
            "title": "Espresso (Android)"
        }, 
        {
            "location": "/drivers/android-espresso/#the-espresso-driver-for-android", 
            "text": "Appium currently has support for the Espresso \nautomation technology via its own Espresso driver. This driver works by kicking\noff an Espresso run on a device, with our own automation server as part of the\nEspresso test APK.  Appium can then communicate with this automation server and\ntrigger Espresso commands as the result of Appium client calls.  Development of the Espresso driver happens at the appium-espresso-driver \nrepo.  Appium also supports Android automation using the UiAutomator2 Driver .)", 
            "title": "The Espresso Driver for Android"
        }, 
        {
            "location": "/drivers/android-espresso/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Java 8 installed and configured correctly for your platform  Mac, Windows, or Linux OS with the ability to run the Android SDK  The minimum required Android SDK Build Tools version is 24", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/android-espresso/#usage", 
            "text": "The way to start a session using the Espresso driver is to include the automationName   capability  in your  new session request , with\nthe value  Espresso . Of course, you must also include appropriate platformName  (= Android ),  platformVersion ,  deviceName , and  app \ncapabilities, at a minimum.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/android-espresso/#capabilities", 
            "text": "The Espresso driver currently supports a subset of the standard  Android\ncapabilities .", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/android-espresso/#setup", 
            "text": "Setup for the Espresso driver basically entails getting the Android SDK and\nbuild tools ready to go. You can follow the instructions at the  UiAutomator2\nDriver doc , since the steps are the same.", 
            "title": "Setup"
        }, 
        {
            "location": "/drivers/windows/", 
            "text": "The Windows Driver\n\n\nAppium has the ability to automate Windows PC Desktop apps. This driver relies\non a project from Microsoft called\n\nWinAppDriver\n, which is an\nAppium-compatible WebDriver server for Windows Desktop apps (and more in the\nfuture). WinAppDriver is often abbreviated \"WAD\". WAD is bundled with Appium\nand does not need to be installed separately.\n\n\nThe Windows Driver supports testing of \nUniversal Windows Platform (UWP)\n and\n\nClassic Windows (Win32)\n applications.\n\n\nIn addition to the WAD repo, development of the Appium driver takes place at\nthe \nappium-windows-driver\n\nrepo.\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nWindows PC with Windows 10 or up\n\n\nAbility to enter Administrator mode\n\n\n\n\nUsage\n\n\nThe way to start a session using the Windows driver is to include the\n\nplatformName\n \ncapability\n in your \nnew session request\n, with\nthe value \nWindows\n. Also, ensure that you set the \ndeviceName\n capability to\n\nWindowsPC\n as well.  Of course, you must also include an appropriate \napp\n\ncapability, at a minimum (see below).\n\n\nCapabilities\n\n\nThe Windows driver supports a number of standard \nAppium\ncapabilities\n. See below for how these\nshould be used specifically with the Windows driver.\n\n\nSetup\n\n\nTo test a Windows app, simply make sure you have turned \ndeveloper\nmode\n\non.\n\n\nWhen running Appium (whether Appium Desktop or from the command line), ensure\nthat you have started the app / cmd prompt as an administrator.\n\n\nWriting Tests for the Windows Driver\n\n\nYou could begin by taking a look at some existing samples:\n\n\nJava Samples\n\n1. Open the sample folder as an existing project in a Java IDE such as\n   IntelliJ. For example:\n   \nCalculatorTest\n\n2. In the Java IDE build and run the test\n\n\nC# Samples\n\n1. Pull and open \nCalculatorTest.sln\n under\n   \nCalculatorTest\n\n2. In Visual Studio 2015 with the test solution open build the test and select\n   \nTest \n Run \n All Tests\n\n\nJavascript/node Samples\n\n\n\n\n\n\nUsing selenium-webdriver\n\n\nExamples on selenium-appium\n\n\nselenium-webdriver-winappdriver-example\n\n\n\n\n\n\nIf you want to write tests from scratch, you can choose any programming\nlanguage or tools supported by Appium/Selenium to write your test scripts. In\nthe example below, we will author the test script in C# using Microsoft Visual\nStudio 2015.\n\n\nCreate Test Project\n\n\n\n\nOpen \nMicrosoft Visual Studio 2015\n\n\nCreate the test project and solution. I.e. select \nNew Project \n Templates \n Visual C# \n Test \n Unit Test Project\n\n\nOnce created, select \nProject \n Manage NuGet Packages... \n Browse\n and\n   search for \nAppium.WebDriver\n\n\nInstall the \nAppium.WebDriver\n NuGet packages for the test project\n\n\nStart writing your test (see sample code under [samples])\n\n\n\n\nUniversal Windows Platform App Testing\n\n\nTo test a UWP app, you can use any Selenium supported language and simply\nspecify the \nApplication Id\n for the app under test in the \napp\n\ncapabilities entry. Below is an example of creating a test session for Windows\n\nAlarms \n Clock\n app written in C#:\n\n\n// Launch the AlarmClock app\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability(\napp\n, \nMicrosoft.WindowsAlarms_8wekyb3d8bbwe!App\n);\nAlarmClockSession = new WindowsDriver\nWindowsElement\n(new Uri(\nhttp://127.0.0.1:4723\n), appCapabilities);\n// Control the AlarmClock app\nAlarmClockSession.FindElementByAccessibilityId(\nAddAlarmButton\n).Click();\nAlarmClockSession.FindElementByAccessibilityId(\nAlarmNameTextBox\n).Clear();\n\n\n\n\nWhen testing the application you authored yourself, you can find the \nApplication Id\n in the generated \nAppX\\vs.appxrecipe\n file under \nRegisteredUserNmodeAppID\n node. E.g. \nc24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App\n\n\nClassic Windows App Testing\n\n\nTo test a classic Windows app, you can also use any Selenium supported language\nand specify the \nfull executable path\n for the app under test in the \napp\n\ncapabilities entry. Below is an example of creating a test session for Windows\n\nNotepad\n app:\n\n\n// Launch Notepad\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability(\napp\n, @\nC:\\Windows\\System32\\notepad.exe\n);\nNotepadSession = new WindowsDriver\nWindowsElement\n(new Uri(\nhttp://127.0.0.1:4723\n), appCapabilities);\n// Control the Notepad app\nNotepadSession.FindElementByClassName(\nEdit\n).SendKeys(\nThis is some text\n);\n\n\n\n\nStarting a Session\n\n\nAs mentioned above, you should additionally use these capabilities to ensure\nyou are getting a Windows App automation session:\n\n\nplatformName\n: \nWindows\n\n\ndeviceName\n: \nWindowsPC\n\n\napp\n: the appID of the Windows app for testing, or the path to the .exe file\n\n\nInspecting UI Elements\n\n\nMicrosoft Visual Studio 2015 by default includes Windows SDK that provides\ngreat tool to inspect the application you are testing. This tool allows you to\nsee every UI element/node that you can query using Windows Application Driver.\nThis \ninspect.exe\n tool can be found under the Windows SDK folder such as\n\nC:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86\n. The tool will show various\nelement attributes. The table below shows you which Appium locator strategy you\nshould use to find elements with the corresponding attributes.\n\n\n\n\n\n\n\n\nLocator Strategy\n\n\nMatched Attribute\n\n\n\n\n\n\n\n\n\n\naccessibility id\n\n\nAutomationId\n\n\n\n\n\n\nclass name\n\n\nClassName\n\n\n\n\n\n\nname\n\n\nName", 
            "title": "Windows"
        }, 
        {
            "location": "/drivers/windows/#the-windows-driver", 
            "text": "Appium has the ability to automate Windows PC Desktop apps. This driver relies\non a project from Microsoft called WinAppDriver , which is an\nAppium-compatible WebDriver server for Windows Desktop apps (and more in the\nfuture). WinAppDriver is often abbreviated \"WAD\". WAD is bundled with Appium\nand does not need to be installed separately.  The Windows Driver supports testing of  Universal Windows Platform (UWP)  and Classic Windows (Win32)  applications.  In addition to the WAD repo, development of the Appium driver takes place at\nthe  appium-windows-driver \nrepo.", 
            "title": "The Windows Driver"
        }, 
        {
            "location": "/drivers/windows/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Windows PC with Windows 10 or up  Ability to enter Administrator mode", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/windows/#usage", 
            "text": "The way to start a session using the Windows driver is to include the platformName   capability  in your  new session request , with\nthe value  Windows . Also, ensure that you set the  deviceName  capability to WindowsPC  as well.  Of course, you must also include an appropriate  app \ncapability, at a minimum (see below).", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/windows/#capabilities", 
            "text": "The Windows driver supports a number of standard  Appium\ncapabilities . See below for how these\nshould be used specifically with the Windows driver.", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/windows/#setup", 
            "text": "To test a Windows app, simply make sure you have turned  developer\nmode \non.  When running Appium (whether Appium Desktop or from the command line), ensure\nthat you have started the app / cmd prompt as an administrator.", 
            "title": "Setup"
        }, 
        {
            "location": "/drivers/windows/#writing-tests-for-the-windows-driver", 
            "text": "You could begin by taking a look at some existing samples:  Java Samples \n1. Open the sample folder as an existing project in a Java IDE such as\n   IntelliJ. For example:\n    CalculatorTest \n2. In the Java IDE build and run the test  C# Samples \n1. Pull and open  CalculatorTest.sln  under\n    CalculatorTest \n2. In Visual Studio 2015 with the test solution open build the test and select\n    Test   Run   All Tests  Javascript/node Samples    Using selenium-webdriver  Examples on selenium-appium  selenium-webdriver-winappdriver-example    If you want to write tests from scratch, you can choose any programming\nlanguage or tools supported by Appium/Selenium to write your test scripts. In\nthe example below, we will author the test script in C# using Microsoft Visual\nStudio 2015.", 
            "title": "Writing Tests for the Windows Driver"
        }, 
        {
            "location": "/drivers/windows/#create-test-project", 
            "text": "Open  Microsoft Visual Studio 2015  Create the test project and solution. I.e. select  New Project   Templates   Visual C#   Test   Unit Test Project  Once created, select  Project   Manage NuGet Packages...   Browse  and\n   search for  Appium.WebDriver  Install the  Appium.WebDriver  NuGet packages for the test project  Start writing your test (see sample code under [samples])", 
            "title": "Create Test Project"
        }, 
        {
            "location": "/drivers/windows/#universal-windows-platform-app-testing", 
            "text": "To test a UWP app, you can use any Selenium supported language and simply\nspecify the  Application Id  for the app under test in the  app \ncapabilities entry. Below is an example of creating a test session for Windows Alarms   Clock  app written in C#:  // Launch the AlarmClock app\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability( app ,  Microsoft.WindowsAlarms_8wekyb3d8bbwe!App );\nAlarmClockSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities);\n// Control the AlarmClock app\nAlarmClockSession.FindElementByAccessibilityId( AddAlarmButton ).Click();\nAlarmClockSession.FindElementByAccessibilityId( AlarmNameTextBox ).Clear();  When testing the application you authored yourself, you can find the  Application Id  in the generated  AppX\\vs.appxrecipe  file under  RegisteredUserNmodeAppID  node. E.g.  c24c8163-548e-4b84-a466-530178fc0580_scyf5npe3hv32!App", 
            "title": "Universal Windows Platform App Testing"
        }, 
        {
            "location": "/drivers/windows/#classic-windows-app-testing", 
            "text": "To test a classic Windows app, you can also use any Selenium supported language\nand specify the  full executable path  for the app under test in the  app \ncapabilities entry. Below is an example of creating a test session for Windows Notepad  app:  // Launch Notepad\nDesiredCapabilities appCapabilities = new DesiredCapabilities();\nappCapabilities.SetCapability( app , @ C:\\Windows\\System32\\notepad.exe );\nNotepadSession = new WindowsDriver WindowsElement (new Uri( http://127.0.0.1:4723 ), appCapabilities);\n// Control the Notepad app\nNotepadSession.FindElementByClassName( Edit ).SendKeys( This is some text );", 
            "title": "Classic Windows App Testing"
        }, 
        {
            "location": "/drivers/windows/#starting-a-session", 
            "text": "As mentioned above, you should additionally use these capabilities to ensure\nyou are getting a Windows App automation session:  platformName :  Windows  deviceName :  WindowsPC  app : the appID of the Windows app for testing, or the path to the .exe file", 
            "title": "Starting a Session"
        }, 
        {
            "location": "/drivers/windows/#inspecting-ui-elements", 
            "text": "Microsoft Visual Studio 2015 by default includes Windows SDK that provides\ngreat tool to inspect the application you are testing. This tool allows you to\nsee every UI element/node that you can query using Windows Application Driver.\nThis  inspect.exe  tool can be found under the Windows SDK folder such as C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x86 . The tool will show various\nelement attributes. The table below shows you which Appium locator strategy you\nshould use to find elements with the corresponding attributes.     Locator Strategy  Matched Attribute      accessibility id  AutomationId    class name  ClassName    name  Name", 
            "title": "Inspecting UI Elements"
        }, 
        {
            "location": "/drivers/safari/", 
            "text": "The Safari Driver\n\n\nSafari driver has been added to Appium since version 1.20. This driver\nis a wrapper over Apple's \nsafaridriver\n\nbinary, which is included to the standard macOS distribution and implements communication with either\ndesktop or mobile Safari browser via \nW3C WebDriver protocol\n.\n\n\nDevelopment of the Safari driver happens at the\n\nappium-safari-driver\n\nrepo.\n\n\nAppium also supports mobile Safari automation and Safari web views automation using the\n\nappium-remote-debugger\n. This module is\nused to implement context switching feature with XCUITest automation name. It is more universal\nand flexible than the current Safari driver, however it is using the undocumented WebKit communication\nprotocol under the hood. Which means the development of it and the effort to keep it in working state\nis comparably high while the list of supported features is smaller. On the other hand \nsafaridriver\n\nis maintained by Apple, which means it is always in sync with the most recent browser\nand communication protocol requirements.\n\n\nLong story short, it makes sense to prefer this driver if it is necessary to only automate\na web application that only works in Safari browser (either mobile or desktop). In case it is necessary to interact with native context or switch between different applications/contexts while automating your scenario\nthen the obvious choice would be either \nXCUITest Driver\n\n(for the mobile platform) or \nMac driver\n (for the desktop platform).\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nRun the \nsafaridriver --enable\n command from the macOS terminal and provide your administrator password before any automated session will be executed. This only should be done once.\n\n\nIn order to automate Safari on real devices it is necessary to enable Remote Automation switch in \nSettings \u2192 Safari \u2192 Advanced \u2192 Remote Automation\n for these particular devices and trust them on the target host. The device's screen must not be locked while starting tests.\n\n\nOnly macOS (High Sierra or newer) is supported as the host platform.\n\n\nOnly iOS 13 and newer is supported for mobile browser automation. As it is stated in the WebKit blog \narticle\n, Safari for iOS does not allow WebDriver-initiated navigations to be handled outside of Safari. In other words, clicking a tel:// link will not offer to place a phone call, and clicking an app store link will not redirect the user to the App Store. Similarly, non-Safari content displayed by the system\u2013such as update dialogs, app notifications, incoming calls, etc.\u2013are suppressed while a WebDriver session is active.\n\n\n\n\nUsage\n\n\nThe way to start a session using the Safari driver is to include the\n\nautomationName\n capability in your new session request, with\nthe value \nSafari\n. Of course, you must also include appropriate\n\nplatformName\n (\nMac\n or \niOS\n). Read\nhttps://github.com/appium/appium-safari-driver/blob/master/README.md for\nmore details.\n\n\nCapabilities\n\n\nThe list of available driver capabilities could be found at\nhttps://github.com/appium/appium-safari-driver/blob/master/README.md", 
            "title": "Safari (Mac/iOS)"
        }, 
        {
            "location": "/drivers/safari/#the-safari-driver", 
            "text": "Safari driver has been added to Appium since version 1.20. This driver\nis a wrapper over Apple's  safaridriver \nbinary, which is included to the standard macOS distribution and implements communication with either\ndesktop or mobile Safari browser via  W3C WebDriver protocol .  Development of the Safari driver happens at the appium-safari-driver \nrepo.  Appium also supports mobile Safari automation and Safari web views automation using the appium-remote-debugger . This module is\nused to implement context switching feature with XCUITest automation name. It is more universal\nand flexible than the current Safari driver, however it is using the undocumented WebKit communication\nprotocol under the hood. Which means the development of it and the effort to keep it in working state\nis comparably high while the list of supported features is smaller. On the other hand  safaridriver \nis maintained by Apple, which means it is always in sync with the most recent browser\nand communication protocol requirements.  Long story short, it makes sense to prefer this driver if it is necessary to only automate\na web application that only works in Safari browser (either mobile or desktop). In case it is necessary to interact with native context or switch between different applications/contexts while automating your scenario\nthen the obvious choice would be either  XCUITest Driver \n(for the mobile platform) or  Mac driver  (for the desktop platform).", 
            "title": "The Safari Driver"
        }, 
        {
            "location": "/drivers/safari/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   Run the  safaridriver --enable  command from the macOS terminal and provide your administrator password before any automated session will be executed. This only should be done once.  In order to automate Safari on real devices it is necessary to enable Remote Automation switch in  Settings \u2192 Safari \u2192 Advanced \u2192 Remote Automation  for these particular devices and trust them on the target host. The device's screen must not be locked while starting tests.  Only macOS (High Sierra or newer) is supported as the host platform.  Only iOS 13 and newer is supported for mobile browser automation. As it is stated in the WebKit blog  article , Safari for iOS does not allow WebDriver-initiated navigations to be handled outside of Safari. In other words, clicking a tel:// link will not offer to place a phone call, and clicking an app store link will not redirect the user to the App Store. Similarly, non-Safari content displayed by the system\u2013such as update dialogs, app notifications, incoming calls, etc.\u2013are suppressed while a WebDriver session is active.", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/safari/#usage", 
            "text": "The way to start a session using the Safari driver is to include the automationName  capability in your new session request, with\nthe value  Safari . Of course, you must also include appropriate platformName  ( Mac  or  iOS ). Read\nhttps://github.com/appium/appium-safari-driver/blob/master/README.md for\nmore details.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/safari/#capabilities", 
            "text": "The list of available driver capabilities could be found at\nhttps://github.com/appium/appium-safari-driver/blob/master/README.md", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/gecko/", 
            "text": "The Gecko Driver\n\n\nGecko driver has been added to Appium since version 1.20. This driver\nis a wrapper over Mozilla's \ngeckodriver\n\nbinary, which implements communication with either\ndesktop/mobile Gecko-based browsers like Firefox or Gecko-based web views (on mobile)\nvia \nW3C WebDriver protocol\n.\n\n\nDevelopment of the Gecko driver happens at the\n\nappium-geckodriver\n\nrepo.\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nA supported browser must be installed on the destination platform. The recent browser releases (both desktop and mobile) could be retrieved from the official \ndownload page\n.\n\n\nThe corresponding executable driver binary for the target platform must be available in \nPATH\n under \ngeckodriver\n (\ngeckodriver.exe\n in Windows) name. Geckodriver build for different supported platforms could be retrieved from the GitHub \nReleases page\n.\n\n\nWindows (32/64 bit), Linux (32/64 bit) or macOS are supported as the host platforms.\n\n\nAndroid SDK\n must be installed if it is necessary to communicate with the browser or a web view on mobile devices. Also, the Emulator SDK is needed if automated tests are going to use Android emulators. For real Android devices it is necessary to make sure they have the \nonline\n status to in the \nadb devices -l\n output. The device's screen must not be locked.\n\n\n\n\nUsage\n\n\nThe way to start a session using the Gecko driver is to include the\n\nautomationName\n capability in your new session request, with\nthe value \nGecko\n. Of course, you must also include appropriate\n\nplatformName\n (\nMac\n/\nAndroid\n/\nWindows\n/\nLinux\n). Read\nhttps://github.com/appium/appium-geckodriver/blob/master/README.md for\nmore details.\n\n\nCapabilities\n\n\nThe list of available driver capabilities could be found at\nhttps://github.com/appium/appium-geckodriver/blob/master/README.md", 
            "title": "Gecko (Firefox)"
        }, 
        {
            "location": "/drivers/gecko/#the-gecko-driver", 
            "text": "Gecko driver has been added to Appium since version 1.20. This driver\nis a wrapper over Mozilla's  geckodriver \nbinary, which implements communication with either\ndesktop/mobile Gecko-based browsers like Firefox or Gecko-based web views (on mobile)\nvia  W3C WebDriver protocol .  Development of the Gecko driver happens at the appium-geckodriver \nrepo.", 
            "title": "The Gecko Driver"
        }, 
        {
            "location": "/drivers/gecko/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   A supported browser must be installed on the destination platform. The recent browser releases (both desktop and mobile) could be retrieved from the official  download page .  The corresponding executable driver binary for the target platform must be available in  PATH  under  geckodriver  ( geckodriver.exe  in Windows) name. Geckodriver build for different supported platforms could be retrieved from the GitHub  Releases page .  Windows (32/64 bit), Linux (32/64 bit) or macOS are supported as the host platforms.  Android SDK  must be installed if it is necessary to communicate with the browser or a web view on mobile devices. Also, the Emulator SDK is needed if automated tests are going to use Android emulators. For real Android devices it is necessary to make sure they have the  online  status to in the  adb devices -l  output. The device's screen must not be locked.", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/gecko/#usage", 
            "text": "The way to start a session using the Gecko driver is to include the automationName  capability in your new session request, with\nthe value  Gecko . Of course, you must also include appropriate platformName  ( Mac / Android / Windows / Linux ). Read\nhttps://github.com/appium/appium-geckodriver/blob/master/README.md for\nmore details.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/gecko/#capabilities", 
            "text": "The list of available driver capabilities could be found at\nhttps://github.com/appium/appium-geckodriver/blob/master/README.md", 
            "title": "Capabilities"
        }, 
        {
            "location": "/drivers/mac/", 
            "text": "The Mac Driver for OS X\n\n\nAppium has beta support for automation of OS X desktop applications.\nDevelopment of this driver happens at the\n\nappium-mac-driver\n, and relies on\na native OS X binary called\n\nAppiumForMac\n.\n\n\nRequirements and Support\n\n\n(In addition to Appium's general requirements)\n\n\n\n\nMac OS X 10.7\n\n\nThe AppiumForMac helper application downloaded and installed (see below)\n\n\n\n\nUsage\n\n\nThe way to start a session using the Mac driver is to include the\n\nplatformName\n \ncapability\n in your \nnew session request\n, with\nthe value \nMac\n. Also, ensure that you set the \ndeviceName\n capability to \nMac\n\nas well.  Of course, you must also include appropriate \nplatformVersion\n and\n\napp\n capabilities, at a minimum.\n\n\nGetting AppiumForMac\n\n\nCurrently, this driver does not ship with the AppiumForMac binary, which means,\nin order to automate Mac apps you must manually install the AppiumForMac\napplication and grant it the appropriate OS X Accessibility permissions.\n\n\nTo Install Appium for Mac:\n1. \nDownload\n   a release\n and\n   unzip the application into your \n/Applications\n folder\n2. Follow the \nbrief supplemental installation\n   instructions\n to\n   enable Appium to have access to OS X's Accessibility APIs\n\n\n(For more information on using AppiumForMac, check out the\n\ndocs\n)", 
            "title": "Mac"
        }, 
        {
            "location": "/drivers/mac/#the-mac-driver-for-os-x", 
            "text": "Appium has beta support for automation of OS X desktop applications.\nDevelopment of this driver happens at the appium-mac-driver , and relies on\na native OS X binary called AppiumForMac .", 
            "title": "The Mac Driver for OS X"
        }, 
        {
            "location": "/drivers/mac/#requirements-and-support", 
            "text": "(In addition to Appium's general requirements)   Mac OS X 10.7  The AppiumForMac helper application downloaded and installed (see below)", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/mac/#usage", 
            "text": "The way to start a session using the Mac driver is to include the platformName   capability  in your  new session request , with\nthe value  Mac . Also, ensure that you set the  deviceName  capability to  Mac \nas well.  Of course, you must also include appropriate  platformVersion  and app  capabilities, at a minimum.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/mac/#getting-appiumformac", 
            "text": "Currently, this driver does not ship with the AppiumForMac binary, which means,\nin order to automate Mac apps you must manually install the AppiumForMac\napplication and grant it the appropriate OS X Accessibility permissions.  To Install Appium for Mac:\n1.  Download\n   a release  and\n   unzip the application into your  /Applications  folder\n2. Follow the  brief supplemental installation\n   instructions  to\n   enable Appium to have access to OS X's Accessibility APIs  (For more information on using AppiumForMac, check out the docs )", 
            "title": "Getting AppiumForMac"
        }, 
        {
            "location": "/drivers/mac2/", 
            "text": "The Mac2Driver\n\n\nMac2Driver has been added to Appium since version 1.20.\nThis driver is for automating macOS applications using Apple's \nXCTest\n framework.\nIt provides more flexibility and features in comparison to the legacy\n\nMacDriver\n and is better compatible with operating system internals.\nThe driver operates in scope of \nW3C WebDriver protocol\n with several custom extensions to cover operating-system specific scenarios.\nThe original idea and parts of the source code are borrowed from the Facebook's \nWebDriverAgent\n project.\n\n\nDevelopment of the Mac2Driver happens at the\n\nappium-mac2-driver\n repo.\n\n\nRequirements and Support\n\n\nIn addition to Appium's general requirements:\n\n\n\n\nmacOS 10.15 or later\n\n\nXcode 12 or later should be installed\n\n\nXcode Helper app should be enabled for Accessibility access. The app itself could be usually found at \n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/Xcode Helper.app\n. In order to enable Accessibility access for it simply open the parent folder in Finder: \nopen /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/\n and drag \n drop the \nXcode Helper\n app to \nSecurity \n Privacy -\n Privacy -\n Accessibility\n list of your \nSystem Preferences\n. This action must only be done once.\n\n\n\n\nUsage\n\n\nThe way to start a session using the Mac2Driver is to include the\n\nautomationName\n capability in your new session request, with\nthe value \nMac2\n. Of course, you must also include appropriate\n\nplatformName\n (only \nMac\n is supported). Read\n\nMac2Driver documentation\n\nfor more details.\n\n\nCapabilities\n\n\nThe list of available driver capabilities could be found in\nthe driver \nREADME\n file.", 
            "title": "Mac2"
        }, 
        {
            "location": "/drivers/mac2/#the-mac2driver", 
            "text": "Mac2Driver has been added to Appium since version 1.20.\nThis driver is for automating macOS applications using Apple's  XCTest  framework.\nIt provides more flexibility and features in comparison to the legacy MacDriver  and is better compatible with operating system internals.\nThe driver operates in scope of  W3C WebDriver protocol  with several custom extensions to cover operating-system specific scenarios.\nThe original idea and parts of the source code are borrowed from the Facebook's  WebDriverAgent  project.  Development of the Mac2Driver happens at the appium-mac2-driver  repo.", 
            "title": "The Mac2Driver"
        }, 
        {
            "location": "/drivers/mac2/#requirements-and-support", 
            "text": "In addition to Appium's general requirements:   macOS 10.15 or later  Xcode 12 or later should be installed  Xcode Helper app should be enabled for Accessibility access. The app itself could be usually found at  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/Xcode Helper.app . In order to enable Accessibility access for it simply open the parent folder in Finder:  open /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Xcode/Agents/  and drag   drop the  Xcode Helper  app to  Security   Privacy -  Privacy -  Accessibility  list of your  System Preferences . This action must only be done once.", 
            "title": "Requirements and Support"
        }, 
        {
            "location": "/drivers/mac2/#usage", 
            "text": "The way to start a session using the Mac2Driver is to include the automationName  capability in your new session request, with\nthe value  Mac2 . Of course, you must also include appropriate platformName  (only  Mac  is supported). Read Mac2Driver documentation \nfor more details.", 
            "title": "Usage"
        }, 
        {
            "location": "/drivers/mac2/#capabilities", 
            "text": "The list of available driver capabilities could be found in\nthe driver  README  file.", 
            "title": "Capabilities"
        }, 
        {
            "location": "/commands/status/", 
            "text": "Status\n\n\nRetrieve the server\u2019s current status\n\n\nExample Usage\n\n\n// Java\ndriver.getStatus();\n\n\n\n\n\n# Python\nselenium.webdriver.common.utils.is_url_connectable(port)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.status();\n\n// wd example\nawait driver.status();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nremote_status\n\n# ruby_lib_core example\n@driver.remote_status\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nDescription\n\n\nReturns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.\n\n\nThe readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.\n\n\nImplementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\njavadoc.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /status\n\n\nURL Parameters\n\n\nNone\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbuild.version\n\n\nstring\n\n\nA generic release label (i.e. \"2.0rc3\")\n\n\n\n\n\n\nbuild.revision\n\n\nstring\n\n\nThe revision of the local source control client from which the server was built\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Status"
        }, 
        {
            "location": "/commands/status/#status", 
            "text": "Retrieve the server\u2019s current status", 
            "title": "Status"
        }, 
        {
            "location": "/commands/status/#example-usage", 
            "text": "// Java\ndriver.getStatus();  # Python\nselenium.webdriver.common.utils.is_url_connectable(port)  // Javascript\n// webdriver.io example\ndriver.status();\n\n// wd example\nawait driver.status();  # Ruby\n# ruby_lib example\nremote_status\n\n# ruby_lib_core example\n@driver.remote_status  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/status/#description", 
            "text": "Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.  The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.  Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/status/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/status/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/status/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  javadoc.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/status/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/status/#endpoint", 
            "text": "GET /status", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/status/#url-parameters", 
            "text": "None", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/status/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/status/#response", 
            "text": "name  type  description      build.version  string  A generic release label (i.e. \"2.0rc3\")    build.revision  string  The revision of the local source control client from which the server was built", 
            "title": "Response"
        }, 
        {
            "location": "/commands/status/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/mobile-command/", 
            "text": "Execute Mobile Command\n\n\nExecute a native mobile command\n\n\nExample Usage\n\n\n// Java\ndriver.executeScript(\nmobile: scroll\n, ImmutableMap.of(\ndirection\n, \ndown\n));\n\n\n\n\n\n# Python\nself.driver.execute_script(\nmobile: scroll\n, {'direction': 'down'})\n\n\n\n\n\n// Javascript\n// webdriver.io example\nvar result = browser.execute('mobile: scroll', {direction: 'down'})\n\n// wd example\nawait driver.execute('mobile: scroll', {direction: 'down'});\n\n\n\n\n\n# Ruby\n# ruby_lib example\nexecute_script(\nmobile: scroll\n, { \ndirection\n =\n \ndown\n})\n\n# ruby_lib_core example\n@driver.execute_script(\nmobile: scroll\n, { \ndirection\n =\n \ndown\n})\n\n\n\n\n\n// C#\ndriver.ExecuteScript(\nmobile:scroll\n, new Dictionary\nstring, string\n { { \ndirection\n, \ndown\n } });\n\n\n\n\n\nDescription\n\n\nExecute a variety of native, mobile commands that aren't associated with a specific endpoint\n\n\nSyntax is \nexecute(\"mobile: \ncommandName\n\", \nJSON serializable argument\n)\n\n(see \nExecute Script\n for more details\non syntax).\n\n\nAndroid\n\n\nUiAutomator2\n\n\nPlease refer to \nmobile commands\n section in UiAutomator2 driver repository.\n\n\nEspresso\n\n\nPlease refer to \nmobile commands\n section in Espresso driver repository.\n\n\nIOS\n\n\nXCUITest\n\n\nPlease refer to \nmobile commands\n section in XCUITest driver repository.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/execute\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nscript\n\n\nstring\n\n\nThe mobile command to execute\n\n\n\n\n\n\nargs\n\n\narray\n\n\nThe JSON serializable arguments\n\n\n\n\n\n\n\n\nResponse\n\n\nThe command result (\nany\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Execute Mobile Command"
        }, 
        {
            "location": "/commands/mobile-command/#execute-mobile-command", 
            "text": "Execute a native mobile command", 
            "title": "Execute Mobile Command"
        }, 
        {
            "location": "/commands/mobile-command/#example-usage", 
            "text": "// Java\ndriver.executeScript( mobile: scroll , ImmutableMap.of( direction ,  down ));  # Python\nself.driver.execute_script( mobile: scroll , {'direction': 'down'})  // Javascript\n// webdriver.io example\nvar result = browser.execute('mobile: scroll', {direction: 'down'})\n\n// wd example\nawait driver.execute('mobile: scroll', {direction: 'down'});  # Ruby\n# ruby_lib example\nexecute_script( mobile: scroll , {  direction  =   down })\n\n# ruby_lib_core example\n@driver.execute_script( mobile: scroll , {  direction  =   down })  // C#\ndriver.ExecuteScript( mobile:scroll , new Dictionary string, string  { {  direction ,  down  } });", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/mobile-command/#description", 
            "text": "Execute a variety of native, mobile commands that aren't associated with a specific endpoint  Syntax is  execute(\"mobile:  commandName \",  JSON serializable argument ) \n(see  Execute Script  for more details\non syntax).", 
            "title": "Description"
        }, 
        {
            "location": "/commands/mobile-command/#android", 
            "text": "", 
            "title": "Android"
        }, 
        {
            "location": "/commands/mobile-command/#uiautomator2", 
            "text": "Please refer to  mobile commands  section in UiAutomator2 driver repository.", 
            "title": "UiAutomator2"
        }, 
        {
            "location": "/commands/mobile-command/#espresso", 
            "text": "Please refer to  mobile commands  section in Espresso driver repository.", 
            "title": "Espresso"
        }, 
        {
            "location": "/commands/mobile-command/#ios", 
            "text": "", 
            "title": "IOS"
        }, 
        {
            "location": "/commands/mobile-command/#xcuitest", 
            "text": "Please refer to  mobile commands  section in XCUITest driver repository.", 
            "title": "XCUITest"
        }, 
        {
            "location": "/commands/mobile-command/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/mobile-command/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/mobile-command/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/mobile-command/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/mobile-command/#endpoint", 
            "text": "POST /session/:session_id/execute", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/mobile-command/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/mobile-command/#json-parameters", 
            "text": "name  type  description      script  string  The mobile command to execute    args  array  The JSON serializable arguments", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/mobile-command/#response", 
            "text": "The command result ( any )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/mobile-command/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/create/", 
            "text": "Create New Session\n\n\nCreate a new session\n\n\nExample Usage\n\n\n// Java\nDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\ndesiredCapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n10.3\n);\ndesiredCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \niPhone Simulator\n);\ndesiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, \nXCUITest\n);\ndesiredCapabilities.setCapability(MobileCapabilityType.APP, \n/path/to/ios/app.zip\n);\n\nURL url = new URL(\nhttp://127.0.0.1:4723/wd/hub\n);\n\nIOSDriver driver = new IOSDriver(url, desiredCapabilities);\nString sessionId = driver.getSessionId().toString();\n\n\n\n\n\n# Python\ndesired_caps = {\n  'platformName': 'Android',\n  'platformVersion': '7.0',\n  'deviceName': 'Android Emulator',\n  'automationName': 'UiAutomator2',\n  'app': PATH('/path/to/app')\n}\nself.driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet options = { desiredCapabilities: {\n  platformName: 'Android',\n  platformVersion: '7.0',\n  automationName: 'UiAutomator2',\n  app: path.resolve('path', 'to', 'app.apk')\n}};\nlet client = driver.newSession(options);\n\n// wd example\nlet driver = await wd.promiseChainRemote({\n  host: '127.0.0.1',\n  port: 4723\n});\nlet desiredCaps = {\n  platformName: 'Android',\n  platformVersion: '7.0',\n  deviceName: 'Android Emulator',\n  app: path.resolve('path', 'to', 'app.apk')\n};\nawait driver.init(desiredCaps);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nAPP_PATH = '../../path/to/app.app'\n\ndesired_caps = {\n  caps: {\n    platformName:  'iOS',\n    platformVersion: '10.2',\n    deviceName:    'iPhone 6',\n    app:           APP_PATH,\n    automationName: \nXCUITest\n\n  }\n}\n\nAppium::Driver.new(desired_caps).start_driver\n\n# ruby_lib_core example\n::Appium::Core.for(desired_caps).start_driver\n\n\n\n\n\n// C#\nAppiumOptions capabilities = new AppiumOptions();\nappiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformName, \nAndroid\n);\nappiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformVersion, \n7.1.1\n);\nappiumOptions.AddAdditionalCapability(MobileCapabilityType.DeviceName, \nAndroid Device\n);\nappiumOptions.AddAdditionalCapability(\nappPackage\n, \ncom.instagram.android\n);\nappiumOptions.AddAdditionalCapability(\nappActivity\n, \ncom.instagram.android.activity.MainTabActivity\n);\n\nAndroidDriver\nAndroidElement\n driver = new AndroidDriver\nAndroidElement\n(new Uri(\nhttp://127.0.0.1:4723/wd/hub\n), appiumOptions);\n\n\n\n\n\nDescription\n\n\nThe server should attempt to create a session that most closely matches the desired and required capabilities.\n\n\n\n\nJSONWP Spec\n Required capabilities have higher priority than desired capabilities and must be set for the session to be created\n\n\nW3C Spec\n capabilities.alwaysMatch must be set for session to be created; capabilities.firstMatch must match at least one (the first one to match will be used)\n\n\n\n\nPlease do not forget to call \ndelete command\n at the end of the session so that Appium could cleanup the downstream resources properly. Refusing to do so could corrupt the following session creation attempts or to break the stability of your tests in general.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nwww.selenium.dev\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session\n\n\nURL Parameters\n\n\nNone\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ndesiredCapabilities\n\n\nobject\n\n\n(\nJSONWP specification\n) Object describing session's \ndesired capabilities\n\n\n\n\n\n\nrequiredCapabilities\n\n\nobject\n\n\n(\nJSONWP specification\n) Object describing session's required capabilities that must be applied by remote end\n\n\n\n\n\n\ncapabilities\n\n\nobject\n\n\n(\nW3C specification\n) object containing 'alwaysMatch' and 'firstMatch' properties\n\n\n\n\n\n\ncapabilities.alwaysMatch\n\n\nobject\n\n\nThe \ndesired capabilities\n that the remote end must match\n\n\n\n\n\n\ncapabilities.firstMatch\n\n\narray\nobject\n\n\nList of capabilities that the remote end tries to match. Matches the first in the list\n\n\n\n\n\n\n\n\nResponse\n\n\nAn object describing the session's capabilities (\nobject\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Create"
        }, 
        {
            "location": "/commands/session/create/#create-new-session", 
            "text": "Create a new session", 
            "title": "Create New Session"
        }, 
        {
            "location": "/commands/session/create/#example-usage", 
            "text": "// Java\nDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\ndesiredCapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  10.3 );\ndesiredCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  iPhone Simulator );\ndesiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,  XCUITest );\ndesiredCapabilities.setCapability(MobileCapabilityType.APP,  /path/to/ios/app.zip );\n\nURL url = new URL( http://127.0.0.1:4723/wd/hub );\n\nIOSDriver driver = new IOSDriver(url, desiredCapabilities);\nString sessionId = driver.getSessionId().toString();  # Python\ndesired_caps = {\n  'platformName': 'Android',\n  'platformVersion': '7.0',\n  'deviceName': 'Android Emulator',\n  'automationName': 'UiAutomator2',\n  'app': PATH('/path/to/app')\n}\nself.driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps)  // Javascript\n// webdriver.io example\nlet options = { desiredCapabilities: {\n  platformName: 'Android',\n  platformVersion: '7.0',\n  automationName: 'UiAutomator2',\n  app: path.resolve('path', 'to', 'app.apk')\n}};\nlet client = driver.newSession(options);\n\n// wd example\nlet driver = await wd.promiseChainRemote({\n  host: '127.0.0.1',\n  port: 4723\n});\nlet desiredCaps = {\n  platformName: 'Android',\n  platformVersion: '7.0',\n  deviceName: 'Android Emulator',\n  app: path.resolve('path', 'to', 'app.apk')\n};\nawait driver.init(desiredCaps);  # Ruby\n# ruby_lib example\nAPP_PATH = '../../path/to/app.app'\n\ndesired_caps = {\n  caps: {\n    platformName:  'iOS',\n    platformVersion: '10.2',\n    deviceName:    'iPhone 6',\n    app:           APP_PATH,\n    automationName:  XCUITest \n  }\n}\n\nAppium::Driver.new(desired_caps).start_driver\n\n# ruby_lib_core example\n::Appium::Core.for(desired_caps).start_driver  // C#\nAppiumOptions capabilities = new AppiumOptions();\nappiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformName,  Android );\nappiumOptions.AddAdditionalCapability(MobileCapabilityType.PlatformVersion,  7.1.1 );\nappiumOptions.AddAdditionalCapability(MobileCapabilityType.DeviceName,  Android Device );\nappiumOptions.AddAdditionalCapability( appPackage ,  com.instagram.android );\nappiumOptions.AddAdditionalCapability( appActivity ,  com.instagram.android.activity.MainTabActivity );\n\nAndroidDriver AndroidElement  driver = new AndroidDriver AndroidElement (new Uri( http://127.0.0.1:4723/wd/hub ), appiumOptions);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/create/#description", 
            "text": "The server should attempt to create a session that most closely matches the desired and required capabilities.   JSONWP Spec  Required capabilities have higher priority than desired capabilities and must be set for the session to be created  W3C Spec  capabilities.alwaysMatch must be set for session to be created; capabilities.firstMatch must match at least one (the first one to match will be used)   Please do not forget to call  delete command  at the end of the session so that Appium could cleanup the downstream resources properly. Refusing to do so could corrupt the following session creation attempts or to break the stability of your tests in general.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/create/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/create/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/create/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  www.selenium.dev    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/create/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/create/#endpoint", 
            "text": "POST /session", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/create/#url-parameters", 
            "text": "None", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/create/#json-parameters", 
            "text": "name  type  description      desiredCapabilities  object  ( JSONWP specification ) Object describing session's  desired capabilities    requiredCapabilities  object  ( JSONWP specification ) Object describing session's required capabilities that must be applied by remote end    capabilities  object  ( W3C specification ) object containing 'alwaysMatch' and 'firstMatch' properties    capabilities.alwaysMatch  object  The  desired capabilities  that the remote end must match    capabilities.firstMatch  array object  List of capabilities that the remote end tries to match. Matches the first in the list", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/create/#response", 
            "text": "An object describing the session's capabilities ( object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/create/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/delete/", 
            "text": "End Session\n\n\nEnd the running session\n\n\nExample Usage\n\n\n// Java\ndriver.quit();\n\n\n\n\n\n# Python\nself.driver.quit()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.deleteSession();\n\n// wd example\nawait driver.quit();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nquit\n\n# ruby_lib_core example\n@driver.quit\n\n\n\n\n\n// C#\ndriver.Quit();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nDELETE /session/:session_id\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to delete\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "End"
        }, 
        {
            "location": "/commands/session/delete/#end-session", 
            "text": "End the running session", 
            "title": "End Session"
        }, 
        {
            "location": "/commands/session/delete/#example-usage", 
            "text": "// Java\ndriver.quit();  # Python\nself.driver.quit()  // Javascript\n// webdriver.io example\ndriver.deleteSession();\n\n// wd example\nawait driver.quit();  # Ruby\n# ruby_lib example\nquit\n\n# ruby_lib_core example\n@driver.quit  // C#\ndriver.Quit();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/delete/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/delete/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/delete/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/delete/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/delete/#endpoint", 
            "text": "DELETE /session/:session_id", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/delete/#url-parameters", 
            "text": "name  description      session_id  ID of the session to delete", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/delete/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/delete/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/delete/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/get/", 
            "text": "Get Session Capabilities\n\n\nRetrieve the capabilities of the specified session\n\n\nExample Usage\n\n\n// Java\nMap\nString, Object\n caps = driver.getSessionDetails();\n\n\n\n\n\n# Python\ndesired_caps = self.driver.session\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet caps = driver.capabilities;\n\n// wd example\nlet caps = await driver.sessionCapabilities();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nsession_capabilities\n\n# ruby_lib_core example\n@driver.session_capabilities\n\n\n\n\n\n// C#\nICapabilities caps = driver.Capabilities;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nwww.selenium.dev\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nAn object describing the session's capabilities (\nobject\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Session Capabilities"
        }, 
        {
            "location": "/commands/session/get/#get-session-capabilities", 
            "text": "Retrieve the capabilities of the specified session", 
            "title": "Get Session Capabilities"
        }, 
        {
            "location": "/commands/session/get/#example-usage", 
            "text": "// Java\nMap String, Object  caps = driver.getSessionDetails();  # Python\ndesired_caps = self.driver.session  // Javascript\n// webdriver.io example\nlet caps = driver.capabilities;\n\n// wd example\nlet caps = await driver.sessionCapabilities();  # Ruby\n# ruby_lib example\nsession_capabilities\n\n# ruby_lib_core example\n@driver.session_capabilities  // C#\nICapabilities caps = driver.Capabilities;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/get/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/get/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/get/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  www.selenium.dev    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/get/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/get/#endpoint", 
            "text": "GET /session/:session_id", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/get/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/get/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/get/#response", 
            "text": "An object describing the session's capabilities ( object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/get/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/back/", 
            "text": "Go Back\n\n\nNavigate backwards in the browser history, if possible (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.back();\n\n\n\n\n\n# Python\nself.driver.back()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.back();\n\n// wd example\nawait driver.back();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nback\n\n# ruby_lib_core example\n@driver.back\n\n\n\n\n\n// C#\ndriver.Navigate().Back();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/back\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Go Back"
        }, 
        {
            "location": "/commands/session/back/#go-back", 
            "text": "Navigate backwards in the browser history, if possible (Web context only)", 
            "title": "Go Back"
        }, 
        {
            "location": "/commands/session/back/#example-usage", 
            "text": "// Java\ndriver.back();  # Python\nself.driver.back()  // Javascript\n// webdriver.io example\ndriver.back();\n\n// wd example\nawait driver.back();  # Ruby\n# ruby_lib example\nback\n\n# ruby_lib_core example\n@driver.back  // C#\ndriver.Navigate().Back();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/back/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/back/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/back/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/back/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/back/#endpoint", 
            "text": "POST /session/:session_id/back", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/back/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/back/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/back/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/back/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/screenshot/", 
            "text": "Take Screenshot\n\n\nTake a screenshot of the current viewport/window/page\n\n\nExample Usage\n\n\n// Java\nFile scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n\n\n\n\n\n# Python\nscreenshotBase64 = self.driver.get_screenshot_as_base64()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet screenshot = driver.takeScreenshot();\n\n// wd example\nlet screenshot = await driver.takeScreenshot();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ndriver.screenshot_as(:base64) # via core_lib\n\n# ruby_lib_core example\n@driver.screenshot_as(:base64)\n\n\n\n\n\n// C#\nScreenshot screenshot = driver.GetScreenshot();\n\n\n\n\n\nDescription\n\n\nTakes a screenshot of the viewport in a native context (iOS, Android) and takes a screenshot of the window in web context\n\n\nNote that some platforms may have settings that prevent screenshots from being taken, for security reason. One such feature is\nthe \nAndroid FLAG_SECURE layout parameter\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/screenshot\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe screenshot as a base64 encoded PNG (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Screenshot"
        }, 
        {
            "location": "/commands/session/screenshot/#take-screenshot", 
            "text": "Take a screenshot of the current viewport/window/page", 
            "title": "Take Screenshot"
        }, 
        {
            "location": "/commands/session/screenshot/#example-usage", 
            "text": "// Java\nFile scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);  # Python\nscreenshotBase64 = self.driver.get_screenshot_as_base64()  // Javascript\n// webdriver.io example\nlet screenshot = driver.takeScreenshot();\n\n// wd example\nlet screenshot = await driver.takeScreenshot();  # Ruby\n# ruby_lib example\ndriver.screenshot_as(:base64) # via core_lib\n\n# ruby_lib_core example\n@driver.screenshot_as(:base64)  // C#\nScreenshot screenshot = driver.GetScreenshot();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/screenshot/#description", 
            "text": "Takes a screenshot of the viewport in a native context (iOS, Android) and takes a screenshot of the window in web context  Note that some platforms may have settings that prevent screenshots from being taken, for security reason. One such feature is\nthe  Android FLAG_SECURE layout parameter", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/screenshot/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/screenshot/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/screenshot/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/screenshot/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/screenshot/#endpoint", 
            "text": "GET /session/:session_id/screenshot", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/screenshot/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/screenshot/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/screenshot/#response", 
            "text": "The screenshot as a base64 encoded PNG ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/screenshot/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/source/", 
            "text": "Get Page Source\n\n\nGet the current application hierarchy XML (app) or page source (web)\n\n\nExample Usage\n\n\n// Java\nString pageSource = driver.getPageSource();\n\n\n\n\n\n# Python\nsource = self.driver.page_source\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet source = driver.getPageSource();\n\n// wd example\nlet pageSource = await driver.source();\n\n\n\n\n\n# Ruby\n# ruby_lib example\npage_source\n\n# ruby_lib_core example\n@driver.page_source\n\n\n\n\n\n// C#\nstring pageSource = driver.PageSource;\n\n\n\n\n\nDescription\n\n\nIn a web context, the source returns the source HTML of the current window. In a native context (iOS, Android, etc...) it will return the application hierarchy XML.\n\n\nThis method is useful for inspecting your application hierarchy and using that to write \nselectors\n\n\n(NOTE: iOS and Android don't have standard ways of defining their application source, so on calls to 'Get Page Source' Appium traverses the app hierarchy\nand creates an XML document. Thus, getting the source can often be an expensive and time-consuming operation)\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/source\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe sources of current context. (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Source"
        }, 
        {
            "location": "/commands/session/source/#get-page-source", 
            "text": "Get the current application hierarchy XML (app) or page source (web)", 
            "title": "Get Page Source"
        }, 
        {
            "location": "/commands/session/source/#example-usage", 
            "text": "// Java\nString pageSource = driver.getPageSource();  # Python\nsource = self.driver.page_source  // Javascript\n// webdriver.io example\nlet source = driver.getPageSource();\n\n// wd example\nlet pageSource = await driver.source();  # Ruby\n# ruby_lib example\npage_source\n\n# ruby_lib_core example\n@driver.page_source  // C#\nstring pageSource = driver.PageSource;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/source/#description", 
            "text": "In a web context, the source returns the source HTML of the current window. In a native context (iOS, Android, etc...) it will return the application hierarchy XML.  This method is useful for inspecting your application hierarchy and using that to write  selectors  (NOTE: iOS and Android don't have standard ways of defining their application source, so on calls to 'Get Page Source' Appium traverses the app hierarchy\nand creates an XML document. Thus, getting the source can often be an expensive and time-consuming operation)", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/source/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/source/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/source/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/source/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/source/#endpoint", 
            "text": "GET /session/:session_id/source", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/source/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/source/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/source/#response", 
            "text": "The sources of current context. ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/source/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/", 
            "text": "Set Timeouts\n\n\nConfigure the amount of time that a particular type of operation can execute for before they are aborted\n\n\nExample Usage\n\n\n// Java\ndriver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);\n\n\n\n\n\n# Python\nself.driver.set_page_load_timeout(5000)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setTimeouts(5000)\n\n// wd example\nawait driver.setPageLoadTimeout(5000);\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntimeout('pageLoad', 5) # Ruby translates it to seconds\n\n# ruby_lib_core example\n@driver.timeout('pageLoad', 5) # Ruby translates it to seconds\n\n\n\n\n\n// C#\ndriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(30);\n\n\n\n\n\nDescription\n\n\nThe types of timeouts are 'page load', \n'script'\n and \n'implicit'\n. (The example usage is just 'page load')\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/timeouts\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nThe type of operation to set the timeout for. Valid values are: 'script' for script timeouts, 'implicit' for modifying the implicit wait timeout and 'page load' for setting a page load timeout.\n\n\n\n\n\n\nms\n\n\nnumber\n\n\nThe amount of time, in milliseconds, that time-limited commands are permitted to run\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Timeouts"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#set-timeouts", 
            "text": "Configure the amount of time that a particular type of operation can execute for before they are aborted", 
            "title": "Set Timeouts"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#example-usage", 
            "text": "// Java\ndriver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);  # Python\nself.driver.set_page_load_timeout(5000)  // Javascript\n// webdriver.io example\ndriver.setTimeouts(5000)\n\n// wd example\nawait driver.setPageLoadTimeout(5000);  # Ruby\n# ruby_lib example\ntimeout('pageLoad', 5) # Ruby translates it to seconds\n\n# ruby_lib_core example\n@driver.timeout('pageLoad', 5) # Ruby translates it to seconds  // C#\ndriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(30);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#description", 
            "text": "The types of timeouts are 'page load',  'script'  and  'implicit' . (The example usage is just 'page load')", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#endpoint", 
            "text": "POST /session/:session_id/timeouts", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#json-parameters", 
            "text": "name  type  description      type  string  The type of operation to set the timeout for. Valid values are: 'script' for script timeouts, 'implicit' for modifying the implicit wait timeout and 'page load' for setting a page load timeout.    ms  number  The amount of time, in milliseconds, that time-limited commands are permitted to run", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/timeouts/timeouts/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/", 
            "text": "Set Implicit Wait Timeout\n\n\nSet the amount of time the driver should wait when searching for elements\n\n\nExample Usage\n\n\n// Java\ndriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n\n\n\n\n\n# Python\nself.driver.implicitly_wait(5) # waits 5 seconds\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setImplicitTimeout(5000)\n\n// wd example\nawait driver.setImplicitWaitTimeout(5000);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmanage.timeouts.implicit_wait = 5 # Ruby translates it to seconds\n\n# ruby_lib_core example\n@driver.manage.timeouts.implicit_wait = 5 # Ruby translates it to seconds\n\n\n\n\n\n// C#\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(30);\n\n\n\n\n\nDescription\n\n\nWhen  searching for a single element, the driver should poll the page until an element is found or\nthe timeout expires, whichever occurs first. When searching for multiple elements, the driver\nshould poll the page until at least one element is found or the timeout expires, at which point\nit should return an empty list.\n\n\nIf this command is never sent, the driver should default to an implicit wait of 0ms\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/timeouts/implicit_wait\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nms\n\n\nnumber\n\n\nThe amount of time, in milliseconds, that time-limited commands are permitted to run\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Implicit Wait"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#set-implicit-wait-timeout", 
            "text": "Set the amount of time the driver should wait when searching for elements", 
            "title": "Set Implicit Wait Timeout"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#example-usage", 
            "text": "// Java\ndriver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);  # Python\nself.driver.implicitly_wait(5) # waits 5 seconds  // Javascript\n// webdriver.io example\ndriver.setImplicitTimeout(5000)\n\n// wd example\nawait driver.setImplicitWaitTimeout(5000);  # Ruby\n# ruby_lib example\nmanage.timeouts.implicit_wait = 5 # Ruby translates it to seconds\n\n# ruby_lib_core example\n@driver.manage.timeouts.implicit_wait = 5 # Ruby translates it to seconds  // C#\ndriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(30);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#description", 
            "text": "When  searching for a single element, the driver should poll the page until an element is found or\nthe timeout expires, whichever occurs first. When searching for multiple elements, the driver\nshould poll the page until at least one element is found or the timeout expires, at which point\nit should return an empty list.  If this command is never sent, the driver should default to an implicit wait of 0ms", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#endpoint", 
            "text": "POST /session/:session_id/timeouts/implicit_wait", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#json-parameters", 
            "text": "name  type  description      ms  number  The amount of time, in milliseconds, that time-limited commands are permitted to run", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/timeouts/implicit-wait/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/", 
            "text": "Set Script Timeout\n\n\nSet the amount of time, in milliseconds, that asynchronous scripts executed by \nexecute async\n are permitted to run before they are aborted (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().timeouts().setScriptTimeout(30, TimeUnit.SECONDS);\n\n\n\n\n\n# Python\nself.driver.set_script_timeout(5000)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setAsyncTimeout(5000)\n\n// wd example\nawait driver.setAsyncScriptTimeout(5000);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nscript_timeout(5) # Ruby translates it to seconds\n\n# ruby_lib_core example\n@driver.script_timeout(5) # Ruby translates it to seconds\n\n\n\n\n\n// C#\n// TODO C# sample\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/timeouts/async_script\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nms\n\n\nnumber\n\n\nThe amount of time, in milliseconds, that time-limited commands are permitted to run\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Async Script"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#set-script-timeout", 
            "text": "Set the amount of time, in milliseconds, that asynchronous scripts executed by  execute async  are permitted to run before they are aborted (Web context only)", 
            "title": "Set Script Timeout"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#example-usage", 
            "text": "// Java\ndriver.manage().timeouts().setScriptTimeout(30, TimeUnit.SECONDS);  # Python\nself.driver.set_script_timeout(5000)  // Javascript\n// webdriver.io example\ndriver.setAsyncTimeout(5000)\n\n// wd example\nawait driver.setAsyncScriptTimeout(5000);  # Ruby\n# ruby_lib example\nscript_timeout(5) # Ruby translates it to seconds\n\n# ruby_lib_core example\n@driver.script_timeout(5) # Ruby translates it to seconds  // C#\n// TODO C# sample", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#endpoint", 
            "text": "POST /session/:session_id/timeouts/async_script", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#json-parameters", 
            "text": "name  type  description      ms  number  The amount of time, in milliseconds, that time-limited commands are permitted to run", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/timeouts/async-script/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/", 
            "text": "Get Orientation\n\n\nGet the current device/browser orientation\n\n\nExample Usage\n\n\n// Java\nScreenOrientation orientation = driver.getOrientation();\n\n\n\n\n\n# Python\norientation = self.driver.orientation\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet orientation = driver.getOrientation();\n\n// wd example\nlet orientation = await driver.getOrientation();\n\n\n\n\n\n# Ruby\n# ruby_lib example\norientation\n\n# ruby_lib_core example\n@driver.orientation\n\n\n\n\n\n// C#\nScreenOrientation orientation = driver.Orientation;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/orientation\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe current browser orientation {LANDSCAPE|PORTRAIT} (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Orientation"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#get-orientation", 
            "text": "Get the current device/browser orientation", 
            "title": "Get Orientation"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#example-usage", 
            "text": "// Java\nScreenOrientation orientation = driver.getOrientation();  # Python\norientation = self.driver.orientation  // Javascript\n// webdriver.io example\nlet orientation = driver.getOrientation();\n\n// wd example\nlet orientation = await driver.getOrientation();  # Ruby\n# ruby_lib example\norientation\n\n# ruby_lib_core example\n@driver.orientation  // C#\nScreenOrientation orientation = driver.Orientation;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#endpoint", 
            "text": "GET /session/:session_id/orientation", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#response", 
            "text": "The current browser orientation {LANDSCAPE|PORTRAIT} ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/orientation/get-orientation/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/", 
            "text": "Set Orientation\n\n\nSet the current device/browser orientation\n\n\nExample Usage\n\n\n// Java\ndriver.rotate(ScreenOrientation.LANDSCAPE);\n\n\n\n\n\n# Python\ndriver.orientation = \nLANDSCAPE\n\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setOrientation(\nLANDSCAPE\n);\n\n// wd example\nawait driver.setOrientation('LANDSCAPE');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nrotation = :landscape\n\n# ruby_lib_core example\n@driver.rotation = :landscape\n\n\n\n\n\n// C#\ndriver.Orientation = ScreenOrientation.Landscape;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/orientation\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\norientation\n\n\nstring\n\n\nThe desired orientation - {LANDSCAPE\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Set Orientation"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#set-orientation", 
            "text": "Set the current device/browser orientation", 
            "title": "Set Orientation"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#example-usage", 
            "text": "// Java\ndriver.rotate(ScreenOrientation.LANDSCAPE);  # Python\ndriver.orientation =  LANDSCAPE   // Javascript\n// webdriver.io example\ndriver.setOrientation( LANDSCAPE );\n\n// wd example\nawait driver.setOrientation('LANDSCAPE');  # Ruby\n# ruby_lib example\nrotation = :landscape\n\n# ruby_lib_core example\n@driver.rotation = :landscape  // C#\ndriver.Orientation = ScreenOrientation.Landscape;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#endpoint", 
            "text": "POST /session/:session_id/orientation", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#json-parameters", 
            "text": "name  type  description      orientation  string  The desired orientation - {LANDSCAPE", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/orientation/set-orientation/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/", 
            "text": "Get Geolocation\n\n\nGet the current geo location\n\n\nExample Usage\n\n\n// Java\nLocation location = driver.location(); // Must be a driver that implements LocationContext\n\n\n\n\n\n# Python\nlocation = self.driver.location()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet location = driver.getGeoLocation();\n\n// wd example\nlet location = await driver.getGeoLocation();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nlocation\n\n# ruby_lib_core example\n@driver.location\n\n\n\n\n\n// C#\nLocation location = driver.Location;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/location\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nlatitude\n\n\nnumber\n\n\nThe current geolocation latitude\n\n\n\n\n\n\nlongitude\n\n\nnumber\n\n\nThe current geolocation longitude\n\n\n\n\n\n\naltitude\n\n\nnumber\n\n\nThe current geolocation altitude\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Geolocation"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#get-geolocation", 
            "text": "Get the current geo location", 
            "title": "Get Geolocation"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#example-usage", 
            "text": "// Java\nLocation location = driver.location(); // Must be a driver that implements LocationContext  # Python\nlocation = self.driver.location()  // Javascript\n// webdriver.io example\nlet location = driver.getGeoLocation();\n\n// wd example\nlet location = await driver.getGeoLocation();  # Ruby\n# ruby_lib example\nlocation\n\n# ruby_lib_core example\n@driver.location  // C#\nLocation location = driver.Location;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#endpoint", 
            "text": "GET /session/:session_id/location", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#response", 
            "text": "name  type  description      latitude  number  The current geolocation latitude    longitude  number  The current geolocation longitude    altitude  number  The current geolocation altitude", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/geolocation/get-geolocation/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/", 
            "text": "Set Geolocation\n\n\nSet the current geo location\n\n\nExample Usage\n\n\n// Java\ndriver.setLocation(new Location(49, 123, 10)); // Must be a driver that implements LocationContext\n\n\n\n\n\n# Python\nself.driver.set_location(49, 123, 10)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setGeoLocation({latitude: \n121.21\n, longitude: \n11.56\n, altitude: \n94.23\n});\n\n// wd example\nawait driver.setGeoLocation(121.21, 11.56, 10);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nset_location(121.21, 11.56, 94.23)\n\n# ruby_lib_core example\n@driver.set_location(121.21, 11.56, 94.23)\n\n\n\n\n\n// C#\ndriver.Location.Altitude = 94.23;\ndriver.Location.Latitude = 121.21;\ndriver.Location.Longitude = 11.56;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/location\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nlatitude\n\n\nnumber\n\n\nThe desired geolocation latitude\n\n\n\n\n\n\nlongitude\n\n\nnumber\n\n\nThe desired geolocation longitude\n\n\n\n\n\n\naltitude\n\n\nnumber\n\n\nThe desired geolocation altitude (optional. altitude works on real Android devices only)\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Set Geolocation"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#set-geolocation", 
            "text": "Set the current geo location", 
            "title": "Set Geolocation"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#example-usage", 
            "text": "// Java\ndriver.setLocation(new Location(49, 123, 10)); // Must be a driver that implements LocationContext  # Python\nself.driver.set_location(49, 123, 10)  // Javascript\n// webdriver.io example\ndriver.setGeoLocation({latitude:  121.21 , longitude:  11.56 , altitude:  94.23 });\n\n// wd example\nawait driver.setGeoLocation(121.21, 11.56, 10);  # Ruby\n# ruby_lib example\nset_location(121.21, 11.56, 94.23)\n\n# ruby_lib_core example\n@driver.set_location(121.21, 11.56, 94.23)  // C#\ndriver.Location.Altitude = 94.23;\ndriver.Location.Latitude = 121.21;\ndriver.Location.Longitude = 11.56;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#endpoint", 
            "text": "POST /session/:session_id/location", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#json-parameters", 
            "text": "name  type  description      latitude  number  The desired geolocation latitude    longitude  number  The desired geolocation longitude    altitude  number  The desired geolocation altitude (optional. altitude works on real Android devices only)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/geolocation/set-geolocation/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/", 
            "text": "Get available log types\n\n\nGet available log types as a list of strings\n\n\nExample Usage\n\n\n// Java\nSet\nString\n logTypes = driver.manage().logs().getAvailableLogTypes();\n\n\n\n\n\n# Python\nlog_types = driver.log_types\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getLogTypes()\n\n// wd example\nconst logTypes = await driver.logTypes();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget_available_log_types\n\n# ruby_lib_core example\n@driver.logs.available_types\n\n\n\n\n\n// C#\nIReadOnlyCollection\nstring\n logTypes = driver.Manage().Logs.AvailableLogTypes;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/log/types\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe list of log types (\narray\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Log Types"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#get-available-log-types", 
            "text": "Get available log types as a list of strings", 
            "title": "Get available log types"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#example-usage", 
            "text": "// Java\nSet String  logTypes = driver.manage().logs().getAvailableLogTypes();  # Python\nlog_types = driver.log_types  // Javascript\n// webdriver.io example\ndriver.getLogTypes()\n\n// wd example\nconst logTypes = await driver.logTypes();  # Ruby\n# ruby_lib example\nget_available_log_types\n\n# ruby_lib_core example\n@driver.logs.available_types  // C#\nIReadOnlyCollection string  logTypes = driver.Manage().Logs.AvailableLogTypes;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#endpoint", 
            "text": "GET /session/:session_id/log/types", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#response", 
            "text": "The list of log types ( array string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/logs/get-log-types/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/logs/get-log/", 
            "text": "Get Logs\n\n\nGet the log for a given log type. Log buffer is reset after each request\n\n\nExample Usage\n\n\n// Java\nLogEntries logEntries = driver.manage().logs().get(\ndriver\n);\n\n\n\n\n\n# Python\nlogs = driver.get_log('driver')\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet logs = driver.getLogs('driver')\n\n// wd example\nconst logs = await driver.log('driver');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget_log('driver')\n\n# ruby_lib_core example\n@driver.logs.get 'driver'\n\n\n\n\n\n// C#\nILogs logs = driver.Manage().Logs;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/log\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nThe log type\n\n\n\n\n\n\n\n\nResponse\n\n\nThe list of log entries (\narray\nobject\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Logs"
        }, 
        {
            "location": "/commands/session/logs/get-log/#get-logs", 
            "text": "Get the log for a given log type. Log buffer is reset after each request", 
            "title": "Get Logs"
        }, 
        {
            "location": "/commands/session/logs/get-log/#example-usage", 
            "text": "// Java\nLogEntries logEntries = driver.manage().logs().get( driver );  # Python\nlogs = driver.get_log('driver')  // Javascript\n// webdriver.io example\nlet logs = driver.getLogs('driver')\n\n// wd example\nconst logs = await driver.log('driver');  # Ruby\n# ruby_lib example\nget_log('driver')\n\n# ruby_lib_core example\n@driver.logs.get 'driver'  // C#\nILogs logs = driver.Manage().Logs;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/logs/get-log/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/logs/get-log/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/logs/get-log/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/logs/get-log/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/logs/get-log/#endpoint", 
            "text": "POST /session/:session_id/log", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/logs/get-log/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/logs/get-log/#json-parameters", 
            "text": "name  type  description      type  string  The log type", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/logs/get-log/#response", 
            "text": "The list of log entries ( array object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/logs/get-log/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/events/log-event/", 
            "text": "Log event\n\n\nStore a custom event\n\n\nExample Usage\n\n\n// Java\nCustomEvent evt = new CustomEvent();\nevt.setEventName(\nfunEvent\n);\nevt.setVendor(\nappium\n);\ndriver.logEvent(evt);\n\n\n\n\n\n# Python\ndriver.log_event('appium', 'funEvent')\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.logEvent('appium', 'funEvent')\n\n// wd example\n// WD code here\n\n\n\n\n\n# Ruby\n# ruby_lib example\ndriver.log_event vendor: 'appium', event: 'funEvent'\n\n# ruby_lib_core example\n@driver.logs.event vendor: 'appium', event: 'funEvent'\n@driver.logs.event = { vendor: 'appium', event: 'anotherEvent' }\n\n\n\n\n\n// C#\n// csharp Code here\n\n\n\n\n\nDescription\n\n\nThis API allows us to store a custom event.\n\n\nAppium provides \nAppium Event Timing\n to track when events happen.\nThis custom event feature allow users to store a custom event as the feature.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/log_event\n\n\nURL Parameters\n\n\nNone\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvendor\n\n\nstring\n\n\nThe name of vendor. It will be \nvendor\n in \nvendor:event\n.\n\n\n\n\n\n\nevent\n\n\nstring\n\n\nThe name of event. It will be \nevent\n in \nvendor:event\n.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification\n\n\nadd new route to allow logging of custom events", 
            "title": "Log event"
        }, 
        {
            "location": "/commands/session/events/log-event/#log-event", 
            "text": "Store a custom event", 
            "title": "Log event"
        }, 
        {
            "location": "/commands/session/events/log-event/#example-usage", 
            "text": "// Java\nCustomEvent evt = new CustomEvent();\nevt.setEventName( funEvent );\nevt.setVendor( appium );\ndriver.logEvent(evt);  # Python\ndriver.log_event('appium', 'funEvent')  // Javascript\n// webdriver.io example\ndriver.logEvent('appium', 'funEvent')\n\n// wd example\n// WD code here  # Ruby\n# ruby_lib example\ndriver.log_event vendor: 'appium', event: 'funEvent'\n\n# ruby_lib_core example\n@driver.logs.event vendor: 'appium', event: 'funEvent'\n@driver.logs.event = { vendor: 'appium', event: 'anotherEvent' }  // C#\n// csharp Code here", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/events/log-event/#description", 
            "text": "This API allows us to store a custom event.  Appium provides  Appium Event Timing  to track when events happen.\nThis custom event feature allow users to store a custom event as the feature.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/events/log-event/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/events/log-event/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.16.0+  All     UIAutomation  8.0 to 9.3  1.16.0+  All    Android  Espresso  ?+  1.16.0+  All     UiAutomator2  ?+  1.16.0+  All     UiAutomator  4.3+  1.16.0+  All    Mac  Mac  ?+  1.16.0+  All    Windows  Windows  10+  1.16.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/events/log-event/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  None  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/events/log-event/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/events/log-event/#endpoint", 
            "text": "POST /session/:session_id/appium/log_event", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/events/log-event/#url-parameters", 
            "text": "None", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/events/log-event/#json-parameters", 
            "text": "name  type  description      vendor  string  The name of vendor. It will be  vendor  in  vendor:event .    event  string  The name of event. It will be  event  in  vendor:event .", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/events/log-event/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/events/log-event/#see-also", 
            "text": "JSONWP Specification  add new route to allow logging of custom events", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/events/get-events/", 
            "text": "Get events\n\n\nGet events stored in appium server\n\n\nExample Usage\n\n\n// Java\ndriver.getEvents();\n\n\n\n\n\n# Python\ndriver.get_events()\ndriver.get_events(['event1', 'event2'])\n\n\n\n\n\n// Javascript\n// webdriver.io example\nbrowser.getEvents(['event'])\n\n// wd example\n// WD code here\n\n\n\n\n\n# Ruby\n# ruby_lib example\ndriver.log_events\ndriver.log_events('event')\ndriver.log_events(['event1', 'event2'])\n\n# ruby_lib_core example\n@driver.logs.events\n@driver.logs.events('event')\n@driver.logs.events(['event1', 'event2'])\n\n\n\n\n\n// C#\n// csharp code here\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.16.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/events\n\n\nURL Parameters\n\n\nNone\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring|array\nstring\n\n\n(Option) Get events which are filtered with the type if the type is provided\n\n\n\n\n\n\n\n\nResponse\n\n\nA JSON hash of events like \n{'commands' =\n [{'cmd' =\n 123455, ....}], 'startTime' =\n 1572954894127, }\n. A filtered by \ntype\n item if it is provided. (\nobject\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification\n\n\nadd ability to retrieve log events as a new api route", 
            "title": "Get events"
        }, 
        {
            "location": "/commands/session/events/get-events/#get-events", 
            "text": "Get events stored in appium server", 
            "title": "Get events"
        }, 
        {
            "location": "/commands/session/events/get-events/#example-usage", 
            "text": "// Java\ndriver.getEvents();  # Python\ndriver.get_events()\ndriver.get_events(['event1', 'event2'])  // Javascript\n// webdriver.io example\nbrowser.getEvents(['event'])\n\n// wd example\n// WD code here  # Ruby\n# ruby_lib example\ndriver.log_events\ndriver.log_events('event')\ndriver.log_events(['event1', 'event2'])\n\n# ruby_lib_core example\n@driver.logs.events\n@driver.logs.events('event')\n@driver.logs.events(['event1', 'event2'])  // C#\n// csharp code here", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/events/get-events/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/events/get-events/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.16.0+  All     UIAutomation  8.0 to 9.3  1.16.0+  All    Android  Espresso  ?+  1.16.0+  All     UiAutomator2  ?+  1.16.0+  All     UiAutomator  4.3+  1.16.0+  All    Mac  Mac  ?+  1.16.0+  All    Windows  Windows  10+  1.16.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/events/get-events/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  None  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/events/get-events/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/events/get-events/#endpoint", 
            "text": "POST /session/:session_id/appium/events", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/events/get-events/#url-parameters", 
            "text": "None", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/events/get-events/#json-parameters", 
            "text": "name  type  description      type  string|array string  (Option) Get events which are filtered with the type if the type is provided", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/events/get-events/#response", 
            "text": "A JSON hash of events like  {'commands' =  [{'cmd' =  123455, ....}], 'startTime' =  1572954894127, } . A filtered by  type  item if it is provided. ( object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/events/get-events/#see-also", 
            "text": "JSONWP Specification  add ability to retrieve log events as a new api route", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/settings/update-settings/", 
            "text": "Update Device Settings\n\n\nUpdate the current setting on the device\n\n\nExample Usage\n\n\n// Java\ndriver.setSetting(Setting.WAIT_FOR_IDLE_TIMEOUT, 5000);\n\n\n\n\n\n# Python\nself.driver.update_settings({\nsample\n: \nvalue\n}))\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.updateSettings({nativeWebTap: true});\n\n// wd example\nawait driver.updateSettings({nativeWebTap: true});\n\n\n\n\n\n# Ruby\n# ruby_lib example\nupdate_settings({'nativeWebTap' =\n true, 'allowInvisibleElements' =\n true})\n\n# ruby_lib_core example\n@driver.update_settings({'nativeWebTap' =\n true, 'allowInvisibleElements' =\n true})\n@driver.settings.update({'nativeWebTap' =\n true, 'allowInvisibleElements' =\n true})\n@driver.settings = {'nativeWebTap' =\n true, 'allowInvisibleElements' =\n true}\n\n\n\n\n\n// C#\ndriver.Settings = new Dictionary\nstring, object\n() {\n    [AutomatorSetting.KeyInjectionDelay] = 1500,\n    [\nnativeWebTap\n] = true\n};\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/settings\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsettings\n\n\narray\nobject\n\n\na JSON hash of settings to update, see \nSettings API\n.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Update Settings"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#update-device-settings", 
            "text": "Update the current setting on the device", 
            "title": "Update Device Settings"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#example-usage", 
            "text": "// Java\ndriver.setSetting(Setting.WAIT_FOR_IDLE_TIMEOUT, 5000);  # Python\nself.driver.update_settings({ sample :  value }))  // Javascript\n// webdriver.io example\ndriver.updateSettings({nativeWebTap: true});\n\n// wd example\nawait driver.updateSettings({nativeWebTap: true});  # Ruby\n# ruby_lib example\nupdate_settings({'nativeWebTap' =  true, 'allowInvisibleElements' =  true})\n\n# ruby_lib_core example\n@driver.update_settings({'nativeWebTap' =  true, 'allowInvisibleElements' =  true})\n@driver.settings.update({'nativeWebTap' =  true, 'allowInvisibleElements' =  true})\n@driver.settings = {'nativeWebTap' =  true, 'allowInvisibleElements' =  true}  // C#\ndriver.Settings = new Dictionary string, object () {\n    [AutomatorSetting.KeyInjectionDelay] = 1500,\n    [ nativeWebTap ] = true\n};", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#endpoint", 
            "text": "POST /session/:session_id/appium/settings", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#json-parameters", 
            "text": "name  type  description      settings  array object  a JSON hash of settings to update, see  Settings API .", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/settings/update-settings/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/settings/get-settings/", 
            "text": "Retrieve Device Settings\n\n\nRetrieve the current settings on the device\n\n\nExample Usage\n\n\n// Java\nMap\nString, Object\n settings = driver.getSettings();\n\n\n\n\n\n# Python\nself.driver.get_settings()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet settings = driver.getSettings();\n\n// wd example\nawait driver.settings();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget_settings\n\n# ruby_lib_core example\n@driver.get_settings\n@driver.settings.get\n\n\n\n\n\n// C#\ndriver.Settings\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nNone\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/settings\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\na JSON hash of all the currently specified settings, see \nSettings API\n. (\narray\nobject\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Device Settings"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#retrieve-device-settings", 
            "text": "Retrieve the current settings on the device", 
            "title": "Retrieve Device Settings"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#example-usage", 
            "text": "// Java\nMap String, Object  settings = driver.getSettings();  # Python\nself.driver.get_settings()  // Javascript\n// webdriver.io example\nlet settings = driver.getSettings();\n\n// wd example\nawait driver.settings();  # Ruby\n# ruby_lib example\nget_settings\n\n# ruby_lib_core example\n@driver.get_settings\n@driver.settings.get  // C#\ndriver.Settings", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  None  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  None  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#endpoint", 
            "text": "GET /session/:session_id/appium/settings", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#response", 
            "text": "a JSON hash of all the currently specified settings, see  Settings API . ( array object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/settings/get-settings/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/session/execute-driver/", 
            "text": "Execute Driver Script\n\n\nRun a WebdriverIO script against the current session, allowing execution of many commands in one Appium request.\n\n\nExample Usage\n\n\n// Java\nString script = \nconst el = await driver.$('~foo');\\n\n\n              + \nawait el.click();\n\ndriver.executeDriverScript(script, new ScriptOptions().withTimeout(200));\n\n\n\n\n\n# Python\nimport textwrap\nscript = \n\n    const el = await driver.$('~foo');\n    await el.click();\n\n\nresponse = driver.execute_driver(script=textwrap.dedent(script))\n\n\n\n\n\n// Javascript\n// webdriver.io example\nconst script = `\n  const el = await driver.$('~foo');\n  await el.click();\n`;\nawait driver.executeDriver(script);\n\n// wd example\nconst script = `\n  const el = await driver.$('~foo');\n  await el.click();\n`;\nawait driver.executeDriver(script, {timeout: 200});\n\n\n\n\n\n# Ruby\n# ruby_lib example\nscript = \n-SCRIPT\nconst status = await driver.status();\nreturn status;\nSCRIPT\ndriver.execute_driver script: script\n\n# ruby_lib_core example\nscript = \n-SCRIPT\nconst status = await driver.status();\nreturn status;\nSCRIPT\n@driver.execute_driver script: script\n\n\n\n\n\n// C#\n// TODO C# sample\n\n\n\n\n\nDescription\n\n\nOne downside of Appium's client-server architecture is that each command must travel across a network with potentially high latency. This is especially the case in situations where the Appium session takes place on a service provider's host machine rather than locally.\n\n\nThis command enables the batching of many commands together, to be executed in one go on the Appium server. The way this is accomplished is on the model of \nexecuteScript\n: the client will send in a string representing code to be executed. The Appium server will execute that code in the context of the current session, and return any values specified by the script.\n\n\nThere are three parameters accepted by this command (which may be collected by each client in its own way):\n  * \nscript\n: the string consisting of the script itself\n  * \ntimeout\n: a number representing the number of milliseconds to wait before killing the process running the driver script. Default is equivalent to 1 hour.\n  * \ntype\n: a string representing the script language/API. Currently only one type, \nwebdriverio\n, is supported (and it is the default).\n\n\nNot just any code can run in this context. The code must be written in Javascript, and it will have access to a context with three objects\n  * \ndriver\n: a \nWebdriverIO\n driver object. It may be assumed this driver has already connected with the Appium server and is ready to run commands. The version of WebdriverIO used is the one installed according to the specification in \nappium-base-driver\n's \npackage.json\n file.\n  * \nconsole\n: a custom \nconsole\n object, with methods \nlog\n, \nwarn\n, and \nerror\n, so that logging may take place.\n  * \nPromise\n: a Promise library (\nBluebird\n), to make asynchronous work easier.\n\n\nThe code will be placed inside an \nasync\n function, as below, so you are free to use \nawait\n:\n\n\n(async function (driver, console, Promise) {\n  // --\n your script here \n--\n})()\n\n\n\n\nAny errors will result in an error response to the call to this command. Any return values will be wrapped up and sent back to your client in the following form:\n\n\n{result: \nreturn value\n, logs: {log: [], warn: [], error: []}}\n\n\n\n\nUsing this response object you can gather the return value as well as the output of any log statements you made.\n\n\nThe advantage of this approach of using WebdriverIO code is that you have access to a full programming language and Appium API, and can use any language or API features you need, including loops, conditionals, and explicit waits. The WebdriverIO API cannot be enumerated here, so visit the \nWebdriverIO documentation\n for more info.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\njavadoc.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\n\n\n\n\n\n\nRuby\n\n\nNone\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/execute_driver\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nscript\n\n\nstring\n\n\nThe webdriverio script to execute\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nThe name of the script type. Currently only 'webdriverio' is supported\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\nThe number of ms Appium should wait for the script to finish before killing it due to timeout\n\n\n\n\n\n\n\n\nResponse\n\n\nThe script result. It will have two fields: \nresult\n and \nlogs\n. Result will be the return value of the script. Logs will contain the content of anything logged from the \nconsole\n object by the script. (\nany\n)\n\n\nSee Also", 
            "title": "Execute Driver Script"
        }, 
        {
            "location": "/commands/session/execute-driver/#execute-driver-script", 
            "text": "Run a WebdriverIO script against the current session, allowing execution of many commands in one Appium request.", 
            "title": "Execute Driver Script"
        }, 
        {
            "location": "/commands/session/execute-driver/#example-usage", 
            "text": "// Java\nString script =  const el = await driver.$('~foo');\\n \n              +  await el.click(); \ndriver.executeDriverScript(script, new ScriptOptions().withTimeout(200));  # Python\nimport textwrap\nscript =  \n    const el = await driver.$('~foo');\n    await el.click(); \nresponse = driver.execute_driver(script=textwrap.dedent(script))  // Javascript\n// webdriver.io example\nconst script = `\n  const el = await driver.$('~foo');\n  await el.click();\n`;\nawait driver.executeDriver(script);\n\n// wd example\nconst script = `\n  const el = await driver.$('~foo');\n  await el.click();\n`;\nawait driver.executeDriver(script, {timeout: 200});  # Ruby\n# ruby_lib example\nscript =  -SCRIPT\nconst status = await driver.status();\nreturn status;\nSCRIPT\ndriver.execute_driver script: script\n\n# ruby_lib_core example\nscript =  -SCRIPT\nconst status = await driver.status();\nreturn status;\nSCRIPT\n@driver.execute_driver script: script  // C#\n// TODO C# sample", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/session/execute-driver/#description", 
            "text": "One downside of Appium's client-server architecture is that each command must travel across a network with potentially high latency. This is especially the case in situations where the Appium session takes place on a service provider's host machine rather than locally.  This command enables the batching of many commands together, to be executed in one go on the Appium server. The way this is accomplished is on the model of  executeScript : the client will send in a string representing code to be executed. The Appium server will execute that code in the context of the current session, and return any values specified by the script.  There are three parameters accepted by this command (which may be collected by each client in its own way):\n  *  script : the string consisting of the script itself\n  *  timeout : a number representing the number of milliseconds to wait before killing the process running the driver script. Default is equivalent to 1 hour.\n  *  type : a string representing the script language/API. Currently only one type,  webdriverio , is supported (and it is the default).  Not just any code can run in this context. The code must be written in Javascript, and it will have access to a context with three objects\n  *  driver : a  WebdriverIO  driver object. It may be assumed this driver has already connected with the Appium server and is ready to run commands. The version of WebdriverIO used is the one installed according to the specification in  appium-base-driver 's  package.json  file.\n  *  console : a custom  console  object, with methods  log ,  warn , and  error , so that logging may take place.\n  *  Promise : a Promise library ( Bluebird ), to make asynchronous work easier.  The code will be placed inside an  async  function, as below, so you are free to use  await :  (async function (driver, console, Promise) {\n  // --  your script here  --\n})()  Any errors will result in an error response to the call to this command. Any return values will be wrapped up and sent back to your client in the following form:  {result:  return value , logs: {log: [], warn: [], error: []}}  Using this response object you can gather the return value as well as the output of any log statements you made.  The advantage of this approach of using WebdriverIO code is that you have access to a full programming language and Appium API, and can use any language or API features you need, including loops, conditionals, and explicit waits. The WebdriverIO API cannot be enumerated here, so visit the  WebdriverIO documentation  for more info.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/session/execute-driver/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/session/execute-driver/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  UiAutomator2  ?+  1.6.0+  All     Espresso  ?+  1.9.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/session/execute-driver/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  javadoc.io    Python  None  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  None     Ruby  None  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/session/execute-driver/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/session/execute-driver/#endpoint", 
            "text": "POST /session/:session_id/appium/execute_driver", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/session/execute-driver/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/session/execute-driver/#json-parameters", 
            "text": "name  type  description      script  string  The webdriverio script to execute    type  string  The name of the script type. Currently only 'webdriverio' is supported    timeout  number  The number of ms Appium should wait for the script to finish before killing it due to timeout", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/session/execute-driver/#response", 
            "text": "The script result. It will have two fields:  result  and  logs . Result will be the return value of the script. Logs will contain the content of anything logged from the  console  object by the script. ( any )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/session/execute-driver/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/activity/start-activity/", 
            "text": "Start Activity\n\n\nStart an Android activity by providing package name and activity name\n\n\nExample Usage\n\n\n// Java\ndriver.startActivity(new Activity(\ncom.example\n, \nActivityName\n));\n\n\n\n\n\n# Python\nself.driver.start_activity(\ncom.example\n, \nActivityName\n);\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.startActivity(\ncom.example\n, \nActivityName\n);\n\n// wd example\nawait driver.startActivity({\n  appPackage: \ncom.example\n,\n  appActivity: \nActivityName\n\n});\n\n\n\n\n\n# Ruby\n# ruby_lib example\nstart_activity app_package: \ncom.example\n, app_activity: \nActivityName\n\n\n# ruby_lib_core example\n@driver.start_activity app_package: \ncom.example\n, app_activity: \nActivityName\n\n\n\n\n\n\n// C#\ndriver.StartActivity(\ncom.example\n, \nActivityName\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/start_activity\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nappPackage\n\n\nstring\n\n\nName of the \npackage\n\n\n\n\n\n\nappActivity\n\n\nstring\n\n\nName of the \nactivity\n\n\n\n\n\n\nappWaitPackage\n\n\nstring\n\n\nAutomation will begin after this package starts\n\n\n\n\n\n\nintentAction\n\n\nstring\n\n\nIntent\n action which will be used to start activity\n\n\n\n\n\n\nintentCategory\n\n\nstring\n\n\nIntent category which will be used to start activity\n\n\n\n\n\n\nintentFlags\n\n\nstring\n\n\nFlags that will be used to start activity\n\n\n\n\n\n\noptionalIntentArguments\n\n\nstring\n\n\nAdditional intent arguments that will be used to start activity\n\n\n\n\n\n\ndontStopAppOnReset\n\n\nboolean\n\n\nShould the app stop on reset\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Start Activity"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#start-activity", 
            "text": "Start an Android activity by providing package name and activity name", 
            "title": "Start Activity"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#example-usage", 
            "text": "// Java\ndriver.startActivity(new Activity( com.example ,  ActivityName ));  # Python\nself.driver.start_activity( com.example ,  ActivityName );  // Javascript\n// webdriver.io example\ndriver.startActivity( com.example ,  ActivityName );\n\n// wd example\nawait driver.startActivity({\n  appPackage:  com.example ,\n  appActivity:  ActivityName \n});  # Ruby\n# ruby_lib example\nstart_activity app_package:  com.example , app_activity:  ActivityName \n\n# ruby_lib_core example\n@driver.start_activity app_package:  com.example , app_activity:  ActivityName   // C#\ndriver.StartActivity( com.example ,  ActivityName );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#endpoint", 
            "text": "POST /session/:session_id/appium/device/start_activity", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#json-parameters", 
            "text": "name  type  description      appPackage  string  Name of the  package    appActivity  string  Name of the  activity    appWaitPackage  string  Automation will begin after this package starts    intentAction  string  Intent  action which will be used to start activity    intentCategory  string  Intent category which will be used to start activity    intentFlags  string  Flags that will be used to start activity    optionalIntentArguments  string  Additional intent arguments that will be used to start activity    dontStopAppOnReset  boolean  Should the app stop on reset", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/activity/start-activity/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/activity/current-activity/", 
            "text": "Get Current Activity\n\n\nGet the name of the current Android activity\n\n\nExample Usage\n\n\n// Java\nString activity = driver.currentActivity();\n\n\n\n\n\n# Python\nactivity = self.driver.current_activity;\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet activity = driver.getCurrentActivity();\n\n// wd example\nlet activity = await driver.getCurrentActivity();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ncurrent_activity\n\n# ruby_lib_core example\n@driver.current_activity\n\n\n\n\n\n// C#\nstring activity = driver.CurrentActivity;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/device/current_activity\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nName of the current \nactivity\n (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Current Activity"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#get-current-activity", 
            "text": "Get the name of the current Android activity", 
            "title": "Get Current Activity"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#example-usage", 
            "text": "// Java\nString activity = driver.currentActivity();  # Python\nactivity = self.driver.current_activity;  // Javascript\n// webdriver.io example\nlet activity = driver.getCurrentActivity();\n\n// wd example\nlet activity = await driver.getCurrentActivity();  # Ruby\n# ruby_lib example\ncurrent_activity\n\n# ruby_lib_core example\n@driver.current_activity  // C#\nstring activity = driver.CurrentActivity;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#endpoint", 
            "text": "GET /session/:session_id/appium/device/current_activity", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#response", 
            "text": "Name of the current  activity  ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/activity/current-activity/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/activity/current-package/", 
            "text": "Get Current Package\n\n\nGet the name of the current Android package\n\n\nExample Usage\n\n\n// Java\nString package = driver.getCurrentPackage();\n\n\n\n\n\n# Python\npackage = self.driver.current_package;\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet package = driver.getCurrentPackage();\n\n// wd example\nlet package = await driver.getCurrentPackage();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ncurrent_package\n\n# ruby_lib_core example\n@driver.current_package\n\n\n\n\n\n// C#\nstring package = driver.CurrentPackage;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/device/current_package\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nName of the current \npackage\n (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Current Package"
        }, 
        {
            "location": "/commands/device/activity/current-package/#get-current-package", 
            "text": "Get the name of the current Android package", 
            "title": "Get Current Package"
        }, 
        {
            "location": "/commands/device/activity/current-package/#example-usage", 
            "text": "// Java\nString package = driver.getCurrentPackage();  # Python\npackage = self.driver.current_package;  // Javascript\n// webdriver.io example\nlet package = driver.getCurrentPackage();\n\n// wd example\nlet package = await driver.getCurrentPackage();  # Ruby\n# ruby_lib example\ncurrent_package\n\n# ruby_lib_core example\n@driver.current_package  // C#\nstring package = driver.CurrentPackage;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/activity/current-package/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/activity/current-package/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/activity/current-package/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/activity/current-package/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/activity/current-package/#endpoint", 
            "text": "GET /session/:session_id/appium/device/current_package", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/activity/current-package/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/activity/current-package/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/activity/current-package/#response", 
            "text": "Name of the current  package  ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/activity/current-package/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/install-app/", 
            "text": "Install App\n\n\nInstall the given app onto the device\n\n\nExample Usage\n\n\n// Java\ndriver.installApp(\n/Users/johndoe/path/to/app.apk\n);\n\n\n\n\n\n# Python\nself.driver.install_app('/Users/johndoe/path/to/app.apk');\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.installApp('/Users/johndoe/path/to/app.apk')\n\n// wd example\nawait driver.installAppOnDevice('/Users/johndoe/path/to/app.apk');\n\n\n\n\n\n# Ruby\n# ruby_lib example\ninstall_app('/Users/johndoe/path/to/app.apk')\n\n# ruby_lib_core example\n@driver.install_app('/Users/johndoe/path/to/app.apk')\n\n\n\n\n\n// C#\ndriver.InstallApp(\n/Users/johndoe/path/to/app.apk\n)\n\n\n\n\n\nDescription\n\n\niOS tests with XCUITest can also use the \nmobile: installApp\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/install_app\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nappPath\n\n\nstring\n\n\nPath of the app being installed\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Install App"
        }, 
        {
            "location": "/commands/device/app/install-app/#install-app", 
            "text": "Install the given app onto the device", 
            "title": "Install App"
        }, 
        {
            "location": "/commands/device/app/install-app/#example-usage", 
            "text": "// Java\ndriver.installApp( /Users/johndoe/path/to/app.apk );  # Python\nself.driver.install_app('/Users/johndoe/path/to/app.apk');  // Javascript\n// webdriver.io example\ndriver.installApp('/Users/johndoe/path/to/app.apk')\n\n// wd example\nawait driver.installAppOnDevice('/Users/johndoe/path/to/app.apk');  # Ruby\n# ruby_lib example\ninstall_app('/Users/johndoe/path/to/app.apk')\n\n# ruby_lib_core example\n@driver.install_app('/Users/johndoe/path/to/app.apk')  // C#\ndriver.InstallApp( /Users/johndoe/path/to/app.apk )", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/install-app/#description", 
            "text": "iOS tests with XCUITest can also use the  mobile: installApp  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/install-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/install-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/install-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/install-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/install-app/#endpoint", 
            "text": "POST /session/:session_id/appium/device/install_app", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/install-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/install-app/#json-parameters", 
            "text": "name  type  description      appPath  string  Path of the app being installed", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/install-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/install-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/", 
            "text": "Is App Installed\n\n\nCheck whether the specified app is installed on the device\n\n\nExample Usage\n\n\n// Java\ndriver.isAppInstalled(\ncom.example.AppName\n);\n\n\n\n\n\n# Python\nself.driver.is_app_installed('com.example.AppName');\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.isAppInstalled('com.example.AppName')\n\n// wd example\nawait driver.isAppInstalledOnDevice('com.example.AppName');\n\n\n\n\n\n# Ruby\n# ruby_lib example\napp_installed?('com.example.AppName')\n\n# ruby_lib_core example\n@driver.app_installed?('com.example.AppName')\n\n\n\n\n\n// C#\ndriver.IsAppInstalled(\ncom.example.AppName\n);\n\n\n\n\n\nDescription\n\n\niOS tests with XCUITest can also use the \nmobile: isAppInstalled\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/app_installed\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbundleId\n\n\nstring\n\n\niOS bundleID or Android package name\n\n\n\n\n\n\n\n\nResponse\n\n\nReturn true if installed, false if not (\nboolean\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Is App Installed"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#is-app-installed", 
            "text": "Check whether the specified app is installed on the device", 
            "title": "Is App Installed"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#example-usage", 
            "text": "// Java\ndriver.isAppInstalled( com.example.AppName );  # Python\nself.driver.is_app_installed('com.example.AppName');  // Javascript\n// webdriver.io example\ndriver.isAppInstalled('com.example.AppName')\n\n// wd example\nawait driver.isAppInstalledOnDevice('com.example.AppName');  # Ruby\n# ruby_lib example\napp_installed?('com.example.AppName')\n\n# ruby_lib_core example\n@driver.app_installed?('com.example.AppName')  // C#\ndriver.IsAppInstalled( com.example.AppName );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#description", 
            "text": "iOS tests with XCUITest can also use the  mobile: isAppInstalled  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#endpoint", 
            "text": "POST /session/:session_id/appium/device/app_installed", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#json-parameters", 
            "text": "name  type  description      bundleId  string  iOS bundleID or Android package name", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#response", 
            "text": "Return true if installed, false if not ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/is-app-installed/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/launch-app/", 
            "text": "Launch App\n\n\nLaunch the app-under-test on the device\n\n\nExample Usage\n\n\n// Java\ndriver.launchApp();\n\n\n\n\n\n# Python\nself.driver.launch_app()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.launchApp();\n\n// wd example\nawait driver.launchApp();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nlaunch_app\n\n# ruby_lib_core example\n@driver.launch_app\n\n\n\n\n\n// C#\ndriver.LaunchApp();\n\n\n\n\n\nDescription\n\n\nIf the app-under-test (AUT) is closed, or backgrounded, it will launch it. If the AUT is already open, it will background it and re-launch it.\niOS tests with XCUITest can also use the \nmobile: launchApp\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/app/launch\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Launch App"
        }, 
        {
            "location": "/commands/device/app/launch-app/#launch-app", 
            "text": "Launch the app-under-test on the device", 
            "title": "Launch App"
        }, 
        {
            "location": "/commands/device/app/launch-app/#example-usage", 
            "text": "// Java\ndriver.launchApp();  # Python\nself.driver.launch_app()  // Javascript\n// webdriver.io example\ndriver.launchApp();\n\n// wd example\nawait driver.launchApp();  # Ruby\n# ruby_lib example\nlaunch_app\n\n# ruby_lib_core example\n@driver.launch_app  // C#\ndriver.LaunchApp();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/launch-app/#description", 
            "text": "If the app-under-test (AUT) is closed, or backgrounded, it will launch it. If the AUT is already open, it will background it and re-launch it.\niOS tests with XCUITest can also use the  mobile: launchApp  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/launch-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/launch-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  None  None  None     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/launch-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/launch-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/launch-app/#endpoint", 
            "text": "POST /session/:session_id/appium/app/launch", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/launch-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/launch-app/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/launch-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/launch-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/background-app/", 
            "text": "Background App\n\n\nSend the currently running app for this session to the background\n\n\nExample Usage\n\n\n// Java\ndriver.runAppInBackground(Duration.ofSeconds(10));\n\n\n\n\n\n# Python\nself.driver.background_app(10)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.background(10);\n\n// wd example\nawait driver.backgroundApp(10);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nbackground_app(10)\n\n# ruby_lib_core example\n@driver.background_app(10)\n\n\n\n\n\n// C#\ndriver.BackgroundApp(10)\n\n\n\n\n\nDescription\n\n\nSend the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated.\nThere are 3 types of parameters which may be passed to this method:\n\n\n\n\n\n\nAn object that looks like \n{\"seconds\": secs}\n, where \nsecs\n is an\n   integer designating how long, in seconds, to background the app for. -1\n   means to deactivate the app entirely.\n\n\n\n\n\n\nnull\n, which means to deactivate the app entirely.\n\n\n\n\nDeprecated\n An integer: how long, in seconds, to background the app for. -1 means to\n   deactivate the app entirely.\n\n\n\n\niOS tests with XCUITest can also use the \nmobile: terminateApp\n method to terminate the current app (see detailed \ndocumentation\n), and the \nmobile: activateApp\n to activate an existing application on the device under test and moves it to the foreground (see detailed \ndocumentation\n).\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/app/background\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nnumber\n\n\nHow long to run app in background.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Background App"
        }, 
        {
            "location": "/commands/device/app/background-app/#background-app", 
            "text": "Send the currently running app for this session to the background", 
            "title": "Background App"
        }, 
        {
            "location": "/commands/device/app/background-app/#example-usage", 
            "text": "// Java\ndriver.runAppInBackground(Duration.ofSeconds(10));  # Python\nself.driver.background_app(10)  // Javascript\n// webdriver.io example\ndriver.background(10);\n\n// wd example\nawait driver.backgroundApp(10);  # Ruby\n# ruby_lib example\nbackground_app(10)\n\n# ruby_lib_core example\n@driver.background_app(10)  // C#\ndriver.BackgroundApp(10)", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/background-app/#description", 
            "text": "Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated.\nThere are 3 types of parameters which may be passed to this method:    An object that looks like  {\"seconds\": secs} , where  secs  is an\n   integer designating how long, in seconds, to background the app for. -1\n   means to deactivate the app entirely.    null , which means to deactivate the app entirely.   Deprecated  An integer: how long, in seconds, to background the app for. -1 means to\n   deactivate the app entirely.   iOS tests with XCUITest can also use the  mobile: terminateApp  method to terminate the current app (see detailed  documentation ), and the  mobile: activateApp  to activate an existing application on the device under test and moves it to the foreground (see detailed  documentation ).", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/background-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/background-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/background-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/background-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/background-app/#endpoint", 
            "text": "POST /session/:session_id/appium/app/background", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/background-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/background-app/#json-parameters", 
            "text": "name  type  description      seconds  number  How long to run app in background.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/background-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/background-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/close-app/", 
            "text": "Close an App\n\n\nClose an app on device\n\n\nExample Usage\n\n\n// Java\ndriver.closeApp();\n\n\n\n\n\n# Python\nself.driver.close_app()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.closeApp();\n\n// wd example\nawait driver.closeApp();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nclose_app\n\n# ruby_lib_core example\n@driver.close_app\n\n\n\n\n\n// C#\ndriver.CloseApp();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/app/close\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Close App"
        }, 
        {
            "location": "/commands/device/app/close-app/#close-an-app", 
            "text": "Close an app on device", 
            "title": "Close an App"
        }, 
        {
            "location": "/commands/device/app/close-app/#example-usage", 
            "text": "// Java\ndriver.closeApp();  # Python\nself.driver.close_app()  // Javascript\n// webdriver.io example\ndriver.closeApp();\n\n// wd example\nawait driver.closeApp();  # Ruby\n# ruby_lib example\nclose_app\n\n# ruby_lib_core example\n@driver.close_app  // C#\ndriver.CloseApp();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/close-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/close-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  None  None  None     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/close-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/close-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/close-app/#endpoint", 
            "text": "POST /session/:session_id/appium/app/close", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/close-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/close-app/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/close-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/close-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/reset-app/", 
            "text": "Reset App\n\n\nReset the currently running app for this session\n\n\nExample Usage\n\n\n// Java\ndriver.resetApp();\n\n\n\n\n\n# Python\nself.driver.reset()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.reset();\n\n// wd example\nawait driver.resetApp();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nreset\n\n# ruby_lib_core example\n@driver.reset\n\n\n\n\n\n// C#\ndriver.ResetApp();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/app/reset\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Reset App"
        }, 
        {
            "location": "/commands/device/app/reset-app/#reset-app", 
            "text": "Reset the currently running app for this session", 
            "title": "Reset App"
        }, 
        {
            "location": "/commands/device/app/reset-app/#example-usage", 
            "text": "// Java\ndriver.resetApp();  # Python\nself.driver.reset()  // Javascript\n// webdriver.io example\ndriver.reset();\n\n// wd example\nawait driver.resetApp();  # Ruby\n# ruby_lib example\nreset\n\n# ruby_lib_core example\n@driver.reset  // C#\ndriver.ResetApp();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/reset-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/reset-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  None  None  None     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/reset-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/reset-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/reset-app/#endpoint", 
            "text": "POST /session/:session_id/appium/app/reset", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/reset-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/reset-app/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/reset-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/reset-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/remove-app/", 
            "text": "Remove App\n\n\nRemove an app from the device\n\n\nExample Usage\n\n\n// Java\ndriver.removeApp(\ncom.example.AppName\n);\n\n\n\n\n\n# Python\nself.driver.remove_app('com.example.AppName');\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.removeApp('com.example.AppName')\n\n// wd example\nawait driver.removeAppFromDevice('com.example.AppName');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nremove_app('com.example.AppName')\n\n# ruby_lib_core example\n@driver.remove_app('com.example.AppName')\n\n\n\n\n\n// C#\ndriver.RemoveApp(\ncom.example.AppName\n);\n\n\n\n\n\nDescription\n\n\niOS tests with XCUITest can also use the \nmobile: removeApp\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/remove_app\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nappId\n\n\nstring\n\n\nThe iOS \nApp ID\n\n\n\n\n\n\nbundleId\n\n\nstring\n\n\niOS bundleID or Android package name\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Remove App"
        }, 
        {
            "location": "/commands/device/app/remove-app/#remove-app", 
            "text": "Remove an app from the device", 
            "title": "Remove App"
        }, 
        {
            "location": "/commands/device/app/remove-app/#example-usage", 
            "text": "// Java\ndriver.removeApp( com.example.AppName );  # Python\nself.driver.remove_app('com.example.AppName');  // Javascript\n// webdriver.io example\ndriver.removeApp('com.example.AppName')\n\n// wd example\nawait driver.removeAppFromDevice('com.example.AppName');  # Ruby\n# ruby_lib example\nremove_app('com.example.AppName')\n\n# ruby_lib_core example\n@driver.remove_app('com.example.AppName')  // C#\ndriver.RemoveApp( com.example.AppName );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/remove-app/#description", 
            "text": "iOS tests with XCUITest can also use the  mobile: removeApp  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/remove-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/remove-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/remove-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/remove-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/remove-app/#endpoint", 
            "text": "POST /session/:session_id/appium/device/remove_app", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/remove-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/remove-app/#json-parameters", 
            "text": "name  type  description      appId  string  The iOS  App ID    bundleId  string  iOS bundleID or Android package name", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/remove-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/remove-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/activate-app/", 
            "text": "Activate App\n\n\nActivate the given app onto the device\n\n\nExample Usage\n\n\n// Java\ndriver.activateApp('com.apple.Preferences');\ndriver.activateApp('io.appium.android.apis');\n\n\n\n\n\n# Python\ndriver.activate_app('com.apple.Preferences')\ndriver.activate_app('io.appium.android.apis')\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.activateApp(null, 'com.apple.Preferences')\ndriver.activateApp('io.appium.android.apis')\n\n// wd example\n// Supports only `mobile: queryAppState` for iOS, XCUITest\n\n\n\n\n\n# Ruby\n# ruby_lib example\nactivate_app('com.apple.Preferences')\nactivate_app('io.appium.android.apis')\n\n# ruby_lib_core example\n@driver.activate_app('com.apple.Preferences')\n@driver.activate_app('io.appium.android.apis')\n\n\n\n\n\n// C#\ndriver.activateApp('com.apple.Preferences');\ndriver.activateApp('io.appium.android.apis');\n\n\n\n\n\nDescription\n\n\niOS tests with XCUITest can also use the \nmobile: activateApp\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/activate_app\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbundleId or appId\n\n\nstring\n\n\nBundleId for iOS. Package name for Android.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Activate App"
        }, 
        {
            "location": "/commands/device/app/activate-app/#activate-app", 
            "text": "Activate the given app onto the device", 
            "title": "Activate App"
        }, 
        {
            "location": "/commands/device/app/activate-app/#example-usage", 
            "text": "// Java\ndriver.activateApp('com.apple.Preferences');\ndriver.activateApp('io.appium.android.apis');  # Python\ndriver.activate_app('com.apple.Preferences')\ndriver.activate_app('io.appium.android.apis')  // Javascript\n// webdriver.io example\ndriver.activateApp(null, 'com.apple.Preferences')\ndriver.activateApp('io.appium.android.apis')\n\n// wd example\n// Supports only `mobile: queryAppState` for iOS, XCUITest  # Ruby\n# ruby_lib example\nactivate_app('com.apple.Preferences')\nactivate_app('io.appium.android.apis')\n\n# ruby_lib_core example\n@driver.activate_app('com.apple.Preferences')\n@driver.activate_app('io.appium.android.apis')  // C#\ndriver.activateApp('com.apple.Preferences');\ndriver.activateApp('io.appium.android.apis');", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/activate-app/#description", 
            "text": "iOS tests with XCUITest can also use the  mobile: activateApp  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/activate-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/activate-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/activate-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/activate-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/activate-app/#endpoint", 
            "text": "POST /session/:session_id/appium/device/activate_app", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/activate-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/activate-app/#json-parameters", 
            "text": "name  type  description      bundleId or appId  string  BundleId for iOS. Package name for Android.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/activate-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/activate-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/terminate-app/", 
            "text": "Terminate App\n\n\nTerminate the given app on the device\n\n\nExample Usage\n\n\n// Java\ndriver.terminateApp('com.apple.Preferences');\ndriver.terminateApp('io.appium.android.apis');\n\n\n\n\n\n# Python\ndriver.terminate_app('com.apple.Preferences')\ndriver.terminate_app('io.appium.android.apis')\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.terminateApp(null, 'com.apple.Preferences')\ndriver.terminateApp('io.appium.android.apis')\n\n// wd example\n// Supports only `mobile: queryAppState` for iOS, XCUITest\n\n\n\n\n\n# Ruby\n# ruby_lib example\nterminate_app('com.apple.Preferences')\nterminate_app('io.appium.android.apis')\n\n# ruby_lib_core example\n@driver.terminate_app('com.apple.Preferences')\n@driver.terminate_app('io.appium.android.apis')\n\n\n\n\n\n// C#\n// Supports only `mobile: queryAppState` for iOS, XCUITest\n\n\n\n\n\nDescription\n\n\niOS tests with XCUITest can also use the \nmobile: terminateApp\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/terminate_app\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbundleId or appId\n\n\nstring\n\n\nBundleId for iOS. Package name for Android.\n\n\n\n\n\n\noptions.timeout\n\n\nnumber\n\n\n(Only Android) Timeout to retry terminate the app.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Terminate App"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#terminate-app", 
            "text": "Terminate the given app on the device", 
            "title": "Terminate App"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#example-usage", 
            "text": "// Java\ndriver.terminateApp('com.apple.Preferences');\ndriver.terminateApp('io.appium.android.apis');  # Python\ndriver.terminate_app('com.apple.Preferences')\ndriver.terminate_app('io.appium.android.apis')  // Javascript\n// webdriver.io example\ndriver.terminateApp(null, 'com.apple.Preferences')\ndriver.terminateApp('io.appium.android.apis')\n\n// wd example\n// Supports only `mobile: queryAppState` for iOS, XCUITest  # Ruby\n# ruby_lib example\nterminate_app('com.apple.Preferences')\nterminate_app('io.appium.android.apis')\n\n# ruby_lib_core example\n@driver.terminate_app('com.apple.Preferences')\n@driver.terminate_app('io.appium.android.apis')  // C#\n// Supports only `mobile: queryAppState` for iOS, XCUITest", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#description", 
            "text": "iOS tests with XCUITest can also use the  mobile: terminateApp  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#endpoint", 
            "text": "POST /session/:session_id/appium/device/terminate_app", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#json-parameters", 
            "text": "name  type  description      bundleId or appId  string  BundleId for iOS. Package name for Android.    options.timeout  number  (Only Android) Timeout to retry terminate the app.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/terminate-app/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/app-state/", 
            "text": "Get app state\n\n\nGet the given app status on the device\n\n\nExample Usage\n\n\n// Java\ndriver.queryAppState('com.apple.Preferences');\ndriver.queryAppState('io.appium.android.apis');\n\n\n\n\n\n# Python\ndriver.query_app_state('com.apple.Preferences')\ndriver.query_app_state('io.appium.android.apis')\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.queryAppState(null, 'com.apple.Preferences')\ndriver.queryAppState('io.appium.android.apis')\n\n// wd example\n// Supports only `mobile: queryAppState` for iOS, XCUITest\n\n\n\n\n\n# Ruby\n# ruby_lib example\napp_state('com.apple.Preferences')\nquery_app_state('io.appium.android.apis') # `query_` prefix is also available\n\n# ruby_lib_core example\n@driver.app_state('com.apple.Preferences')\n@driver.query_app_state('io.appium.android.apis') # `query_` prefix is also available\n\n\n\n\n\n// C#\n// Supports only `mobile: queryAppState` for iOS, XCUITest\n\n\n\n\n\nDescription\n\n\niOS tests with XCUITest can also use the \nmobile: queryAppState\n method. See detailed \ndocumentation\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/app_state\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbundleId or appId\n\n\nstring\n\n\nBundleId for iOS. Package name for Android.\n\n\n\n\n\n\n\n\nResponse\n\n\nCurrent the target app status. (Clients wrap the response properly) \n0\n is not installed. \n1\n is not running. \n2\n is running in background or suspended. \n3\n is running in background. \n4\n is running in foreground. (\nnumber\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get App State"
        }, 
        {
            "location": "/commands/device/app/app-state/#get-app-state", 
            "text": "Get the given app status on the device", 
            "title": "Get app state"
        }, 
        {
            "location": "/commands/device/app/app-state/#example-usage", 
            "text": "// Java\ndriver.queryAppState('com.apple.Preferences');\ndriver.queryAppState('io.appium.android.apis');  # Python\ndriver.query_app_state('com.apple.Preferences')\ndriver.query_app_state('io.appium.android.apis')  // Javascript\n// webdriver.io example\ndriver.queryAppState(null, 'com.apple.Preferences')\ndriver.queryAppState('io.appium.android.apis')\n\n// wd example\n// Supports only `mobile: queryAppState` for iOS, XCUITest  # Ruby\n# ruby_lib example\napp_state('com.apple.Preferences')\nquery_app_state('io.appium.android.apis') # `query_` prefix is also available\n\n# ruby_lib_core example\n@driver.app_state('com.apple.Preferences')\n@driver.query_app_state('io.appium.android.apis') # `query_` prefix is also available  // C#\n// Supports only `mobile: queryAppState` for iOS, XCUITest", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/app-state/#description", 
            "text": "iOS tests with XCUITest can also use the  mobile: queryAppState  method. See detailed  documentation .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/app/app-state/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/app-state/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/app-state/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/app-state/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/app-state/#endpoint", 
            "text": "POST /session/:session_id/appium/device/app_state", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/app-state/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/app-state/#json-parameters", 
            "text": "name  type  description      bundleId or appId  string  BundleId for iOS. Package name for Android.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/app-state/#response", 
            "text": "Current the target app status. (Clients wrap the response properly)  0  is not installed.  1  is not running.  2  is running in background or suspended.  3  is running in background.  4  is running in foreground. ( number )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/app-state/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/", 
            "text": "Get App Strings\n\n\nGet app strings\n\n\nExample Usage\n\n\n// Java\nMap\nString, String\n appStrings = driver.getAppStringMap(\nen\n, \n/path/to/file\n);\n\n\n\n\n\n# Python\nappStrings = self.driver.app_strings(\nen\n, \n/path/to/file\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet appStrings = driver.getStrings(\nen\n);\n\n// wd example\nlet appStrings = await driver.getAppStrings();\n\n\n\n\n\n# Ruby\n# ruby_lib example\napp_strings(\nen\n)\n\n# ruby_lib_core example\n@driver.app_strings(\nen\n)\n\n\n\n\n\n// C#\nDictionary\nstring, object\n appStrings = driver.GetAppStringDictionary(\nend\n, \n/path/to/file\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/app/strings\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nlanguage\n\n\nstring\n\n\nLanguage code (optional)\n\n\n\n\n\n\nstringFile\n\n\nstring\n\n\nPath to the string file (optional)\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get App Strings"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#get-app-strings", 
            "text": "Get app strings", 
            "title": "Get App Strings"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#example-usage", 
            "text": "// Java\nMap String, String  appStrings = driver.getAppStringMap( en ,  /path/to/file );  # Python\nappStrings = self.driver.app_strings( en ,  /path/to/file )  // Javascript\n// webdriver.io example\nlet appStrings = driver.getStrings( en );\n\n// wd example\nlet appStrings = await driver.getAppStrings();  # Ruby\n# ruby_lib example\napp_strings( en )\n\n# ruby_lib_core example\n@driver.app_strings( en )  // C#\nDictionary string, object  appStrings = driver.GetAppStringDictionary( end ,  /path/to/file );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#endpoint", 
            "text": "POST /session/:session_id/appium/app/strings", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#json-parameters", 
            "text": "name  type  description      language  string  Language code (optional)    stringFile  string  Path to the string file (optional)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/get-app-strings/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/", 
            "text": "End Test Coverage\n\n\nGet test coverage data\n\n\nExample Usage\n\n\n// Java\ndriver.endTestCoverage(\nIntent\n, \n/path\n);\n\n\n\n\n\n# Python\nself.driver.end_test_coverage(\nIntent\n, \n/path\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.endCoverage(\nIntent\n, \n/path\n);\n\n// wd example\nawait driver.endTestCoverageForApp(\nIntent\n, \n/path\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nend_coverage(\nIntent\n, \n/path\n)\n\n# ruby_lib_core example\n@driver.end_coverage(\nIntent\n, \n/path\n)\n\n\n\n\n\n// C#\ndriver.EndTestCoverage(\nIntent\n, \n/path\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nNone\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/app/end_test_coverage\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nintent\n\n\nstring\n\n\nIntent to broadcast\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath to .ec file\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "End Test Coverage"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#end-test-coverage", 
            "text": "Get test coverage data", 
            "title": "End Test Coverage"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#example-usage", 
            "text": "// Java\ndriver.endTestCoverage( Intent ,  /path );  # Python\nself.driver.end_test_coverage( Intent ,  /path )  // Javascript\n// webdriver.io example\ndriver.endCoverage( Intent ,  /path );\n\n// wd example\nawait driver.endTestCoverageForApp( Intent ,  /path );  # Ruby\n# ruby_lib example\nend_coverage( Intent ,  /path )\n\n# ruby_lib_core example\n@driver.end_coverage( Intent ,  /path )  // C#\ndriver.EndTestCoverage( Intent ,  /path );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  None  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#endpoint", 
            "text": "POST /session/:session_id/appium/app/end_test_coverage", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#json-parameters", 
            "text": "name  type  description      intent  string  Intent to broadcast    path  string  Path to .ec file", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/app/end-test-coverage/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/", 
            "text": "Get Clipboard\n\n\nGet the content of the system clipboard\n\n\nExample Usage\n\n\n// Java\ndriver.getClipboard(ClipboardContentType.PLAINTEXT); // get plaintext\ndriver.getClipboardText();\n\n\n\n\n\n# Python\nself.driver.get_clipboard()\nself.driver.get_clipboard_text()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getClipboard();\n\n// wd example\nawait driver.getClipboard();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget_clipboard\n\n# ruby_lib_core example\n@driver.get_clipboard\n\n\n\n\n\n// C#\n// CSharp Code here\n\n\n\n\n\nDescription\n\n\nGet the content of the system clipboard\n\n\n(For iOS real devices) Apple security preferences require the WebDriverAgentRunner application to be in \nforeground\n in order to be able to receive the system clipboard content. Otherwise an empty string is always returned. Consider using \nActivate App\n and \nBackground App\n to change the foreground application. Activate App command cannot launch the WebDriverAgent properly on some environments. It depends on XCTest framework by Apple. Then, you should launch the WebDriverAgent using its Springboard's application icon. Follow the example below.\n1. Open springboard, \n@driver.activate_app 'com.apple.springboard'\n. 2. Find the WDA icon with \n@driver.find_element :accessibility_id, 'WebDriverAgentRunner-Runner'\n (It should be visible on the screen) and click it. 3. Call the get clipboard API. 4. Open the application under test with the \nActivate App\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nAndroid\n \niOS\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/get_clipboard\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontentType\n\n\nstring\n\n\nThe type of the content to get. Plaintext, Image, URL. Android supports only plaintext.\n\n\n\n\n\n\n\n\nResponse\n\n\nClipboard content as base64-encoded string or an empty string if the clipboard is empty (\nstring\n)\n\n\nSee Also", 
            "title": "Get Clipboard"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#get-clipboard", 
            "text": "Get the content of the system clipboard", 
            "title": "Get Clipboard"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#example-usage", 
            "text": "// Java\ndriver.getClipboard(ClipboardContentType.PLAINTEXT); // get plaintext\ndriver.getClipboardText();  # Python\nself.driver.get_clipboard()\nself.driver.get_clipboard_text()  // Javascript\n// webdriver.io example\ndriver.getClipboard();\n\n// wd example\nawait driver.getClipboard();  # Ruby\n# ruby_lib example\nget_clipboard\n\n# ruby_lib_core example\n@driver.get_clipboard  // C#\n// CSharp Code here", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#description", 
            "text": "Get the content of the system clipboard  (For iOS real devices) Apple security preferences require the WebDriverAgentRunner application to be in  foreground  in order to be able to receive the system clipboard content. Otherwise an empty string is always returned. Consider using  Activate App  and  Background App  to change the foreground application. Activate App command cannot launch the WebDriverAgent properly on some environments. It depends on XCTest framework by Apple. Then, you should launch the WebDriverAgent using its Springboard's application icon. Follow the example below.\n1. Open springboard,  @driver.activate_app 'com.apple.springboard' . 2. Find the WDA icon with  @driver.find_element :accessibility_id, 'WebDriverAgentRunner-Runner'  (It should be visible on the screen) and click it. 3. Call the get clipboard API. 4. Open the application under test with the  Activate App .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  Android   iOS    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#endpoint", 
            "text": "POST /session/:session_id/appium/device/get_clipboard", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#json-parameters", 
            "text": "name  type  description      contentType  string  The type of the content to get. Plaintext, Image, URL. Android supports only plaintext.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#response", 
            "text": "Clipboard content as base64-encoded string or an empty string if the clipboard is empty ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/clipboard/get-clipboard/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/", 
            "text": "Set Clipboard\n\n\nSet the content of the system clipboard\n\n\nExample Usage\n\n\n// Java\n// base64Content is Base64-encoded content\ndriver.setClipboard(\nlabel\n, ClipboardContentType.PLAINTEXT, base64Content);\ndriver.setClipboardText(\nhappy testing\n);\n\n\n\n\n\n# Python\nself.driver.set_clipboard('happy testing')\nself.driver.set_clipboard_text('happy testing')\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setClipboard('happy testing', 'plaintext')\n\n// wd example\nawait driver.setClipboard('happy testing', 'plaintext')\n\n\n\n\n\n# Ruby\n# ruby_lib example\nset_clipboard content: 'happy testing'\n\n# ruby_lib_core example\n@driver.set_clipboard content: 'happy testing'\n\n\n\n\n\n// C#\n// CSharp Code here\n\n\n\n\n\nDescription\n\n\nSet the content of the system clipboard\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\niOS\n \nAndroid\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/set_clipboard\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontent\n\n\nString\n\n\nThe actual base64 encoded clipboard content.\n\n\n\n\n\n\ncontentType\n\n\nstring\n\n\nThe type of the content to get. Plaintext, Image, URL. Android supports only plaintext.\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nClipboard data label for Android.\n\n\n\n\n\n\n\n\nResponse\n\n\nResponse from Appium server (\nstring\n)\n\n\nSee Also", 
            "title": "Set Clipboard"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#set-clipboard", 
            "text": "Set the content of the system clipboard", 
            "title": "Set Clipboard"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#example-usage", 
            "text": "// Java\n// base64Content is Base64-encoded content\ndriver.setClipboard( label , ClipboardContentType.PLAINTEXT, base64Content);\ndriver.setClipboardText( happy testing );  # Python\nself.driver.set_clipboard('happy testing')\nself.driver.set_clipboard_text('happy testing')  // Javascript\n// webdriver.io example\ndriver.setClipboard('happy testing', 'plaintext')\n\n// wd example\nawait driver.setClipboard('happy testing', 'plaintext')  # Ruby\n# ruby_lib example\nset_clipboard content: 'happy testing'\n\n# ruby_lib_core example\n@driver.set_clipboard content: 'happy testing'  // C#\n// CSharp Code here", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#description", 
            "text": "Set the content of the system clipboard", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  iOS   Android    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#endpoint", 
            "text": "POST /session/:session_id/appium/device/set_clipboard", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#json-parameters", 
            "text": "name  type  description      content  String  The actual base64 encoded clipboard content.    contentType  string  The type of the content to get. Plaintext, Image, URL. Android supports only plaintext.    label  string  Clipboard data label for Android.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#response", 
            "text": "Response from Appium server ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/clipboard/set-clipboard/#see-also", 
            "text": "", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/", 
            "text": "Emulate power state\n\n\nEmulate power state change on the connected emulator.\n\n\nExample Usage\n\n\n// Java\ndriver.setPowerAC(PowerACState.OFF);\n\n\n\n\n\n# Python\nself.driver.set_power_ac(Power.AC_OFF)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.powerAC('on')\n\n// Not supported\n\n\n\n\n# Ruby\n# ruby_lib example\nset_power_ac :on\n\n# ruby_lib_core example\n@driver.set_power_ac :on\n\n\n\n\n\n// Not supported\n\n\n\n\nDescription\n\n\nFor Android emulator.\nTo set the state of the battery charger to connected or not.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/power_ac\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nstring\n\n\nset the state. on or off\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Power AC"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#emulate-power-state", 
            "text": "Emulate power state change on the connected emulator.", 
            "title": "Emulate power state"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#example-usage", 
            "text": "// Java\ndriver.setPowerAC(PowerACState.OFF);  # Python\nself.driver.set_power_ac(Power.AC_OFF)  // Javascript\n// webdriver.io example\ndriver.powerAC('on')\n\n// Not supported  # Ruby\n# ruby_lib example\nset_power_ac :on\n\n# ruby_lib_core example\n@driver.set_power_ac :on  // Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#description", 
            "text": "For Android emulator.\nTo set the state of the battery charger to connected or not.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  None     Ruby  All  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#endpoint", 
            "text": "POST /session/:session_id/appium/device/power_ac", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#json-parameters", 
            "text": "name  type  description      state  string  set the state. on or off", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/emulator/power_ac/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/", 
            "text": "Emulate power capacity\n\n\nEmulate power capacity change on the connected emulator.\n\n\nExample Usage\n\n\n// Java\ndriver.setPowerCapacity(100);\n\n\n\n\n\n# Python\nself.driver.set_power_capacity(50)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.powerCapacity(50)\n\n// Not supported\n\n\n\n\n# Ruby\n# ruby_lib example\nset_power_capacity 50\n\n# ruby_lib_core example\n@driver.set_power_capacity 50\n\n\n\n\n\n// Not supported\n\n\n\n\nDescription\n\n\nFor Android emulator.\nTo set the battery percentage.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/power_capacity\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npercent\n\n\ninteger\n\n\nercentage value in range [0, 100]\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Power Capacity"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#emulate-power-capacity", 
            "text": "Emulate power capacity change on the connected emulator.", 
            "title": "Emulate power capacity"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#example-usage", 
            "text": "// Java\ndriver.setPowerCapacity(100);  # Python\nself.driver.set_power_capacity(50)  // Javascript\n// webdriver.io example\ndriver.powerCapacity(50)\n\n// Not supported  # Ruby\n# ruby_lib example\nset_power_capacity 50\n\n# ruby_lib_core example\n@driver.set_power_capacity 50  // Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#description", 
            "text": "For Android emulator.\nTo set the battery percentage.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  None     Ruby  All  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#endpoint", 
            "text": "POST /session/:session_id/appium/device/power_capacity", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#json-parameters", 
            "text": "name  type  description      percent  integer  ercentage value in range [0, 100]", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/emulator/power_capacity/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/files/push-file/", 
            "text": "Push File\n\n\nPlace a file onto the device in a particular place\n\n\nExample Usage\n\n\n// Java\ndriver.pushFile(\n/data/local/tmp/foo.bar\n, new File(\n/Users/johndoe/files/foo.bar\n));\n\n\n\n\n\n# Python\ndest_path = '/data/local/tmp/test_push_file.txt'\ndata = bytes('This is the contents of the file to push to the device.', 'utf-8')\nself.driver.push_file(dest_path, base64.b64encode(data).decode('utf-8'))\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet data = new Buffer(\nHello World\n).toString('base64');\ndriver.pushFile('/data/local/tmp/file.txt', data);\n\n// wd example\nawait driver.pushFileToDevice('/data/local/tmp/foo.bar', 'QXJlIHlvdXIgYmVlcnMgb2theT8=');\n\n\n\n\n\n# Ruby\n# ruby_lib example\npush_file('/data/local/tmp/foo.bar', File.read('path/to/file.png'))\n\n# ruby_lib_core example\n@driver.push_file('/data/local/tmp/foo.bar', File.read('path/to/file.png'))\n\n\n\n\n\n// C#\ndriver.PushFile(\n/data/local/tmp/foo.bar\n, new FileInfo(\n/Users/johndoe/files/foo.bar\n))\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/push_file\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath to install the data to\n\n\n\n\n\n\ndata\n\n\nstring\n\n\nContents of file in base64\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Push File"
        }, 
        {
            "location": "/commands/device/files/push-file/#push-file", 
            "text": "Place a file onto the device in a particular place", 
            "title": "Push File"
        }, 
        {
            "location": "/commands/device/files/push-file/#example-usage", 
            "text": "// Java\ndriver.pushFile( /data/local/tmp/foo.bar , new File( /Users/johndoe/files/foo.bar ));  # Python\ndest_path = '/data/local/tmp/test_push_file.txt'\ndata = bytes('This is the contents of the file to push to the device.', 'utf-8')\nself.driver.push_file(dest_path, base64.b64encode(data).decode('utf-8'))  // Javascript\n// webdriver.io example\nlet data = new Buffer( Hello World ).toString('base64');\ndriver.pushFile('/data/local/tmp/file.txt', data);\n\n// wd example\nawait driver.pushFileToDevice('/data/local/tmp/foo.bar', 'QXJlIHlvdXIgYmVlcnMgb2theT8=');  # Ruby\n# ruby_lib example\npush_file('/data/local/tmp/foo.bar', File.read('path/to/file.png'))\n\n# ruby_lib_core example\n@driver.push_file('/data/local/tmp/foo.bar', File.read('path/to/file.png'))  // C#\ndriver.PushFile( /data/local/tmp/foo.bar , new FileInfo( /Users/johndoe/files/foo.bar ))", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/files/push-file/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/files/push-file/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/files/push-file/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/files/push-file/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/files/push-file/#endpoint", 
            "text": "POST /session/:session_id/appium/device/push_file", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/files/push-file/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/files/push-file/#json-parameters", 
            "text": "name  type  description      path  string  Path to install the data to    data  string  Contents of file in base64", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/files/push-file/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/files/push-file/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/files/pull-file/", 
            "text": "Pull File\n\n\nRetrieve a file from the device's file system\n\n\nExample Usage\n\n\n// Java\nbyte[] fileBase64 = driver.pullFile(\n/path/to/device/foo.bar\n);\n\n\n\n\n\n# Python\nfile_base64 = self.driver.pull_file('/path/to/device/foo.bar');\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet data = driver.pullFile('/data/local/tmp/file.txt');\n\n// wd example\nlet fileBase64 = await driver.pullFile('/path/to/device/foo.bar');\n\n\n\n\n\n# Ruby\n# ruby_lib example\npull_file('/data/local/tmp/file.txt')\n\n# ruby_lib_core example\n@driver.pull_file('/data/local/tmp/file.txt')\n\n\n\n\n\n// C#\nbyte[] fileBase64 = driver.PullFile(\n/path/to/device/foo.bar\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/pull_file\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath on the device to pull file from\n\n\n\n\n\n\n\n\nResponse\n\n\nContents of file in base64 (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Pull File"
        }, 
        {
            "location": "/commands/device/files/pull-file/#pull-file", 
            "text": "Retrieve a file from the device's file system", 
            "title": "Pull File"
        }, 
        {
            "location": "/commands/device/files/pull-file/#example-usage", 
            "text": "// Java\nbyte[] fileBase64 = driver.pullFile( /path/to/device/foo.bar );  # Python\nfile_base64 = self.driver.pull_file('/path/to/device/foo.bar');  // Javascript\n// webdriver.io example\nlet data = driver.pullFile('/data/local/tmp/file.txt');\n\n// wd example\nlet fileBase64 = await driver.pullFile('/path/to/device/foo.bar');  # Ruby\n# ruby_lib example\npull_file('/data/local/tmp/file.txt')\n\n# ruby_lib_core example\n@driver.pull_file('/data/local/tmp/file.txt')  // C#\nbyte[] fileBase64 = driver.PullFile( /path/to/device/foo.bar );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/files/pull-file/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/files/pull-file/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/files/pull-file/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/files/pull-file/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/files/pull-file/#endpoint", 
            "text": "POST /session/:session_id/appium/device/pull_file", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/files/pull-file/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/files/pull-file/#json-parameters", 
            "text": "name  type  description      path  string  Path on the device to pull file from", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/files/pull-file/#response", 
            "text": "Contents of file in base64 ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/files/pull-file/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/files/pull-folder/", 
            "text": "Pull Folder\n\n\nRetrieve a folder from the device's file system\n\n\nExample Usage\n\n\n// Java\nbyte[] folder = driver.pullFolder(\n/path/to/device/foo.bar\n);\n\n\n\n\n\n# Python\nfolder_base64 = self.driver.pull_folder('/path/to/device/foo.bar');\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet data = driver.pullFolder('/data/local/tmp/file.txt');\n\n// wd example\nlet folderBase64 = await driver.pullFolder('/path/to/device/foo.bar');\n\n\n\n\n\n# Ruby\n# ruby_lib example\npull_folder('/data/local/tmp/file.txt')\n\n# ruby_lib_core example\n@driver.pull_folder('/data/local/tmp/file.txt')\n\n\n\n\n\n// C#\nbyte[] folder = driver.PullFolder(\n/path/to/device\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/pull_folder\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath to an entire folder on the device\n\n\n\n\n\n\n\n\nResponse\n\n\nA string of Base64 encoded data, representing a zip archive of the contents of the requested folder. (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Pull Folder"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#pull-folder", 
            "text": "Retrieve a folder from the device's file system", 
            "title": "Pull Folder"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#example-usage", 
            "text": "// Java\nbyte[] folder = driver.pullFolder( /path/to/device/foo.bar );  # Python\nfolder_base64 = self.driver.pull_folder('/path/to/device/foo.bar');  // Javascript\n// webdriver.io example\nlet data = driver.pullFolder('/data/local/tmp/file.txt');\n\n// wd example\nlet folderBase64 = await driver.pullFolder('/path/to/device/foo.bar');  # Ruby\n# ruby_lib example\npull_folder('/data/local/tmp/file.txt')\n\n# ruby_lib_core example\n@driver.pull_folder('/data/local/tmp/file.txt')  // C#\nbyte[] folder = driver.PullFolder( /path/to/device );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#endpoint", 
            "text": "POST /session/:session_id/appium/device/pull_folder", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#json-parameters", 
            "text": "name  type  description      path  string  Path to an entire folder on the device", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#response", 
            "text": "A string of Base64 encoded data, representing a zip archive of the contents of the requested folder. ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/files/pull-folder/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/interactions/shake/", 
            "text": "Shake\n\n\nPerform a shake action on the device\n\n\nExample Usage\n\n\n// Java\ndriver.shake();\n\n\n\n\n\n# Python\nself.driver.shake();\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.shake();\n\n// wd example\nawait driver.shake();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nshake\n\n# ruby_lib_core example\n@driver.shake\n\n\n\n\n\n// C#\ndriver.ShakeDevice();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/shake\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Shake"
        }, 
        {
            "location": "/commands/device/interactions/shake/#shake", 
            "text": "Perform a shake action on the device", 
            "title": "Shake"
        }, 
        {
            "location": "/commands/device/interactions/shake/#example-usage", 
            "text": "// Java\ndriver.shake();  # Python\nself.driver.shake();  // Javascript\n// webdriver.io example\ndriver.shake();\n\n// wd example\nawait driver.shake();  # Ruby\n# ruby_lib example\nshake\n\n# ruby_lib_core example\n@driver.shake  // C#\ndriver.ShakeDevice();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/interactions/shake/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/interactions/shake/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/interactions/shake/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/interactions/shake/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/interactions/shake/#endpoint", 
            "text": "POST /session/:session_id/appium/device/shake", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/interactions/shake/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/interactions/shake/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/interactions/shake/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/interactions/shake/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/interactions/lock/", 
            "text": "Lock\n\n\nLock the device\n\n\nExample Usage\n\n\n// Java\ndriver.lockDevice();\n\n\n\n\n\n# Python\nself.driver.lock();\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.lock();\n\n// wd example\nawait driver.lock();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nlock\nlock(5) # lock 5 seconds\n\n# ruby_lib_core example\n@driver.lock\n@driver.lock(5) # lock 5 seconds\n\n\n\n\n\n// C#\ndriver.Lock(); // Supported by IOSDriver \n AndroidDriver\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/lock\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nseconds\n\n\nnumber\n\n\nHow long to lock the screen (iOS only).\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Lock"
        }, 
        {
            "location": "/commands/device/interactions/lock/#lock", 
            "text": "Lock the device", 
            "title": "Lock"
        }, 
        {
            "location": "/commands/device/interactions/lock/#example-usage", 
            "text": "// Java\ndriver.lockDevice();  # Python\nself.driver.lock();  // Javascript\n// webdriver.io example\ndriver.lock();\n\n// wd example\nawait driver.lock();  # Ruby\n# ruby_lib example\nlock\nlock(5) # lock 5 seconds\n\n# ruby_lib_core example\n@driver.lock\n@driver.lock(5) # lock 5 seconds  // C#\ndriver.Lock(); // Supported by IOSDriver   AndroidDriver", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/interactions/lock/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/interactions/lock/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/interactions/lock/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/interactions/lock/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/interactions/lock/#endpoint", 
            "text": "POST /session/:session_id/appium/device/lock", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/interactions/lock/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/interactions/lock/#json-parameters", 
            "text": "name  type  description      seconds  number  How long to lock the screen (iOS only).", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/interactions/lock/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/interactions/lock/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/interactions/unlock/", 
            "text": "Unlock\n\n\nUnlock the device\n\n\nExample Usage\n\n\n// Java\ndriver.lockDevice();\ndriver.unlockDevice();\n\n\n\n\n\n# Python\nself.driver.lock();\nself.driver.unlock();\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.lock()\n  .unlock();\n\n// wd example\nawait driver.lock();\nawait driver.unlock();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nunlock\n\n# ruby_lib_core example\n@driver.unlock\n\n\n\n\n\n// C#\ndriver.Unlock(); // Supported by IOSDriver \n AndroidDriver\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/unlock\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Unlock"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#unlock", 
            "text": "Unlock the device", 
            "title": "Unlock"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#example-usage", 
            "text": "// Java\ndriver.lockDevice();\ndriver.unlockDevice();  # Python\nself.driver.lock();\nself.driver.unlock();  // Javascript\n// webdriver.io example\ndriver.lock()\n  .unlock();\n\n// wd example\nawait driver.lock();\nawait driver.unlock();  # Ruby\n# ruby_lib example\nunlock\n\n# ruby_lib_core example\n@driver.unlock  // C#\ndriver.Unlock(); // Supported by IOSDriver   AndroidDriver", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#endpoint", 
            "text": "POST /session/:session_id/appium/device/unlock", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/interactions/unlock/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/", 
            "text": "Is Device Locked\n\n\nCheck whether the device is locked or not\n\n\nExample Usage\n\n\n// Java\nboolean isLocked = driver.isDeviceLocked();\n\n\n\n\n\n# Python\nself.driver.is_locked()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.isLocked();\n\n// wd example\nlet isLocked = await driver.isLocked();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ndevice_locked?\n\n# ruby_lib_core example\n@driver.device_locked?\n\n\n\n\n\n// C#\nbool isLocked = driver.IsLocked(); // Supported by IOSDriver \n AndroidDriver\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/is_locked\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nTrue if the device is locked, false if not (\nboolean\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Is Locked"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#is-device-locked", 
            "text": "Check whether the device is locked or not", 
            "title": "Is Device Locked"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#example-usage", 
            "text": "// Java\nboolean isLocked = driver.isDeviceLocked();  # Python\nself.driver.is_locked()  // Javascript\n// webdriver.io example\ndriver.isLocked();\n\n// wd example\nlet isLocked = await driver.isLocked();  # Ruby\n# ruby_lib example\ndevice_locked?\n\n# ruby_lib_core example\n@driver.device_locked?  // C#\nbool isLocked = driver.IsLocked(); // Supported by IOSDriver   AndroidDriver", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#endpoint", 
            "text": "POST /session/:session_id/appium/device/is_locked", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#response", 
            "text": "True if the device is locked, false if not ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/interactions/is-locked/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/interactions/rotate/", 
            "text": "Rotate\n\n\nRotate the device in three dimensions\n\n\nExample Usage\n\n\n// Java\ndriver.rotate(new DeviceRotation(10, 10, 10));\n\n\n\n\n\n# Not supported\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.rotateDevice(100, 100);\n\n// wd example\ndriver.rotateDevice({x: 114, y: 198, duration: 5, radius: 3, rotation: 220, touchCount: 2});\n\n\n\n\n\n# Not supported\n# Not supported\n\n\n\n\n// C#\ndriver.Rotate(new Dictionary\nstring, int\n { { \nx\n, 114 }, { \ny\n, 198 }, { \nduration\n, 5 }, { \nradius\n, 3 }, { \nrotation\n, 220 }, { \ntouchCount\n, 2 } });\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/rotate\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nx offset to use for the center of the rotate gesture\n\n\n\n\n\n\ny\n\n\nnumber\n\n\ny offset to use for the center of the rotate gesture\n\n\n\n\n\n\nradius\n\n\nnumber\n\n\nThe distance in points from the center to the edge of the circular path\n\n\n\n\n\n\nrotation\n\n\nnumber\n\n\nThe length of rotation in radians\n\n\n\n\n\n\ntouchCount\n\n\nnumber\n\n\nThe number of touches to use in the specified gesture. (Effectively, the number of fingers a user would use to make the specified gesture.) Valid values are 1 to 5.\n\n\n\n\n\n\nduration\n\n\nnumber\n\n\nThe length of hold time for the specified gesture, in seconds.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Rotate"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#rotate", 
            "text": "Rotate the device in three dimensions", 
            "title": "Rotate"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#example-usage", 
            "text": "// Java\ndriver.rotate(new DeviceRotation(10, 10, 10));  # Not supported  // Javascript\n// webdriver.io example\ndriver.rotateDevice(100, 100);\n\n// wd example\ndriver.rotateDevice({x: 114, y: 198, duration: 5, radius: 3, rotation: 220, touchCount: 2});  # Not supported\n# Not supported  // C#\ndriver.Rotate(new Dictionary string, int  { {  x , 114 }, {  y , 198 }, {  duration , 5 }, {  radius , 3 }, {  rotation , 220 }, {  touchCount , 2 } });", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  8.0 to 9.3  All  All    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All     Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All     C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#endpoint", 
            "text": "POST /session/:session_id/appium/device/rotate", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#json-parameters", 
            "text": "name  type  description      x  number  x offset to use for the center of the rotate gesture    y  number  y offset to use for the center of the rotate gesture    radius  number  The distance in points from the center to the edge of the circular path    rotation  number  The length of rotation in radians    touchCount  number  The number of touches to use in the specified gesture. (Effectively, the number of fingers a user would use to make the specified gesture.) Valid values are 1 to 5.    duration  number  The length of hold time for the specified gesture, in seconds.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/interactions/rotate/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/", 
            "text": "Press Key Code\n\n\nPress a particular key on an Android Device\n\n\nExample Usage\n\n\n// Java\ndriver.pressKeyCode(AndroidKeyCode.SPACE, AndroidKeyMetastate.META_SHIFT_ON);\n\n\n\n\n\n# Python\nself.driver.press_keycode(10);\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.pressKeyCode(10);\n\n// wd example\nawait driver.pressKeycode(10);\n\n\n\n\n\n# Ruby\n# ruby_lib example\npress_keycode(10)\n\n# ruby_lib_core example\n@driver.press_keycode(10)\n\n\n\n\n\n// C#\ndriver.PressKeyCode(WindowsKeyCode.Windows);\n\n\n\n\n\nDescription\n\n\nSee https://developer.android.com/reference/android/view/KeyEvent.html for reference of available Android key code values\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/press_keycode\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nkeycode\n\n\nnumber\n\n\nKey code pressed on the device. See \nKey Event\n.\n\n\n\n\n\n\nmetastate\n\n\nnumber\n\n\nMetastate for the keypress. See \nKey Event\n.\n\n\n\n\n\n\nflags\n\n\nnumber\n\n\nFlags for the keypress. See \nKey Event\n.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Press keycode"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#press-key-code", 
            "text": "Press a particular key on an Android Device", 
            "title": "Press Key Code"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#example-usage", 
            "text": "// Java\ndriver.pressKeyCode(AndroidKeyCode.SPACE, AndroidKeyMetastate.META_SHIFT_ON);  # Python\nself.driver.press_keycode(10);  // Javascript\n// webdriver.io example\ndriver.pressKeyCode(10);\n\n// wd example\nawait driver.pressKeycode(10);  # Ruby\n# ruby_lib example\npress_keycode(10)\n\n# ruby_lib_core example\n@driver.press_keycode(10)  // C#\ndriver.PressKeyCode(WindowsKeyCode.Windows);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#description", 
            "text": "See https://developer.android.com/reference/android/view/KeyEvent.html for reference of available Android key code values", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#endpoint", 
            "text": "POST /session/:session_id/appium/device/press_keycode", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#json-parameters", 
            "text": "name  type  description      keycode  number  Key code pressed on the device. See  Key Event .    metastate  number  Metastate for the keypress. See  Key Event .    flags  number  Flags for the keypress. See  Key Event .", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/keys/press-keycode/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/", 
            "text": "Long Press Key Code\n\n\nPress and hold a particular key code on an Android device\n\n\nExample Usage\n\n\n// Java\ndriver.longPressKeyCode(AndroidKeyCode.HOME);\n\n\n\n\n\n# Python\nself.driver.long_press_keycode(10);\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.longPressKeyCode(10);\n\n// wd example\nawait driver.longPressKeycode(10);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nlong_press_keycode(10)\n\n# ruby_lib_core example\n@driver.long_press_keycode(10)\n\n\n\n\n\n// C#\ndriver.LongPressKeyCode(WindowsKeyCode.Back);\n\n\n\n\n\nDescription\n\n\nSee https://developer.android.com/reference/android/view/KeyEvent.html# for reference of available Android key codes\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/long_press_keycode\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nkeycode\n\n\nnumber\n\n\nKey code pressed on the device. See \nKey Event\n.\n\n\n\n\n\n\nmetastate\n\n\nnumber\n\n\nMetastate for the keypress. See \nKey Event\n.\n\n\n\n\n\n\nflags\n\n\nnumber\n\n\nFlags for the keypress. See \nKey Event\n.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Long press keycode"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#long-press-key-code", 
            "text": "Press and hold a particular key code on an Android device", 
            "title": "Long Press Key Code"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#example-usage", 
            "text": "// Java\ndriver.longPressKeyCode(AndroidKeyCode.HOME);  # Python\nself.driver.long_press_keycode(10);  // Javascript\n// webdriver.io example\ndriver.longPressKeyCode(10);\n\n// wd example\nawait driver.longPressKeycode(10);  # Ruby\n# ruby_lib example\nlong_press_keycode(10)\n\n# ruby_lib_core example\n@driver.long_press_keycode(10)  // C#\ndriver.LongPressKeyCode(WindowsKeyCode.Back);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#description", 
            "text": "See https://developer.android.com/reference/android/view/KeyEvent.html# for reference of available Android key codes", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#endpoint", 
            "text": "POST /session/:session_id/appium/device/long_press_keycode", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#json-parameters", 
            "text": "name  type  description      keycode  number  Key code pressed on the device. See  Key Event .    metastate  number  Metastate for the keypress. See  Key Event .    flags  number  Flags for the keypress. See  Key Event .", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/keys/long-press-keycode/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/", 
            "text": "Hide Keyboard\n\n\nHide soft keyboard\n\n\nExample Usage\n\n\n// Java\ndriver.hideKeyboard();\n\n\n\n\n\n# Python\nself.driver.hide_keyboard()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.hideKeyboard();\n\n// wd example\nawait driver.hideDeviceKeyboard();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nhide_keyboard\n\n# ruby_lib_core example\n@driver.hide_keyboard\n\n\n\n\n\n// C#\ndriver.HideKeyboard();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/hide_keyboard\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstrategy\n\n\nstring\n\n\nHide keyboard strategy (optional, UIAutomation only). Available strategies - 'press', 'pressKey', 'swipeDown', 'tapOut', 'tapOutside', 'default'.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nKey (optional)\n\n\n\n\n\n\nkeyCode\n\n\nstring\n\n\nKey code (optional)\n\n\n\n\n\n\nkeyName\n\n\nstring\n\n\nKey name (optional)\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Hide Keyboard"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#hide-keyboard", 
            "text": "Hide soft keyboard", 
            "title": "Hide Keyboard"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#example-usage", 
            "text": "// Java\ndriver.hideKeyboard();  # Python\nself.driver.hide_keyboard()  // Javascript\n// webdriver.io example\ndriver.hideKeyboard();\n\n// wd example\nawait driver.hideDeviceKeyboard();  # Ruby\n# ruby_lib example\nhide_keyboard\n\n# ruby_lib_core example\n@driver.hide_keyboard  // C#\ndriver.HideKeyboard();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#endpoint", 
            "text": "POST /session/:session_id/appium/device/hide_keyboard", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#json-parameters", 
            "text": "name  type  description      strategy  string  Hide keyboard strategy (optional, UIAutomation only). Available strategies - 'press', 'pressKey', 'swipeDown', 'tapOut', 'tapOutside', 'default'.    key  string  Key (optional)    keyCode  string  Key code (optional)    keyName  string  Key name (optional)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/keys/hide-keyboard/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/", 
            "text": "Is Keyboard Shown\n\n\nWhether or not the soft keyboard is shown\n\n\nExample Usage\n\n\n// Java\nboolean isKeyboardShown = driver.isKeyboardShown();\n\n\n\n\n\n# Python\ndriver.is_keyboard_shown()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.isKeyboardShown();\n\n// wd example\nawait driver.isKeyboardShown();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nis_keyboard_shown\n\n# ruby_lib_core example\n@driver.is_keyboard_shown\n\n\n\n\n\n// Not supported\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/device/is_keyboard_shown\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nTrue if the keyboard is shown. (\nboolean\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Is Keyboard Shown"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#is-keyboard-shown", 
            "text": "Whether or not the soft keyboard is shown", 
            "title": "Is Keyboard Shown"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#example-usage", 
            "text": "// Java\nboolean isKeyboardShown = driver.isKeyboardShown();  # Python\ndriver.is_keyboard_shown()  // Javascript\n// webdriver.io example\ndriver.isKeyboardShown();\n\n// wd example\nawait driver.isKeyboardShown();  # Ruby\n# ruby_lib example\nis_keyboard_shown\n\n# ruby_lib_core example\n@driver.is_keyboard_shown  // Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  None     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#endpoint", 
            "text": "GET /session/:session_id/appium/device/is_keyboard_shown", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#response", 
            "text": "True if the keyboard is shown. ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/keys/is-keyboard-shown/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/", 
            "text": "Toggle Airplane Mode\n\n\nToggle airplane mode on device\n\n\nExample Usage\n\n\n// Java\ndriver.toggleAirplaneMode();\n\n\n\n\n\n# Not supported\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.toggleAirplaneMode();\n\n// wd example\nawait driver.toggleAirplaneMode();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntoggle_flight_mode\n\n# ruby_lib_core example\n@driver.toggle_flight_mode\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/toggle_airplane_mode\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Toggle Airplane Mode"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#toggle-airplane-mode", 
            "text": "Toggle airplane mode on device", 
            "title": "Toggle Airplane Mode"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#example-usage", 
            "text": "// Java\ndriver.toggleAirplaneMode();  # Not supported  // Javascript\n// webdriver.io example\ndriver.toggleAirplaneMode();\n\n// wd example\nawait driver.toggleAirplaneMode();  # Ruby\n# ruby_lib example\ntoggle_flight_mode\n\n# ruby_lib_core example\n@driver.toggle_flight_mode  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  None     Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#endpoint", 
            "text": "POST /session/:session_id/appium/device/toggle_airplane_mode", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/toggle-airplane-mode/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/toggle-data/", 
            "text": "Toggle Data\n\n\nSwitch the state of data service\n\n\nExample Usage\n\n\n// Java\ndriver.toggleData();\n\n\n\n\n\n# Not supported\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.toggleData();\n\n// wd example\nawait driver.toggleData();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntoggle_data\n\n# ruby_lib_core example\n@driver.toggle_data\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nDescription\n\n\nSwitch the state of data service.\n\n\n(For Android) This API does not work for Android API level 21+\nbecause it requires system or carrier privileged permission, and Android \n= 21 does not support granting permissions.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/toggle_data\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Toggle Data"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#toggle-data", 
            "text": "Switch the state of data service", 
            "title": "Toggle Data"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#example-usage", 
            "text": "// Java\ndriver.toggleData();  # Not supported  // Javascript\n// webdriver.io example\ndriver.toggleData();\n\n// wd example\nawait driver.toggleData();  # Ruby\n# ruby_lib example\ntoggle_data\n\n# ruby_lib_core example\n@driver.toggle_data  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#description", 
            "text": "Switch the state of data service.  (For Android) This API does not work for Android API level 21+\nbecause it requires system or carrier privileged permission, and Android  = 21 does not support granting permissions.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  None     Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#endpoint", 
            "text": "POST /session/:session_id/appium/device/toggle_data", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/toggle-data/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/", 
            "text": "Toggle WiFi\n\n\nSwitch the state of the WiFi service\n\n\nExample Usage\n\n\n// Java\ndriver.toggleWifi();\n\n\n\n\n\n# Python\ndriver.toggle_wifi()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.toggleWiFi();\n\n// wd example\nawait driver.toggleWiFi();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntoggle_wifi\n\n# ruby_lib_core example\n@driver.toggle_wifi\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nDescription\n\n\nSwitch the state of the WiFi service.\nSince Android Q, a method to change the WiFi service state has been restricted. \n#12327\n Please toggle the state via UI instead of this method. The UI flow depends on devices. Please make sure to encode the correct UI flow on your target device under test.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/toggle_wifi\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Toggle WiFi"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#toggle-wifi", 
            "text": "Switch the state of the WiFi service", 
            "title": "Toggle WiFi"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#example-usage", 
            "text": "// Java\ndriver.toggleWifi();  # Python\ndriver.toggle_wifi()  // Javascript\n// webdriver.io example\ndriver.toggleWiFi();\n\n// wd example\nawait driver.toggleWiFi();  # Ruby\n# ruby_lib example\ntoggle_wifi\n\n# ruby_lib_core example\n@driver.toggle_wifi  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#description", 
            "text": "Switch the state of the WiFi service.\nSince Android Q, a method to change the WiFi service state has been restricted.  #12327  Please toggle the state via UI instead of this method. The UI flow depends on devices. Please make sure to encode the correct UI flow on your target device under test.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#endpoint", 
            "text": "POST /session/:session_id/appium/device/toggle_wifi", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/toggle-wifi/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/", 
            "text": "Toggle Location Services\n\n\nSwitch the state of the location service\n\n\nExample Usage\n\n\n// Java\ndriver.toggleLocationServices();\n\n\n\n\n\n# Python\nself.driver.toggle_location_services();\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.toggleLocationServices();\n\n// wd example\nawait driver.toggleLocationServices();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntoggle_location_services\n\n# ruby_lib_core example\n@driver.toggle_location_services\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/toggle_location_services\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Toggle Location Services"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#toggle-location-services", 
            "text": "Switch the state of the location service", 
            "title": "Toggle Location Services"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#example-usage", 
            "text": "// Java\ndriver.toggleLocationServices();  # Python\nself.driver.toggle_location_services();  // Javascript\n// webdriver.io example\ndriver.toggleLocationServices();\n\n// wd example\nawait driver.toggleLocationServices();  # Ruby\n# ruby_lib example\ntoggle_location_services\n\n# ruby_lib_core example\n@driver.toggle_location_services  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#endpoint", 
            "text": "POST /session/:session_id/appium/device/toggle_location_services", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/toggle-location-services/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/send-sms/", 
            "text": "Send SMS\n\n\nSimulate an SMS message (Emulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.sendSMS(\n555-123-4567\n, \nHey lol\n);\n\n\n\n\n\n# Python\nself.driver.send_sms('555-123-4567', 'Hey lol')\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.sendSms('555-123-4567', 'Hey lol');\n\n// wd example\nawait driver.sendSms('555-123-4567', 'Hey lol');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nsend_sms(phone_number: '555-123-4567', message: 'Hey lol')\n\n# ruby_lib_core example\n@driver.send_sms(phone_number: '555-123-4567', message: 'Hey lol')\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/send_sms\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nphoneNumber\n\n\nstring\n\n\nThe phone number to send the SMS too\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\nThe SMS message\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Send SMS"
        }, 
        {
            "location": "/commands/device/network/send-sms/#send-sms", 
            "text": "Simulate an SMS message (Emulator only)", 
            "title": "Send SMS"
        }, 
        {
            "location": "/commands/device/network/send-sms/#example-usage", 
            "text": "// Java\ndriver.sendSMS( 555-123-4567 ,  Hey lol );  # Python\nself.driver.send_sms('555-123-4567', 'Hey lol')  // Javascript\n// webdriver.io example\ndriver.sendSms('555-123-4567', 'Hey lol');\n\n// wd example\nawait driver.sendSms('555-123-4567', 'Hey lol');  # Ruby\n# ruby_lib example\nsend_sms(phone_number: '555-123-4567', message: 'Hey lol')\n\n# ruby_lib_core example\n@driver.send_sms(phone_number: '555-123-4567', message: 'Hey lol')  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/send-sms/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/send-sms/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/send-sms/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/send-sms/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/send-sms/#endpoint", 
            "text": "POST /session/:session_id/appium/device/send_sms", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/send-sms/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/send-sms/#json-parameters", 
            "text": "name  type  description      phoneNumber  string  The phone number to send the SMS too    message  string  The SMS message", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/send-sms/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/send-sms/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/gsm-call/", 
            "text": "GSM Call\n\n\nMake GSM call (Emulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.makeGsmCall(\n5551234567\n, GsmCallActions.CALL);\n\n\n\n\n\n# Python\nself.driver.make_gsm_call('5551234567', GsmCallActions.CALL)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.gsmCall('555-123-4567', 'call');\n\n// wd example\nawait driver.gsmCall('555-123-4567', 'Phone');\n\n\n\n\n\n# Ruby\n# ruby_lib example\ngsm_call(phone_number: '5551234567', action: :call)\n\n# ruby_lib_core example\n@driver.gsm_call(phone_number: '5551234567', action: :call)\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/gsm_call\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nphoneNumber\n\n\nstring\n\n\nThe phone number to call to\n\n\n\n\n\n\naction\n\n\nstring\n\n\nThe action - 'call', 'accept', 'cancel', 'hold'.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "GSM Call"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#gsm-call", 
            "text": "Make GSM call (Emulator only)", 
            "title": "GSM Call"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#example-usage", 
            "text": "// Java\ndriver.makeGsmCall( 5551234567 , GsmCallActions.CALL);  # Python\nself.driver.make_gsm_call('5551234567', GsmCallActions.CALL)  // Javascript\n// webdriver.io example\ndriver.gsmCall('555-123-4567', 'call');\n\n// wd example\nawait driver.gsmCall('555-123-4567', 'Phone');  # Ruby\n# ruby_lib example\ngsm_call(phone_number: '5551234567', action: :call)\n\n# ruby_lib_core example\n@driver.gsm_call(phone_number: '5551234567', action: :call)  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  ?+  1.6.0+  All     Espresso  ?+  1.9.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#endpoint", 
            "text": "POST /session/:session_id/appium/device/gsm_call", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#json-parameters", 
            "text": "name  type  description      phoneNumber  string  The phone number to call to    action  string  The action - 'call', 'accept', 'cancel', 'hold'.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/gsm-call/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/", 
            "text": "GSM Signal\n\n\nSet GSM signal strength (Emulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.setGsmSignalStrength(GsmSignalStrength.GOOD);\n\n\n\n\n\n# Python\nself.driver.set_gsm_signal(GsmSignalStrength.GOOD)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.gsmSignal(3);\n\n// wd example\nawait driver.gsmSignal(3);\n\n\n\n\n\n# Ruby\n# ruby_lib example\ngsm_signal :good\n\n# ruby_lib_core example\n@driver.gsm_signal :good\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/gsm_signal\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsignalStrength\n\n\nstring\n\n\nSignal strength in the range [0, 4]\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "GSM Signal"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#gsm-signal", 
            "text": "Set GSM signal strength (Emulator only)", 
            "title": "GSM Signal"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#example-usage", 
            "text": "// Java\ndriver.setGsmSignalStrength(GsmSignalStrength.GOOD);  # Python\nself.driver.set_gsm_signal(GsmSignalStrength.GOOD)  // Javascript\n// webdriver.io example\ndriver.gsmSignal(3);\n\n// wd example\nawait driver.gsmSignal(3);  # Ruby\n# ruby_lib example\ngsm_signal :good\n\n# ruby_lib_core example\n@driver.gsm_signal :good  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  ?+  1.6.0+  All     Espresso  ?+  1.9.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#endpoint", 
            "text": "POST /session/:session_id/appium/device/gsm_signal", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#json-parameters", 
            "text": "name  type  description      signalStrength  string  Signal strength in the range [0, 4]", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/gsm-signal/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/", 
            "text": "GSM Voice\n\n\nSet GSM voice state (Emulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.setGsmVoice(GsmVoiceState.HOME);\n\n\n\n\n\n# Python\nself.driver.set_gsm_voice(GsmVoiceState.HOME)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.gsmVoice('home');\n\n// wd example\nawait driver.gsmVoice('Voice state');\n\n\n\n\n\n# Ruby\n# ruby_lib example\ngsm_voice :home\n\n# ruby_lib_core example\n@driver.gsm_voice :home\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/gsm_voice\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstate\n\n\nstring\n\n\nState of GSM voice - 'unregistered', 'home', 'roaming', 'searching', 'denied', 'off', 'on'.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "GSM Voice"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#gsm-voice", 
            "text": "Set GSM voice state (Emulator only)", 
            "title": "GSM Voice"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#example-usage", 
            "text": "// Java\ndriver.setGsmVoice(GsmVoiceState.HOME);  # Python\nself.driver.set_gsm_voice(GsmVoiceState.HOME)  // Javascript\n// webdriver.io example\ndriver.gsmVoice('home');\n\n// wd example\nawait driver.gsmVoice('Voice state');  # Ruby\n# ruby_lib example\ngsm_voice :home\n\n# ruby_lib_core example\n@driver.gsm_voice :home  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  ?+  1.6.0+  All     Espresso  ?+  1.9.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#endpoint", 
            "text": "POST /session/:session_id/appium/device/gsm_voice", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#json-parameters", 
            "text": "name  type  description      state  string  State of GSM voice - 'unregistered', 'home', 'roaming', 'searching', 'denied', 'off', 'on'.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/gsm-voice/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/network/network-speed/", 
            "text": "Network speed\n\n\nSet network speed (Emulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.setNetworkSpeed(NetworkSpeed.LTE);\n\n\n\n\n\n# Python\nself.driver.set_network_speed(NetSpeed.LTE)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.toggleNetworkSpeed('lte');\n\n// wd example\nawait driver.networkSpeed('Network type');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nset_network_speed :lte\n\n# ruby_lib_core example\n@driver.set_network_speed :lte\n\n\n\n\n\n// Not supported\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/network_speed\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nnetspeed\n\n\nstring\n\n\nNetwork type - 'full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo'\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Network Speed"
        }, 
        {
            "location": "/commands/device/network/network-speed/#network-speed", 
            "text": "Set network speed (Emulator only)", 
            "title": "Network speed"
        }, 
        {
            "location": "/commands/device/network/network-speed/#example-usage", 
            "text": "// Java\ndriver.setNetworkSpeed(NetworkSpeed.LTE);  # Python\nself.driver.set_network_speed(NetSpeed.LTE)  // Javascript\n// webdriver.io example\ndriver.toggleNetworkSpeed('lte');\n\n// wd example\nawait driver.networkSpeed('Network type');  # Ruby\n# ruby_lib example\nset_network_speed :lte\n\n# ruby_lib_core example\n@driver.set_network_speed :lte  // Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/network/network-speed/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/network/network-speed/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  ?+  1.6.0+  All     Espresso  ?+  1.9.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/network/network-speed/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/network/network-speed/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/network/network-speed/#endpoint", 
            "text": "POST /session/:session_id/appium/device/network_speed", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/network/network-speed/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/network/network-speed/#json-parameters", 
            "text": "name  type  description      netspeed  string  Network type - 'full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo'", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/network/network-speed/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/network/network-speed/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/", 
            "text": "Get Performance Data\n\n\nReturns the information of the system state which is supported to read as like cpu, memory, network traffic, and battery\n\n\nExample Usage\n\n\n// Java\nList\nList\nObject\n performanceData = driver.getPerformanceData(\nmy.app.package\n, \ncpuinfo\n, 5);\n\n\n\n\n\n# Python\nself.driver.get_performance_data('my.app.package', 'cpuinfo', 5)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getPerformanceData('my.app.package', 'cpuinfo', 5);\n\n// wd example\nawait driver.getPerformanceData('my.app.package', 'cpuinfo', 5);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10\n\n# ruby_lib_core example\n@driver.get_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10\n\n\n\n\n\n// C#\n// Not supported\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/getPerformanceData\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npackageName\n\n\nstring\n\n\nThe package name of the application\n\n\n\n\n\n\ndataType\n\n\nstring\n\n\nThe type of system state which wants to read. It should be one of the supported performance data types.\n\n\n\n\n\n\ndataReadTimeout\n\n\nnumber\n\n\nThe number of attempts to read (optional)\n\n\n\n\n\n\n\n\nResponse\n\n\nThe information type of the system state which is supported to read as like cpu, memory, network traffic, and battery (\narray\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Performance Data"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#get-performance-data", 
            "text": "Returns the information of the system state which is supported to read as like cpu, memory, network traffic, and battery", 
            "title": "Get Performance Data"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#example-usage", 
            "text": "// Java\nList List Object  performanceData = driver.getPerformanceData( my.app.package ,  cpuinfo , 5);  # Python\nself.driver.get_performance_data('my.app.package', 'cpuinfo', 5)  // Javascript\n// webdriver.io example\ndriver.getPerformanceData('my.app.package', 'cpuinfo', 5);\n\n// wd example\nawait driver.getPerformanceData('my.app.package', 'cpuinfo', 5);  # Ruby\n# ruby_lib example\nget_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10\n\n# ruby_lib_core example\n@driver.get_performance_data package_name: 'io.appium.android.apis', data_type: 'cpuinfo', data_read_timeout: 10  // C#\n// Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  None  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#endpoint", 
            "text": "POST /session/:session_id/appium/getPerformanceData", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#json-parameters", 
            "text": "name  type  description      packageName  string  The package name of the application    dataType  string  The type of system state which wants to read. It should be one of the supported performance data types.    dataReadTimeout  number  The number of attempts to read (optional)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#response", 
            "text": "The information type of the system state which is supported to read as like cpu, memory, network traffic, and battery ( array string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/performance-data/get-performance-data/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/", 
            "text": "Get Performance Data Types\n\n\nReturns the information types of the system state which is supported to read as like cpu, memory, network traffic, and battery\n\n\nExample Usage\n\n\n// Java\nList\nString\n performanceTypes = driver.getSupportedPerformanceDataTypes();\n\n\n\n\n\n# Python\nself.driver.get_performance_data_types()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getPerformanceDataTypes();\n\n// wd example\nawait driver.getSupportedPerformanceDataTypes();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget_performance_data_types\n\n# ruby_lib_core example\n@driver.get_performance_data_types\n\n\n\n\n\n// C#\n// Not supported\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/performanceData/types\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe available performance data types (cpuinfo|batteryinfo|networkinfo|memoryinfo) (\narray\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Performance Data Types"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#get-performance-data-types", 
            "text": "Returns the information types of the system state which is supported to read as like cpu, memory, network traffic, and battery", 
            "title": "Get Performance Data Types"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#example-usage", 
            "text": "// Java\nList String  performanceTypes = driver.getSupportedPerformanceDataTypes();  # Python\nself.driver.get_performance_data_types()  // Javascript\n// webdriver.io example\ndriver.getPerformanceDataTypes();\n\n// wd example\nawait driver.getSupportedPerformanceDataTypes();  # Ruby\n# ruby_lib example\nget_performance_data_types\n\n# ruby_lib_core example\n@driver.get_performance_data_types  // C#\n// Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  None  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#endpoint", 
            "text": "POST /session/:session_id/appium/performanceData/types", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#response", 
            "text": "The available performance data types (cpuinfo|batteryinfo|networkinfo|memoryinfo) ( array string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/performance-data/performance-data-types/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/", 
            "text": "Start Recording Screen\n\n\nStart recording screen\n\n\nExample Usage\n\n\n// Java\ndriver.startRecordingScreen();\ndriver.startRecordingScreen(new BaseStartScreenRecordingOptions(....));\n\n\n\n\n\n# Python\nself.driver.start_recording_screen()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.startRecordingScreen();\n\n// wd example\n**NOT AVAILABLE**\n\n\n\n\n\n# Ruby\n# ruby_lib example\nstart_recording_screen\nstart_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android\nstart_recording_screen video_type: 'h264', time_limit: '260' # iOS\n\n# ruby_lib_core example\n@driver.start_recording_screen\n@driver.start_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android\n@driver.start_recording_screen video_type: 'h264', time_limit: '260' # iOS\n\n\n\n\n\n// C#\ndriver.StartRecordingScreen(\n    AndroidStartScreenRecordingOptions.GetAndroidStartScreenRecordingOptions()\n        .WithTimeLimit(TimeSpan.FromSeconds(10))\n        .WithBitRate(500000)\n        .WithVideoSize(\n720x1280\n));\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nstatic.javadoc.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\nnull\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nAndroid\n \niOS\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/start_recording_screen\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe following parameters of the action\n\n\n\n\n\n\noptions.remotePath\n\n\nstring\n\n\nThe path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory. This option only has an effect if there is screen recording process in progress and \nforceRestart\n parameter is not set to \ntrue\n.\n\n\n\n\n\n\noptions.username\n\n\nstring\n\n\nThe name of the user for the remote authentication.\n\n\n\n\n\n\noptions.password\n\n\nstring\n\n\nThe password for the remote authentication.\n\n\n\n\n\n\noptions.method\n\n\nstring\n\n\nThe http multipart upload method name. The 'PUT' one is used by default.\n\n\n\n\n\n\noptions.forceRestart\n\n\nboolean\n\n\nWhether to try to catch and upload/return the currently running screen recording (\nfalse\n, the default setting on server) or ignore the result of it and start a new recording immediately (\ntrue\n).\n\n\n\n\n\n\noptions.timeLimit\n\n\nstring\n\n\nRecording time. 180 seconds is by default.\n\n\n\n\n\n\noptions.videoType\n\n\nstring\n\n\n(iOS Only) The format of the screen capture to be recorded. Available formats are the output of \nffmpeg -codecs\n such as \nlibx264\n and \nmpeg4\n. Defaults to \nmjpeg\n.\n\n\n\n\n\n\noptions.videoQuality\n\n\nstring\n\n\n(iOS Only) The video encoding quality (low, medium, high, photo - defaults to medium).\n\n\n\n\n\n\noptions.videoFps\n\n\nstring\n\n\n(iOS Only) The Frames Per Second rate of the recorded video. Change this value if the resulting video is too slow or too fast. Defaults to 10. This can decrease the resulting file size.\n\n\n\n\n\n\noptions.videoScale\n\n\nstring\n\n\n(iOS Only) The scaling value to apply. Read https://trac.ffmpeg.org/wiki/Scaling for possible values. Example value of 720p scaling is '1280:720'. This can decrease/increase the resulting file size. No scale is applied by default.\n\n\n\n\n\n\noptions.bitRate\n\n\nstring\n\n\n(Android Only) The video bit rate for the video, in megabits per second. 4 Mbp/s(4000000) is by default for Android API level below 27. 20 Mb/s(20000000) for API level 27 and above.\n\n\n\n\n\n\noptions.videoSize\n\n\nstring\n\n\n(Android Only) The format is widthxheight. The default value is the device's native display resolution (if supported), 1280x720 if not. For best results, use a size supported by your device's Advanced Video Coding (AVC) encoder. For example, \"1280x720\"\n\n\n\n\n\n\noptions.bugReport\n\n\nstring\n\n\n(Android Only) Set it to \ntrue\n in order to display additional information on the video overlay, such as a timestamp, that is helpful in videos captured to illustrate bugs. This option is only supported since API level 27 (Android O).\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Start Screen Recording"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#start-recording-screen", 
            "text": "Start recording screen", 
            "title": "Start Recording Screen"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#example-usage", 
            "text": "// Java\ndriver.startRecordingScreen();\ndriver.startRecordingScreen(new BaseStartScreenRecordingOptions(....));  # Python\nself.driver.start_recording_screen()  // Javascript\n// webdriver.io example\ndriver.startRecordingScreen();\n\n// wd example\n**NOT AVAILABLE**  # Ruby\n# ruby_lib example\nstart_recording_screen\nstart_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android\nstart_recording_screen video_type: 'h264', time_limit: '260' # iOS\n\n# ruby_lib_core example\n@driver.start_recording_screen\n@driver.start_recording_screen video_size: '1280x720', time_limit: '180', bit_rate: '5000000' # Android\n@driver.start_recording_screen video_type: 'h264', time_limit: '260' # iOS  // C#\ndriver.StartRecordingScreen(\n    AndroidStartScreenRecordingOptions.GetAndroidStartScreenRecordingOptions()\n        .WithTimeLimit(TimeSpan.FromSeconds(10))\n        .WithBitRate(500000)\n        .WithVideoSize( 720x1280 ));", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  static.javadoc.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  null    Ruby  All  Android   iOS    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#endpoint", 
            "text": "POST /session/:session_id/appium/start_recording_screen", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#json-parameters", 
            "text": "name  type  description      options  object  The following parameters of the action    options.remotePath  string  The path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory. This option only has an effect if there is screen recording process in progress and  forceRestart  parameter is not set to  true .    options.username  string  The name of the user for the remote authentication.    options.password  string  The password for the remote authentication.    options.method  string  The http multipart upload method name. The 'PUT' one is used by default.    options.forceRestart  boolean  Whether to try to catch and upload/return the currently running screen recording ( false , the default setting on server) or ignore the result of it and start a new recording immediately ( true ).    options.timeLimit  string  Recording time. 180 seconds is by default.    options.videoType  string  (iOS Only) The format of the screen capture to be recorded. Available formats are the output of  ffmpeg -codecs  such as  libx264  and  mpeg4 . Defaults to  mjpeg .    options.videoQuality  string  (iOS Only) The video encoding quality (low, medium, high, photo - defaults to medium).    options.videoFps  string  (iOS Only) The Frames Per Second rate of the recorded video. Change this value if the resulting video is too slow or too fast. Defaults to 10. This can decrease the resulting file size.    options.videoScale  string  (iOS Only) The scaling value to apply. Read https://trac.ffmpeg.org/wiki/Scaling for possible values. Example value of 720p scaling is '1280:720'. This can decrease/increase the resulting file size. No scale is applied by default.    options.bitRate  string  (Android Only) The video bit rate for the video, in megabits per second. 4 Mbp/s(4000000) is by default for Android API level below 27. 20 Mb/s(20000000) for API level 27 and above.    options.videoSize  string  (Android Only) The format is widthxheight. The default value is the device's native display resolution (if supported), 1280x720 if not. For best results, use a size supported by your device's Advanced Video Coding (AVC) encoder. For example, \"1280x720\"    options.bugReport  string  (Android Only) Set it to  true  in order to display additional information on the video overlay, such as a timestamp, that is helpful in videos captured to illustrate bugs. This option is only supported since API level 27 (Android O).", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/recording-screen/start-recording-screen/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/", 
            "text": "Stop Recording Screen\n\n\nStop recording screen\n\n\nExample Usage\n\n\n// Java\ndriver.stopRecordingScreen();\ndriver.stopRecordingScreen(new BaseStopScreenRecordingOptions(....));\n\n\n\n\n\n# Python\nself.driver.stop_recording_screen()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.stopRecordingScreen();\n\n// wd example\nawait driver.stopRecordingScreen();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nstop_recording_screen\nstop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST'\n\n# ruby_lib_core example\n@driver.stop_recording_screen\n@driver.stop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST'\n\n\n\n\n\n// C#\ndriver.StopRecordingScreen();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nstatic.javadoc.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/stop_recording_screen\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nremotePath\n\n\nThe path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory.\n\n\n\n\n\n\nusername\n\n\nThe name of the user for the remote authentication.\n\n\n\n\n\n\npassword\n\n\nThe password for the remote authentication.\n\n\n\n\n\n\nmethod\n\n\nThe http multipart upload method name. The 'PUT' one is used by default.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nBase64 encoded string. If remote_path is set, the response is empty string. (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Stop Screen Recording"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#stop-recording-screen", 
            "text": "Stop recording screen", 
            "title": "Stop Recording Screen"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#example-usage", 
            "text": "// Java\ndriver.stopRecordingScreen();\ndriver.stopRecordingScreen(new BaseStopScreenRecordingOptions(....));  # Python\nself.driver.stop_recording_screen()  // Javascript\n// webdriver.io example\ndriver.stopRecordingScreen();\n\n// wd example\nawait driver.stopRecordingScreen();  # Ruby\n# ruby_lib example\nstop_recording_screen\nstop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST'\n\n# ruby_lib_core example\n@driver.stop_recording_screen\n@driver.stop_recording_screen remote_path: 'https://example.com', user: 'example', pass: 'pass', method: 'POST'  // C#\ndriver.StopRecordingScreen();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  static.javadoc.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#endpoint", 
            "text": "POST /session/:session_id/appium/stop_recording_screen", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#url-parameters", 
            "text": "name  description      remotePath  The path to the remote location, where the resulting video should be uploaded. The following protocols are supported http/https, ftp. Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated media file is too big to fit into the available process memory.    username  The name of the user for the remote authentication.    password  The password for the remote authentication.    method  The http multipart upload method name. The 'PUT' one is used by default.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#response", 
            "text": "Base64 encoded string. If remote_path is set, the response is empty string. ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/recording-screen/stop-recording-screen/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/", 
            "text": "Perform Touch ID\n\n\nSimulate a \ntouch id\n event (iOS Simulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.performTouchID(false); // Simulates a failed touch\ndriver.performTouchID(true); // Simulates a passing touch\n\n\n\n\n\n# Python\nself.driver.touch_id(false); # Simulates a failed touch\nself.driver.touch_id(true); # Simulates a passing touch\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchId(false); // Simulates a failed touch\ndriver.touchId(true); // Simulates a passing touch\n\n// wd example\nawait driver.touchId(false); // Simulates a failed touch\nawait driver.touchId(true); // Simulates a failed touch\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_id(false)\ntouch_id(true)\n\n# ruby_lib_core example\n@driver.touch_id(false) # Simulates a failed touch\n@driver.touch_id(true) # Simulates a passing touch\n\n\n\n\n\n// C#\ndriver.PerformTouchID(false); // Simulates a failed touch\ndriver.PerformTouchID(true); // Simulates a passing touch\n\n\n\n\n\nDescription\n\n\nTo enable this feature, the \nallowTouchIdEnroll\n desired capability must be set to true and the Simulator\nmust be \nenrolled\n.\n\n\nWhen you set \nallowTouchIdEnroll\n to true, it will set the Simulator to be enrolled by default.\nThe enrollment state can be \ntoggled\n\n\nThis call will only work if Appium process or its parent application (e.g. Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences \n Security \n Privacy \n Privacy \n Accessibility list\n\n\nFinger Print by Android is \nhere\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/simulator/touch_id\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmatch\n\n\nboolean\n\n\nAre we simulating a successful touch (true) or a failed touch (false)\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification\n\n\nAppium Docs", 
            "title": "Perform Touch ID"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#perform-touch-id", 
            "text": "Simulate a  touch id  event (iOS Simulator only)", 
            "title": "Perform Touch ID"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#example-usage", 
            "text": "// Java\ndriver.performTouchID(false); // Simulates a failed touch\ndriver.performTouchID(true); // Simulates a passing touch  # Python\nself.driver.touch_id(false); # Simulates a failed touch\nself.driver.touch_id(true); # Simulates a passing touch  // Javascript\n// webdriver.io example\ndriver.touchId(false); // Simulates a failed touch\ndriver.touchId(true); // Simulates a passing touch\n\n// wd example\nawait driver.touchId(false); // Simulates a failed touch\nawait driver.touchId(true); // Simulates a failed touch  # Ruby\n# ruby_lib example\ntouch_id(false)\ntouch_id(true)\n\n# ruby_lib_core example\n@driver.touch_id(false) # Simulates a failed touch\n@driver.touch_id(true) # Simulates a passing touch  // C#\ndriver.PerformTouchID(false); // Simulates a failed touch\ndriver.PerformTouchID(true); // Simulates a passing touch", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#description", 
            "text": "To enable this feature, the  allowTouchIdEnroll  desired capability must be set to true and the Simulator\nmust be  enrolled .  When you set  allowTouchIdEnroll  to true, it will set the Simulator to be enrolled by default.\nThe enrollment state can be  toggled  This call will only work if Appium process or its parent application (e.g. Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences   Security   Privacy   Privacy   Accessibility list  Finger Print by Android is  here", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#endpoint", 
            "text": "POST /session/:session_id/appium/simulator/touch_id", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#json-parameters", 
            "text": "name  type  description      match  boolean  Are we simulating a successful touch (true) or a failed touch (false)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/simulator/touch-id/#see-also", 
            "text": "JSONWP Specification  Appium Docs", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/", 
            "text": "Toggle Touch ID Enrollment\n\n\nToggle the simulator being \nenrolled\n to accept touchId  (iOS Simulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.toggleTouchIDEnrollment(true);\n\n\n\n\n\n# Python\nself.driver.toggle_touch_id_enrollment()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.toggleEnrollTouchId(true);\n\n// wd example\nawait driver.toggleTouchIdEnrollment();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntoggle_touch_id_enrollment\n\n# ruby_lib_core example\n@driver.toggle_touch_id_enrollment\n\n\n\n\n\n// C#\n// TODO C# sample\n\n\n\n\n\nDescription\n\n\nTo enable this feature, the \nallowTouchIdEnroll\n desired capability must be set to true. When \nallowTouchIdEnroll\n is set to true\nthe Simulator will be enrolled by default, and the 'Toggle Touch ID Enrollment' changes the enrollment state.\n\n\nAnother way to enable touch id is by using \nmobile: enrollBiometric\n. More info \nhere\n.\n\n\nThis call will only work if the Appium process or its parent application (e.g., Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences \n Security \n Privacy \n Privacy \n Accessibility list\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/simulator/toggle_touch_id_enrollment\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nenabled\n\n\nboolean\n\n\nIf true, enable, if falsey disable, otherwise toggle (optional)\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Toggle Touch ID Enrollment"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#toggle-touch-id-enrollment", 
            "text": "Toggle the simulator being  enrolled  to accept touchId  (iOS Simulator only)", 
            "title": "Toggle Touch ID Enrollment"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#example-usage", 
            "text": "// Java\ndriver.toggleTouchIDEnrollment(true);  # Python\nself.driver.toggle_touch_id_enrollment()  // Javascript\n// webdriver.io example\ndriver.toggleEnrollTouchId(true);\n\n// wd example\nawait driver.toggleTouchIdEnrollment();  # Ruby\n# ruby_lib example\ntoggle_touch_id_enrollment\n\n# ruby_lib_core example\n@driver.toggle_touch_id_enrollment  // C#\n// TODO C# sample", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#description", 
            "text": "To enable this feature, the  allowTouchIdEnroll  desired capability must be set to true. When  allowTouchIdEnroll  is set to true\nthe Simulator will be enrolled by default, and the 'Toggle Touch ID Enrollment' changes the enrollment state.  Another way to enable touch id is by using  mobile: enrollBiometric . More info  here .  This call will only work if the Appium process or its parent application (e.g., Terminal.app or Appium.app) has access to Mac OS accessibility in System Preferences   Security   Privacy   Privacy   Accessibility list", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#endpoint", 
            "text": "POST /session/:session_id/appium/simulator/toggle_touch_id_enrollment", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#json-parameters", 
            "text": "name  type  description      enabled  boolean  If true, enable, if falsey disable, otherwise toggle (optional)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/simulator/toggle-touch-id-enrollment/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/system/open-notifications/", 
            "text": "Open Notifications\n\n\nOpen Android notifications (Emulator only)\n\n\nExample Usage\n\n\n// Java\ndriver.openNotifications();\n\n\n\n\n\n# Python\nself.driver.open_notifications();\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.openNotifications();\n\n// wd example\nawait driver.openNotifications();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nopen_notifications();\n\n# ruby_lib_core example\n@driver.open_notifications();\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/open_notifications\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Open Notifications"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#open-notifications", 
            "text": "Open Android notifications (Emulator only)", 
            "title": "Open Notifications"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#example-usage", 
            "text": "// Java\ndriver.openNotifications();  # Python\nself.driver.open_notifications();  // Javascript\n// webdriver.io example\ndriver.openNotifications();\n\n// wd example\nawait driver.openNotifications();  # Ruby\n# ruby_lib example\nopen_notifications();\n\n# ruby_lib_core example\n@driver.open_notifications();  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  None  None  None     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#endpoint", 
            "text": "POST /session/:session_id/appium/device/open_notifications", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/system/open-notifications/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/system/system-bars/", 
            "text": "Get System Bars\n\n\nRetrieve visibility and bounds information of the status and navigation bars\n\n\nExample Usage\n\n\n// Java\nMap\nString, String\n systemBars = driver.getSystemBars();\n\n\n\n\n\n# Python\nself.driver.get_system_bars()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getSystemBars();\n\n// Not supported\n\n\n\n\n# Ruby\n# ruby_lib example\nget_system_bars\n\n# ruby_lib_core example\n@driver.get_system_bars\n\n\n\n\n\n// C#\n// TODO\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/device/system_bars\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nInformation about visibility and bounds of status and navigation bar (\narray\nobject\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "System Bars"
        }, 
        {
            "location": "/commands/device/system/system-bars/#get-system-bars", 
            "text": "Retrieve visibility and bounds information of the status and navigation bars", 
            "title": "Get System Bars"
        }, 
        {
            "location": "/commands/device/system/system-bars/#example-usage", 
            "text": "// Java\nMap String, String  systemBars = driver.getSystemBars();  # Python\nself.driver.get_system_bars()  // Javascript\n// webdriver.io example\ndriver.getSystemBars();\n\n// Not supported  # Ruby\n# ruby_lib example\nget_system_bars\n\n# ruby_lib_core example\n@driver.get_system_bars  // C#\n// TODO", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/system/system-bars/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/system/system-bars/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/system/system-bars/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  None     Ruby  All  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/system/system-bars/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/system/system-bars/#endpoint", 
            "text": "GET /session/:session_id/appium/device/system_bars", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/system/system-bars/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/system/system-bars/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/system/system-bars/#response", 
            "text": "Information about visibility and bounds of status and navigation bar ( array object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/system/system-bars/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/system/system-time/", 
            "text": "Get System Time\n\n\nGet the time on the device\n\n\nExample Usage\n\n\n// Java\nString time = driver.getDeviceTime();\n\n\n\n\n\n# Python\ntime = self.driver.device_time\n\ntime = self.driver.get_device_time()\ntime = self.driver.get_device_time(\nYYYY-MM-DD\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet time = driver.getDeviceTime();\n\n// wd example\nlet time = await driver.getDeviceTime();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ndevice_time\n\n# ruby_lib_core example\n@driver.device_time\n\n\n\n\n\n// C#\nstring result = driver.DeviceTime;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/device/system_time\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nTime on the device (\nstring\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "System Time"
        }, 
        {
            "location": "/commands/device/system/system-time/#get-system-time", 
            "text": "Get the time on the device", 
            "title": "Get System Time"
        }, 
        {
            "location": "/commands/device/system/system-time/#example-usage", 
            "text": "// Java\nString time = driver.getDeviceTime();  # Python\ntime = self.driver.device_time\n\ntime = self.driver.get_device_time()\ntime = self.driver.get_device_time( YYYY-MM-DD )  // Javascript\n// webdriver.io example\nlet time = driver.getDeviceTime();\n\n// wd example\nlet time = await driver.getDeviceTime();  # Ruby\n# ruby_lib example\ndevice_time\n\n# ruby_lib_core example\n@driver.device_time  // C#\nstring result = driver.DeviceTime;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/system/system-time/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/system/system-time/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/system/system-time/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/system/system-time/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/system/system-time/#endpoint", 
            "text": "GET /session/:session_id/appium/device/system_time", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/system/system-time/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/system/system-time/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/system/system-time/#response", 
            "text": "Time on the device ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/system/system-time/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/system/display-density/", 
            "text": "Get Display Density\n\n\nRetrieve display density(dpi) of the Android device\n\n\nExample Usage\n\n\n// Java\ndriver.getDeviceDensity();\n\n\n\n\n\n# Python\nself.driver.get_display_density()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getDisplayDensity();\n\n// Not supported\n\n\n\n\n# Ruby\n# ruby_lib example\nget_device_density\n\n# ruby_lib_core example\n@driver.get_device_density\n\n\n\n\n\n// Not supported\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/appium/device/display_density\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe device density(dpi) of the Android device (\nnumber\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Display density"
        }, 
        {
            "location": "/commands/device/system/display-density/#get-display-density", 
            "text": "Retrieve display density(dpi) of the Android device", 
            "title": "Get Display Density"
        }, 
        {
            "location": "/commands/device/system/display-density/#example-usage", 
            "text": "// Java\ndriver.getDeviceDensity();  # Python\nself.driver.get_display_density()  // Javascript\n// webdriver.io example\ndriver.getDisplayDensity();\n\n// Not supported  # Ruby\n# ruby_lib example\nget_device_density\n\n# ruby_lib_core example\n@driver.get_device_density  // Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/system/display-density/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/system/display-density/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/system/display-density/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  None     Ruby  All  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/system/display-density/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/system/display-density/#endpoint", 
            "text": "GET /session/:session_id/appium/device/display_density", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/system/display-density/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/system/display-density/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/system/display-density/#response", 
            "text": "The device density(dpi) of the Android device ( number )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/system/display-density/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/", 
            "text": "Finger print\n\n\nAuthenticate users by using their finger print scans on supported emulators.\n\n\nExample Usage\n\n\n// Java\ndriver.fingerPrint(1);\n\n\n\n\n\n# Python\nself.driver.finger_print(1)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nawait driver.fingerPrint(1);\n\n// wd example\nawait driver.fingerprint(1);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfinger_print 1\n\n# ruby_lib_core example\n@driver.finger_print 1\n\n\n\n\n\n// C#\n// CSharp Code here\n\n\n\n\n\nDescription\n\n\nFor Android emulator.\nAuthenticate users by using their finger print scans.\n\n\nTouch ID by iOS is \nhere\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/appium/device/finger_print\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nfingerprintId\n\n\nnumber\n\n\nfinger prints stored in Android Keystore system (from 1 to 10)\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Finger Print"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#finger-print", 
            "text": "Authenticate users by using their finger print scans on supported emulators.", 
            "title": "Finger print"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#example-usage", 
            "text": "// Java\ndriver.fingerPrint(1);  # Python\nself.driver.finger_print(1)  // Javascript\n// webdriver.io example\nawait driver.fingerPrint(1);\n\n// wd example\nawait driver.fingerprint(1);  # Ruby\n# ruby_lib example\nfinger_print 1\n\n# ruby_lib_core example\n@driver.finger_print 1  // C#\n// CSharp Code here", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#description", 
            "text": "For Android emulator.\nAuthenticate users by using their finger print scans.  Touch ID by iOS is  here", 
            "title": "Description"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  None", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#endpoint", 
            "text": "POST /session/:session_id/appium/device/finger_print", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#json-parameters", 
            "text": "name  type  description      fingerprintId  number  finger prints stored in Android Keystore system (from 1 to 10)", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/device/authentication/finger-print/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/find-element/", 
            "text": "Find Element\n\n\nSearch for an element on the page\n\n\nExample Usage\n\n\n// Java\nMobileElement elementOne = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nMobileElement elementTwo = (MobileElement) driver.findElementByClassName(\nSomeClassName\n);\n\n\n\n\n\n# Python\nel = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(\n~SomeAccessibilityId\n);\n\n// wd example\nlet elementOne = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet elementTwo = await driver.element(\nid\n, \nSomeID\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID')\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID')\n\n\n\n\n\n// C#\nAndroidElement elementOne = driver.FindElementByAccessibilityID(\nSome ID\n);\nAndroidElement elementTwo = driver.FindElementByClassName(\nSome class\n);\n\n\n\n\n\nDescription\n\n\nGet the first element that matches a \nlocator strategy\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/element\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nusing\n\n\nstring\n\n\nThe locator strategy to use\n\n\n\n\n\n\nvalue\n\n\nstring\n\n\nThe search target\n\n\n\n\n\n\n\n\nResponse\n\n\nA JSON object for the located element (\nobject\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Find Element"
        }, 
        {
            "location": "/commands/element/find-element/#find-element", 
            "text": "Search for an element on the page", 
            "title": "Find Element"
        }, 
        {
            "location": "/commands/element/find-element/#example-usage", 
            "text": "// Java\nMobileElement elementOne = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nMobileElement elementTwo = (MobileElement) driver.findElementByClassName( SomeClassName );  # Python\nel = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')  // Javascript\n// webdriver.io example\n$( ~SomeAccessibilityId );\n\n// wd example\nlet elementOne = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet elementTwo = await driver.element( id ,  SomeID );  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID')\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID')  // C#\nAndroidElement elementOne = driver.FindElementByAccessibilityID( Some ID );\nAndroidElement elementTwo = driver.FindElementByClassName( Some class );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/find-element/#description", 
            "text": "Get the first element that matches a  locator strategy", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/find-element/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/find-element/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/find-element/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/find-element/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/find-element/#endpoint", 
            "text": "POST /session/:session_id/element", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/find-element/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/find-element/#json-parameters", 
            "text": "name  type  description      using  string  The locator strategy to use    value  string  The search target", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/find-element/#response", 
            "text": "A JSON object for the located element ( object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/find-element/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/find-elements/", 
            "text": "Find Elements\n\n\nSearch for multiple elements\n\n\nExample Usage\n\n\n// Java\nList\nMobileElement\n elementsOne = (List\nMobileElement\n) driver.findElementsByAccessibilityId(\nSomeAccessibilityID\n);\nList\nMobileElement\n elementsTwo = (List\nMobileElement\n) driver.findElementsByClassName(\nSomeClassName\n);\n\n\n\n\n\n# Python\nel = driver.find_element(AppiumBy.ACCESSIBILITY_ID,'SomeAccessibilityID')\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$$(\n~SomeAccessibilityId\n);\n\n// wd example\nlet elementsOne = await driver.elementsByAccessibilityId(\nSomeAccessibilityID\n);\nlet elementsTwo = await driver.elements(\nid\n, \nSomeID\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_elements(:accessibility_id, \n~SomeAccessibilityID\n)\n\n# ruby_lib_core example\n@driver.find_elements(:accessibility_id, \n~SomeAccessibilityID\n)\n\n\n\n\n\n// C#\nIEnumerable\nAppiumWebElement\n elementsOne = driver.FindElementsByAccessibilityId(\nSomeAccessibilityID\n);\nIEnumerable\nAppiumWebElement\n elementsTwo = driver.FindElementsByClassName(\nSomeClassName\n);\n\n\n\n\n\nSelector Strategies\n\n\n\n\n\n\n\n\nStrategy\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAccessibility ID\n\n\nRead a unique identifier for a UI element. For XCUITest it is the element's \naccessibility-id\n attribute. For Android it is the element's \ncontent-desc\n attribute.\n\n\n\n\n\n\nClass name\n\n\nFor IOS it is the full name of the XCUI element and begins with XCUIElementType. For Android it is the full name of the UIAutomator2 class (e.g.: android.widget.TextView)\n\n\n\n\n\n\nID\n\n\nNative element identifier. \nresource-id\n for android; \nname\n for iOS.\n\n\n\n\n\n\nName\n\n\nName of element\n\n\n\n\n\n\nXPath\n\n\nSearch the app XML source using xpath (not recommended, has performance issues)\n\n\n\n\n\n\nImage\n\n\nLocate an element by matching it with a base 64 encoded image file\n\n\n\n\n\n\nAndroid UiAutomator (UiAutomator2 only)\n\n\nUse the UI Automator API, in particular the \nUiSelector\n class to locate elements. In Appium you send the Java code, as a string, to the server, which executes it in the application\u2019s environment, returning the element or elements.\n\n\n\n\n\n\nAndroid View Tag (Espresso only)\n\n\nLocate an element by its \nview tag\n\n\n\n\n\n\nAndroid Data Matcher (Espresso only)\n\n\nLocate an element using \nEspresso DataMatcher\n\n\n\n\n\n\nIOS UIAutomation\n\n\nWhen automating an iOS application, Apple\u2019s \nInstruments\n framework can be used to find elements\n\n\n\n\n\n\n\n\nDescription\n\n\nGet a list of elements that match the \nlocator selector\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/elements\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nusing\n\n\nstring\n\n\nThe locator strategy to use\n\n\n\n\n\n\nvalue\n\n\nstring\n\n\nThe search target\n\n\n\n\n\n\n\n\nResponse\n\n\nA list of of JSON objects for the located elements (\nArray\nString\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Find Elements"
        }, 
        {
            "location": "/commands/element/find-elements/#find-elements", 
            "text": "Search for multiple elements", 
            "title": "Find Elements"
        }, 
        {
            "location": "/commands/element/find-elements/#example-usage", 
            "text": "// Java\nList MobileElement  elementsOne = (List MobileElement ) driver.findElementsByAccessibilityId( SomeAccessibilityID );\nList MobileElement  elementsTwo = (List MobileElement ) driver.findElementsByClassName( SomeClassName );  # Python\nel = driver.find_element(AppiumBy.ACCESSIBILITY_ID,'SomeAccessibilityID')  // Javascript\n// webdriver.io example\n$$( ~SomeAccessibilityId );\n\n// wd example\nlet elementsOne = await driver.elementsByAccessibilityId( SomeAccessibilityID );\nlet elementsTwo = await driver.elements( id ,  SomeID );  # Ruby\n# ruby_lib example\nfind_elements(:accessibility_id,  ~SomeAccessibilityID )\n\n# ruby_lib_core example\n@driver.find_elements(:accessibility_id,  ~SomeAccessibilityID )  // C#\nIEnumerable AppiumWebElement  elementsOne = driver.FindElementsByAccessibilityId( SomeAccessibilityID );\nIEnumerable AppiumWebElement  elementsTwo = driver.FindElementsByClassName( SomeClassName );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/find-elements/#selector-strategies", 
            "text": "Strategy  Description      Accessibility ID  Read a unique identifier for a UI element. For XCUITest it is the element's  accessibility-id  attribute. For Android it is the element's  content-desc  attribute.    Class name  For IOS it is the full name of the XCUI element and begins with XCUIElementType. For Android it is the full name of the UIAutomator2 class (e.g.: android.widget.TextView)    ID  Native element identifier.  resource-id  for android;  name  for iOS.    Name  Name of element    XPath  Search the app XML source using xpath (not recommended, has performance issues)    Image  Locate an element by matching it with a base 64 encoded image file    Android UiAutomator (UiAutomator2 only)  Use the UI Automator API, in particular the  UiSelector  class to locate elements. In Appium you send the Java code, as a string, to the server, which executes it in the application\u2019s environment, returning the element or elements.    Android View Tag (Espresso only)  Locate an element by its  view tag    Android Data Matcher (Espresso only)  Locate an element using  Espresso DataMatcher    IOS UIAutomation  When automating an iOS application, Apple\u2019s  Instruments  framework can be used to find elements", 
            "title": "Selector Strategies"
        }, 
        {
            "location": "/commands/element/find-elements/#description", 
            "text": "Get a list of elements that match the  locator selector .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/find-elements/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/find-elements/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/find-elements/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/find-elements/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/find-elements/#endpoint", 
            "text": "POST /session/:session_id/elements", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/find-elements/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/find-elements/#json-parameters", 
            "text": "name  type  description      using  string  The locator strategy to use    value  string  The search target", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/find-elements/#response", 
            "text": "A list of of JSON objects for the located elements ( Array String )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/find-elements/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/actions/click/", 
            "text": "Click\n\n\nClick element at its center point.\n\n\nExample Usage\n\n\n// Java\nMobileElement el = driver.findElementByAccessibilityId(\nSomeId\n);\nel.click();\n\n\n\n\n\n# Python\nel = self.driver.find_element_by_accessibility_id('SomeId')\nel.click();\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$('#SomeId').click();\n\n// wd example\nlet element = await driver.elementByAccessibilityId('id', 'SomeId');\nawait element.click();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeId').click\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeId').click\n\n\n\n\n\n// C#\nMobileElement el = driver.FindElement(MobileByAccessibilityID(\nSome ID\n);\nel.click();\n\n//Example\nMobileElement el = driver.FindElement(MobileById(\nSome ID\n);\nel.click();\n\n\n\n\n\nDescription\n\n\nClicks element at its center point. If the element's center point is obscured by another element, an element click intercepted error is returned. If the element is outside the viewport, an element not interactable error is returned.\nNot all drivers automatically scroll the element into view and may need to be scrolled to in order to interact with it.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/element/:element_id/click\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nUUID of the session\n\n\n\n\n\n\nelement_id\n\n\nUUID of the element\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Click"
        }, 
        {
            "location": "/commands/element/actions/click/#click", 
            "text": "Click element at its center point.", 
            "title": "Click"
        }, 
        {
            "location": "/commands/element/actions/click/#example-usage", 
            "text": "// Java\nMobileElement el = driver.findElementByAccessibilityId( SomeId );\nel.click();  # Python\nel = self.driver.find_element_by_accessibility_id('SomeId')\nel.click();  // Javascript\n// webdriver.io example\n$('#SomeId').click();\n\n// wd example\nlet element = await driver.elementByAccessibilityId('id', 'SomeId');\nawait element.click();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeId').click\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeId').click  // C#\nMobileElement el = driver.FindElement(MobileByAccessibilityID( Some ID );\nel.click();\n\n//Example\nMobileElement el = driver.FindElement(MobileById( Some ID );\nel.click();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/actions/click/#description", 
            "text": "Clicks element at its center point. If the element's center point is obscured by another element, an element click intercepted error is returned. If the element is outside the viewport, an element not interactable error is returned.\nNot all drivers automatically scroll the element into view and may need to be scrolled to in order to interact with it.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/actions/click/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/actions/click/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/actions/click/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/actions/click/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/actions/click/#endpoint", 
            "text": "POST /session/:session_id/element/:element_id/click", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/actions/click/#url-parameters", 
            "text": "name  description      session_id  UUID of the session    element_id  UUID of the element", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/actions/click/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/actions/click/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/actions/click/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/actions/send-keys/", 
            "text": "Send Keys\n\n\nSend a sequence of key strokes to an element\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nelement.sendKeys(\nHello world!\n);\n\n\n\n\n\n# Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').send_keys('Hello world!')\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(\n~SomeAccessibilityId\n).addValue(\nEnter\n);\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nawait element.type(\nHello world!\n)\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, \nSomeAccessibilityID\n).send_keys(\nHello World!\n)\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, \nSomeAccessibilityID\n).send_keys(\nHello World!\n)\n\n\n\n\n\n// C#\nMobileElement el = driver.FindElement(MobileByAccessibilityID(\nSome ID\n);\nel.SendKeys(\nSome Text\n);\n\n//Example\nMobileElement el = driver.FindElement(MobileById(\nSome ID\n);\nel.SendKeys(\nHello World\n);\n\n\n\n\n\nDescription\n\n\nAny UTF-8 character may be specified, however, if the server does not support native key events, it should simulate key strokes for a standard US keyboard layout. The Unicode Private Use Area code points, 0xE000-0xF8FF, are used to represent pressable, non-text keys (see table below).\n(See \nUnicode document\n for information on Unicode characters)\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/element/:element_id/value\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to send keys to.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\narray\nstring\n\n\n(MJSONWP) The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed\n\n\n\n\n\n\ntext\n\n\nstring\n\n\n(W3C) A single string to be typed\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Send Keys"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#send-keys", 
            "text": "Send a sequence of key strokes to an element", 
            "title": "Send Keys"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nelement.sendKeys( Hello world! );  # Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').send_keys('Hello world!')  // Javascript\n// webdriver.io example\n$( ~SomeAccessibilityId ).addValue( Enter );\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nawait element.type( Hello world! )  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id,  SomeAccessibilityID ).send_keys( Hello World! )\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id,  SomeAccessibilityID ).send_keys( Hello World! )  // C#\nMobileElement el = driver.FindElement(MobileByAccessibilityID( Some ID );\nel.SendKeys( Some Text );\n\n//Example\nMobileElement el = driver.FindElement(MobileById( Some ID );\nel.SendKeys( Hello World );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#description", 
            "text": "Any UTF-8 character may be specified, however, if the server does not support native key events, it should simulate key strokes for a standard US keyboard layout. The Unicode Private Use Area code points, 0xE000-0xF8FF, are used to represent pressable, non-text keys (see table below).\n(See  Unicode document  for information on Unicode characters)", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#endpoint", 
            "text": "POST /session/:session_id/element/:element_id/value", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to send keys to.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#json-parameters", 
            "text": "name  type  description      value  array string  (MJSONWP) The sequence of keys to type. An array must be provided. The server should flatten the array items to a single string to be typed    text  string  (W3C) A single string to be typed", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/actions/send-keys/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/actions/clear/", 
            "text": "Clear Element\n\n\nClear an element's value\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nelement.clear();\n\n\n\n\n\n# Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').clear()\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(\n~SomeAccessibilityId\n).clearValue();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nawait element.clear();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, \nSomeAccessibilityID\n).clear\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, \nSomeAccessibilityID\n).clear\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nelement.Clear();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/element/:element_id/clear\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to clear.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Clear"
        }, 
        {
            "location": "/commands/element/actions/clear/#clear-element", 
            "text": "Clear an element's value", 
            "title": "Clear Element"
        }, 
        {
            "location": "/commands/element/actions/clear/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nelement.clear();  # Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').clear()  // Javascript\n// webdriver.io example\n$( ~SomeAccessibilityId ).clearValue();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nawait element.clear();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id,  SomeAccessibilityID ).clear\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id,  SomeAccessibilityID ).clear  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nelement.Clear();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/actions/clear/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/actions/clear/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/actions/clear/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/actions/clear/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/actions/clear/#endpoint", 
            "text": "POST /session/:session_id/element/:element_id/clear", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/actions/clear/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to clear.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/actions/clear/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/actions/clear/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/actions/clear/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/text/", 
            "text": "Get Element Text\n\n\nReturns visible text for element\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByClassName(\nSomeClassName\n);\nString elText = element.getText();\n\n\n\n\n\n# Python\nel = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\ntext = el.text\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(\n~SomeAccessibilityId\n).getText();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nawait element.text();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nelement = find_element :accessibility_id, \nSomeAccessibilityID\n\nelement.text\n\n# ruby_lib_core example\nelement = @driver.find_element :accessibility_id, \nSomeAccessibilityID\n\nelement.text\n\n\n\n\n\n// C#\nvar element = driver.FindElementByClassName(\nSomeClassName\n);\nstring elText = element.Text;\n\n\n\n\n\nDescription\n\n\nReturns the visible text for the element.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/element/:element_id/text\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the text from\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Text"
        }, 
        {
            "location": "/commands/element/attributes/text/#get-element-text", 
            "text": "Returns visible text for element", 
            "title": "Get Element Text"
        }, 
        {
            "location": "/commands/element/attributes/text/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByClassName( SomeClassName );\nString elText = element.getText();  # Python\nel = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\ntext = el.text  // Javascript\n// webdriver.io example\n$( ~SomeAccessibilityId ).getText();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nawait element.text();  # Ruby\n# ruby_lib example\nelement = find_element :accessibility_id,  SomeAccessibilityID \nelement.text\n\n# ruby_lib_core example\nelement = @driver.find_element :accessibility_id,  SomeAccessibilityID \nelement.text  // C#\nvar element = driver.FindElementByClassName( SomeClassName );\nstring elText = element.Text;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/text/#description", 
            "text": "Returns the visible text for the element.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/attributes/text/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/text/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/text/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/text/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/text/#endpoint", 
            "text": "GET /session/:session_id/element/:element_id/text", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/text/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the text from", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/text/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/text/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/text/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/name/", 
            "text": "Get Tag Name\n\n\nGet an element's tag name\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nString tagName = element.getTagName();\n\n\n\n\n\n# Python\ntagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').tag_name\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet tagName = $(\n~SomeAccessibilityId\n).getTagName();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet tagName = await element.getTagName();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').tag_name\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').tag_name\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nstring tagName = element.TagName;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/name\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the name from\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe tag name of the element (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Name"
        }, 
        {
            "location": "/commands/element/attributes/name/#get-tag-name", 
            "text": "Get an element's tag name", 
            "title": "Get Tag Name"
        }, 
        {
            "location": "/commands/element/attributes/name/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nString tagName = element.getTagName();  # Python\ntagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').tag_name  // Javascript\n// webdriver.io example\nlet tagName = $( ~SomeAccessibilityId ).getTagName();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet tagName = await element.getTagName();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').tag_name\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').tag_name  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nstring tagName = element.TagName;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/name/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/name/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/name/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/name/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/name/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/name", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/name/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the name from", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/name/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/name/#response", 
            "text": "The tag name of the element ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/name/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/attribute/", 
            "text": "Get Element Attribute\n\n\nGet the value of an element's attribute\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nString tagName = element.getAttribute(\ncontent-desc\n);\n\n\n\n\n\n# Python\ntagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').get_attribute('content-desc')\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet attribute = $(\n~SomeAccessibilityId\n).getAttribute(\ncontent-desc\n);\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet tagName = await element.getAttribute(\ncontent-desc\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').attribute(\ncontent-desc\n)\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').attribute(\ncontent-desc\n)\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nstring tagName = element.GetAttribute(\ncontent-desc\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/attribute/:name\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the attribute from\n\n\n\n\n\n\nname\n\n\nThe name of the attribute\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe value of the attribute or null if not set (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Attribute"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#get-element-attribute", 
            "text": "Get the value of an element's attribute", 
            "title": "Get Element Attribute"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nString tagName = element.getAttribute( content-desc );  # Python\ntagName = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').get_attribute('content-desc')  // Javascript\n// webdriver.io example\nlet attribute = $( ~SomeAccessibilityId ).getAttribute( content-desc );\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet tagName = await element.getAttribute( content-desc );  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').attribute( content-desc )\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').attribute( content-desc )  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nstring tagName = element.GetAttribute( content-desc );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/attribute/:name", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the attribute from    name  The name of the attribute", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#response", 
            "text": "The value of the attribute or null if not set ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/attribute/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/selected/", 
            "text": "Is Element Selected\n\n\nDetermine if a form or form-like element (checkbox, select, etc...) is selected\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nboolean isSelected = element.isSelected();\n\n\n\n\n\n# Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_selected()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet isSelected = $(\n~SomeAccessibilityId\n).isSelected();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet isSelected = await element.isSelected();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, \nSomeAccessibilityID\n).selected?\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, \nSomeAccessibilityID\n).selected?\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nbool isSelected = element.Selected;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/element/:element_id/selected\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to check if it is selected\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nWhether the element is selected (\nboolean\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Selected"
        }, 
        {
            "location": "/commands/element/attributes/selected/#is-element-selected", 
            "text": "Determine if a form or form-like element (checkbox, select, etc...) is selected", 
            "title": "Is Element Selected"
        }, 
        {
            "location": "/commands/element/attributes/selected/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nboolean isSelected = element.isSelected();  # Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_selected()  // Javascript\n// webdriver.io example\nlet isSelected = $( ~SomeAccessibilityId ).isSelected();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet isSelected = await element.isSelected();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id,  SomeAccessibilityID ).selected?\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id,  SomeAccessibilityID ).selected?  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nbool isSelected = element.Selected;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/selected/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/selected/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/selected/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/selected/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/selected/#endpoint", 
            "text": "GET /session/:session_id/element/:element_id/selected", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/selected/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to check if it is selected", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/selected/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/selected/#response", 
            "text": "Whether the element is selected ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/selected/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/enabled/", 
            "text": "Is Element Enabled\n\n\nDetermine if an element is currently enabled\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nboolean isEnabled = element.isEnabled();\n\n\n\n\n\n# Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_enabled()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet isEnabled = $(\n~SomeAccessibilityId\n).isEnabled();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet isEnabled = await element.isEnabled();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, \nSomeAccessibilityID\n).enabled?\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, \nSomeAccessibilityID\n).enabled?\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nbool isEnabled = element.Enabled;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/element/:element_id/enabled\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to check if it is enabled\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nWhether the element is enabled (\nboolean\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Enabled"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#is-element-enabled", 
            "text": "Determine if an element is currently enabled", 
            "title": "Is Element Enabled"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nboolean isEnabled = element.isEnabled();  # Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_enabled()  // Javascript\n// webdriver.io example\nlet isEnabled = $( ~SomeAccessibilityId ).isEnabled();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet isEnabled = await element.isEnabled();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id,  SomeAccessibilityID ).enabled?\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id,  SomeAccessibilityID ).enabled?  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nbool isEnabled = element.Enabled;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#endpoint", 
            "text": "GET /session/:session_id/element/:element_id/enabled", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to check if it is enabled", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#response", 
            "text": "Whether the element is enabled ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/enabled/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/displayed/", 
            "text": "Is Element Displayed\n\n\nDetermine if an element is currently displayed\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nboolean isDisplayed = element.isDisplayed();\n\n\n\n\n\n# Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_displayed()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet isDisplayed = $(\n~SomeAccessibilityId\n).isDisplayed();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet isDisplayed = await element.isDisplayed();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, \nSomeAccessibilityID\n).displayed?\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, \nSomeAccessibilityID\n).displayed?\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nbool isDisplayed = element.Displayed;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/element/:element_id/displayed\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to check if it is displayed\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nWhether the element is displayed (\nboolean\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Displayed"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#is-element-displayed", 
            "text": "Determine if an element is currently displayed", 
            "title": "Is Element Displayed"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nboolean isDisplayed = element.isDisplayed();  # Python\nself.driver.find_element_by_accessibility_id('SomeAccessibilityID').is_displayed()  // Javascript\n// webdriver.io example\nlet isDisplayed = $( ~SomeAccessibilityId ).isDisplayed();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet isDisplayed = await element.isDisplayed();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id,  SomeAccessibilityID ).displayed?\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id,  SomeAccessibilityID ).displayed?  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nbool isDisplayed = element.Displayed;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#endpoint", 
            "text": "GET /session/:session_id/element/:element_id/displayed", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to check if it is displayed", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#response", 
            "text": "Whether the element is displayed ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/displayed/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/location/", 
            "text": "Get Element Location\n\n\nDetermine an element's location on the page or screen\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nPoint location = element.getLocation();\n\n\n\n\n\n# Python\nlocation = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').location\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet location = $(\n~SomeAccessibilityId\n).getLocation();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet location = await element.getLocation();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').location\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').location\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nPoint location = element.Location;\n\n\n\n\n\nDescription\n\n\nThe point (0, 0) refers to the upper-left corner of the page. The element's coordinates are returned as a JSON object with x and y properties\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/location\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the location of\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Location"
        }, 
        {
            "location": "/commands/element/attributes/location/#get-element-location", 
            "text": "Determine an element's location on the page or screen", 
            "title": "Get Element Location"
        }, 
        {
            "location": "/commands/element/attributes/location/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nPoint location = element.getLocation();  # Python\nlocation = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').location  // Javascript\n// webdriver.io example\nlet location = $( ~SomeAccessibilityId ).getLocation();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet location = await element.getLocation();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').location\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').location  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nPoint location = element.Location;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/location/#description", 
            "text": "The point (0, 0) refers to the upper-left corner of the page. The element's coordinates are returned as a JSON object with x and y properties", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/attributes/location/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/location/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/location/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/location/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/location/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/location", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/location/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the location of", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/location/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/location/#response", 
            "text": "name  type  description      x  number  X coordinate    y  number  Y coordinate", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/location/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/size/", 
            "text": "Get Element Size\n\n\nDetermine an element's size in pixels\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nDimension elementSize = element.getSize();\n\n\n\n\n\n# Python\nsize = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').size\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet size = $(\n~SomeAccessibilityId\n).getSize();\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet size = await element.getSize();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').size\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').size\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nSize elementSize = element.Size;\n\n\n\n\n\nDescription\n\n\nThe size will be returned as an object with width and height properties.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/size\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the size of\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nWidth of the element\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nHeight of the element\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Size"
        }, 
        {
            "location": "/commands/element/attributes/size/#get-element-size", 
            "text": "Determine an element's size in pixels", 
            "title": "Get Element Size"
        }, 
        {
            "location": "/commands/element/attributes/size/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nDimension elementSize = element.getSize();  # Python\nsize = self.driver.find_element_by_accessibility_id('SomeAccessibilityID').size  // Javascript\n// webdriver.io example\nlet size = $( ~SomeAccessibilityId ).getSize();\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet size = await element.getSize();  # Ruby\n# ruby_lib example\nfind_element(:accessibility_id, 'SomeAccessibilityID').size\n\n# ruby_lib_core example\n@driver.find_element(:accessibility_id, 'SomeAccessibilityID').size  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nSize elementSize = element.Size;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/size/#description", 
            "text": "The size will be returned as an object with width and height properties.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/attributes/size/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/size/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/size/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/size/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/size/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/size", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/size/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the size of", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/size/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/size/#response", 
            "text": "name  type  description      width  number  Width of the element    height  number  Height of the element", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/size/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/rect/", 
            "text": "Get Element Rect\n\n\nGets dimensions and coordinates of an element\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId(\nSomeAccessibilityID\n);\nRectangle rect = element.getRect();\n\n\n\n\n\n# Python\nelement = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\nelement.rect\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet element = $(\n~SomeAccessibilityId\n)\nlet rect = driver.getElementRect(element.elementId);\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet rect = await element.getRect();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nelement = find_element :accessibility_id, \nSomeAccessibilityID\n\nelement.rect\n\n# ruby_lib_core example\nelement = @driver.find_element :accessibility_id, \nSomeAccessibilityID\n\nelement.rect\n\n\n\n\n\n// C#\nvar element = driver.FindElementByAccessibilityId(\nSomeAccessibilityID\n);\nRectangle rect = element.Rect;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/rect\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the rect of\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nHeight of the bounding rectangle\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nWidth of the bounding rectangle\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nW3C Specification", 
            "title": "Rect"
        }, 
        {
            "location": "/commands/element/attributes/rect/#get-element-rect", 
            "text": "Gets dimensions and coordinates of an element", 
            "title": "Get Element Rect"
        }, 
        {
            "location": "/commands/element/attributes/rect/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByAccessibilityId( SomeAccessibilityID );\nRectangle rect = element.getRect();  # Python\nelement = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\nelement.rect  // Javascript\n// webdriver.io example\nlet element = $( ~SomeAccessibilityId )\nlet rect = driver.getElementRect(element.elementId);\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet rect = await element.getRect();  # Ruby\n# ruby_lib example\nelement = find_element :accessibility_id,  SomeAccessibilityID \nelement.rect\n\n# ruby_lib_core example\nelement = @driver.find_element :accessibility_id,  SomeAccessibilityID \nelement.rect  // C#\nvar element = driver.FindElementByAccessibilityId( SomeAccessibilityID );\nRectangle rect = element.Rect;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/rect/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/rect/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/rect/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All     Javascript (WebdriverIO)  All     Javascript (WD)  All     Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/rect/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/rect/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/rect", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/rect/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the rect of", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/rect/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/rect/#response", 
            "text": "name  type  description      x  number  X coordinate    y  number  Y coordinate    height  number  Height of the bounding rectangle    width  number  Width of the bounding rectangle", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/rect/#see-also", 
            "text": "W3C Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/css-property/", 
            "text": "Get Element CSS Value\n\n\nQuery the value of a web element's computed CSS property\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementById(\nSomeId\n);\nString cssProperty = element.getCssValue(\nstyle\n);\n\n\n\n\n\n# Python\ncssProperty = self.driver.find_element_by_accessibility_id('SomeId').value_of_css_property(\nstyle\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet cssProperty = $(\n~SomeId\n).getCSSProperty(\nstyle\n);\n\n// wd example\nlet element = await driver.elementById(\nSomeId\n);\nlet cssProperty = await element.getComputedCss();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nfind_element(:id, 'SomeId').css_value\n\n# ruby_lib_core example\n@driver.find_element(:id, 'SomeId').css_value\n\n\n\n\n\n// C#\nvar element = driver.FindElementById(\nSomeId\n);\nstring cssProperty = element.GetCssValue(\nstyle\n);\n\n\n\n\n\nDescription\n\n\nThe CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor).\n\n\nThis command only applies to webview contexts\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/css/:property_name\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the property from\n\n\n\n\n\n\nproperty_name\n\n\nName of the CSS property\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nValue of the CSS property (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "CSS Property"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#get-element-css-value", 
            "text": "Query the value of a web element's computed CSS property", 
            "title": "Get Element CSS Value"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementById( SomeId );\nString cssProperty = element.getCssValue( style );  # Python\ncssProperty = self.driver.find_element_by_accessibility_id('SomeId').value_of_css_property( style )  // Javascript\n// webdriver.io example\nlet cssProperty = $( ~SomeId ).getCSSProperty( style );\n\n// wd example\nlet element = await driver.elementById( SomeId );\nlet cssProperty = await element.getComputedCss();  # Ruby\n# ruby_lib example\nfind_element(:id, 'SomeId').css_value\n\n# ruby_lib_core example\n@driver.find_element(:id, 'SomeId').css_value  // C#\nvar element = driver.FindElementById( SomeId );\nstring cssProperty = element.GetCssValue( style );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#description", 
            "text": "The CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor).  This command only applies to webview contexts", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/css/:property_name", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the property from    property_name  Name of the CSS property", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#response", 
            "text": "Value of the CSS property ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/css-property/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/", 
            "text": "Get Element Location in View\n\n\nDetermine an element's location on the screen once it has been scrolled into view (mainly an internal command and not supported by all clients)\n\n\nExample Usage\n\n\n// Not supported\n\n\n\n\n# Python\nelement = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\nelement.location_in_view\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet element = $(\n~SomeAccessibilityId\n)\nlet location = driver.getElementLocationInView(element.elementId);\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nlet location = await element.getLocationInView();\n\n\n\n\n\n# Not supported\n# Not supported\n\n\n\n\n// Not supported\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\n\n\n\n\n\n\nPython\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\n\n\n\n\n\n\nC#\n\n\nAll\n\n\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/elements/:element_id/location_in_view\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to get the location-in-view of\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Location in View"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#get-element-location-in-view", 
            "text": "Determine an element's location on the screen once it has been scrolled into view (mainly an internal command and not supported by all clients)", 
            "title": "Get Element Location in View"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#example-usage", 
            "text": "// Not supported  # Python\nelement = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\nelement.location_in_view  // Javascript\n// webdriver.io example\nlet element = $( ~SomeAccessibilityId )\nlet location = driver.getElementLocationInView(element.elementId);\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nlet location = await element.getLocationInView();  # Not supported\n# Not supported  // Not supported", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All     Python  All     Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All     C#  All", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#endpoint", 
            "text": "GET /session/:session_id/elements/:element_id/location_in_view", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to get the location-in-view of", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#response", 
            "text": "name  type  description      x  number  X coordinate    y  number  Y coordinate", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/attributes/location-in-view/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/other/submit/", 
            "text": "Submit Form\n\n\nSubmit a FORM element\n\n\nExample Usage\n\n\n// Java\nMobileElement element = (MobileElement) driver.findElementByClassName(\nSomeClassName\n);\nelement.submit();\n\n\n\n\n\n# Python\nel = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\nel.submit();\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet formElement = $(\n~SomeAccessibilityId\n);\ndriver.elementSubmit(formElement.elementId);\n\n// wd example\nlet element = await driver.elementByAccessibilityId(\nSomeAccessibilityID\n);\nawait element.submit();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nelement = find_element :class_name, \nsomeClass\n\nelement.submit element\n\n# ruby_lib_core example\nelement = @driver.find_element :class_name, \nsomeClass\n\nelement.submit element\n\n\n\n\n\n// C#\nvar element = driver.FindElementByClassName(\nSomeClassName\n);\nelement.Submit();\n\n\n\n\n\nDescription\n\n\nThe submit command may also be applied to any element that is a descendant of a FORM element (Web only)\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/element/:element_id/submit\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element to submit\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Submit"
        }, 
        {
            "location": "/commands/element/other/submit/#submit-form", 
            "text": "Submit a FORM element", 
            "title": "Submit Form"
        }, 
        {
            "location": "/commands/element/other/submit/#example-usage", 
            "text": "// Java\nMobileElement element = (MobileElement) driver.findElementByClassName( SomeClassName );\nelement.submit();  # Python\nel = self.driver.find_element_by_accessibility_id('SomeAccessibilityID')\nel.submit();  // Javascript\n// webdriver.io example\nlet formElement = $( ~SomeAccessibilityId );\ndriver.elementSubmit(formElement.elementId);\n\n// wd example\nlet element = await driver.elementByAccessibilityId( SomeAccessibilityID );\nawait element.submit();  # Ruby\n# ruby_lib example\nelement = find_element :class_name,  someClass \nelement.submit element\n\n# ruby_lib_core example\nelement = @driver.find_element :class_name,  someClass \nelement.submit element  // C#\nvar element = driver.FindElementByClassName( SomeClassName );\nelement.Submit();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/other/submit/#description", 
            "text": "The submit command may also be applied to any element that is a descendant of a FORM element (Web only)", 
            "title": "Description"
        }, 
        {
            "location": "/commands/element/other/submit/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/other/submit/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/other/submit/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/other/submit/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/other/submit/#endpoint", 
            "text": "POST /session/:session_id/element/:element_id/submit", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/other/submit/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element to submit", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/other/submit/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/other/submit/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/other/submit/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/other/active/", 
            "text": "Get Active Element\n\n\nGets the active element of the current session\n\n\nExample Usage\n\n\n// Java\nWebElement currentElement = driver.switchTo().activeElement();\n\n\n\n\n\n# Python\nelement = driver.switch_to.active_element\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.getActiveElement();\n\n// wd example\nlet element = await driver.active();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nswitch_to.active_element\n\n# ruby_lib_core example\n@driver.switch_to.active_element\n\n\n\n\n\n// C#\nIWebElement currentElement = driver.SwitchTo().ActiveElement();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\n'GET'(W3C), 'POST'(JSONWP) /session/:session_id/element/active\n\n\nURL Parameters\n\n\nNone\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nA JSON object for the located element (\nobject\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Active Element"
        }, 
        {
            "location": "/commands/element/other/active/#get-active-element", 
            "text": "Gets the active element of the current session", 
            "title": "Get Active Element"
        }, 
        {
            "location": "/commands/element/other/active/#example-usage", 
            "text": "// Java\nWebElement currentElement = driver.switchTo().activeElement();  # Python\nelement = driver.switch_to.active_element  // Javascript\n// webdriver.io example\ndriver.getActiveElement();\n\n// wd example\nlet element = await driver.active();  # Ruby\n# ruby_lib example\nswitch_to.active_element\n\n# ruby_lib_core example\n@driver.switch_to.active_element  // C#\nIWebElement currentElement = driver.SwitchTo().ActiveElement();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/other/active/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/other/active/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/other/active/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/other/active/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/other/active/#endpoint", 
            "text": "'GET'(W3C), 'POST'(JSONWP) /session/:session_id/element/active", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/other/active/#url-parameters", 
            "text": "None", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/other/active/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/other/active/#response", 
            "text": "A JSON object for the located element ( object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/other/active/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/element/other/equals-element/", 
            "text": "Are Elements Equal\n\n\nTest if two element IDs refer to the same element\n\n\nExample Usage\n\n\n// Java\n// Overrides the Java Object .equals method\nMobileElement elementOne = (MobileElement) driver.findElementByClassName(\nSomeClassName\n);\nMobileElement elementTwo = (MobileElement) driver.findElementByClassName(\nSomeOtherClassName\n);\nboolean isEqual = elementOne.equals(elementTwo);\n\n\n\n\n\n# Python\n# TODO Python sample\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet elementOne = $(\nsomeClass\n);\nlet elementTwo = $(\nsomeOtherClass\n);\nlet isEqual = elementOne.isEqual(elementTwo);\n\n// wd example\nlet elementOne = await driver.elementByClassName(\nsomeClass\n);\nlet elementTwo = await driver.elementByClassName(\nsomeOtherClass\n);\nlet isEqual = await elementOne.equalsElement(elementTwo);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nelement1 = find_element :class_name, \nsomeClass\n\nelement2 = find_element :class_name, \nsomeOtherClass\n\nelement1 == element2\n\n# ruby_lib_core example\nelement1 = @driver.find_element :class_name, \nsomeClass\n\nelement2 = @driver.find_element :class_name, \nsomeOtherClass\n\nelement1 == element2\n\n\n\n\n\n// C#\nvar elementOne = driver.FindElementByClassName(\nSomeClassName\n);\nvar elementTwo = driver.FindElementByClassName(\nSomeOtherClassName\n);\nbool isEqual = elementOne.Equals(elementTwo);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/element/:element_id/equals/:other_element_id\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nelement_id\n\n\nID of the element\n\n\n\n\n\n\nelement_id\n\n\nID of the other element to check if they're equal\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nWhether the two ID's refer to the same element (\nboolean\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Equals Element"
        }, 
        {
            "location": "/commands/element/other/equals-element/#are-elements-equal", 
            "text": "Test if two element IDs refer to the same element", 
            "title": "Are Elements Equal"
        }, 
        {
            "location": "/commands/element/other/equals-element/#example-usage", 
            "text": "// Java\n// Overrides the Java Object .equals method\nMobileElement elementOne = (MobileElement) driver.findElementByClassName( SomeClassName );\nMobileElement elementTwo = (MobileElement) driver.findElementByClassName( SomeOtherClassName );\nboolean isEqual = elementOne.equals(elementTwo);  # Python\n# TODO Python sample  // Javascript\n// webdriver.io example\nlet elementOne = $( someClass );\nlet elementTwo = $( someOtherClass );\nlet isEqual = elementOne.isEqual(elementTwo);\n\n// wd example\nlet elementOne = await driver.elementByClassName( someClass );\nlet elementTwo = await driver.elementByClassName( someOtherClass );\nlet isEqual = await elementOne.equalsElement(elementTwo);  # Ruby\n# ruby_lib example\nelement1 = find_element :class_name,  someClass \nelement2 = find_element :class_name,  someOtherClass \nelement1 == element2\n\n# ruby_lib_core example\nelement1 = @driver.find_element :class_name,  someClass \nelement2 = @driver.find_element :class_name,  someOtherClass \nelement1 == element2  // C#\nvar elementOne = driver.FindElementByClassName( SomeClassName );\nvar elementTwo = driver.FindElementByClassName( SomeOtherClassName );\nbool isEqual = elementOne.Equals(elementTwo);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/element/other/equals-element/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/element/other/equals-element/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/element/other/equals-element/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/element/other/equals-element/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/element/other/equals-element/#endpoint", 
            "text": "GET /session/:session_id/element/:element_id/equals/:other_element_id", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/element/other/equals-element/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    element_id  ID of the element    element_id  ID of the other element to check if they're equal", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/element/other/equals-element/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/element/other/equals-element/#response", 
            "text": "Whether the two ID's refer to the same element ( boolean )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/element/other/equals-element/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/context/get-context/", 
            "text": "Get Current Context\n\n\nGet the current context in which Appium is running\n\n\nExample Usage\n\n\n// Java\nString context = driver.getContext();\n\n\n\n\n\n# Python\ncontext = driver.current_context\n# or\ncontext = driver.context\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet context = driver.getContext();\n\n// wd example\nlet context = await driver.currentContext();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ncontext = current_context\n\n# ruby_lib_core example\ncontext = @driver.current_context\n\n\n\n\n// C#\nstring Context = driver.Context;\n\n\n\n\n\nDescription\n\n\nRetrieve the current context. This can be either \nNATIVE_APP\n for the native context, or a web view context, which will be:\n\n\n\n\niOS - \nWEBVIEW_\nid\n\n\nAndroid - \nWEBVIEW_\npackage name\n\n\n\n\nFor information on contexts, see Appium's \nhybrid automation docs\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/context\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe name of the current context (\nString\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Context"
        }, 
        {
            "location": "/commands/context/get-context/#get-current-context", 
            "text": "Get the current context in which Appium is running", 
            "title": "Get Current Context"
        }, 
        {
            "location": "/commands/context/get-context/#example-usage", 
            "text": "// Java\nString context = driver.getContext();  # Python\ncontext = driver.current_context\n# or\ncontext = driver.context  // Javascript\n// webdriver.io example\nlet context = driver.getContext();\n\n// wd example\nlet context = await driver.currentContext();  # Ruby\n# ruby_lib example\ncontext = current_context\n\n# ruby_lib_core example\ncontext = @driver.current_context  // C#\nstring Context = driver.Context;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/context/get-context/#description", 
            "text": "Retrieve the current context. This can be either  NATIVE_APP  for the native context, or a web view context, which will be:   iOS -  WEBVIEW_ id  Android -  WEBVIEW_ package name   For information on contexts, see Appium's  hybrid automation docs .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/context/get-context/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/context/get-context/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/context/get-context/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/context/get-context/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/context/get-context/#endpoint", 
            "text": "GET /session/:session_id/context", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/context/get-context/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/context/get-context/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/context/get-context/#response", 
            "text": "The name of the current context ( String )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/context/get-context/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/context/get-contexts/", 
            "text": "Get All Contexts\n\n\nGet all the contexts available to automate\n\n\nExample Usage\n\n\n// Java\nSet\nString\n contextNames = driver.getContextHandles();\n\n\n\n\n\n# Python\ncontexts = driver.contexts\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet contexts = driver.getContexts();\n\n// wd example\nlet contexts = await driver.contexts();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ncontext = available_contexts\n\n# ruby_lib_core example\ncontext = @driver.available_contexts\n\n\n\n\n\n// C#\nList\nstring\n AllContexts = new List\nstring\n();\n     foreach (var context in (driver.Contexts))\n     {\n         AllContexts.Add(context);\n     }\n\n\n\n\n\nDescription\n\n\nRetrieve all the contexts available to be automated. This will include, at least, the native context. There can also be zero or more web view contexts. For information on the format of the context names, see the \nget context documentation\n.\n\nmobile command\n \nmobile: getContexts\n is available on iOS (XCUITest) and Android (UIAutomator2 and Espresso) to get more detailed contexts.\nFor information on contexts, see Appium's \nhybrid automation docs\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/contexts\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nArray of the names of all available contexts (\nArray\nString\n)\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get All Contexts"
        }, 
        {
            "location": "/commands/context/get-contexts/#get-all-contexts", 
            "text": "Get all the contexts available to automate", 
            "title": "Get All Contexts"
        }, 
        {
            "location": "/commands/context/get-contexts/#example-usage", 
            "text": "// Java\nSet String  contextNames = driver.getContextHandles();  # Python\ncontexts = driver.contexts  // Javascript\n// webdriver.io example\nlet contexts = driver.getContexts();\n\n// wd example\nlet contexts = await driver.contexts();  # Ruby\n# ruby_lib example\ncontext = available_contexts\n\n# ruby_lib_core example\ncontext = @driver.available_contexts  // C#\nList string  AllContexts = new List string ();\n     foreach (var context in (driver.Contexts))\n     {\n         AllContexts.Add(context);\n     }", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/context/get-contexts/#description", 
            "text": "Retrieve all the contexts available to be automated. This will include, at least, the native context. There can also be zero or more web view contexts. For information on the format of the context names, see the  get context documentation . mobile command   mobile: getContexts  is available on iOS (XCUITest) and Android (UIAutomator2 and Espresso) to get more detailed contexts.\nFor information on contexts, see Appium's  hybrid automation docs .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/context/get-contexts/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/context/get-contexts/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/context/get-contexts/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/context/get-contexts/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/context/get-contexts/#endpoint", 
            "text": "GET /session/:session_id/contexts", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/context/get-contexts/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/context/get-contexts/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/context/get-contexts/#response", 
            "text": "Array of the names of all available contexts ( Array String )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/context/get-contexts/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/context/set-context/", 
            "text": "Set Current Context\n\n\nSet the context being automated\n\n\nExample Usage\n\n\n// Java\nSet\nString\n contextNames = driver.getContextHandles();\ndriver.context(contextNames.toArray()[1]);\n// ...\ndriver.context(\nNATIVE_APP\n);\n\n\n\n\n\n# Python\nwebview = driver.contexts[1]\ndriver.switch_to.context(webview)\n# ...\ndriver.switch_to.context('NATIVE_APP')\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet contexts = driver.getContexts();\ndriver.switchContext(contexts[1]);\n// ...\ndriver.switchContext('NATIVE_APP');\n\n// wd example\nlet contexts = await driver.contexts();\nawait driver.context(contexts[1]);\n// ...\nawait driver.context('NATIVE_APP');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nwebview = available_contexts[1]\nset_context(webview)\n# ...\nset_context('NATIVE_APP')\n\n# ruby_lib_core example\nwebview = @driver.available_contexts[1]\n@driver.set_context(webview)\n# ...\n@driver.set_context('NATIVE_APP')\n\n\n\n\n\n// C#\n// Switch to specific webview\n  List\nstring\n AllContexts = new List\nstring\n();\n    foreach (var context in (driver.Contexts))\n    {\n        AllContexts.Add(context);\n    }\n  driver.Context = (AllContexts[1]);\n // Switch to NATIVE_APP\n driver.Context = (\nNATIVE_APP\n);\n\n\n\n\n\nDescription\n\n\nSet the current context to that passed in. If this is moving into a web view context it will involve attempting to connect to that web view:\n\n\n\n\niOS - attempt to connect to the application through the remote debugger\n\n\nAndroid - start a \nChromedriver\n\n    process and begin a session to connect to the web view\n\n\n\n\nFor information on contexts, see Appium's \nhybrid automation docs\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/context\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nThe name of the context to which to change\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Set Context"
        }, 
        {
            "location": "/commands/context/set-context/#set-current-context", 
            "text": "Set the context being automated", 
            "title": "Set Current Context"
        }, 
        {
            "location": "/commands/context/set-context/#example-usage", 
            "text": "// Java\nSet String  contextNames = driver.getContextHandles();\ndriver.context(contextNames.toArray()[1]);\n// ...\ndriver.context( NATIVE_APP );  # Python\nwebview = driver.contexts[1]\ndriver.switch_to.context(webview)\n# ...\ndriver.switch_to.context('NATIVE_APP')  // Javascript\n// webdriver.io example\nlet contexts = driver.getContexts();\ndriver.switchContext(contexts[1]);\n// ...\ndriver.switchContext('NATIVE_APP');\n\n// wd example\nlet contexts = await driver.contexts();\nawait driver.context(contexts[1]);\n// ...\nawait driver.context('NATIVE_APP');  # Ruby\n# ruby_lib example\nwebview = available_contexts[1]\nset_context(webview)\n# ...\nset_context('NATIVE_APP')\n\n# ruby_lib_core example\nwebview = @driver.available_contexts[1]\n@driver.set_context(webview)\n# ...\n@driver.set_context('NATIVE_APP')  // C#\n// Switch to specific webview\n  List string  AllContexts = new List string ();\n    foreach (var context in (driver.Contexts))\n    {\n        AllContexts.Add(context);\n    }\n  driver.Context = (AllContexts[1]);\n // Switch to NATIVE_APP\n driver.Context = ( NATIVE_APP );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/context/set-context/#description", 
            "text": "Set the current context to that passed in. If this is moving into a web view context it will involve attempting to connect to that web view:   iOS - attempt to connect to the application through the remote debugger  Android - start a  Chromedriver \n    process and begin a session to connect to the web view   For information on contexts, see Appium's  hybrid automation docs .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/context/set-context/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/context/set-context/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/context/set-context/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/context/set-context/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/context/set-context/#endpoint", 
            "text": "POST /session/:session_id/context", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/context/set-context/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/context/set-context/#json-parameters", 
            "text": "name  type  description      name  String  The name of the context to which to change", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/context/set-context/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/context/set-context/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/", 
            "text": "Move Mouse To\n\n\nMove the mouse by an offset of the specificed element\n\n\nExample Usage\n\n\n// Java\nActions action = new Actions(driver);\naction.moveTo(element, 10, 10);\naction.perform();\n\n\n\n\n\n# Python\nactions = ActionChains(driver)\nactions.move_to(element, 10, 10)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(element).moveTo(10, 10);\n\n// wd example\nawait driver.moveTo(element, 10, 10);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmouse.move_to(element)\nmouse.move_to(element, 5, 5)\n\n# ruby_lib_core example\n@driver.mouse.move_to(element)\n@driver.mouse.move_to(element, 5, 5)\n\n\n\n\n\n// C#\nActions action = new Actions(driver);\naction.MoveToElement(element, 10, 10);\naction.Perform();\n\n\n\n\n\nDescription\n\n\nIf no element is specified, the move is relative to the current mouse cursor. If an element is provided but no offset, the mouse will be moved to the center of the element. If the element is not visible, it will be scrolled into view.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/moveto\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nelement\n\n\nstring\n\n\nThe ID of the element to move to. If not specified, relative to mouse position\n\n\n\n\n\n\nxoffset\n\n\nnumber\n\n\nX offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element\n\n\n\n\n\n\nyoffset\n\n\nnumber\n\n\nY offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Move To"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#move-mouse-to", 
            "text": "Move the mouse by an offset of the specificed element", 
            "title": "Move Mouse To"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#example-usage", 
            "text": "// Java\nActions action = new Actions(driver);\naction.moveTo(element, 10, 10);\naction.perform();  # Python\nactions = ActionChains(driver)\nactions.move_to(element, 10, 10)\nactions.perform()  // Javascript\n// webdriver.io example\n$(element).moveTo(10, 10);\n\n// wd example\nawait driver.moveTo(element, 10, 10);  # Ruby\n# ruby_lib example\nmouse.move_to(element)\nmouse.move_to(element, 5, 5)\n\n# ruby_lib_core example\n@driver.mouse.move_to(element)\n@driver.mouse.move_to(element, 5, 5)  // C#\nActions action = new Actions(driver);\naction.MoveToElement(element, 10, 10);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#description", 
            "text": "If no element is specified, the move is relative to the current mouse cursor. If an element is provided but no offset, the mouse will be moved to the center of the element. If the element is not visible, it will be scrolled into view.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#endpoint", 
            "text": "POST /session/:session_id/moveto", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#json-parameters", 
            "text": "name  type  description      element  string  The ID of the element to move to. If not specified, relative to mouse position    xoffset  number  X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element    yoffset  number  Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/mouse/moveto/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/mouse/click/", 
            "text": "Click\n\n\nClick any mouse button at the current mouse coordinates\n\n\nExample Usage\n\n\n// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.click();\naction.perform();\n\n\n\n\n\n# Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click()\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(\n~SomeId\n).click();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.click();\n\n\n\n\n\n# Ruby\n# ruby_lib example\naction.move_to(element).click.perform\n\n# ruby_lib_core example\n@driver.action.move_to(element).click.perform\n\n\n\n\n\n// C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.Click();\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/click\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbutton\n\n\nnumber\n\n\nWhich button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Click"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#click", 
            "text": "Click any mouse button at the current mouse coordinates", 
            "title": "Click"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#example-usage", 
            "text": "// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.click();\naction.perform();  # Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click()\nactions.perform()  // Javascript\n// webdriver.io example\n$( ~SomeId ).click();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.click();  # Ruby\n# ruby_lib example\naction.move_to(element).click.perform\n\n# ruby_lib_core example\n@driver.action.move_to(element).click.perform  // C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.Click();\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#endpoint", 
            "text": "POST /session/:session_id/click", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#json-parameters", 
            "text": "name  type  description      button  number  Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/mouse/click/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/", 
            "text": "Double Click\n\n\nDouble-clicks at the current mouse coordinates (set by moveto).\n\n\nExample Usage\n\n\n// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.doubleClick();\naction.perform();\n\n\n\n\n\n# Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.double_click()\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\n$(\n~SomeId\n).doubleClick();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.doubleclick();\n\n\n\n\n\n# Ruby\n# ruby_lib example\naction.move_to(element).double_click.perform\n\n# ruby_lib_core example\n@driver.action.move_to(element).double_click.perform\n\n\n\n\n\n// C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.DoubleClick();\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/doubleClick\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Double Click"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#double-click", 
            "text": "Double-clicks at the current mouse coordinates (set by moveto).", 
            "title": "Double Click"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#example-usage", 
            "text": "// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.doubleClick();\naction.perform();  # Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.double_click()\nactions.perform()  // Javascript\n// webdriver.io example\n$( ~SomeId ).doubleClick();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.doubleclick();  # Ruby\n# ruby_lib example\naction.move_to(element).double_click.perform\n\n# ruby_lib_core example\n@driver.action.move_to(element).double_click.perform  // C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.DoubleClick();\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#endpoint", 
            "text": "POST /session/:session_id/doubleClick", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/mouse/doubleclick/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/", 
            "text": "Button Down\n\n\nClick and hold the left mouse button at the current mouse coordinates\n\n\nExample Usage\n\n\n// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.clickAndHold();\naction.perform();\n\n\n\n\n\n# Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click_and_hold()\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.moveTo(element);\ndriver.buttonDown();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.buttonDown();\n\n\n\n\n\n# Ruby\n# ruby_lib example\naction.move_to(element).click_and_hold.perform\n\n# ruby_lib_core example\n@driver.action.move_to(element).click_and_hold.perform\n\n\n\n\n\n// C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.ClickAndHold();\naction.Perform();\n\n\n\n\n\nDescription\n\n\nNote that the next mouse-related command that should follow is buttonup . Any other mouse command (such as click or another call to buttondown) will yield undefined behavior\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/buttondown\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbutton\n\n\nnumber\n\n\nWhich button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Button Down"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#button-down", 
            "text": "Click and hold the left mouse button at the current mouse coordinates", 
            "title": "Button Down"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#example-usage", 
            "text": "// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.clickAndHold();\naction.perform();  # Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click_and_hold()\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.moveTo(element);\ndriver.buttonDown();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.buttonDown();  # Ruby\n# ruby_lib example\naction.move_to(element).click_and_hold.perform\n\n# ruby_lib_core example\n@driver.action.move_to(element).click_and_hold.perform  // C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.ClickAndHold();\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#description", 
            "text": "Note that the next mouse-related command that should follow is buttonup . Any other mouse command (such as click or another call to buttondown) will yield undefined behavior", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#endpoint", 
            "text": "POST /session/:session_id/buttondown", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#json-parameters", 
            "text": "name  type  description      button  number  Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/mouse/button-down/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/", 
            "text": "Button Up\n\n\nReleases the mouse button previously held\n\n\nExample Usage\n\n\n// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.clickAndHold();\naction.moveTo(element, 10, 10);\naction.release();\naction.perform();\n\n\n\n\n\n# Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click_and_hold()\nactions.move_to_element(element, 10, 10)\naction.release();\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.moveTo(element);\ndriver.buttonDown();\ndriver.moveTo(element, 10, 10);\ndriver.buttonUp();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.buttonDown();\nawait driver.moveTo(element, 10, 10);\nawait driver.buttonUp();\n\n\n\n\n\n# Ruby\n# ruby_lib example\naction.click_and_hold(el).move_to(el, 10, 10).release.perform\n\n# ruby_lib_core example\n@driver.action.click_and_hold(el).move_to(el, 10, 10).release.perform\n\n\n\n\n\n// C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.ClickAndHold();\naction.MoveToElement(element, 10, 10);\naction.Release();\naction.Perform();\n\n\n\n\n\nDescription\n\n\nMust be called once for every buttondown command issued. See the note in click and buttondown about implications of out-of-order commands.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/buttonup\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbutton\n\n\nnumber\n\n\nWhich button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Button Up"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#button-up", 
            "text": "Releases the mouse button previously held", 
            "title": "Button Up"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#example-usage", 
            "text": "// Java\nActions action = new Actions(driver);\naction.moveTo(element);\naction.clickAndHold();\naction.moveTo(element, 10, 10);\naction.release();\naction.perform();  # Python\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click_and_hold()\nactions.move_to_element(element, 10, 10)\naction.release();\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.moveTo(element);\ndriver.buttonDown();\ndriver.moveTo(element, 10, 10);\ndriver.buttonUp();\n\n// wd example\nawait driver.moveTo(element);\nawait driver.buttonDown();\nawait driver.moveTo(element, 10, 10);\nawait driver.buttonUp();  # Ruby\n# ruby_lib example\naction.click_and_hold(el).move_to(el, 10, 10).release.perform\n\n# ruby_lib_core example\n@driver.action.click_and_hold(el).move_to(el, 10, 10).release.perform  // C#\nActions action = new Actions(driver);\naction.MoveToElement(element);\naction.ClickAndHold();\naction.MoveToElement(element, 10, 10);\naction.Release();\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#description", 
            "text": "Must be called once for every buttondown command issued. See the note in click and buttondown about implications of out-of-order commands.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#endpoint", 
            "text": "POST /session/:session_id/buttonup", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#json-parameters", 
            "text": "name  type  description      button  number  Which button, {LEFT = 0, MIDDLE = 1 , RIGHT = 2}. Defaults to the left mouse button if not specified", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/mouse/button-up/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/tap/", 
            "text": "Tap\n\n\nSingle tap on the touch enabled device\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.singleTap(element);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap(element)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nbrowser.touchAction({\n  action: 'tap',\n  x: 30,\n  y: 20\n})\n\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.tap({el: element});\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.single_tap(element).perform\n\n# ruby_lib_core example\n@driver.touch_action.single_tap(element).perform\n\n\n\n\n\n// C#\nTouchAction touchAction = new TouchAction(driver);\ntouchAction.Tap(element).Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/click\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nelement\n\n\nnumber\n\n\nID of the element to double tap on\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Single Tap"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#tap", 
            "text": "Single tap on the touch enabled device", 
            "title": "Tap"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.singleTap(element);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap(element)\nactions.perform()  // Javascript\n// webdriver.io example\nbrowser.touchAction({\n  action: 'tap',\n  x: 30,\n  y: 20\n})\n\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.tap({el: element});\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.single_tap(element).perform\n\n# ruby_lib_core example\n@driver.touch_action.single_tap(element).perform  // C#\nTouchAction touchAction = new TouchAction(driver);\ntouchAction.Tap(element).Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  seleniumhq.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#endpoint", 
            "text": "POST /session/:session_id/touch/click", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#json-parameters", 
            "text": "name  type  description      element  number  ID of the element to double tap on", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/tap/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/", 
            "text": "Double Tap\n\n\nDouble tap on the touch screen using finger motion events\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.doubleTap(element);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.double_tap(element)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchDoubleClick(element.elementId);\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.tap({el: element});\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.double_tap(element).perform\n\n# ruby_lib_core example\n@driver.touch_action.double_tap(element).perform\n\n\n\n\n\n// C#\nTouchActions action = new TouchActions(driver);\naction.DoubleTap(element);\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nwww.selenium.dev\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/doubleclick\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nelement\n\n\nnumber\n\n\nID of the element to double tap on\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Double Tap"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#double-tap", 
            "text": "Double tap on the touch screen using finger motion events", 
            "title": "Double Tap"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.doubleTap(element);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.double_tap(element)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchDoubleClick(element.elementId);\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.tap({el: element});\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.double_tap(element).perform\n\n# ruby_lib_core example\n@driver.touch_action.double_tap(element).perform  // C#\nTouchActions action = new TouchActions(driver);\naction.DoubleTap(element);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  www.selenium.dev    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#endpoint", 
            "text": "POST /session/:session_id/touch/doubleclick", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#json-parameters", 
            "text": "name  type  description      element  number  ID of the element to double tap on", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/double-tap/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/move/", 
            "text": "Move To\n\n\nFinger move on the screen\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.down(10, 10);\naction.moveTo(50, 50);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap_and_hold(element)\nactions.move_to(element, 50, 50)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.multiTouchPerform([\n  { action: 'press', options: { x: 100, y: 250 }},\n  { action: 'moveTo', options: { x: 300, y: 100 }},\n  { action: 'release' }\n]);\n\n// wd example\nlet action = new wd.TouchAction(driver);\naction.press({x: 10, y: 10})\n      .wait(1000)\n      .moveTo({x: 50, y: 50})\n      .release();\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.down(element).move_to().perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).move_to().perform\n\n\n\n\n\n// C#\nTouchActions action = new TouchActions(driver);\naction.Down(10, 10);\naction.Move(50, 50);\naction.Perform();\n\n\n\n\n\nDescription\n\n\nAs of Appium 1.8.0 all move actions take coordinates that are absolute.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/move\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate on the screen\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate on the screen\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Move"
        }, 
        {
            "location": "/commands/interactions/touch/move/#move-to", 
            "text": "Finger move on the screen", 
            "title": "Move To"
        }, 
        {
            "location": "/commands/interactions/touch/move/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.down(10, 10);\naction.moveTo(50, 50);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap_and_hold(element)\nactions.move_to(element, 50, 50)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.multiTouchPerform([\n  { action: 'press', options: { x: 100, y: 250 }},\n  { action: 'moveTo', options: { x: 300, y: 100 }},\n  { action: 'release' }\n]);\n\n// wd example\nlet action = new wd.TouchAction(driver);\naction.press({x: 10, y: 10})\n      .wait(1000)\n      .moveTo({x: 50, y: 50})\n      .release();\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.down(element).move_to().perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).move_to().perform  // C#\nTouchActions action = new TouchActions(driver);\naction.Down(10, 10);\naction.Move(50, 50);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/move/#description", 
            "text": "As of Appium 1.8.0 all move actions take coordinates that are absolute.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/touch/move/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/move/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/move/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/move/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/move/#endpoint", 
            "text": "POST /session/:session_id/touch/move", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/move/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/move/#json-parameters", 
            "text": "name  type  description      x  number  X coordinate on the screen    y  number  Y coordinate on the screen", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/move/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/move/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/", 
            "text": "Touch Down\n\n\nFinger down on the screen\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.down(10, 10);\naction.move(50, 50);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap_and_hold(element)\nactions.move(50, 50)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchDown(10, 10);\n\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.press({x: 10, y: 10});\naction.moveTo({x: 50, y: 50});\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.down(element).move().perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).move().perform\n\n\n\n\n\n// C#\nTouchActions action = new TouchActions(driver);\naction.Down(10, 10);\naction.Move(50, 50);\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/down\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate on the screen\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate on the screen\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Touch Down"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#touch-down", 
            "text": "Finger down on the screen", 
            "title": "Touch Down"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.down(10, 10);\naction.move(50, 50);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap_and_hold(element)\nactions.move(50, 50)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchDown(10, 10);\n\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.press({x: 10, y: 10});\naction.moveTo({x: 50, y: 50});\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.down(element).move().perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).move().perform  // C#\nTouchActions action = new TouchActions(driver);\naction.Down(10, 10);\naction.Move(50, 50);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#endpoint", 
            "text": "POST /session/:session_id/touch/down", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#json-parameters", 
            "text": "name  type  description      x  number  X coordinate on the screen    y  number  Y coordinate on the screen", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/touch-down/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/", 
            "text": "Touch Up\n\n\nFinger up on the screen\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.down(10, 10);\naction.up(20, 20);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap_and_hold(20, 20)\nactions.release(50, 50)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchUp(10, 10);\n\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.press({x: 10, y: 10});\naction.release({x: 20, y: 20});\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.down(element).up(50, 50).perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).up(50, 50).perform\n\n\n\n\n\n// C#\nTouchActions action = new TouchActions(driver);\naction.Down(10, 10);\naction.Up(20, 20);\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/up\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate on the screen\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate on the screen\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Touch Up"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#touch-up", 
            "text": "Finger up on the screen", 
            "title": "Touch Up"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.down(10, 10);\naction.up(20, 20);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.tap_and_hold(20, 20)\nactions.release(50, 50)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchUp(10, 10);\n\n// wd example\n// Using tapElement method\nawait driver.tapElement(elementOne);\n\n// Using touch actions\nlet action = new wd.TouchAction();\naction.press({x: 10, y: 10});\naction.release({x: 20, y: 20});\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.down(element).up(50, 50).perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).up(50, 50).perform  // C#\nTouchActions action = new TouchActions(driver);\naction.Down(10, 10);\naction.Up(20, 20);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#endpoint", 
            "text": "POST /session/:session_id/touch/up", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#json-parameters", 
            "text": "name  type  description      x  number  X coordinate on the screen    y  number  Y coordinate on the screen", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/touch-up/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/", 
            "text": "Long Tap\n\n\nLong press on the touch screen using finger motion events\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.longPress(element);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.long_press(element)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchPerform({\n  action: 'longPress',\n  options: {\n    element: element\n  }\n});\n\n// wd example\n// Using touch actions\nlet action = new wd.TouchAction();\naction.longPress({el: element});\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.long_press(element).perform\n\n# ruby_lib_core example\n@driver.touch_action.long_press(element).perform\n\n\n\n\n\n// C#\nvar touchAction = new TouchAction(Driver);\ntouchAction.LongPress(element).Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/longclick\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nelement\n\n\nnumber\n\n\nID of the element to double tap on\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Long Press"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#long-tap", 
            "text": "Long press on the touch screen using finger motion events", 
            "title": "Long Tap"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.longPress(element);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.long_press(element)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchPerform({\n  action: 'longPress',\n  options: {\n    element: element\n  }\n});\n\n// wd example\n// Using touch actions\nlet action = new wd.TouchAction();\naction.longPress({el: element});\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.long_press(element).perform\n\n# ruby_lib_core example\n@driver.touch_action.long_press(element).perform  // C#\nvar touchAction = new TouchAction(Driver);\ntouchAction.LongPress(element).Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#endpoint", 
            "text": "POST /session/:session_id/touch/longclick", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#json-parameters", 
            "text": "name  type  description      element  number  ID of the element to double tap on", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/long-press/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/", 
            "text": "Scroll\n\n\nScroll on the touch screen using finger based motion events\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.scroll(element, 10, 100);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.scroll_from_element(element, 10, 100)\nactions.scroll(10, 100)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchScroll(10, 100, element);\n\n// wd example\nawait driver.scroll(10, 100);\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_actions.scroll(element, 10, 100).perform\n\n# ruby_lib_core example\n@driver.touch_actions.scroll(element, 10, 100).perform\n\n\n\n\n\n// C#\nTouchActions action = new TouchActions(driver);\naction.Scroll(element, 10, 100);\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/scroll\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nX coordinate on the screen\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nY coordinate on the screen\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Scroll"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#scroll", 
            "text": "Scroll on the touch screen using finger based motion events", 
            "title": "Scroll"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.scroll(element, 10, 100);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.scroll_from_element(element, 10, 100)\nactions.scroll(10, 100)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchScroll(10, 100, element);\n\n// wd example\nawait driver.scroll(10, 100);  # Ruby\n# ruby_lib example\ntouch_actions.scroll(element, 10, 100).perform\n\n# ruby_lib_core example\n@driver.touch_actions.scroll(element, 10, 100).perform  // C#\nTouchActions action = new TouchActions(driver);\naction.Scroll(element, 10, 100);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#endpoint", 
            "text": "POST /session/:session_id/touch/scroll", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#json-parameters", 
            "text": "name  type  description      x  number  X coordinate on the screen    y  number  Y coordinate on the screen", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/scroll/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/flick/", 
            "text": "Flick\n\n\nFlick on the touch screen using finger motion events\n\n\nExample Usage\n\n\n// Java\nTouchActions action = new TouchActions(driver);\naction.flick(element, 1, 10, 10);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.flick_element(element, 1, 10, 10)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchFlick(10, 10, element, 1);\n\n// wd example\nawait element.flick(1, 10, 10);\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.flick(element, 1, 10, 10).perform\n\n# ruby_lib_core example\n@driver.touch_action.flick(element, 1, 10, 10).perform\n\n\n\n\n\n// C#\nTouchActions action = new TouchActions(driver);\naction.Flick(element, 10, 10, 1);\naction.Perform();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/flick\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nelement\n\n\nstring\n\n\nID of the element where the flick starts\n\n\n\n\n\n\nxoffset\n\n\nnumber\n\n\nThe x offset in pixels to flick by\n\n\n\n\n\n\nyoffset\n\n\nnumber\n\n\nThe y offset in pixels to flick by\n\n\n\n\n\n\nspeed\n\n\nnumber\n\n\nThe speed in pixels per seconds\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Flick"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#flick", 
            "text": "Flick on the touch screen using finger motion events", 
            "title": "Flick"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#example-usage", 
            "text": "// Java\nTouchActions action = new TouchActions(driver);\naction.flick(element, 1, 10, 10);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n# ...\nactions = TouchAction(driver)\nactions.flick_element(element, 1, 10, 10)\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchFlick(10, 10, element, 1);\n\n// wd example\nawait element.flick(1, 10, 10);  # Ruby\n# ruby_lib example\ntouch_action.flick(element, 1, 10, 10).perform\n\n# ruby_lib_core example\n@driver.touch_action.flick(element, 1, 10, 10).perform  // C#\nTouchActions action = new TouchActions(driver);\naction.Flick(element, 10, 10, 1);\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  None  None  None     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#endpoint", 
            "text": "POST /session/:session_id/touch/flick", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#json-parameters", 
            "text": "name  type  description      element  string  ID of the element where the flick starts    xoffset  number  The x offset in pixels to flick by    yoffset  number  The y offset in pixels to flick by    speed  number  The speed in pixels per seconds", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/flick/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/", 
            "text": "Multi Touch Perform\n\n\nPerform a multi touch action sequence\n\n\nExample Usage\n\n\n// Java\nTouchActions actionOne = new TouchAction();\nactionOne.press(10, 10);\nactionOne.moveTo(10, 100);\nactionOne.release();\nTouchActions actionTwo = new TouchAction();\nactionTwo.press(20, 20);\nactionTwo.moveTo(20, 200);\nactionTwo.release();\nMultiTouchAction action = new MultiTouchAction();\naction.add(actionOne);\naction.add(actionTwo);\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\nfrom appium.webdriver.common.multi_action import MultiAction\n# ...\na1 = TouchAction()\na1.press(10, 20)\na1.move_to(10, 200)\na1.release()\n\na2 = TouchAction()\na2.press(10, 10)\na2.move_to(10, 100)\na2.release()\n\nma = MultiAction(self.driver)\nma.add(a1, a2)\nma.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.multiTouchPerform([\n  { action: 'press', options: { x: 100, y: 250 }},\n  { action: 'moveTo', options: { x: 300, y: 100 }},\n  { action: 'release' }\n]);\n\n// wd example\nlet action = new wd.MultiTouchAction();\naction.press({x: 10, y: 10});\naction.moveTo({x: 10, y: 100});\naction.release();\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmulti_touch.down(element).move_to(10, 100).up(50, 50).perform\n\n# ruby_lib_core example\n@driver.multi_touch.down(element).move_to(10, 100).up(50, 50).perform\n\n\n\n\n\n// C#\n// TODO C# sample\n\n\n\n\n\nDescription\n\n\nDeprecated. Please consider using \nW3C Actions\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/multi/perform\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nThe type of action to perform (moveTo|release|press|tap|wait)\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe parameters of the action\n\n\n\n\n\n\nopts.element\n\n\nstring\n\n\nThe ID of the element\n\n\n\n\n\n\nopts.x\n\n\nnumber\n\n\nThe X coordinate of the operation (relative to top left corner)\n\n\n\n\n\n\nopts.y\n\n\nnumber\n\n\nThe Y coordinate of the operation (relative to top left corner)\n\n\n\n\n\n\nopts.count\n\n\nnumber\n\n\nTap count\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Multi Touch Perform"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#multi-touch-perform", 
            "text": "Perform a multi touch action sequence", 
            "title": "Multi Touch Perform"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#example-usage", 
            "text": "// Java\nTouchActions actionOne = new TouchAction();\nactionOne.press(10, 10);\nactionOne.moveTo(10, 100);\nactionOne.release();\nTouchActions actionTwo = new TouchAction();\nactionTwo.press(20, 20);\nactionTwo.moveTo(20, 200);\nactionTwo.release();\nMultiTouchAction action = new MultiTouchAction();\naction.add(actionOne);\naction.add(actionTwo);\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\nfrom appium.webdriver.common.multi_action import MultiAction\n# ...\na1 = TouchAction()\na1.press(10, 20)\na1.move_to(10, 200)\na1.release()\n\na2 = TouchAction()\na2.press(10, 10)\na2.move_to(10, 100)\na2.release()\n\nma = MultiAction(self.driver)\nma.add(a1, a2)\nma.perform()  // Javascript\n// webdriver.io example\ndriver.multiTouchPerform([\n  { action: 'press', options: { x: 100, y: 250 }},\n  { action: 'moveTo', options: { x: 300, y: 100 }},\n  { action: 'release' }\n]);\n\n// wd example\nlet action = new wd.MultiTouchAction();\naction.press({x: 10, y: 10});\naction.moveTo({x: 10, y: 100});\naction.release();\nawait action.perform();  # Ruby\n# ruby_lib example\nmulti_touch.down(element).move_to(10, 100).up(50, 50).perform\n\n# ruby_lib_core example\n@driver.multi_touch.down(element).move_to(10, 100).up(50, 50).perform  // C#\n// TODO C# sample", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#description", 
            "text": "Deprecated. Please consider using  W3C Actions", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#endpoint", 
            "text": "POST /session/:session_id/touch/multi/perform", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#json-parameters", 
            "text": "name  type  description      action  string  The type of action to perform (moveTo|release|press|tap|wait)    options  object  The parameters of the action    opts.element  string  The ID of the element    opts.x  number  The X coordinate of the operation (relative to top left corner)    opts.y  number  The Y coordinate of the operation (relative to top left corner)    opts.count  number  Tap count", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/multi-touch-perform/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/", 
            "text": "Touch Perform\n\n\nPerform a touch action sequence\n\n\nExample Usage\n\n\n// Java\nTouchAction action = new TouchAction(driver);\naction.press(10, 10);\naction.moveTo(10, 100);\naction.release();\naction.perform();\n\n\n\n\n\n# Python\nfrom appium.webdriver.common.touch_action import TouchAction\n// ...\nactions = TouchAction(driver)\nactions.tap_and_hold(20, 20)\nactions.move_to(10, 100)\nactions.release()\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.touchPerform([\n  { action: 'press', options: { x: 100, y: 250 }},\n  { action: 'wait', options: { ms: 100 }},\n  { action: 'moveTo', options: { x: 300, y: 100 }},\n  { action: 'release' }\n]);\n\n// wd example\nlet action = new wd.TouchAction();\naction.press({x: 10, y: 10});\naction.moveTo({x: 10, y: 100});\naction.release();\nawait action.perform();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntouch_action.down(element).move_to(10, 100).up(50, 50).perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).move_to(10, 100).up(50, 50).perform\n\n\n\n\n\n// C#\nTouchAction action = new TouchAction(driver);\naction.Press(10, 10);\naction.MoveTo(10, 100);\naction.Release();\naction.Perform();\n\n\n\n\n\nDescription\n\n\nDeprecated. Please consider using \nW3C Actions\n.\n\n\nThis functionality is only available from within a native context.\n\n\n'Touch Perform' works similarly to the other singular touch interactions, except that this allows you to chain together more than one touch action as one\ncommand. This is useful because Appium commands are sent over the network and there's latency between commands. This latency can make certain touch\ninteractions impossible because some interactions need to be performed in one sequence. Vertical, for example, requires pressing down, moving to a different\ny coordinate, and then releasing. For it to work, there can't be a delay between the interactions.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nappium.github.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/touch/perform\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\naction\n\n\nstring\n\n\nThe type of action to perform (moveTo|release|press|tap|wait)\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe parameters of the action\n\n\n\n\n\n\nopts.element\n\n\nstring\n\n\nThe ID of the element\n\n\n\n\n\n\nopts.x\n\n\nnumber\n\n\nThe X coordinate of the operation (relative to top left corner)\n\n\n\n\n\n\nopts.y\n\n\nnumber\n\n\nThe Y coordinate of the operation (relative to top left corner)\n\n\n\n\n\n\nopts.count\n\n\nnumber\n\n\nTap count\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Touch Perform"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#touch-perform", 
            "text": "Perform a touch action sequence", 
            "title": "Touch Perform"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#example-usage", 
            "text": "// Java\nTouchAction action = new TouchAction(driver);\naction.press(10, 10);\naction.moveTo(10, 100);\naction.release();\naction.perform();  # Python\nfrom appium.webdriver.common.touch_action import TouchAction\n// ...\nactions = TouchAction(driver)\nactions.tap_and_hold(20, 20)\nactions.move_to(10, 100)\nactions.release()\nactions.perform()  // Javascript\n// webdriver.io example\ndriver.touchPerform([\n  { action: 'press', options: { x: 100, y: 250 }},\n  { action: 'wait', options: { ms: 100 }},\n  { action: 'moveTo', options: { x: 300, y: 100 }},\n  { action: 'release' }\n]);\n\n// wd example\nlet action = new wd.TouchAction();\naction.press({x: 10, y: 10});\naction.moveTo({x: 10, y: 100});\naction.release();\nawait action.perform();  # Ruby\n# ruby_lib example\ntouch_action.down(element).move_to(10, 100).up(50, 50).perform\n\n# ruby_lib_core example\n@driver.touch_action.down(element).move_to(10, 100).up(50, 50).perform  // C#\nTouchAction action = new TouchAction(driver);\naction.Press(10, 10);\naction.MoveTo(10, 100);\naction.Release();\naction.Perform();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#description", 
            "text": "Deprecated. Please consider using  W3C Actions .  This functionality is only available from within a native context.  'Touch Perform' works similarly to the other singular touch interactions, except that this allows you to chain together more than one touch action as one\ncommand. This is useful because Appium commands are sent over the network and there's latency between commands. This latency can make certain touch\ninteractions impossible because some interactions need to be performed in one sequence. Vertical, for example, requires pressing down, moving to a different\ny coordinate, and then releasing. For it to work, there can't be a delay between the interactions.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  appium.github.io    Python  All  appium.github.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#endpoint", 
            "text": "POST /session/:session_id/touch/perform", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#json-parameters", 
            "text": "name  type  description      action  string  The type of action to perform (moveTo|release|press|tap|wait)    options  object  The parameters of the action    opts.element  string  The ID of the element    opts.x  number  The X coordinate of the operation (relative to top left corner)    opts.y  number  The Y coordinate of the operation (relative to top left corner)    opts.count  number  Tap count", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/touch/touch-perform/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/interactions/actions/", 
            "text": "Actions\n\n\nPerform a chain or multiple chains of keyboard and pointer (touch, mouse, stylus) actions\n\n\nExample Usage\n\n\n// Java\nWebElement source = (MobileElement) driver.findElementsByAccessibilityId(\nSomeAccessibilityID\n);\nWebElement target = (MobileElement) driver.findElementsByAccessibilityId(\nSomeOtherAccessibilityID\n);\n\nPoint source = dragMe.getCenter();\nPoint target = driver.findElementByAccessibilityId(\ndropzone\n).getCenter();\nPointerInput finger = new PointerInput(PointerInput.Kind.TOUCH, \nfinger\n);\nSequence dragNDrop = new Sequence(finger, 1);\ndragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(0),\n                    PointerInput.Origin.viewport(), source.x, source.y));\ndragNDrop.addAction(finger.createPointerDown(PointerInput.MouseButton.LEFT.asArg()));\ndragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(700),\n                    PointerInput.Origin.viewport(),target.x, target.y));\ndragNDrop.addAction(finger.createPointerUp(PointerInput.MouseButton.LEFT.asArg()));\ndriver.perform(Arrays.asList(dragNDrop));\n\n\n\n\n\n# Python\nelement = driver.find_element_by_accessibility_id(\nelId\n)\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click(hidden_submenu)\nactions.perform()\n\n\n\n\n\n// Javascript\n// webdriver.io example\n// Example: expressing a 1-second pinch-and-zoom\n// with a 500ms wait after the fingers first touch:\ndriver.performActions([{\n    \ntype\n: \npointer\n,\n    \nid\n: \nfinger1\n,\n    \nparameters\n: {\npointerType\n: \ntouch\n},\n    \nactions\n: [\n        {\ntype\n: \npointerMove\n, \nduration\n: 0, \nx\n: 100, \ny\n: 100},\n        {\ntype\n: \npointerDown\n, \nbutton\n: 0},\n        {\ntype\n: \npause\n, \nduration\n: 500},\n        {\ntype\n: \npointerMove\n, \nduration\n: 1000, \norigin\n: \npointer\n, \nx\n: -50, \ny\n: 0},\n        {\ntype\n: \npointerUp\n, \nbutton\n: 0}\n    ]\n}, {\n    \ntype\n: \npointer\n,\n    \nid\n: \nfinger2\n,\n    \nparameters\n: {\npointerType\n: \ntouch\n},\n    \nactions\n: [\n        {\ntype\n: \npointerMove\n, \nduration\n: 0, \nx\n: 100, \ny\n: 100},\n        {\ntype\n: \npointerDown\n, \nbutton\n: 0},\n        {\ntype\n: \npause\n, \nduration\n: 500},\n        {\ntype\n: \npointerMove\n, \nduration\n: 1000, \norigin\n: \npointer\n, \nx\n: 50, \ny\n: 0},\n        {\ntype\n: \npointerUp\n, \nbutton\n: 0}\n    ]\n}]);\n\n// release an action\ndriver.releaseActions();\n\n// wd example\n// Performs a 'pinch-and-zoom'\nvar actions = new wd.W3CActions(driver);\nvar touchInput = actions.addTouchInput();\ntouchInput.pointerMove({duration: 0, x: 100, y: 100});\ntouchInput.pointerDown({button: 0});\ntouchInput.pause({duration: 500});\ntouchInput.pointerMove({duration: 1000, origin: 'pointer', x: -50, y: 100});\ntouchInput.pointerUp({button: 0});\nvar secondTouchInput = actions.addTouchInput();\nsecondTouchInput.pointerMove({duration: 0, x: 200, y: 200});\nsecondTouchInput.pointerDown({button: 0});\nsecondTouchInput.pause({duration: 300});\nsecondTouchInput.pointerMove({duration: 1000, origin: 'pointer', x: 50, y: 100});\nsecondTouchInput.pointerUp({button: 0});\nawait actions.perform();\n\n// Releases any previously run actions (e.g.: if a key is 'down' because of /actions, releases it using key up)\nawait driver.releaseW3CActions();\n\n\n\n\n\n# Ruby\n# ruby_lib example\n# Send keys to an element\n# Build Single action chain\naction_builder = action\nkeyboard = action_builder.key_inputs\nel = find_element(id: \nsome_id\n)\naction.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform\n\n# Build multiple action chains\n# Example: expressing a 1-second pinch-and-zoom\n# with a 500ms wait after the fingers first touch:\nf1 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger1')\nf1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_down(:left)\nf1.create_pause(0.5)\nf1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_up(:left)\n\nf2 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger2')\nf2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_down(:left)\nf2.create_pause(0.5)\nf2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_up(:left)\n\nperform_actions [f1, f2]\n\n# ruby_lib_core example\n# Send keys to an element\n# Build Single action chain\naction_builder = @driver.action\nkeyboard = action_builder.key_inputs\nel = @driver.find_element(id: \nsome_id\n)\n@driver.action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform\n\n# Build multiple action chains\n# Example: expressing a 1-second pinch-and-zoom\n# with a 500ms wait after the fingers first touch:\nf1 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger1')\nf1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_down(:left)\nf1.create_pause(0.5)\nf1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_up(:left)\n\nf2 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger2')\nf2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_down(:left)\nf2.create_pause(0.5)\nf2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_up(:left)\n\n@driver.perform_actions [f1, f2]\n\n\n\n\n\n// C#\nvar inputDevice = new PointerInputDevice(PointerKind.Touch);\nvar actionSequence = new ActionSequence(inputDevice, 0);\n\nactionSequence.AddAction(inputDevice.CreatePointerMove(element));\nactionSequence.AddAction(inputDevice.CreatePointerDown(PointerButton.TouchContact));\nactionSequence.AddAction(inputDevice.CreatePause(TimeSpan.FromSeconds(1)));\nactionSequence.AddAction(inputDevice.CreatePointerUp(PointerButton.TouchContact));\n\ndriver.PerformActions(new List\nActionSequence\n {actionSequence});\n\n\n\n\n\nDescription\n\n\n\n\ninput source: Represents an input device (pointer or key) that a series of actions are dispatched to. The input source has a unique ID.\n\n\naction: An action that is dispatched to an input source. For a keyboard source, this can be 'keyDown' or 'keyUp'. For a pointer event this can be 'pointerMove',\n  'pointerDown', or 'pointerUp'. 'pause' events can also be sent to the device.\n\n\n\n\nThe Actions API takes a list of input sources and executes each 'tick'. A 'tick' is a slice of an action chain, so if you have two input sources, the first 'tick'\nis the 0-indexed action, the second 'tick' is the 1-indexed action, etc.... All of the actions per tick are executed concurrently.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\n?+\n\n\n1.6.4+\n\n\nAll\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\n10+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:sessionId/actions\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nactions\n\n\narray\narray\n\n\nAn array of input sources\n\n\n\n\n\n\nactions[$INDEX]\n\n\nobject\n\n\nAn object that represents an input source\n\n\n\n\n\n\nactions[$INDEX].type\n\n\nstring\n\n\nThe type of input source. Can be 'pointer', 'key' or 'null'\n\n\n\n\n\n\nactions[$INDEX].id\n\n\nstring\n\n\nUnique identifier of the input device which is used for current and future actions\n\n\n\n\n\n\nactions[$INDEX].parameters\n\n\nobject\n\n\n(optional) Set parameters for the input source. Required for 'pointer' inputs\n\n\n\n\n\n\nactions[$INDEX].parameters.pointerType\n\n\nstring\n\n\nType of pointer. Can be 'touch', 'mouse' or 'pen'\n\n\n\n\n\n\nactions[$INDEX].actions\n\n\narray\nobject\n\n\nA list of actions to perform on the input source\n\n\n\n\n\n\nactions[$INDEX].actions\n\n\narray\nobject\n\n\nA list of actions to perform on the input source\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX]\n\n\nobject\n\n\nThe action to perform on the input source\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX].type\n\n\nstring\n\n\nThe type of action. For any input source it can be 'pause'. For 'pointer' input source 'pointerMove', 'pointerUp' or 'pointerDown'. For 'key' it can be 'keyDown' or 'keyUp'\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX].value\n\n\nstring\n\n\nFor a 'keyUp' or 'keyDown' action thevalue to send to the keyboard. Should be a one-character string (\"s\", \"\\uE009\")\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX].duration\n\n\nnumber\n\n\nHow long to perform the action in 'ms'. Only applicable to 'pause' and 'pointerMove'.\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX].origin\n\n\nstring|object\n\n\nFor 'pointerMove', this tells the input source what x,y are relative to. Can be 'viewport', 'pointer' or {'element-6066-11e4-a52e-4f735466cecf'\n '\n'}\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX].x\n\n\nnumber\n\n\nX coordinate of pointer move event\n\n\n\n\n\n\nactions[$INDEX].actions[$INDEX].y\n\n\nnumber\n\n\nY coordinate of pointer move event\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification", 
            "title": "W3C Actions"
        }, 
        {
            "location": "/commands/interactions/actions/#actions", 
            "text": "Perform a chain or multiple chains of keyboard and pointer (touch, mouse, stylus) actions", 
            "title": "Actions"
        }, 
        {
            "location": "/commands/interactions/actions/#example-usage", 
            "text": "// Java\nWebElement source = (MobileElement) driver.findElementsByAccessibilityId( SomeAccessibilityID );\nWebElement target = (MobileElement) driver.findElementsByAccessibilityId( SomeOtherAccessibilityID );\n\nPoint source = dragMe.getCenter();\nPoint target = driver.findElementByAccessibilityId( dropzone ).getCenter();\nPointerInput finger = new PointerInput(PointerInput.Kind.TOUCH,  finger );\nSequence dragNDrop = new Sequence(finger, 1);\ndragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(0),\n                    PointerInput.Origin.viewport(), source.x, source.y));\ndragNDrop.addAction(finger.createPointerDown(PointerInput.MouseButton.LEFT.asArg()));\ndragNDrop.addAction(finger.createPointerMove(Duration.ofMillis(700),\n                    PointerInput.Origin.viewport(),target.x, target.y));\ndragNDrop.addAction(finger.createPointerUp(PointerInput.MouseButton.LEFT.asArg()));\ndriver.perform(Arrays.asList(dragNDrop));  # Python\nelement = driver.find_element_by_accessibility_id( elId )\nactions = ActionChains(driver)\nactions.move_to_element(element)\nactions.click(hidden_submenu)\nactions.perform()  // Javascript\n// webdriver.io example\n// Example: expressing a 1-second pinch-and-zoom\n// with a 500ms wait after the fingers first touch:\ndriver.performActions([{\n     type :  pointer ,\n     id :  finger1 ,\n     parameters : { pointerType :  touch },\n     actions : [\n        { type :  pointerMove ,  duration : 0,  x : 100,  y : 100},\n        { type :  pointerDown ,  button : 0},\n        { type :  pause ,  duration : 500},\n        { type :  pointerMove ,  duration : 1000,  origin :  pointer ,  x : -50,  y : 0},\n        { type :  pointerUp ,  button : 0}\n    ]\n}, {\n     type :  pointer ,\n     id :  finger2 ,\n     parameters : { pointerType :  touch },\n     actions : [\n        { type :  pointerMove ,  duration : 0,  x : 100,  y : 100},\n        { type :  pointerDown ,  button : 0},\n        { type :  pause ,  duration : 500},\n        { type :  pointerMove ,  duration : 1000,  origin :  pointer ,  x : 50,  y : 0},\n        { type :  pointerUp ,  button : 0}\n    ]\n}]);\n\n// release an action\ndriver.releaseActions();\n\n// wd example\n// Performs a 'pinch-and-zoom'\nvar actions = new wd.W3CActions(driver);\nvar touchInput = actions.addTouchInput();\ntouchInput.pointerMove({duration: 0, x: 100, y: 100});\ntouchInput.pointerDown({button: 0});\ntouchInput.pause({duration: 500});\ntouchInput.pointerMove({duration: 1000, origin: 'pointer', x: -50, y: 100});\ntouchInput.pointerUp({button: 0});\nvar secondTouchInput = actions.addTouchInput();\nsecondTouchInput.pointerMove({duration: 0, x: 200, y: 200});\nsecondTouchInput.pointerDown({button: 0});\nsecondTouchInput.pause({duration: 300});\nsecondTouchInput.pointerMove({duration: 1000, origin: 'pointer', x: 50, y: 100});\nsecondTouchInput.pointerUp({button: 0});\nawait actions.perform();\n\n// Releases any previously run actions (e.g.: if a key is 'down' because of /actions, releases it using key up)\nawait driver.releaseW3CActions();  # Ruby\n# ruby_lib example\n# Send keys to an element\n# Build Single action chain\naction_builder = action\nkeyboard = action_builder.key_inputs\nel = find_element(id:  some_id )\naction.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform\n\n# Build multiple action chains\n# Example: expressing a 1-second pinch-and-zoom\n# with a 500ms wait after the fingers first touch:\nf1 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger1')\nf1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_down(:left)\nf1.create_pause(0.5)\nf1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_up(:left)\n\nf2 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger2')\nf2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_down(:left)\nf2.create_pause(0.5)\nf2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_up(:left)\n\nperform_actions [f1, f2]\n\n# ruby_lib_core example\n# Send keys to an element\n# Build Single action chain\naction_builder = @driver.action\nkeyboard = action_builder.key_inputs\nel = @driver.find_element(id:  some_id )\n@driver.action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform\n\n# Build multiple action chains\n# Example: expressing a 1-second pinch-and-zoom\n# with a 500ms wait after the fingers first touch:\nf1 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger1')\nf1.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_down(:left)\nf1.create_pause(0.5)\nf1.create_pointer_move(duration: 1, x: 200, y: 200, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf1.create_pointer_up(:left)\n\nf2 = ::Selenium::WebDriver::Interactions.pointer(:touch, name: 'finger2')\nf2.create_pointer_move(duration: 1, x: 200, y: 500, origin: ::Selenium::WebDriver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_down(:left)\nf2.create_pause(0.5)\nf2.create_pointer_move(duration: 1, x: 200, y: 800, origin: ::Selenium::Web@Driver::Interactions::PointerMove::VIEWPORT)\nf2.create_pointer_up(:left)\n\n@driver.perform_actions [f1, f2]  // C#\nvar inputDevice = new PointerInputDevice(PointerKind.Touch);\nvar actionSequence = new ActionSequence(inputDevice, 0);\n\nactionSequence.AddAction(inputDevice.CreatePointerMove(element));\nactionSequence.AddAction(inputDevice.CreatePointerDown(PointerButton.TouchContact));\nactionSequence.AddAction(inputDevice.CreatePause(TimeSpan.FromSeconds(1)));\nactionSequence.AddAction(inputDevice.CreatePointerUp(PointerButton.TouchContact));\n\ndriver.PerformActions(new List ActionSequence  {actionSequence});", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/interactions/actions/#description", 
            "text": "input source: Represents an input device (pointer or key) that a series of actions are dispatched to. The input source has a unique ID.  action: An action that is dispatched to an input source. For a keyboard source, this can be 'keyDown' or 'keyUp'. For a pointer event this can be 'pointerMove',\n  'pointerDown', or 'pointerUp'. 'pause' events can also be sent to the device.   The Actions API takes a list of input sources and executes each 'tick'. A 'tick' is a slice of an action chain, so if you have two input sources, the first 'tick'\nis the 0-indexed action, the second 'tick' is the 1-indexed action, etc.... All of the actions per tick are executed concurrently.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/interactions/actions/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/interactions/actions/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  None  None  None    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  None  None  None    Mac  Mac  ?+  1.6.4+  All    Windows  Windows  10+  1.6.0+  All", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/interactions/actions/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All     Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/interactions/actions/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/interactions/actions/#endpoint", 
            "text": "POST /session/:sessionId/actions", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/interactions/actions/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/interactions/actions/#json-parameters", 
            "text": "name  type  description      actions  array array  An array of input sources    actions[$INDEX]  object  An object that represents an input source    actions[$INDEX].type  string  The type of input source. Can be 'pointer', 'key' or 'null'    actions[$INDEX].id  string  Unique identifier of the input device which is used for current and future actions    actions[$INDEX].parameters  object  (optional) Set parameters for the input source. Required for 'pointer' inputs    actions[$INDEX].parameters.pointerType  string  Type of pointer. Can be 'touch', 'mouse' or 'pen'    actions[$INDEX].actions  array object  A list of actions to perform on the input source    actions[$INDEX].actions  array object  A list of actions to perform on the input source    actions[$INDEX].actions[$INDEX]  object  The action to perform on the input source    actions[$INDEX].actions[$INDEX].type  string  The type of action. For any input source it can be 'pause'. For 'pointer' input source 'pointerMove', 'pointerUp' or 'pointerDown'. For 'key' it can be 'keyDown' or 'keyUp'    actions[$INDEX].actions[$INDEX].value  string  For a 'keyUp' or 'keyDown' action thevalue to send to the keyboard. Should be a one-character string (\"s\", \"\\uE009\")    actions[$INDEX].actions[$INDEX].duration  number  How long to perform the action in 'ms'. Only applicable to 'pause' and 'pointerMove'.    actions[$INDEX].actions[$INDEX].origin  string|object  For 'pointerMove', this tells the input source what x,y are relative to. Can be 'viewport', 'pointer' or {'element-6066-11e4-a52e-4f735466cecf'  ' '}    actions[$INDEX].actions[$INDEX].x  number  X coordinate of pointer move event    actions[$INDEX].actions[$INDEX].y  number  Y coordinate of pointer move event", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/interactions/actions/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/interactions/actions/#see-also", 
            "text": "W3C Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/set-window/", 
            "text": "Switch to Window\n\n\nChange focus to another window (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.switchTo().window(\nhandle\n);\n\n\n\n\n\n# Python\nself.driver.switch_to.window(\nhandle\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.switchToWindow(\nhandle\n);\n\n// wd example\nawait driver.window(\nhandle\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nswitch_to.window(\nhandle\n)\n\n# ruby_lib_core example\n@driver.switch_to.window(\nhandle\n)\n\n\n\n\n\n// C#\ndriver.SwitchTo().Window(\nhandle\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/window\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n(For MJSONWP) The window to change focus to\n\n\n\n\n\n\nhandle\n\n\nstring\n\n\n(For W3C) The window to change focus to\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Set Window"
        }, 
        {
            "location": "/commands/web/window/set-window/#switch-to-window", 
            "text": "Change focus to another window (Web context only)", 
            "title": "Switch to Window"
        }, 
        {
            "location": "/commands/web/window/set-window/#example-usage", 
            "text": "// Java\ndriver.switchTo().window( handle );  # Python\nself.driver.switch_to.window( handle )  // Javascript\n// webdriver.io example\ndriver.switchToWindow( handle );\n\n// wd example\nawait driver.window( handle );  # Ruby\n# ruby_lib example\nswitch_to.window( handle )\n\n# ruby_lib_core example\n@driver.switch_to.window( handle )  // C#\ndriver.SwitchTo().Window( handle );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/set-window/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/set-window/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/set-window/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/set-window/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/set-window/#endpoint", 
            "text": "POST /session/:session_id/window", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/set-window/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/set-window/#json-parameters", 
            "text": "name  type  description      name  string  (For MJSONWP) The window to change focus to    handle  string  (For W3C) The window to change focus to", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/set-window/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/set-window/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/close-window/", 
            "text": "Close Window\n\n\nClose the current window (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.close();\n\n\n\n\n\n# Python\nself.driver.close()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.closeWindow();\n\n// wd example\nawait driver.close();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nclose\n\n# ruby_lib_core example\n@driver.close\n\n\n\n\n\n// C#\ndriver.Close();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nDELETE /session/:session_id/window\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Close Window"
        }, 
        {
            "location": "/commands/web/window/close-window/#close-window", 
            "text": "Close the current window (Web context only)", 
            "title": "Close Window"
        }, 
        {
            "location": "/commands/web/window/close-window/#example-usage", 
            "text": "// Java\ndriver.close();  # Python\nself.driver.close()  // Javascript\n// webdriver.io example\ndriver.closeWindow();\n\n// wd example\nawait driver.close();  # Ruby\n# ruby_lib example\nclose\n\n# ruby_lib_core example\n@driver.close  // C#\ndriver.Close();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/close-window/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/close-window/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/close-window/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/close-window/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/close-window/#endpoint", 
            "text": "DELETE /session/:session_id/window", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/close-window/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/close-window/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/close-window/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/close-window/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/get-handle/", 
            "text": "Get Window Handle\n\n\nRetrieve the current window handle (Web context only)\n\n\nExample Usage\n\n\n// Java\nString windowHandle = driver.getWindowHandle();\n\n\n\n\n\n# Python\nwindow_handle = self.driver.current_window_handle\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet handle = driver.getWindowHandle();\n\n// wd example\nlet windowHandle = await driver.windowHandle();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nwindow_handle\n\n# ruby_lib_core example\n@driver.window_handle\n\n\n\n\n\n// C#\nstring windowHandle = driver.CurrentWindowHandle;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/window_handle\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Get Handle"
        }, 
        {
            "location": "/commands/web/window/get-handle/#get-window-handle", 
            "text": "Retrieve the current window handle (Web context only)", 
            "title": "Get Window Handle"
        }, 
        {
            "location": "/commands/web/window/get-handle/#example-usage", 
            "text": "// Java\nString windowHandle = driver.getWindowHandle();  # Python\nwindow_handle = self.driver.current_window_handle  // Javascript\n// webdriver.io example\nlet handle = driver.getWindowHandle();\n\n// wd example\nlet windowHandle = await driver.windowHandle();  # Ruby\n# ruby_lib example\nwindow_handle\n\n# ruby_lib_core example\n@driver.window_handle  // C#\nstring windowHandle = driver.CurrentWindowHandle;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/get-handle/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/get-handle/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/get-handle/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/get-handle/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/get-handle/#endpoint", 
            "text": "GET /session/:session_id/window_handle", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/get-handle/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/get-handle/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/get-handle/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/get-handle/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/get-handles/", 
            "text": "Get Window Handles\n\n\nRetrieve the list of all window handles available to the session (Web context only)\n\n\nExample Usage\n\n\n// Java\nSet\nString\n windowHandles = driver.getWindowHandles();\n\n\n\n\n\n# Python\nwindow_handles = self.driver.window_handles\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet handles = driver.getWindowHandles();\n\n// wd example\nlet windowHandle = await driver.windowHandles();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nwindow_handles\n\n# ruby_lib_core example\n@driver.window_handles\n\n\n\n\n\n// C#\nIEnumerable\nstring\n windowHandles = driver.WindowHandles;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/window_handles\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nA list of window handles (\narray\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Get Handles"
        }, 
        {
            "location": "/commands/web/window/get-handles/#get-window-handles", 
            "text": "Retrieve the list of all window handles available to the session (Web context only)", 
            "title": "Get Window Handles"
        }, 
        {
            "location": "/commands/web/window/get-handles/#example-usage", 
            "text": "// Java\nSet String  windowHandles = driver.getWindowHandles();  # Python\nwindow_handles = self.driver.window_handles  // Javascript\n// webdriver.io example\nlet handles = driver.getWindowHandles();\n\n// wd example\nlet windowHandle = await driver.windowHandles();  # Ruby\n# ruby_lib example\nwindow_handles\n\n# ruby_lib_core example\n@driver.window_handles  // C#\nIEnumerable string  windowHandles = driver.WindowHandles;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/get-handles/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/get-handles/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/get-handles/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/get-handles/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/get-handles/#endpoint", 
            "text": "GET /session/:session_id/window_handles", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/get-handles/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/get-handles/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/get-handles/#response", 
            "text": "A list of window handles ( array string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/get-handles/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/title/", 
            "text": "Get Title\n\n\nGet the current page title (Web context only)\n\n\nExample Usage\n\n\n// Java\nString title = driver.getTitle();\n\n\n\n\n\n# Python\ntitle = self.driver.title\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet handle = driver.getTitle();\n\n// wd example\nlet title = await driver.title();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ntitle\n\n# ruby_lib_core example\n@driver.title\n\n\n\n\n\n// C#\nstring title = driver.Title;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/title\n\n\nURL Parameters\n\n\nNone\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe current page title (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Get Title"
        }, 
        {
            "location": "/commands/web/window/title/#get-title", 
            "text": "Get the current page title (Web context only)", 
            "title": "Get Title"
        }, 
        {
            "location": "/commands/web/window/title/#example-usage", 
            "text": "// Java\nString title = driver.getTitle();  # Python\ntitle = self.driver.title  // Javascript\n// webdriver.io example\nlet handle = driver.getTitle();\n\n// wd example\nlet title = await driver.title();  # Ruby\n# ruby_lib example\ntitle\n\n# ruby_lib_core example\n@driver.title  // C#\nstring title = driver.Title;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/title/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/title/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/title/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/title/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/title/#endpoint", 
            "text": "GET /session/:session_id/title", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/title/#url-parameters", 
            "text": "None", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/title/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/title/#response", 
            "text": "The current page title ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/title/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/get-window-size/", 
            "text": "Get Window Size\n\n\nGet the size of the specified window (Web context only)\n\n\nExample Usage\n\n\n// Java\nDimension windowSize = driver.manage().window().getSize();\n\n\n\n\n\n# Python\nhandle_one_size = self.driver.get_window_size()\nhandle_two_size = self.driver.get_window_size(\nhandleName\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet position = driver.getWindowRect();\n\n// wd example\nlet handleOneSize = await driver.getWindowSize();\nlet handleTwoSize = await driver.getWindowSize(\nhandleName\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nwindow_size\nwindow_size(\nhandleName\n)\n\n# ruby_lib_core example\n@driver.window_size\n@driver.window_size(\nhandleName\n)\n\n\n\n\n\n// C#\nSize windowSize = driver.Manage().Window.Size;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/window/:window_handle/size\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nwindow_handle\n\n\nHandle of the window to get size of. If 'current' it will get size of current window.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe width of the window\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe height of the window\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Window Size"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#get-window-size", 
            "text": "Get the size of the specified window (Web context only)", 
            "title": "Get Window Size"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#example-usage", 
            "text": "// Java\nDimension windowSize = driver.manage().window().getSize();  # Python\nhandle_one_size = self.driver.get_window_size()\nhandle_two_size = self.driver.get_window_size( handleName )  // Javascript\n// webdriver.io example\nlet position = driver.getWindowRect();\n\n// wd example\nlet handleOneSize = await driver.getWindowSize();\nlet handleTwoSize = await driver.getWindowSize( handleName );  # Ruby\n# ruby_lib example\nwindow_size\nwindow_size( handleName )\n\n# ruby_lib_core example\n@driver.window_size\n@driver.window_size( handleName )  // C#\nSize windowSize = driver.Manage().Window.Size;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#endpoint", 
            "text": "GET /session/:session_id/window/:window_handle/size", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    window_handle  Handle of the window to get size of. If 'current' it will get size of current window.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#response", 
            "text": "name  type  description      width  number  The width of the window    height  number  The height of the window", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/get-window-size/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/set-window-size/", 
            "text": "Set Window Size\n\n\nChange the size of the specified window (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().window().setSize(new Dimension(10, 10));\n\n\n\n\n\n# Python\nself.driver.set_window_size(10, 10)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setWindowRect(0, 0, 800, 600});\n\n// wd example\nawait driver.setWindowSize(10, 10, \nhandleName\n); // Set size of window by handle name\nawait driver.setWindowSize(10, 10); // Set current window\n\n\n\n\n\n# Ruby\n# ruby_lib example\nresize_to(10, 10)\n\n# ruby_lib_core example\n@driver.resize_to(10, 10)\n\n\n\n\n\n// C#\ndriver.Manage().Window.Size = new Size(10, 10);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/window/:window_handle/size\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nwindow_handle\n\n\nHandle of the window to get size of. If 'current' it will get size of current window.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nwidth\n\n\nnumber\n\n\nThe new window width\n\n\n\n\n\n\nheight\n\n\nnumber\n\n\nThe new window height\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Set Window Size"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#set-window-size", 
            "text": "Change the size of the specified window (Web context only)", 
            "title": "Set Window Size"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#example-usage", 
            "text": "// Java\ndriver.manage().window().setSize(new Dimension(10, 10));  # Python\nself.driver.set_window_size(10, 10)  // Javascript\n// webdriver.io example\ndriver.setWindowRect(0, 0, 800, 600});\n\n// wd example\nawait driver.setWindowSize(10, 10,  handleName ); // Set size of window by handle name\nawait driver.setWindowSize(10, 10); // Set current window  # Ruby\n# ruby_lib example\nresize_to(10, 10)\n\n# ruby_lib_core example\n@driver.resize_to(10, 10)  // C#\ndriver.Manage().Window.Size = new Size(10, 10);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#endpoint", 
            "text": "POST /session/:session_id/window/:window_handle/size", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    window_handle  Handle of the window to get size of. If 'current' it will get size of current window.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#json-parameters", 
            "text": "name  type  description      width  number  The new window width    height  number  The new window height", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/set-window-size/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/get-window-position/", 
            "text": "Get Window Position\n\n\nGet the position of the specified window (Web context only)\n\n\nExample Usage\n\n\n// Java\nPoint windowPosition = driver.manage().window().getPosition();\n\n\n\n\n\n# Python\nhandle_one_position = self.driver.get_window_position()\nhandle_two_position = self.driver.get_window_position(\nhandleName\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet position = driver.getWindowRect();\n\n// wd example\nlet handleOnePosition = await driver.getWindowPosition();\nlet handleTwoPosition = await driver.getWindowPosition(\nhandleName\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nwindow_position\nwindow_position(\nhandleName\n)\n\n# ruby_lib_core example\n@driver.window_position\n@driver.window_position(\nhandleName\n)\n\n\n\n\n\n// C#\nPoint windowPosition = driver.Manage().Window.Position;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/window/:window_handle/position\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nwindow_handle\n\n\nHandle of the window to get position of. If 'current' it will get position of current window.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nThe x coordinate relative to the top left corner of the window\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nThe y coordinate relative to the top left corner of the window\n\n\n\n\n\n\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Get Window Position"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#get-window-position", 
            "text": "Get the position of the specified window (Web context only)", 
            "title": "Get Window Position"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#example-usage", 
            "text": "// Java\nPoint windowPosition = driver.manage().window().getPosition();  # Python\nhandle_one_position = self.driver.get_window_position()\nhandle_two_position = self.driver.get_window_position( handleName )  // Javascript\n// webdriver.io example\nlet position = driver.getWindowRect();\n\n// wd example\nlet handleOnePosition = await driver.getWindowPosition();\nlet handleTwoPosition = await driver.getWindowPosition( handleName );  # Ruby\n# ruby_lib example\nwindow_position\nwindow_position( handleName )\n\n# ruby_lib_core example\n@driver.window_position\n@driver.window_position( handleName )  // C#\nPoint windowPosition = driver.Manage().Window.Position;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#endpoint", 
            "text": "GET /session/:session_id/window/:window_handle/position", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    window_handle  Handle of the window to get position of. If 'current' it will get position of current window.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#response", 
            "text": "name  type  description      x  number  The x coordinate relative to the top left corner of the window    y  number  The y coordinate relative to the top left corner of the window", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/get-window-position/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/set-window-position/", 
            "text": "Set Window Position\n\n\nChange the position of the specified window (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().window().setPosition(new Dimension(10, 10));\n\n\n\n\n\n# Python\nself.driver.set_window_position(10, 10)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setWindowRect(10, 10);\n\n// wd example\nawait driver.setWindowPosition(10, 10, \nhandleName\n); // Set position of window by handle name\nawait driver.setWindowPosition(10, 10); // Set current window\n\n\n\n\n\n# Ruby\n# ruby_lib example\nreposition_window(10, 10)\n\n# ruby_lib_core example\n@driver.reposition_window(10, 10)\n\n\n\n\n\n// C#\ndriver.Manage().Window.Position = new Point(10, 10);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/window/:window_handle/position\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nwindow_handle\n\n\nHandle of the window to get position of. If 'current' it will get position of current window.\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nThe x coordinate relative to the top left corner of the window\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nThe y coordinate relative to the top left corner of the window\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nJSONWP Specification", 
            "title": "Set Window Position"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#set-window-position", 
            "text": "Change the position of the specified window (Web context only)", 
            "title": "Set Window Position"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#example-usage", 
            "text": "// Java\ndriver.manage().window().setPosition(new Dimension(10, 10));  # Python\nself.driver.set_window_position(10, 10)  // Javascript\n// webdriver.io example\ndriver.setWindowRect(10, 10);\n\n// wd example\nawait driver.setWindowPosition(10, 10,  handleName ); // Set position of window by handle name\nawait driver.setWindowPosition(10, 10); // Set current window  # Ruby\n# ruby_lib example\nreposition_window(10, 10)\n\n# ruby_lib_core example\n@driver.reposition_window(10, 10)  // C#\ndriver.Manage().Window.Position = new Point(10, 10);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#endpoint", 
            "text": "POST /session/:session_id/window/:window_handle/position", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    window_handle  Handle of the window to get position of. If 'current' it will get position of current window.", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#json-parameters", 
            "text": "name  type  description      x  number  The x coordinate relative to the top left corner of the window    y  number  The y coordinate relative to the top left corner of the window", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/set-window-position/#see-also", 
            "text": "JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/window/maximize-window/", 
            "text": "Maximize Window\n\n\nMaximize the specified window (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().window().maximize();\n\n\n\n\n\n# Python\nself.driver.maximize_window();\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.maximizeWindow();\n\n// wd example\nawait driver.maximize(\nhandleName\n); // Set size of window by handle name\nawait driver.maximize(); // Set current window\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmaximize_window\n\n# ruby_lib_core example\n@driver.maximize_window\n\n\n\n\n\n// C#\ndriver.Manage().Window.Maximize();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/window/:window_handle/maximize\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nwindow_handle\n\n\nHandle of the window to maximize. If 'current' it will maximize current window\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Maximize Window"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#maximize-window", 
            "text": "Maximize the specified window (Web context only)", 
            "title": "Maximize Window"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#example-usage", 
            "text": "// Java\ndriver.manage().window().maximize();  # Python\nself.driver.maximize_window();  // Javascript\n// webdriver.io example\ndriver.maximizeWindow();\n\n// wd example\nawait driver.maximize( handleName ); // Set size of window by handle name\nawait driver.maximize(); // Set current window  # Ruby\n# ruby_lib example\nmaximize_window\n\n# ruby_lib_core example\n@driver.maximize_window  // C#\ndriver.Manage().Window.Maximize();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#endpoint", 
            "text": "POST /session/:session_id/window/:window_handle/maximize", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    window_handle  Handle of the window to maximize. If 'current' it will maximize current window", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/window/maximize-window/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/", 
            "text": "Go to URL\n\n\nNavigate to a new URL (Web context) or open an Appium \ndeep link\n (Native)\n\n\nExample Usage\n\n\n// Java\ndriver.get(\nhttp://appium.io/\n);\n\n\n\n\n\n# Python\nself.driver.get(\nhttp://appium.io/\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.url(\nhttp://appium.io\n);\n\n// wd example\nawait driver.get(\nhttp://appium.io/\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nget(\nhttp://appium.io\n)\n\n# ruby_lib_core example\n@driver.get(\nhttp://appium.io\n)\n\n\n\n\n\n// C#\ndriver.Navigate().GoToUrl(\nhttp://appium.io\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/url\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe URL to navigate to\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Go to URL"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#go-to-url", 
            "text": "Navigate to a new URL (Web context) or open an Appium  deep link  (Native)", 
            "title": "Go to URL"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#example-usage", 
            "text": "// Java\ndriver.get( http://appium.io/ );  # Python\nself.driver.get( http://appium.io/ )  // Javascript\n// webdriver.io example\ndriver.url( http://appium.io );\n\n// wd example\nawait driver.get( http://appium.io/ );  # Ruby\n# ruby_lib example\nget( http://appium.io )\n\n# ruby_lib_core example\n@driver.get( http://appium.io )  // C#\ndriver.Navigate().GoToUrl( http://appium.io );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  UiAutomator2  ?+  1.6.0+  All     Espresso  ?+  1.9.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#endpoint", 
            "text": "POST /session/:session_id/url", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#json-parameters", 
            "text": "name  type  description      url  string  The URL to navigate to", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/navigation/go-to-url/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/navigation/url/", 
            "text": "Get URL\n\n\nRetrieve the URL of the current page (Web context only)\n\n\nExample Usage\n\n\n// Java\nString url = driver.getCurrentUrl();\n\n\n\n\n\n# Python\nurl = self.driver.current_url()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet url = driver.getUrl();\n\n// wd example\nlet url = await driver.url();\n\n\n\n\n\n# Ruby\n# ruby_lib example\ncurrent_url\n\n# ruby_lib_core example\n@driver.current_url\n\n\n\n\n\n// C#\nstring url = driver.Url;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/url\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe current URL (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Get URL"
        }, 
        {
            "location": "/commands/web/navigation/url/#get-url", 
            "text": "Retrieve the URL of the current page (Web context only)", 
            "title": "Get URL"
        }, 
        {
            "location": "/commands/web/navigation/url/#example-usage", 
            "text": "// Java\nString url = driver.getCurrentUrl();  # Python\nurl = self.driver.current_url()  // Javascript\n// webdriver.io example\nlet url = driver.getUrl();\n\n// wd example\nlet url = await driver.url();  # Ruby\n# ruby_lib example\ncurrent_url\n\n# ruby_lib_core example\n@driver.current_url  // C#\nstring url = driver.Url;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/navigation/url/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/navigation/url/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/navigation/url/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/navigation/url/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/navigation/url/#endpoint", 
            "text": "GET /session/:session_id/url", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/navigation/url/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/navigation/url/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/navigation/url/#response", 
            "text": "The current URL ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/navigation/url/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/navigation/back/", 
            "text": "Go Back\n\n\nNavigate backwards in the browser history, if possible (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.back();\n\n\n\n\n\n# Python\nself.driver.back()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.back();\n\n// wd example\nawait driver.back();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nback\n\n# ruby_lib_core example\n@driver.back\n\n\n\n\n\n// C#\ndriver.Navigate().Back();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\n9.3+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUIAutomation\n\n\n8.0 to 9.3\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nAndroid\n\n\nEspresso\n\n\n?+\n\n\n1.9.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator2\n\n\n?+\n\n\n1.6.0+\n\n\nAll\n\n\n\n\n\n\n\n\nUiAutomator\n\n\n4.3+\n\n\nAll\n\n\nAll\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/back\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Back"
        }, 
        {
            "location": "/commands/web/navigation/back/#go-back", 
            "text": "Navigate backwards in the browser history, if possible (Web context only)", 
            "title": "Go Back"
        }, 
        {
            "location": "/commands/web/navigation/back/#example-usage", 
            "text": "// Java\ndriver.back();  # Python\nself.driver.back()  // Javascript\n// webdriver.io example\ndriver.back();\n\n// wd example\nawait driver.back();  # Ruby\n# ruby_lib example\nback\n\n# ruby_lib_core example\n@driver.back  // C#\ndriver.Navigate().Back();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/navigation/back/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/navigation/back/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  9.3+  1.6.0+  All     UIAutomation  8.0 to 9.3  All  All    Android  Espresso  ?+  1.9.0+  All     UiAutomator2  ?+  1.6.0+  All     UiAutomator  4.3+  All  All    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/navigation/back/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/navigation/back/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/navigation/back/#endpoint", 
            "text": "POST /session/:session_id/back", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/navigation/back/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/navigation/back/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/navigation/back/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/navigation/back/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/navigation/forward/", 
            "text": "Go Forward\n\n\nNavigate forwards in the browser history, if possible (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.forward();\n\n\n\n\n\n# Python\nself.driver.forward()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.forward();\n\n// wd example\nawait driver.forward();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nforward\n\n# ruby_lib_core example\n@driver.forward\n\n\n\n\n\n// C#\ndriver.Navigate().Forward();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/forward\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Forward"
        }, 
        {
            "location": "/commands/web/navigation/forward/#go-forward", 
            "text": "Navigate forwards in the browser history, if possible (Web context only)", 
            "title": "Go Forward"
        }, 
        {
            "location": "/commands/web/navigation/forward/#example-usage", 
            "text": "// Java\ndriver.forward();  # Python\nself.driver.forward()  // Javascript\n// webdriver.io example\ndriver.forward();\n\n// wd example\nawait driver.forward();  # Ruby\n# ruby_lib example\nforward\n\n# ruby_lib_core example\n@driver.forward  // C#\ndriver.Navigate().Forward();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/navigation/forward/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/navigation/forward/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/navigation/forward/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/navigation/forward/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/navigation/forward/#endpoint", 
            "text": "POST /session/:session_id/forward", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/navigation/forward/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/navigation/forward/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/navigation/forward/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/navigation/forward/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/navigation/refresh/", 
            "text": "Refresh\n\n\nRefresh the current page. (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.refresh();\n\n\n\n\n\n# Python\nself.driver.refresh()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.refresh();\n\n// wd example\nawait driver.refresh();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nnavigate.refresh\n\n# ruby_lib_core example\n@driver.navigate.refresh\n\n\n\n\n\n// C#\ndriver.Navigate().Refresh();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/refresh\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Refresh"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#refresh", 
            "text": "Refresh the current page. (Web context only)", 
            "title": "Refresh"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#example-usage", 
            "text": "// Java\ndriver.refresh();  # Python\nself.driver.refresh()  // Javascript\n// webdriver.io example\ndriver.refresh();\n\n// wd example\nawait driver.refresh();  # Ruby\n# ruby_lib example\nnavigate.refresh\n\n# ruby_lib_core example\n@driver.navigate.refresh  // C#\ndriver.Navigate().Refresh();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#endpoint", 
            "text": "POST /session/:session_id/refresh", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/navigation/refresh/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/", 
            "text": "Get All Cookies\n\n\nRetrieve all cookies visible to the current page (Web context only)\n\n\nExample Usage\n\n\n// Java\nSet\nCookie\n allcookies = driver.manage().getCookies();\n\n\n\n\n\n# Python\ncookies = self.driver.get_cookies()\n\n\n\n\n\n// Javascript\n// webdriver.io example\nlet cookies = driver.getCookies():\n\n// wd example\nlet cookies = await driver.allCookies();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmanage.all_cookies\n\n# ruby_lib_core example\n@driver.manage.all_cookies\n\n\n\n\n\n// C#\nIEnumerable\nCookie\n allCookies = driver.Manage().Cookies.AllCookies;\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:sessionId/cookie\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nA list of cookies (\narray\nobject\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Get All Cookies"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#get-all-cookies", 
            "text": "Retrieve all cookies visible to the current page (Web context only)", 
            "title": "Get All Cookies"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#example-usage", 
            "text": "// Java\nSet Cookie  allcookies = driver.manage().getCookies();  # Python\ncookies = self.driver.get_cookies()  // Javascript\n// webdriver.io example\nlet cookies = driver.getCookies():\n\n// wd example\nlet cookies = await driver.allCookies();  # Ruby\n# ruby_lib example\nmanage.all_cookies\n\n# ruby_lib_core example\n@driver.manage.all_cookies  // C#\nIEnumerable Cookie  allCookies = driver.Manage().Cookies.AllCookies;", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#endpoint", 
            "text": "GET /session/:sessionId/cookie", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#response", 
            "text": "A list of cookies ( array object )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/storage/get-all-cookies/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/", 
            "text": "Set Cookie\n\n\nSet a cookie (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().addCookie(new Cookie(\nfoo\n, \nbar\n));\n\n\n\n\n\n# Python\nself.driver.add_cookie({name: 'foo', value: 'bar'})\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setCookies([{\n  name: 'myCookie',\n  value: 'some content'\n}]);\n\n// wd example\nlet cookies = await driver.setCookie({name: 'foo', value: 'bar'});\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmanage.add_cookie(:name =\n 'foo', :value =\n 'bar')\n\n# ruby_lib_core example\n@driver.manage.add_cookie(:name =\n 'foo', :value =\n 'bar')\n\n\n\n\n\n// C#\ndriver.Manage().Cookies.AddCookie(new Cookie(\nfoo\n, \nbar\n));\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:sessionId/cookie\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncookie\n\n\nobject\n\n\nThe cookie to add\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Set Cookie"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#set-cookie", 
            "text": "Set a cookie (Web context only)", 
            "title": "Set Cookie"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#example-usage", 
            "text": "// Java\ndriver.manage().addCookie(new Cookie( foo ,  bar ));  # Python\nself.driver.add_cookie({name: 'foo', value: 'bar'})  // Javascript\n// webdriver.io example\ndriver.setCookies([{\n  name: 'myCookie',\n  value: 'some content'\n}]);\n\n// wd example\nlet cookies = await driver.setCookie({name: 'foo', value: 'bar'});  # Ruby\n# ruby_lib example\nmanage.add_cookie(:name =  'foo', :value =  'bar')\n\n# ruby_lib_core example\n@driver.manage.add_cookie(:name =  'foo', :value =  'bar')  // C#\ndriver.Manage().Cookies.AddCookie(new Cookie( foo ,  bar ));", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#endpoint", 
            "text": "POST /session/:sessionId/cookie", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#json-parameters", 
            "text": "name  type  description      cookie  object  The cookie to add", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/storage/set-cookie/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/", 
            "text": "Delete Cookie\n\n\nDelete the cookie with the given name (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().deleteCookieNamed(\ncookie_name\n);\n\n\n\n\n\n# Python\nself.driver.delete_cookie(\ncookie_name\n)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.deleteCookies(\ncookie_name\n);\n\n// wd example\nawait driver.deleteCookie(\ncookie_name\n);\n\n\n\n\n\n# Ruby\n# ruby_lib example\ndelete_cookie(\ncookie_name\n)\n\n# ruby_lib_core example\n@driver.delete_cookie(\ncookie_name\n)\n\n\n\n\n\n// C#\ndriver.Manage().Cookies.DeleteCookieNamed(\ncookie_name\n);\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nDELETE /session/:sessionId/cookie/:name\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\nname\n\n\nName of cookie to delete\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Delete Cookie"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#delete-cookie", 
            "text": "Delete the cookie with the given name (Web context only)", 
            "title": "Delete Cookie"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#example-usage", 
            "text": "// Java\ndriver.manage().deleteCookieNamed( cookie_name );  # Python\nself.driver.delete_cookie( cookie_name )  // Javascript\n// webdriver.io example\ndriver.deleteCookies( cookie_name );\n\n// wd example\nawait driver.deleteCookie( cookie_name );  # Ruby\n# ruby_lib example\ndelete_cookie( cookie_name )\n\n# ruby_lib_core example\n@driver.delete_cookie( cookie_name )  // C#\ndriver.Manage().Cookies.DeleteCookieNamed( cookie_name );", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#endpoint", 
            "text": "DELETE /session/:sessionId/cookie/:name", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to    name  Name of cookie to delete", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/storage/delete-cookie/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/", 
            "text": "Delete All Cookies\n\n\nDelete all cookies visible to current page (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.manage().deleteAllCookies();\n\n\n\n\n\n# Python\nself.driver.delete_all_cookies()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.deleteCookies();\n\n// wd example\nawait driver.deleteAllCookies();\n\n\n\n\n\n# Ruby\n# ruby_lib example\nmanage.delete_all_cookies\n\n# ruby_lib_core example\n@driver.manage.delete_all_cookies\n\n\n\n\n\n// C#\ndriver.Manage().Cookies.DeleteAllCookies();\n\n\n\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nDELETE /session/:sessionId/cookie\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Delete All Cookies"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#delete-all-cookies", 
            "text": "Delete all cookies visible to current page (Web context only)", 
            "title": "Delete All Cookies"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#example-usage", 
            "text": "// Java\ndriver.manage().deleteAllCookies();  # Python\nself.driver.delete_all_cookies()  // Javascript\n// webdriver.io example\ndriver.deleteCookies();\n\n// wd example\nawait driver.deleteAllCookies();  # Ruby\n# ruby_lib example\nmanage.delete_all_cookies\n\n# ruby_lib_core example\n@driver.manage.delete_all_cookies  // C#\ndriver.Manage().Cookies.DeleteAllCookies();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#endpoint", 
            "text": "DELETE /session/:sessionId/cookie", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/storage/delete-all-cookies/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/frame/switch/", 
            "text": "Switch to Frame\n\n\nChange focus to another frame on the page (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.switchTo().frame(3);\n\n\n\n\n\n# Python\nself.driver.switch_to.frame(3)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.switchToFrame(3);\n\n// wd example\nawait driver.frame(3);\n\n\n\n\n\n# Ruby\n# ruby_lib example\nswitch_to.frame(3)\n\n# ruby_lib_core example\n@driver.switch_to.frame(3)\n\n\n\n\n\n// C#\ndriver.SwitchTo().Frame(3);\n\n\n\n\n\nDescription\n\n\nIf the frame id is null, the server should switch to the page's default content\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/frame\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring|number|null|WebElement JSON Object\n\n\nIdentifier for the frame to change focus to.\n\n\n\n\n\n\n\n\nResponse\n\n\nnull\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Switch to Frame"
        }, 
        {
            "location": "/commands/web/frame/switch/#switch-to-frame", 
            "text": "Change focus to another frame on the page (Web context only)", 
            "title": "Switch to Frame"
        }, 
        {
            "location": "/commands/web/frame/switch/#example-usage", 
            "text": "// Java\ndriver.switchTo().frame(3);  # Python\nself.driver.switch_to.frame(3)  // Javascript\n// webdriver.io example\ndriver.switchToFrame(3);\n\n// wd example\nawait driver.frame(3);  # Ruby\n# ruby_lib example\nswitch_to.frame(3)\n\n# ruby_lib_core example\n@driver.switch_to.frame(3)  // C#\ndriver.SwitchTo().Frame(3);", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/frame/switch/#description", 
            "text": "If the frame id is null, the server should switch to the page's default content", 
            "title": "Description"
        }, 
        {
            "location": "/commands/web/frame/switch/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/frame/switch/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/frame/switch/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/frame/switch/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/frame/switch/#endpoint", 
            "text": "POST /session/:session_id/frame", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/frame/switch/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/frame/switch/#json-parameters", 
            "text": "name  type  description      id  string|number|null|WebElement JSON Object  Identifier for the frame to change focus to.", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/frame/switch/#response", 
            "text": "null", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/frame/switch/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/frame/parent/", 
            "text": "Switch to Parent Frame\n\n\nChange focus to the parent context (Web context only)\n\n\nExample Usage\n\n\n// Java\ndriver.switchTo().parentFrame();\n\n\n\n\n\n# Python\nself.driver.switch_to.parent()\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.switchToParentFrame();\n\n// Not supported\n\n\n\n\n# Ruby\n# ruby_lib example\nparent_frame\n\n# ruby_lib_core example\n@driver.parent_frame\n\n\n\n\n\n// C#\ndriver.SwitchTo().ParentFrame();\n\n\n\n\n\nDescription\n\n\nIf the current context is the top level browsing context, the context remains unchanged\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nGET /session/:session_id/url\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\nNone\n\n\nResponse\n\n\nThe current URL (\nstring\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Switch to Parent Frame"
        }, 
        {
            "location": "/commands/web/frame/parent/#switch-to-parent-frame", 
            "text": "Change focus to the parent context (Web context only)", 
            "title": "Switch to Parent Frame"
        }, 
        {
            "location": "/commands/web/frame/parent/#example-usage", 
            "text": "// Java\ndriver.switchTo().parentFrame();  # Python\nself.driver.switch_to.parent()  // Javascript\n// webdriver.io example\ndriver.switchToParentFrame();\n\n// Not supported  # Ruby\n# ruby_lib example\nparent_frame\n\n# ruby_lib_core example\n@driver.parent_frame  // C#\ndriver.SwitchTo().ParentFrame();", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/frame/parent/#description", 
            "text": "If the current context is the top level browsing context, the context remains unchanged", 
            "title": "Description"
        }, 
        {
            "location": "/commands/web/frame/parent/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/frame/parent/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/frame/parent/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All     Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/frame/parent/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/frame/parent/#endpoint", 
            "text": "GET /session/:session_id/url", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/frame/parent/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/frame/parent/#json-parameters", 
            "text": "None", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/frame/parent/#response", 
            "text": "The current URL ( string )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/frame/parent/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/execute-async/", 
            "text": "Execute Async Script\n\n\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context only)\n\n\nExample Usage\n\n\n// Java\n((JavascriptExecutor) driver).executeAsyncScript(\nwindow.setTimeout(arguments[arguments.length - 1], 500);\n);\n\n\n\n\n\n# Python\nself.driver.execute_async_script(\u2018document.title\u2019)\n\n\n\n\n\n// Javascript\n// webdriver.io example\ndriver.setAsyncTimeout(5000)\nvar result = browser.executeAsync(function(a, b, c, d, done) {\n    // browser context - you may access neither client nor console\n    setTimeout(function() {\n        done(a + b + c + d);\n    }, 3000);\n}, 1, 2, 3, 4)\n\n// node.js context - client and console are available\nconsole.log(result); // outputs: 10\n\n// wd example\nawait driver.safeExecuteAsync('document.title');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nexecute_async_script(\ndocument.title\n)\n\n# ruby_lib_core example\n@driver.execute_async_script(\ndocument.title\n)\n\n\n\n\n\n// C#\n// TODO C# sample\n\n\n\n\n\nDescription\n\n\nThe executed script is assumed to be asynchronous and must signal that is done by invoking the provided callback, which is always provided as the final argument to the function. The value to this callback will be returned to the client.\n\n\nAsynchronous script commands may not span page loads. If an unload event is fired while waiting for a script result, an error should be returned to the client.\n\n\nThe script argument defines the script to execute in the form of a function body. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified. The final argument will always be a callback function that must be invoked to signal that the script has finished.\n\n\nArguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nNone\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nNone\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nNone\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nNone\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nNone\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/execute_async\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nscript\n\n\nstring\n\n\nThe script to execute\n\n\n\n\n\n\nargs\n\n\narray\n\n\nThe script arguments\n\n\n\n\n\n\n\n\nResponse\n\n\nThe script result (\nany\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Execute Async"
        }, 
        {
            "location": "/commands/web/execute-async/#execute-async-script", 
            "text": "Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context only)", 
            "title": "Execute Async Script"
        }, 
        {
            "location": "/commands/web/execute-async/#example-usage", 
            "text": "// Java\n((JavascriptExecutor) driver).executeAsyncScript( window.setTimeout(arguments[arguments.length - 1], 500); );  # Python\nself.driver.execute_async_script(\u2018document.title\u2019)  // Javascript\n// webdriver.io example\ndriver.setAsyncTimeout(5000)\nvar result = browser.executeAsync(function(a, b, c, d, done) {\n    // browser context - you may access neither client nor console\n    setTimeout(function() {\n        done(a + b + c + d);\n    }, 3000);\n}, 1, 2, 3, 4)\n\n// node.js context - client and console are available\nconsole.log(result); // outputs: 10\n\n// wd example\nawait driver.safeExecuteAsync('document.title');  # Ruby\n# ruby_lib example\nexecute_async_script( document.title )\n\n# ruby_lib_core example\n@driver.execute_async_script( document.title )  // C#\n// TODO C# sample", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/execute-async/#description", 
            "text": "The executed script is assumed to be asynchronous and must signal that is done by invoking the provided callback, which is always provided as the final argument to the function. The value to this callback will be returned to the client.  Asynchronous script commands may not span page loads. If an unload event is fired while waiting for a script result, an error should be returned to the client.  The script argument defines the script to execute in the form of a function body. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified. The final argument will always be a callback function that must be invoked to signal that the script has finished.  Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects.", 
            "title": "Description"
        }, 
        {
            "location": "/commands/web/execute-async/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/execute-async/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/execute-async/#appium-clients", 
            "text": "Language  Support  Documentation      Java  None  seleniumhq.github.io    Python  None  selenium-python.readthedocs.io    Javascript (WebdriverIO)  None     Javascript (WD)  None  github.com    Ruby  None  www.rubydoc.info    C#  None  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/execute-async/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/execute-async/#endpoint", 
            "text": "POST /session/:session_id/execute_async", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/execute-async/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/execute-async/#json-parameters", 
            "text": "name  type  description      script  string  The script to execute    args  array  The script arguments", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/execute-async/#response", 
            "text": "The script result ( any )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/execute-async/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/commands/web/execute/", 
            "text": "Execute Script\n\n\nInject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context). Run a native \nmobile command\n (Native Context).\n\n\nExample Usage\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nwindow.setTimeout(arguments[arguments.length - 1], 500);\n);\n\n\n\n\n\n# Python\nself.driver.execute_script(\u2018document.title\u2019)\n\n\n\n\n\n// Javascript\n// webdriver.io example\nvar result = browser.execute(function(a, b, c, d) {\n  // browser context - you may not access client or console\n  return a + b + c + d;\n}, 1, 2, 3, 4)\n\n// node.js context - client and console are available\nconsole.log(result); // outputs: 10\n\n// wd example\nawait driver.execute('document.title');\n\n\n\n\n\n# Ruby\n# ruby_lib example\nexecute_script(\ndocument.title\n)\n\n# ruby_lib_core example\n@driver.execute_script(\ndocument.title\n)\n\n\n\n\n\n// C#\n// TODO C# sample\n\n\n\n\n\nDescription\n\n\nThe executed script is assumed to be synchronous and the result of evaluating the script is returned to the client.\n\n\nThe script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified.\n\n\nArguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects.\n\n\nFor \nexecute\n in the native context, see \nMobile Commands\n.\n\n\nSupport\n\n\nAppium Server\n\n\n\n\n\n\n\n\nPlatform\n\n\nDriver\n\n\nPlatform Versions\n\n\nAppium Version\n\n\nDriver Version\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nXCUITest\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUIAutomation\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nAndroid\n\n\nUiAutomator2\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nEspresso\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nUiAutomator\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nMac\n\n\nMac\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\nWindows\n\n\nWindows\n\n\nNone\n\n\nNone\n\n\nNone\n\n\n\n\n\n\n\n\nAppium Clients\n\n\n\n\n\n\n\n\nLanguage\n\n\nSupport\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nJava\n\n\nAll\n\n\nseleniumhq.github.io\n\n\n\n\n\n\nPython\n\n\nAll\n\n\nselenium-python.readthedocs.io\n\n\n\n\n\n\nJavascript (WebdriverIO)\n\n\nAll\n\n\n\n\n\n\n\n\nJavascript (WD)\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\nRuby\n\n\nAll\n\n\nwww.rubydoc.info\n\n\n\n\n\n\nC#\n\n\nAll\n\n\ngithub.com\n\n\n\n\n\n\n\n\nHTTP API Specifications\n\n\nEndpoint\n\n\nPOST /session/:session_id/execute\n\n\nURL Parameters\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsession_id\n\n\nID of the session to route the command to\n\n\n\n\n\n\n\n\nJSON Parameters\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nscript\n\n\nstring\n\n\nThe script to execute\n\n\n\n\n\n\nargs\n\n\narray\n\n\nThe script arguments\n\n\n\n\n\n\n\n\nResponse\n\n\nThe script result (\nany\n)\n\n\nSee Also\n\n\n\n\nW3C Specification\n\n\nJSONWP Specification", 
            "title": "Execute"
        }, 
        {
            "location": "/commands/web/execute/#execute-script", 
            "text": "Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context). Run a native  mobile command  (Native Context).", 
            "title": "Execute Script"
        }, 
        {
            "location": "/commands/web/execute/#example-usage", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( window.setTimeout(arguments[arguments.length - 1], 500); );  # Python\nself.driver.execute_script(\u2018document.title\u2019)  // Javascript\n// webdriver.io example\nvar result = browser.execute(function(a, b, c, d) {\n  // browser context - you may not access client or console\n  return a + b + c + d;\n}, 1, 2, 3, 4)\n\n// node.js context - client and console are available\nconsole.log(result); // outputs: 10\n\n// wd example\nawait driver.execute('document.title');  # Ruby\n# ruby_lib example\nexecute_script( document.title )\n\n# ruby_lib_core example\n@driver.execute_script( document.title )  // C#\n// TODO C# sample", 
            "title": "Example Usage"
        }, 
        {
            "location": "/commands/web/execute/#description", 
            "text": "The executed script is assumed to be synchronous and the result of evaluating the script is returned to the client.  The script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client. The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified.  Arguments may be any JSON-primitive, array, or JSON object. JSON objects that define a WebElement reference will be converted to the corresponding DOM element. Likewise, any WebElements in the script result will be returned to the client as WebElement JSON objects.  For  execute  in the native context, see  Mobile Commands .", 
            "title": "Description"
        }, 
        {
            "location": "/commands/web/execute/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/commands/web/execute/#appium-server", 
            "text": "Platform  Driver  Platform Versions  Appium Version  Driver Version      iOS  XCUITest  None  None  None     UIAutomation  None  None  None    Android  UiAutomator2  None  None  None     Espresso  None  None  None     UiAutomator  None  None  None    Mac  Mac  None  None  None    Windows  Windows  None  None  None", 
            "title": "Appium Server"
        }, 
        {
            "location": "/commands/web/execute/#appium-clients", 
            "text": "Language  Support  Documentation      Java  All  seleniumhq.github.io    Python  All  selenium-python.readthedocs.io    Javascript (WebdriverIO)  All     Javascript (WD)  All  github.com    Ruby  All  www.rubydoc.info    C#  All  github.com", 
            "title": "Appium Clients"
        }, 
        {
            "location": "/commands/web/execute/#http-api-specifications", 
            "text": "", 
            "title": "HTTP API Specifications"
        }, 
        {
            "location": "/commands/web/execute/#endpoint", 
            "text": "POST /session/:session_id/execute", 
            "title": "Endpoint"
        }, 
        {
            "location": "/commands/web/execute/#url-parameters", 
            "text": "name  description      session_id  ID of the session to route the command to", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/commands/web/execute/#json-parameters", 
            "text": "name  type  description      script  string  The script to execute    args  array  The script arguments", 
            "title": "JSON Parameters"
        }, 
        {
            "location": "/commands/web/execute/#response", 
            "text": "The script result ( any )", 
            "title": "Response"
        }, 
        {
            "location": "/commands/web/execute/#see-also", 
            "text": "W3C Specification  JSONWP Specification", 
            "title": "See Also"
        }, 
        {
            "location": "/writing-running-appium/running-tests/", 
            "text": "Running Tests\n\n\nPreparing your app for test (iOS)\n\n\nTest apps run on the simulator have to be compiled specifically for the\nsimulator, for example by executing the following command in the Xcode project (you can use \nxcodebuild -showsdks\n to see the list of available SDKs):\n\n\n xcodebuild -sdk iphonesimulator6.0\n\n\n\nThis creates a \nbuild/Release-iphonesimulator\n directory in your Xcode project\nthat contains the \n.app\n package that you'll need to communicate with the\nAppium server.\n\n\nIf you want, you can zip up the .app directory into a .zip file! Appium will\nunpack it for you. Nice if you're not using Appium locally.\n\n\nPreparing your app for test (Android)\n\n\nNothing in particular needs to be done to run your .apk using Appium. If you\nwant to zip it up, you can.\n\n\nPreparing your app for test (Windows)\n\n\nNothing in particular needs to be done to run your test.\n\n\nRunning your test app with Appium (iOS)\n\n\nThe best way to see what to do currently is to look at the example tests:\n\n\nNode.js\n | \nPython\n | \nRuby\n | \nJava\n\n\nBasically, first make sure Appium is running:\n\n\nnode .\n\n\n\nThen script your WebDriver test, sending in the following desired capabilities:\n\n\n// javascript\n{\n    platformName: 'iOS',\n    platformVersion: '7.1',\n    deviceName: 'iPhone Simulator',\n    app: myApp\n}\n\n\n\n\n# python\n{\n    'platformName': 'iOS',\n    'platformVersion': '7.1',\n    'deviceName': 'iPhone Simulator',\n    'app': myApp\n}\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \niOS\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n7.1\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \niPhone Simulator\n);\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);\n\n\n\n\nIn this set of capabilities, \nmyApp\n must be either:\n\n\n\n\nA local absolute path to your simulator-compiled .app directory or .zip\n\n\nA url of a zip file containing your .app package\n\n\nA path to one of the sample app relative to the appium install root\n\n\n\n\nUsing your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!\n\n\nRunning your test app with Appium (Android)\n\n\nFirst, make sure you have one and only one Android emulator or device\nconnected. If you run \nadb devices\n, for example, you should see one device\nconnected. This is the device Appium will use for tests. Of course, to have\na device connected, you'll need to have made an Android AVD. If the Android SDK\ntools are on your path, you can simply run:\n\n\nemulator -avd \nMyAvdName\n\n\n\n\nAnd wait for the android emulator to finish launching. Sometimes, for various\nreasons, \nadb\n gets stuck. If it's not showing any connected devices or\notherwise failing, you can restart it by running:\n\n\nadb kill-server \n adb devices\n\n\n\nNow, make sure Appium is running:\n\n\nnode .\n\n\n\nThere are several ways to start an Appium application (it works exactly\nthe same as when the application is started via adb):\n\n\n\n\napk or zip only, the default activity will be launched ('app' capability)\n\n\napk + activity ('app' + 'appActivity' capabilities)\n\n\napk + activity + intent ('app' + 'appActivity' + 'appIntent' capabilities)\n\n\n...\n\n\n\n\nActivities may be specified in the following way:\n\n\n\n\nabsolute (e.g. appActivity: 'com.helloworld.SayHello').\n\n\nrelative to appPackage (e.g. appPackage: 'com.helloworld', appActivity='.SayHello')\n\n\n\n\nIf the 'appWaitPackage' and 'appWaitActivity' caps are specified, Appium\nautomatically spins until those activities are launched. You may specify\nmultiple wait activities for instance:\n\n\n\n\nappActivity: 'com.splash.SplashScreen'\n\n\nappPackage: 'com.splash' appActivity: '.SplashScreen'\n\n\nappPackage: 'com.splash' appActivity: '.SplashScreen,.LandingPage,com.why.GoThere'\n\n\n\n\nIf you are not sure what activity are configured in your apk, you can\nproceed in one of the following ways:\n\n\n\n\nMac/Linux: 'adb shell dumpsys window windows | grep mFocusedApp'\n\n\nIn the Ruby console: 'adb shell dumpsys window windows`.each_line.grep(/mFocusedApp/).first.strip'\n\n\nIn Windows terminal run 'adb shell dumpsys window windows' and manually look for the mFocusedApp line.\n\n\n\n\nThen script your WebDriver test, sending in the following desired capabilities:\n\n\n// javascript\n{\n    platformName: 'Android',\n    platformVersion: '4.4',\n    deviceName: 'Android Emulator',\n    app: myApp\n}\n\n\n\n\n# python\n{\n    'platformName': 'Android',\n    'platformVersion': '4.4',\n    'deviceName': 'Android Emulator',\n    'app': myApp\n}\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \nAndroid\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n4.4\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \nAndroid Emulator\n);\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);\n\n\n\n\nIn this set of capabilities, \nmyApp\n must be either:\n\n\n\n\nA local absolute path to your .apk or a .zip of it\n\n\nA url of a zip file containing your .apk\n\n\nA path to one of the sample app relative to the appium install root\n\n\n\n\nUsing your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!\n\n\nRunning your test app with Appium (Windows)\n\n\nSimply ensure that Appium is listening, and run your test with your test runner of choice.\n\n\nSee our \nsamples\n for details.", 
            "title": "Running Tests"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#running-tests", 
            "text": "", 
            "title": "Running Tests"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#preparing-your-app-for-test-ios", 
            "text": "Test apps run on the simulator have to be compiled specifically for the\nsimulator, for example by executing the following command in the Xcode project (you can use  xcodebuild -showsdks  to see the list of available SDKs):   xcodebuild -sdk iphonesimulator6.0  This creates a  build/Release-iphonesimulator  directory in your Xcode project\nthat contains the  .app  package that you'll need to communicate with the\nAppium server.  If you want, you can zip up the .app directory into a .zip file! Appium will\nunpack it for you. Nice if you're not using Appium locally.", 
            "title": "Preparing your app for test (iOS)"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#preparing-your-app-for-test-android", 
            "text": "Nothing in particular needs to be done to run your .apk using Appium. If you\nwant to zip it up, you can.", 
            "title": "Preparing your app for test (Android)"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#preparing-your-app-for-test-windows", 
            "text": "Nothing in particular needs to be done to run your test.", 
            "title": "Preparing your app for test (Windows)"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#running-your-test-app-with-appium-ios", 
            "text": "The best way to see what to do currently is to look at the example tests:  Node.js  |  Python  |  Ruby  |  Java  Basically, first make sure Appium is running:  node .  Then script your WebDriver test, sending in the following desired capabilities:  // javascript\n{\n    platformName: 'iOS',\n    platformVersion: '7.1',\n    deviceName: 'iPhone Simulator',\n    app: myApp\n}  # python\n{\n    'platformName': 'iOS',\n    'platformVersion': '7.1',\n    'deviceName': 'iPhone Simulator',\n    'app': myApp\n}  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  iOS );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  7.1 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  iPhone Simulator );\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);  In this set of capabilities,  myApp  must be either:   A local absolute path to your simulator-compiled .app directory or .zip  A url of a zip file containing your .app package  A path to one of the sample app relative to the appium install root   Using your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!", 
            "title": "Running your test app with Appium (iOS)"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#running-your-test-app-with-appium-android", 
            "text": "First, make sure you have one and only one Android emulator or device\nconnected. If you run  adb devices , for example, you should see one device\nconnected. This is the device Appium will use for tests. Of course, to have\na device connected, you'll need to have made an Android AVD. If the Android SDK\ntools are on your path, you can simply run:  emulator -avd  MyAvdName   And wait for the android emulator to finish launching. Sometimes, for various\nreasons,  adb  gets stuck. If it's not showing any connected devices or\notherwise failing, you can restart it by running:  adb kill-server   adb devices  Now, make sure Appium is running:  node .  There are several ways to start an Appium application (it works exactly\nthe same as when the application is started via adb):   apk or zip only, the default activity will be launched ('app' capability)  apk + activity ('app' + 'appActivity' capabilities)  apk + activity + intent ('app' + 'appActivity' + 'appIntent' capabilities)  ...   Activities may be specified in the following way:   absolute (e.g. appActivity: 'com.helloworld.SayHello').  relative to appPackage (e.g. appPackage: 'com.helloworld', appActivity='.SayHello')   If the 'appWaitPackage' and 'appWaitActivity' caps are specified, Appium\nautomatically spins until those activities are launched. You may specify\nmultiple wait activities for instance:   appActivity: 'com.splash.SplashScreen'  appPackage: 'com.splash' appActivity: '.SplashScreen'  appPackage: 'com.splash' appActivity: '.SplashScreen,.LandingPage,com.why.GoThere'   If you are not sure what activity are configured in your apk, you can\nproceed in one of the following ways:   Mac/Linux: 'adb shell dumpsys window windows | grep mFocusedApp'  In the Ruby console: 'adb shell dumpsys window windows`.each_line.grep(/mFocusedApp/).first.strip'  In Windows terminal run 'adb shell dumpsys window windows' and manually look for the mFocusedApp line.   Then script your WebDriver test, sending in the following desired capabilities:  // javascript\n{\n    platformName: 'Android',\n    platformVersion: '4.4',\n    deviceName: 'Android Emulator',\n    app: myApp\n}  # python\n{\n    'platformName': 'Android',\n    'platformVersion': '4.4',\n    'deviceName': 'Android Emulator',\n    'app': myApp\n}  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  Android );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  4.4 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  Android Emulator );\ncapabilities.setCapability(MobileCapabilityType.APP, myApp);  In this set of capabilities,  myApp  must be either:   A local absolute path to your .apk or a .zip of it  A url of a zip file containing your .apk  A path to one of the sample app relative to the appium install root   Using your WebDriver library of choice, set the remote session to use these\ncapabilities and connect to the server running at port 4723 of localhost (or\nwhatever host and port you specified when you started Appium). You should be\nall set now!", 
            "title": "Running your test app with Appium (Android)"
        }, 
        {
            "location": "/writing-running-appium/running-tests/#running-your-test-app-with-appium-windows", 
            "text": "Simply ensure that Appium is listening, and run your test with your test runner of choice.  See our  samples  for details.", 
            "title": "Running your test app with Appium (Windows)"
        }, 
        {
            "location": "/writing-running-appium/caps/", 
            "text": "Appium Desired Capabilities\n\n\nDesired Capabilities are keys and values encoded in a JSON object, sent by\nAppium clients to the server when a new automation session is requested. They\ntell the Appium drivers all kinds of important things about how you want your\ntest to work. Each Appium client builds capabilities in a way specific to the\nclient's language, but at the end of the day, they are sent over to Appium as\nJSON objects.\n\n\nDesired Capabilities can be scripted in the WebDriver test or set within the\nAppium Server GUI (via an Inspector Session)\n\n\nSome important capabilities are demonstrated in the following example:\n\n\n{\n    \nplatformName\n: \niOS\n,\n    \nplatformVersion\n: \n11.0\n,\n    \ndeviceName\n: \niPhone 7\n,\n    \nautomationName\n: \nXCUITest\n,\n    \napp\n: \n/path/to/my.app\n\n}\n\n\n\n\nThis set of Desired Capabilities expresses the desire for Appium to begin an\nautomation session on an iPhone 7 simulator with iOS 11, using the \nXCUITest\nDriver\n, with \n/path/to/my.app\n as the app\nunder test.\n\n\nThere are many, many Capabilities that Appium supports. Capabilities also\ndiffer by driver, though there are a standard set that most drivers pay\nattention to. What follows are a series of tables outlining the various Desired\nCapabilities available in general and for specific drivers.\n\n\nGeneral Capabilities\n\n\nThese Capabilities span multiple drivers.\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nautomationName\n\n\nWhich automation engine to use\n\n\nAppium\n (default), or \nUiAutomator2\n, \nEspresso\n, or \nUiAutomator1\n for Android, or \nXCUITest\n or \nInstruments\n for iOS, or \nYouiEngine\n for application built with You.i Engine\n\n\n\n\n\n\nplatformName\n\n\nWhich mobile OS platform to use\n\n\niOS\n, \nAndroid\n, or \nFirefoxOS\n\n\n\n\n\n\nplatformVersion\n\n\nMobile OS version\n\n\ne.g., \n7.1\n, \n4.4\n\n\n\n\n\n\ndeviceName\n\n\nThe kind of mobile device or emulator to use\n\n\niPhone Simulator\n, \niPad Simulator\n, \niPhone Retina 4-inch\n, \nAndroid Emulator\n, \nGalaxy S4\n, etc.... On iOS, this should be one of the valid devices returned by instruments with \ninstruments -s devices\n or xctrace with \nxcrun xctrace list devices\n (since Xcode 12). On Android this capability is currently ignored, though it remains required.\n\n\n\n\n\n\napp\n\n\nThe absolute local path \nor\n remote http URL to a \n.ipa\n file (IOS), \n.app\n folder (IOS Simulator), \n.apk\n file (Android) or \n.apks\n file (Android App Bundle), or a \n.zip\n file containing one of these. Appium will attempt to install this app binary on the appropriate device first. Note that this capability is not required for Android if you specify \nappPackage\n and \nappActivity\n capabilities (see below). \nUiAutomator2\n and \nXCUITest\n allow to start the session without \napp\n or \nappPackage\n. Incompatible with \nbrowserName\n. See \nhere\n about \n.apks\n file.\n\n\n/abs/path/to/my.apk\n or \nhttp://myapp.com/app.ipa\n\n\n\n\n\n\notherApps\n\n\nApp or list of apps (as a JSON array) to install prior to running tests. Note that it will not work with \nautomationName\n of \nEspresso\n and iOS real devices\n\n\ne.g., \n\"/path/to/app.apk\"\n, \nhttps://www.example.com/url/to/app.apk\n, \n[\"http://appium.github.io/appium/assets/TestApp9.4.app.zip\", \"/path/to/app-b.app\"]\n\n\n\n\n\n\nbrowserName\n\n\nName of mobile web browser to automate. Should be an empty string if automating an app instead.\n\n\n'Safari' for iOS and 'Chrome', 'Chromium', or 'Browser' for Android\n\n\n\n\n\n\nnewCommandTimeout\n\n\nHow long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session\n\n\ne.g. \n60\n\n\n\n\n\n\nlanguage\n\n\nLanguage to set for iOS (XCUITest driver only) and Android.\n\n\ne.g. \nfr\n\n\n\n\n\n\nlocale\n\n\nLocale to set for iOS (XCUITest driver only) and Android. \nfr_CA\n format for iOS. \nCA\n format (country name abbreviation) for Android\n\n\ne.g. \nfr_CA\n, \nCA\n\n\n\n\n\n\nudid\n\n\nUnique device identifier of the connected physical device\n\n\ne.g. \n1ae203187fc012g\n\n\n\n\n\n\norientation\n\n\n(Sim/Emu-only) start in a certain orientation\n\n\nLANDSCAPE\n or \nPORTRAIT\n\n\n\n\n\n\nautoWebview\n\n\nMove directly into Webview context. Default \nfalse\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nnoReset\n\n\nDon't reset app state before this session. See \nhere\n for more details\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nfullReset\n\n\nPerform a complete reset. See \nhere\n for more details\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\neventTimings\n\n\nEnable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to \nfalse\n. To enable, use \ntrue\n. The timings are then reported as \nevents\n property on response to querying the current session. See the \nevent timing docs\n for the the structure of this response.\n\n\ne.g., \ntrue\n\n\n\n\n\n\nenablePerformanceLogging\n\n\n(Web and webview only) Enable Chromedriver's (on Android) or Safari's (on iOS) performance logging (default \nfalse\n)\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nprintPageSourceOnFindFailure\n\n\nWhen a find operation fails, print the current page source. Defaults to \nfalse\n.\n\n\ne.g., \ntrue\n\n\n\n\n\n\nclearSystemFiles\n\n\nDelete any generated files at the end of a session. Default to \nfalse\n.\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\n\n\nUpdate settings\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nsettings[settingsKey]\n\n\nUpdate \nAppium Settings\n on session creation.\n\n\ne.g., \n'settings[mjpegScalingFactor]': 10\n, \n'settings[shouldUseCompactResponses]': true\n\n\n\n\n\n\n\n\nAndroid\n\n\nUIAutomator1\n\n\nThese Capabilities are available for UiAutomator1 driver. The driver is for Android 5 and lower.\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nappActivity\n\n\nActivity name for the Android activity you want to launch from your package. This often needs to be preceded by a \n.\n (e.g., \n.MainActivity\n instead of \nMainActivity\n). By default this capability is received from the package manifest (action: android.intent.action.MAIN , category: android.intent.category.LAUNCHER)\n\n\nMainActivity\n, \n.Settings\n\n\n\n\n\n\nappPackage\n\n\nJava package of the Android app you want to run. By default this capability is received from the package manifest (@package attribute value)\n\n\ncom.example.android.myApp\n, \ncom.android.settings\n\n\n\n\n\n\nappWaitActivity\n\n\nActivity name/names, comma separated, for the Android activity you want to wait for. By default the value of this capability is the same as for \nappActivity\n. You must set it to the very first focused application activity name in case it is different from the one which is set as \nappActivity\n if your capability has \nappActivity\n and \nappPackage\n. You can also use wildcards (\n*\n).\n\n\nSplashActivity\n, \nSplashActivity,OtherActivity\n, \n*\n, \n*.SplashActivity\n\n\n\n\n\n\nappWaitPackage\n\n\nJava package of the Android app you want to wait for. By default the value of this capability is the same as for \nappActivity\n\n\ncom.example.android.myApp\n, \ncom.android.settings\n\n\n\n\n\n\nappWaitDuration\n\n\nTimeout in milliseconds used to wait for the appWaitActivity to launch (default \n20000\n)\n\n\n30000\n\n\n\n\n\n\ndeviceReadyTimeout\n\n\nTimeout in seconds while waiting for device to become ready\n\n\n5\n\n\n\n\n\n\nallowTestPackages\n\n\nAllow to install a test package which has \nandroid:testOnly=\"true\"\n in the manifest. \nfalse\n by default\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nandroidCoverage\n\n\nFully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w\n\n\ncom.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation\n\n\n\n\n\n\nandroidCoverageEndIntent\n\n\nA broadcast action implemented by yourself which is used to dump coverage into file system. Passed to -a in adb shell am broadcast -a\n\n\ncom.example.pkg.END_EMMA\n\n\n\n\n\n\nandroidDeviceReadyTimeout\n\n\nTimeout in seconds used to wait for a device to become ready after booting\n\n\ne.g., \n30\n\n\n\n\n\n\nandroidInstallTimeout\n\n\nTimeout in milliseconds used to wait for an apk to install to the device. Defaults to \n90000\n\n\ne.g., \n90000\n\n\n\n\n\n\nandroidInstallPath\n\n\nThe name of the directory on the device in which the apk will be push before install. Defaults to \n/data/local/tmp\n\n\ne.g. \n/sdcard/Downloads/\n\n\n\n\n\n\nadbPort\n\n\nPort used to connect to the ADB server (default \n5037\n)\n\n\n5037\n\n\n\n\n\n\nsystemPort\n\n\nsystemPort\n used to connect to \nappium-uiautomator2-server\n or \nappium-espresso-driver\n. The default is \n8200\n in general and selects one port from \n8200\n to \n8299\n for \nappium-uiautomator2-server\n, it is \n8300\n from \n8300\n to \n8399\n for \nappium-espresso-driver\n. When you run tests in parallel, you must adjust the port to avoid conflicts. Read \nParallel Testing Setup Guide\n for more details.\n\n\ne.g., \n8201\n\n\n\n\n\n\nremoteAdbHost\n\n\nOptional remote ADB server host\n\n\ne.g.: 192.168.0.101\n\n\n\n\n\n\nandroidDeviceSocket\n\n\nDevtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client.\n\n\ne.g., \nchrome_devtools_remote\n\n\n\n\n\n\navd\n\n\nName of avd to launch\n\n\ne.g., \napi19\n\n\n\n\n\n\navdLaunchTimeout\n\n\nHow long to wait in milliseconds for an avd to launch and connect to ADB (default \n60000\n)\n\n\n300000\n\n\n\n\n\n\navdReadyTimeout\n\n\nHow long to wait in milliseconds for an avd to finish its boot animations (default \n120000\n)\n\n\n300000\n\n\n\n\n\n\navdArgs\n\n\nAdditional emulator arguments used when launching an avd\n\n\ne.g., \n-netfast\n\n\n\n\n\n\nuseKeystore\n\n\nUse a custom keystore to sign apks, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nkeystorePath\n\n\nPath to custom keystore, default ~/.android/debug.keystore\n\n\ne.g., \n/path/to.keystore\n\n\n\n\n\n\nkeystorePassword\n\n\nPassword for custom keystore\n\n\ne.g., \nfoo\n\n\n\n\n\n\nkeyAlias\n\n\nAlias for key\n\n\ne.g., \nandroiddebugkey\n\n\n\n\n\n\nkeyPassword\n\n\nPassword for key\n\n\ne.g., \nfoo\n\n\n\n\n\n\nchromedriverExecutable\n\n\nThe absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium)\n\n\n/abs/path/to/webdriver\n\n\n\n\n\n\nchromedriverArgs\n\n\nAn array of arguments to be passed to the chromedriver binary when it's run by Appium. By default no CLI args are added beyond what Appium uses internally (such as \n--url-base\n, \n--port\n, \n--adb-port\n, and \n--log-path\n.\n\n\ne.g., \n[\"--disable-gpu\", \"--disable-web-security\"]\n\n\n\n\n\n\nchromedriverExecutableDir\n\n\nThe absolute path to a directory to look for Chromedriver executables in, for automatic discovery of compatible Chromedrivers. Ignored if \nchromedriverUseSystemExecutable\n is \ntrue\n\n\n/abs/path/to/chromedriver/directory\n\n\n\n\n\n\nchromedriverChromeMappingFile\n\n\nThe absolute path to a file which maps Chromedriver versions to the minimum Chrome that it supports. Ignored if \nchromedriverUseSystemExecutable\n is \ntrue\n\n\n/abs/path/to/mapping.json\n\n\n\n\n\n\nchromedriverUseSystemExecutable\n\n\nIf \ntrue\n, bypasses automatic Chromedriver configuration and uses the version that comes downloaded with Appium. Ignored if \nchromedriverExecutable\n is set. Defaults to \nfalse\n\n\ne.g., \ntrue\n\n\n\n\n\n\nautoWebviewTimeout\n\n\nAmount of time to wait for Webview context to become active, in ms. Defaults to \n2000\n\n\ne.g. \n4\n\n\n\n\n\n\nchromedriverPort\n\n\nNumeric port to start Chromedriver on. Note that use of this capability is discouraged as it will cause undefined behavior in case there are multiple webviews present. By default Appium will find a free port.\n\n\ne.g. \n8000\n\n\n\n\n\n\nchromedriverPorts\n\n\nA list of valid ports for Appium to use for communication with Chromedrivers. This capability supports multiple webview scenarios. The form of this capability is an array of numeric ports, where array items can themselves be arrays of length 2, where the first element is the start of an inclusive range and the second is the end. By default, Appium will use any free port.\n\n\ne.g. \n[8000, [9000, 9005]]\n\n\n\n\n\n\nensureWebviewsHavePages\n\n\nWhether or not Appium should augment its webview detection with page detection, guaranteeing that any webview contexts which show up in the context list have active pages. This can prevent an error if a context is selected where Chromedriver cannot find any pages. Defaults to \nfalse\n\n\ne.g. \ntrue\n\n\n\n\n\n\nwebviewDevtoolsPort\n\n\nTo support the \nensureWebviewsHavePages\n feature, it is necessary to open a TCP port for communication with the webview on the device under test. This capability allows overriding of the default port of \n9222\n, in case multiple sessions are running simultaneously (to avoid port clash), or in case the default port is not appropriate for your system.\n\n\ne.g. \n9543\n\n\n\n\n\n\nenableWebviewDetailsCollection\n\n\nEnables collection of detailed WebView information via \n/json/version\n CDP (Chrome Developer Protocol) endpoint since Appium 1.18.0+. This helps to properly match Chromedriver version which supports the given WebView. Without this flag enabled, Appium tries to guess the version of the WebView based on the version of the corresponding installed package (which usually \nfails\n for custom web views). Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\ndontStopAppOnReset\n\n\nDoesn't stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with \ndontStopAppOnReset\n set to \ntrue\n, we will not include the \n-S\n flag in the \nadb shell am start\n call. With this capability omitted or set to \nfalse\n, we include the \n-S\n flag. Default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nunicodeKeyboard\n\n\nEnable Unicode input, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nresetKeyboard\n\n\nReset keyboard to its original state, after running Unicode tests with \nunicodeKeyboard\n capability. Ignored if used alone. Default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnoSign\n\n\nSkip checking and signing of app with debug keys, will work only with UiAutomator, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nignoreUnimportantViews\n\n\nCalls the \nsetCompressedLayoutHierarchy()\n uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able \nsetting\n as well as a capability. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\ndisableAndroidWatchers\n\n\nDisables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator, default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nchromeOptions\n\n\nAllows passing chromeOptions capability for ChromeDriver. For more information see \nchromeOptions\n\n\nchromeOptions: {args: ['--disable-popup-blocking']}\n\n\n\n\n\n\nrecreateChromeDriverSessions\n\n\nKill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnativeWebScreenshot\n\n\nIn a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nandroidScreenshotPath\n\n\nThe name of the directory on the device in which the screenshot will be put. Defaults to \n/data/local/tmp\n\n\ne.g. \n/sdcard/screenshots/\n\n\n\n\n\n\nautoGrantPermissions\n\n\nHave Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to \nfalse\n. If \nnoReset\n is \ntrue\n, this capability doesn't work.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnetworkSpeed\n\n\nSet the network speed emulation. Specify the maximum network upload and download speeds. Defaults to \nfull\n\n\n['full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo']\n Check \n-netspeed option\n more info about speed emulation for avds\n\n\n\n\n\n\ngpsEnabled\n\n\nToggle gps location provider for emulators before starting the session. By default the emulator will have this option enabled or not according to how it has been provisioned.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nisHeadless\n\n\nSet this capability to \ntrue\n to run the Emulator headless when device display is not needed to be visible. \nfalse\n is the default value. \nisHeadless\n is also support for iOS, check XCUITest-specific capabilities.\n\n\ne.g., \ntrue\n\n\n\n\n\n\nadbExecTimeout\n\n\nTimeout in milliseconds used to wait for adb command execution. Defaults to \n20000\n\n\ne.g., \n50000\n\n\n\n\n\n\nlocaleScript\n\n\nSets the locale \nscript\n\n\ne.g., \n\"Cyrl\"\n (Cyrillic)\n\n\n\n\n\n\nskipDeviceInitialization\n\n\nSkip device initialization which includes i.a.: installation and running of Settings app or setting of permissions. Can be used to improve startup performance when the device was already used for automation and it's prepared for the next automation. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nchromedriverDisableBuildCheck\n\n\nSets the chromedriver flag \n--disable-build-check\n for Chrome webview tests\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nskipUnlock\n\n\nSkips unlock during session creation. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nunlockType\n\n\nUnlock the target device with particular lock pattern instead of just waking up the device with a helper app. It works with \nunlockKey\n capability. Defaults to undefined. \nfingerprint\n is available only for Android 6.0+ and emulators. Read \nunlock doc\n in android driver.\n\n\n['pin', 'password', 'pattern', 'fingerprint']\n\n\n\n\n\n\nunlockKey\n\n\nA key pattern to unlock used by \nunlockType\n.\n\n\ne.g., '1111'\n\n\n\n\n\n\nautoLaunch\n\n\nInitializing the app under test automatically. Appium does not install/launch the app under test if this is \nfalse\n. Defaults to \ntrue\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nskipLogcatCapture\n\n\nSkips to start capturing logcat. It might improve performance such as network. Log related commands will not work. Defaults to \nfalse\n.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nuninstallOtherPackages\n\n\nA package, list of packages or \n*\n to uninstall package/s before installing apks for test. \n'*'\n uninstall all of thrid-party packages except for packages which is necessary for Appium to test such as \nio.appium.settings\n or \nio.appium.uiautomator2.server\n since Appium already contains the logic to manage them.\n\n\ne.g. \n\"io.appium.example\"\n, \n[\"io.appium.example1\", \"io.appium.example2\"]\n, \n'*'\n\n\n\n\n\n\ndisableWindowAnimation\n\n\nSet device animation scale zero if the value is \ntrue\n. After session is complete, Appium restores the animation scale to it's original value. Defaults to \nfalse\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nremoteAppsCacheLimit\n\n\nSet the maximum number of remote cached apks (default is 10) which are pushed to the device-under-test's local storage. Caching apks remotely speeds up the execution of sequential test cases, when using the same set of apks, by avoiding the need to be push an apk to the remote file system every time a reinstall is needed. Set this capability to \n0\n to disable caching.\n\n\ne.g. \n0\n, \n5\n, \n20\n\n\n\n\n\n\nbuildToolsVersion\n\n\nSpecify the Android \nbuild-tools\n version to be something different than the default, which is to use the most recent version. It is helpful to use a non-default version if your environment uses alpha/beta build tools.\n\n\ne.g. \n'28.0.3'\n\n\n\n\n\n\nandroidNaturalOrientation\n\n\nAllow for correct handling of orientation on landscape-oriented devices. Set to \ntrue\n to basically flip the meaning of \nPORTRAIT\n and \nLANDSCAPE\n. Defaults to \nfalse\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nenforceAppInstall\n\n\nBy default application installation is skipped if newer or the same version of this app is already present on the device under test. Setting this option to \ntrue\n will enforce Appium to always install the current application build independently of the currently installed version of it. Defaults to \nfalse\n.\n\n\ntrue\n , \nfalse\n\n\n\n\n\n\nignoreHiddenApiPolicyError\n\n\nIgnores \nSecurity exception: Permission denial\n alert and allows to continue the session creation process since Appium 1.18.0+. The error happens when Appium tries to relax \nhidden API policy\n, although some devices with a customized firmware deny such requests. Defaults to \nfalse\n.\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nmockLocationApp\n\n\nSets the package identifier of the app, which is used as a system mock location provider since Appium 1.18.0+. This capability has no effect on emulators. If the value is set to \nnull\n or an empty string, then Appium will skip the mocked location provider setup procedure. Defaults to Appium Setting package identifier (\nio.appium.settings\n).\n\n\ne.g., \nnull\n, \nio.appium.settings\n, \nexample.your.app\n\n\n\n\n\n\nlogcatFormat\n\n\nSet the output format for logcat messages since Appium 1.18.0. Supported formats are listed in \nhere\n. Please read \nlogcat#outputFormat\n for more details about each format. Defaults to \nthreadtime\n.\n\n\ne.g., \nprocess\n\n\n\n\n\n\nlogcatFilterSpecs\n\n\nSet the output filter rule for logcat messages since Appium 1.18.0. Please read \nlogcat#filteringOutput\n for more details about the rule. \nWrite and View Logs with Logcat\n is also helpful.\n\n\ne.g., \n['*:W', 'MyActivity:D']\n (\nMyActivity\n is a tag)\n\n\n\n\n\n\nallowDelayAdb\n\n\nWhether enable \n-delay-adb\n on emulator startup. Defaults to \ntrue\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nintentAction\n\n\nIntent action which will be used to start activity (default \nandroid.intent.action.MAIN\n)\n\n\ne.g.\nandroid.intent.action.MAIN\n, \nandroid.intent.action.VIEW\n\n\n\n\n\n\nintentCategory\n\n\nIntent category which will be used to start activity (default \nandroid.intent.category.LAUNCHER\n)\n\n\ne.g. \nandroid.intent.category.LAUNCHER\n, \nandroid.intent.category.APP_CONTACTS\n\n\n\n\n\n\nintentFlags\n\n\nFlags that will be used to start activity (default \n0x10200000\n)\n\n\ne.g. \n0x10200000\n\n\n\n\n\n\noptionalIntentArguments\n\n\nAdditional intent arguments that will be used to start activity. See \nIntent arguments\n\n\ne.g. \n--esn \nEXTRA_KEY\n, \n--ez \nEXTRA_KEY\n \nEXTRA_BOOLEAN_VALUE\n, etc.\n\n\n\n\n\n\n\n\nUIAutomator2\n\n\nPlease refer to the documentation on the UIAutomator2 driver \nrepository\n about its available capabilities.\n\n\nEspresso\n\n\nPlease refer to the documentation on the Espresso driver \nrepository\n about its available capabilities.\n\n\niOS Only\n\n\nThese Capabilities are available only on the \nXCUITest\nDriver\n and the deprecated \nUIAutomation\nDriver\n.\n\n\n\n\n\n\n\n\nCapability\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\ncalendarFormat\n\n\n(Sim-only) Calendar format to set for the iOS Simulator\n\n\ne.g. \ngregorian\n\n\n\n\n\n\nbundleId\n\n\nBundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app' capability, but you must provide 'udid'.\n\n\ne.g. \nio.appium.TestApp\n\n\n\n\n\n\nlaunchTimeout\n\n\nAmount of time in ms to wait for instruments before assuming it hung and failing the session\n\n\ne.g. \n20000\n\n\n\n\n\n\nlocationServicesEnabled\n\n\n(Sim-only) Force location services to be either on or off. Default is to keep current sim setting.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nlocationServicesAuthorized\n\n\n(Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn't pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the \nbundleId\n capability to send in your app's bundle ID.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nautoAcceptAlerts\n\n\nAccept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nautoDismissAlerts\n\n\nDismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnativeInstrumentsLib\n\n\nUse native intruments lib (ie disable instruments-without-delay).\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nnativeWebTap\n\n\nEnable \"real\", non-javascript-based web taps in Safari. Default: \nfalse\n. Warning: depending on viewport size/ratio; this might not accurately tap an element\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsafariInitialUrl\n\n\nInitial safari url, default is a local welcome page\n\n\ne.g. \nhttps://www.github.com\n\n\n\n\n\n\nsafariAllowPopups\n\n\n(Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsafariIgnoreFraudWarning\n\n\n(Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsafariOpenLinksInBackground\n\n\n(Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nkeepKeyChains\n\n\n(Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nlocalizableStringsDir\n\n\nWhere to look for localizable strings. Default \nen.lproj\n\n\nen.lproj\n\n\n\n\n\n\nprocessArguments\n\n\nArguments to pass to the AUT using instruments\n\n\ne.g., \n-myflag\n\n\n\n\n\n\ninterKeyDelay\n\n\nThe delay, in ms, between keystrokes sent to an element when typing.\n\n\ne.g., \n100\n\n\n\n\n\n\nshowIOSLog\n\n\nWhether to show any logs captured from a device in the appium logs. Default \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nsendKeyStrategy\n\n\nstrategy to use to type test into a test field. Simulator default: \noneByOne\n. Real device default: \ngrouped\n\n\noneByOne\n, \ngrouped\n or \nsetValue\n\n\n\n\n\n\nscreenshotWaitTimeout\n\n\nMax timeout in sec to wait for a screenshot to be generated. default: 10\n\n\ne.g., \n5\n\n\n\n\n\n\nwaitForAppScript\n\n\nThe ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean\n\n\ne.g. \ntrue;\n, \ntarget.elements().length \n 0;\n, \n$.delay(5000); true;\n\n\n\n\n\n\nwebviewConnectRetries\n\n\nNumber of times to send connection message to remote debugger, to get webview. Default: \n8\n\n\ne.g., \n12\n\n\n\n\n\n\nappName\n\n\nThe display name of the application under test. Used to automate backgrounding the app in iOS 9+.\n\n\ne.g., \nUICatalog\n\n\n\n\n\n\ncustomSSLCert\n\n\n(Sim only) Add an SSL certificate to IOS Simulator.\n\n\ne.g. \n-----BEGIN CERTIFICATE-----MIIFWjCCBEKg...\n-----END CERTIFICATE-----\n\n\n\n\n\n\nwebkitResponseTimeout\n\n\n(Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to \n5000\n\n\ne.g., \n10000\n\n\n\n\n\n\nremoteDebugProxy\n\n\n(Sim only, \n= 11.2) If set, Appium sends and receives remote debugging messages through a proxy on either the local port (Sim only, \n= 11.2) or a proxy on this unix socket (Sim only \n= 11.3) instead of communicating with the iOS remote debugger directly.\n\n\ne.g. \n12000\n or \n\"/tmp/my.proxy.socket\"\n\n\n\n\n\n\nenableAsyncExecuteFromHttps\n\n\ncapability to allow simulators to execute asynchronous JavaScript on pages using HTTPS. Defaults to \nfalse\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nskipLogCapture\n\n\nSkips to start capturing logs such as crash, system, safari console and safari network. It might improve performance such as network. Log related commands will not work. Defaults to \nfalse\n.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\nwebkitDebugProxyPort\n\n\n(Real device only) Port to which \nios-webkit-debug-proxy\n is connected, during real device tests. Default is \n27753\n.\n\n\n12021\n\n\n\n\n\n\nfullContextList\n\n\nReturns the detailed information on contexts for the \nget available context\n command. If this capability is enabled, then each item in the returned contexts list would additionally include WebView title, full URL and the bundle identifier. Defaults to \nfalse\n.\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\n\n\niOS Only, using XCUITest\n\n\nPlease refer to the documentation on the XCUITest driver \nrepository\n about its available capabilities.\n\n\nSafaridriver Only\n\n\nPlease refer to the documentation on the safaridriver \nrepository\n about its available capabilities.\n\n\nGeckodriver Only\n\n\nPlease refer to the documentation on the geckodriver \nrepository\n about its available capabilities.\n\n\nMacDriver Only\n\n\nPlease refer to the documentation on the MacDriver \nrepository\n about its available capabilities.\n\n\nMac2Driver Only\n\n\nPlease refer to the documentation on the Mac2Driver \nrepository\n about its available capabilities.\n\n\nYou.i Engine Only\n\n\nPlease refer to the documentation on the You.i Engine driver \nrepository\n about its available capabilities.\n\n\nWinAppDriver Only\n\n\nPlease refer to the documentation on the Appium Windows Driver \nrepository\n about its available capabilities.\n\n\nFlutter driver only\n\n\nPlease refer to the documentation on the Flutter Driver \nrepository\n about its available capabilities.", 
            "title": "Desired Capabilities"
        }, 
        {
            "location": "/writing-running-appium/caps/#appium-desired-capabilities", 
            "text": "Desired Capabilities are keys and values encoded in a JSON object, sent by\nAppium clients to the server when a new automation session is requested. They\ntell the Appium drivers all kinds of important things about how you want your\ntest to work. Each Appium client builds capabilities in a way specific to the\nclient's language, but at the end of the day, they are sent over to Appium as\nJSON objects.  Desired Capabilities can be scripted in the WebDriver test or set within the\nAppium Server GUI (via an Inspector Session)  Some important capabilities are demonstrated in the following example:  {\n     platformName :  iOS ,\n     platformVersion :  11.0 ,\n     deviceName :  iPhone 7 ,\n     automationName :  XCUITest ,\n     app :  /path/to/my.app \n}  This set of Desired Capabilities expresses the desire for Appium to begin an\nautomation session on an iPhone 7 simulator with iOS 11, using the  XCUITest\nDriver , with  /path/to/my.app  as the app\nunder test.  There are many, many Capabilities that Appium supports. Capabilities also\ndiffer by driver, though there are a standard set that most drivers pay\nattention to. What follows are a series of tables outlining the various Desired\nCapabilities available in general and for specific drivers.", 
            "title": "Appium Desired Capabilities"
        }, 
        {
            "location": "/writing-running-appium/caps/#general-capabilities", 
            "text": "These Capabilities span multiple drivers.     Capability  Description  Values      automationName  Which automation engine to use  Appium  (default), or  UiAutomator2 ,  Espresso , or  UiAutomator1  for Android, or  XCUITest  or  Instruments  for iOS, or  YouiEngine  for application built with You.i Engine    platformName  Which mobile OS platform to use  iOS ,  Android , or  FirefoxOS    platformVersion  Mobile OS version  e.g.,  7.1 ,  4.4    deviceName  The kind of mobile device or emulator to use  iPhone Simulator ,  iPad Simulator ,  iPhone Retina 4-inch ,  Android Emulator ,  Galaxy S4 , etc.... On iOS, this should be one of the valid devices returned by instruments with  instruments -s devices  or xctrace with  xcrun xctrace list devices  (since Xcode 12). On Android this capability is currently ignored, though it remains required.    app  The absolute local path  or  remote http URL to a  .ipa  file (IOS),  .app  folder (IOS Simulator),  .apk  file (Android) or  .apks  file (Android App Bundle), or a  .zip  file containing one of these. Appium will attempt to install this app binary on the appropriate device first. Note that this capability is not required for Android if you specify  appPackage  and  appActivity  capabilities (see below).  UiAutomator2  and  XCUITest  allow to start the session without  app  or  appPackage . Incompatible with  browserName . See  here  about  .apks  file.  /abs/path/to/my.apk  or  http://myapp.com/app.ipa    otherApps  App or list of apps (as a JSON array) to install prior to running tests. Note that it will not work with  automationName  of  Espresso  and iOS real devices  e.g.,  \"/path/to/app.apk\" ,  https://www.example.com/url/to/app.apk ,  [\"http://appium.github.io/appium/assets/TestApp9.4.app.zip\", \"/path/to/app-b.app\"]    browserName  Name of mobile web browser to automate. Should be an empty string if automating an app instead.  'Safari' for iOS and 'Chrome', 'Chromium', or 'Browser' for Android    newCommandTimeout  How long (in seconds) Appium will wait for a new command from the client before assuming the client quit and ending the session  e.g.  60    language  Language to set for iOS (XCUITest driver only) and Android.  e.g.  fr    locale  Locale to set for iOS (XCUITest driver only) and Android.  fr_CA  format for iOS.  CA  format (country name abbreviation) for Android  e.g.  fr_CA ,  CA    udid  Unique device identifier of the connected physical device  e.g.  1ae203187fc012g    orientation  (Sim/Emu-only) start in a certain orientation  LANDSCAPE  or  PORTRAIT    autoWebview  Move directly into Webview context. Default  false  true ,  false    noReset  Don't reset app state before this session. See  here  for more details  true ,  false    fullReset  Perform a complete reset. See  here  for more details  true ,  false    eventTimings  Enable or disable the reporting of the timings for various Appium-internal events (e.g., the start and end of each command, etc.). Defaults to  false . To enable, use  true . The timings are then reported as  events  property on response to querying the current session. See the  event timing docs  for the the structure of this response.  e.g.,  true    enablePerformanceLogging  (Web and webview only) Enable Chromedriver's (on Android) or Safari's (on iOS) performance logging (default  false )  true ,  false    printPageSourceOnFindFailure  When a find operation fails, print the current page source. Defaults to  false .  e.g.,  true    clearSystemFiles  Delete any generated files at the end of a session. Default to  false .  true ,  false", 
            "title": "General Capabilities"
        }, 
        {
            "location": "/writing-running-appium/caps/#update-settings", 
            "text": "Capability  Description  Values      settings[settingsKey]  Update  Appium Settings  on session creation.  e.g.,  'settings[mjpegScalingFactor]': 10 ,  'settings[shouldUseCompactResponses]': true", 
            "title": "Update settings"
        }, 
        {
            "location": "/writing-running-appium/caps/#android", 
            "text": "", 
            "title": "Android"
        }, 
        {
            "location": "/writing-running-appium/caps/#uiautomator1", 
            "text": "These Capabilities are available for UiAutomator1 driver. The driver is for Android 5 and lower.     Capability  Description  Values      appActivity  Activity name for the Android activity you want to launch from your package. This often needs to be preceded by a  .  (e.g.,  .MainActivity  instead of  MainActivity ). By default this capability is received from the package manifest (action: android.intent.action.MAIN , category: android.intent.category.LAUNCHER)  MainActivity ,  .Settings    appPackage  Java package of the Android app you want to run. By default this capability is received from the package manifest (@package attribute value)  com.example.android.myApp ,  com.android.settings    appWaitActivity  Activity name/names, comma separated, for the Android activity you want to wait for. By default the value of this capability is the same as for  appActivity . You must set it to the very first focused application activity name in case it is different from the one which is set as  appActivity  if your capability has  appActivity  and  appPackage . You can also use wildcards ( * ).  SplashActivity ,  SplashActivity,OtherActivity ,  * ,  *.SplashActivity    appWaitPackage  Java package of the Android app you want to wait for. By default the value of this capability is the same as for  appActivity  com.example.android.myApp ,  com.android.settings    appWaitDuration  Timeout in milliseconds used to wait for the appWaitActivity to launch (default  20000 )  30000    deviceReadyTimeout  Timeout in seconds while waiting for device to become ready  5    allowTestPackages  Allow to install a test package which has  android:testOnly=\"true\"  in the manifest.  false  by default  true  or  false    androidCoverage  Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w  com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation    androidCoverageEndIntent  A broadcast action implemented by yourself which is used to dump coverage into file system. Passed to -a in adb shell am broadcast -a  com.example.pkg.END_EMMA    androidDeviceReadyTimeout  Timeout in seconds used to wait for a device to become ready after booting  e.g.,  30    androidInstallTimeout  Timeout in milliseconds used to wait for an apk to install to the device. Defaults to  90000  e.g.,  90000    androidInstallPath  The name of the directory on the device in which the apk will be push before install. Defaults to  /data/local/tmp  e.g.  /sdcard/Downloads/    adbPort  Port used to connect to the ADB server (default  5037 )  5037    systemPort  systemPort  used to connect to  appium-uiautomator2-server  or  appium-espresso-driver . The default is  8200  in general and selects one port from  8200  to  8299  for  appium-uiautomator2-server , it is  8300  from  8300  to  8399  for  appium-espresso-driver . When you run tests in parallel, you must adjust the port to avoid conflicts. Read  Parallel Testing Setup Guide  for more details.  e.g.,  8201    remoteAdbHost  Optional remote ADB server host  e.g.: 192.168.0.101    androidDeviceSocket  Devtools socket name. Needed only when tested app is a Chromium embedding browser. The socket is open by the browser and Chromedriver connects to it as a devtools client.  e.g.,  chrome_devtools_remote    avd  Name of avd to launch  e.g.,  api19    avdLaunchTimeout  How long to wait in milliseconds for an avd to launch and connect to ADB (default  60000 )  300000    avdReadyTimeout  How long to wait in milliseconds for an avd to finish its boot animations (default  120000 )  300000    avdArgs  Additional emulator arguments used when launching an avd  e.g.,  -netfast    useKeystore  Use a custom keystore to sign apks, default  false  true  or  false    keystorePath  Path to custom keystore, default ~/.android/debug.keystore  e.g.,  /path/to.keystore    keystorePassword  Password for custom keystore  e.g.,  foo    keyAlias  Alias for key  e.g.,  androiddebugkey    keyPassword  Password for key  e.g.,  foo    chromedriverExecutable  The absolute local path to webdriver executable (if Chromium embedder provides its own webdriver, it should be used instead of original chromedriver bundled with Appium)  /abs/path/to/webdriver    chromedriverArgs  An array of arguments to be passed to the chromedriver binary when it's run by Appium. By default no CLI args are added beyond what Appium uses internally (such as  --url-base ,  --port ,  --adb-port , and  --log-path .  e.g.,  [\"--disable-gpu\", \"--disable-web-security\"]    chromedriverExecutableDir  The absolute path to a directory to look for Chromedriver executables in, for automatic discovery of compatible Chromedrivers. Ignored if  chromedriverUseSystemExecutable  is  true  /abs/path/to/chromedriver/directory    chromedriverChromeMappingFile  The absolute path to a file which maps Chromedriver versions to the minimum Chrome that it supports. Ignored if  chromedriverUseSystemExecutable  is  true  /abs/path/to/mapping.json    chromedriverUseSystemExecutable  If  true , bypasses automatic Chromedriver configuration and uses the version that comes downloaded with Appium. Ignored if  chromedriverExecutable  is set. Defaults to  false  e.g.,  true    autoWebviewTimeout  Amount of time to wait for Webview context to become active, in ms. Defaults to  2000  e.g.  4    chromedriverPort  Numeric port to start Chromedriver on. Note that use of this capability is discouraged as it will cause undefined behavior in case there are multiple webviews present. By default Appium will find a free port.  e.g.  8000    chromedriverPorts  A list of valid ports for Appium to use for communication with Chromedrivers. This capability supports multiple webview scenarios. The form of this capability is an array of numeric ports, where array items can themselves be arrays of length 2, where the first element is the start of an inclusive range and the second is the end. By default, Appium will use any free port.  e.g.  [8000, [9000, 9005]]    ensureWebviewsHavePages  Whether or not Appium should augment its webview detection with page detection, guaranteeing that any webview contexts which show up in the context list have active pages. This can prevent an error if a context is selected where Chromedriver cannot find any pages. Defaults to  false  e.g.  true    webviewDevtoolsPort  To support the  ensureWebviewsHavePages  feature, it is necessary to open a TCP port for communication with the webview on the device under test. This capability allows overriding of the default port of  9222 , in case multiple sessions are running simultaneously (to avoid port clash), or in case the default port is not appropriate for your system.  e.g.  9543    enableWebviewDetailsCollection  Enables collection of detailed WebView information via  /json/version  CDP (Chrome Developer Protocol) endpoint since Appium 1.18.0+. This helps to properly match Chromedriver version which supports the given WebView. Without this flag enabled, Appium tries to guess the version of the WebView based on the version of the corresponding installed package (which usually  fails  for custom web views). Defaults to  false  true  or  false    dontStopAppOnReset  Doesn't stop the process of the app under test, before starting the app using adb. If the app under test is created by another anchor app, setting this false, allows the process of the anchor app to be still alive, during the start of the test app using adb. In other words, with  dontStopAppOnReset  set to  true , we will not include the  -S  flag in the  adb shell am start  call. With this capability omitted or set to  false , we include the  -S  flag. Default  false  true  or  false    unicodeKeyboard  Enable Unicode input, default  false  true  or  false    resetKeyboard  Reset keyboard to its original state, after running Unicode tests with  unicodeKeyboard  capability. Ignored if used alone. Default  false  true  or  false    noSign  Skip checking and signing of app with debug keys, will work only with UiAutomator, default  false  true  or  false    ignoreUnimportantViews  Calls the  setCompressedLayoutHierarchy()  uiautomator function. This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable, which is why this capability has also been implemented as a toggle-able  setting  as well as a capability. Defaults to  false  true  or  false    disableAndroidWatchers  Disables android watchers that watch for application not responding and application crash, this will reduce cpu usage on android device/emulator. This capability will work only with UiAutomator, default  false  true  or  false    chromeOptions  Allows passing chromeOptions capability for ChromeDriver. For more information see  chromeOptions  chromeOptions: {args: ['--disable-popup-blocking']}    recreateChromeDriverSessions  Kill ChromeDriver session when moving to a non-ChromeDriver webview. Defaults to  false  true  or  false    nativeWebScreenshot  In a web context, use native (adb) method for taking a screenshot, rather than proxying to ChromeDriver. Defaults to  false  true  or  false    androidScreenshotPath  The name of the directory on the device in which the screenshot will be put. Defaults to  /data/local/tmp  e.g.  /sdcard/screenshots/    autoGrantPermissions  Have Appium automatically determine which permissions your app requires and grant them to the app on install. Defaults to  false . If  noReset  is  true , this capability doesn't work.  true  or  false    networkSpeed  Set the network speed emulation. Specify the maximum network upload and download speeds. Defaults to  full  ['full','gsm', 'edge', 'hscsd', 'gprs', 'umts', 'hsdpa', 'lte', 'evdo']  Check  -netspeed option  more info about speed emulation for avds    gpsEnabled  Toggle gps location provider for emulators before starting the session. By default the emulator will have this option enabled or not according to how it has been provisioned.  true  or  false    isHeadless  Set this capability to  true  to run the Emulator headless when device display is not needed to be visible.  false  is the default value.  isHeadless  is also support for iOS, check XCUITest-specific capabilities.  e.g.,  true    adbExecTimeout  Timeout in milliseconds used to wait for adb command execution. Defaults to  20000  e.g.,  50000    localeScript  Sets the locale  script  e.g.,  \"Cyrl\"  (Cyrillic)    skipDeviceInitialization  Skip device initialization which includes i.a.: installation and running of Settings app or setting of permissions. Can be used to improve startup performance when the device was already used for automation and it's prepared for the next automation. Defaults to  false  true  or  false    chromedriverDisableBuildCheck  Sets the chromedriver flag  --disable-build-check  for Chrome webview tests  true  or  false    skipUnlock  Skips unlock during session creation. Defaults to  false  true  or  false    unlockType  Unlock the target device with particular lock pattern instead of just waking up the device with a helper app. It works with  unlockKey  capability. Defaults to undefined.  fingerprint  is available only for Android 6.0+ and emulators. Read  unlock doc  in android driver.  ['pin', 'password', 'pattern', 'fingerprint']    unlockKey  A key pattern to unlock used by  unlockType .  e.g., '1111'    autoLaunch  Initializing the app under test automatically. Appium does not install/launch the app under test if this is  false . Defaults to  true  true  or  false    skipLogcatCapture  Skips to start capturing logcat. It might improve performance such as network. Log related commands will not work. Defaults to  false .  true  or  false    uninstallOtherPackages  A package, list of packages or  *  to uninstall package/s before installing apks for test.  '*'  uninstall all of thrid-party packages except for packages which is necessary for Appium to test such as  io.appium.settings  or  io.appium.uiautomator2.server  since Appium already contains the logic to manage them.  e.g.  \"io.appium.example\" ,  [\"io.appium.example1\", \"io.appium.example2\"] ,  '*'    disableWindowAnimation  Set device animation scale zero if the value is  true . After session is complete, Appium restores the animation scale to it's original value. Defaults to  false  true ,  false    remoteAppsCacheLimit  Set the maximum number of remote cached apks (default is 10) which are pushed to the device-under-test's local storage. Caching apks remotely speeds up the execution of sequential test cases, when using the same set of apks, by avoiding the need to be push an apk to the remote file system every time a reinstall is needed. Set this capability to  0  to disable caching.  e.g.  0 ,  5 ,  20    buildToolsVersion  Specify the Android  build-tools  version to be something different than the default, which is to use the most recent version. It is helpful to use a non-default version if your environment uses alpha/beta build tools.  e.g.  '28.0.3'    androidNaturalOrientation  Allow for correct handling of orientation on landscape-oriented devices. Set to  true  to basically flip the meaning of  PORTRAIT  and  LANDSCAPE . Defaults to  false  true ,  false    enforceAppInstall  By default application installation is skipped if newer or the same version of this app is already present on the device under test. Setting this option to  true  will enforce Appium to always install the current application build independently of the currently installed version of it. Defaults to  false .  true  ,  false    ignoreHiddenApiPolicyError  Ignores  Security exception: Permission denial  alert and allows to continue the session creation process since Appium 1.18.0+. The error happens when Appium tries to relax  hidden API policy , although some devices with a customized firmware deny such requests. Defaults to  false .  true ,  false    mockLocationApp  Sets the package identifier of the app, which is used as a system mock location provider since Appium 1.18.0+. This capability has no effect on emulators. If the value is set to  null  or an empty string, then Appium will skip the mocked location provider setup procedure. Defaults to Appium Setting package identifier ( io.appium.settings ).  e.g.,  null ,  io.appium.settings ,  example.your.app    logcatFormat  Set the output format for logcat messages since Appium 1.18.0. Supported formats are listed in  here . Please read  logcat#outputFormat  for more details about each format. Defaults to  threadtime .  e.g.,  process    logcatFilterSpecs  Set the output filter rule for logcat messages since Appium 1.18.0. Please read  logcat#filteringOutput  for more details about the rule.  Write and View Logs with Logcat  is also helpful.  e.g.,  ['*:W', 'MyActivity:D']  ( MyActivity  is a tag)    allowDelayAdb  Whether enable  -delay-adb  on emulator startup. Defaults to  true  true ,  false    intentAction  Intent action which will be used to start activity (default  android.intent.action.MAIN )  e.g. android.intent.action.MAIN ,  android.intent.action.VIEW    intentCategory  Intent category which will be used to start activity (default  android.intent.category.LAUNCHER )  e.g.  android.intent.category.LAUNCHER ,  android.intent.category.APP_CONTACTS    intentFlags  Flags that will be used to start activity (default  0x10200000 )  e.g.  0x10200000    optionalIntentArguments  Additional intent arguments that will be used to start activity. See  Intent arguments  e.g.  --esn  EXTRA_KEY ,  --ez  EXTRA_KEY   EXTRA_BOOLEAN_VALUE , etc.", 
            "title": "UIAutomator1"
        }, 
        {
            "location": "/writing-running-appium/caps/#uiautomator2", 
            "text": "Please refer to the documentation on the UIAutomator2 driver  repository  about its available capabilities.", 
            "title": "UIAutomator2"
        }, 
        {
            "location": "/writing-running-appium/caps/#espresso", 
            "text": "Please refer to the documentation on the Espresso driver  repository  about its available capabilities.", 
            "title": "Espresso"
        }, 
        {
            "location": "/writing-running-appium/caps/#ios-only", 
            "text": "These Capabilities are available only on the  XCUITest\nDriver  and the deprecated  UIAutomation\nDriver .     Capability  Description  Values      calendarFormat  (Sim-only) Calendar format to set for the iOS Simulator  e.g.  gregorian    bundleId  Bundle ID of the app under test. Useful for starting an app on a real device or for using other caps which require the bundle ID during test startup. To run a test on a real device using the bundle ID, you may omit the 'app' capability, but you must provide 'udid'.  e.g.  io.appium.TestApp    launchTimeout  Amount of time in ms to wait for instruments before assuming it hung and failing the session  e.g.  20000    locationServicesEnabled  (Sim-only) Force location services to be either on or off. Default is to keep current sim setting.  true  or  false    locationServicesAuthorized  (Sim-only) Set location services to be authorized or not authorized for app via plist, so that location services alert doesn't pop up. Default is to keep current sim setting. Note that if you use this setting you MUST also use the  bundleId  capability to send in your app's bundle ID.  true  or  false    autoAcceptAlerts  Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.  true  or  false    autoDismissAlerts  Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is false.  true  or  false    nativeInstrumentsLib  Use native intruments lib (ie disable instruments-without-delay).  true  or  false    nativeWebTap  Enable \"real\", non-javascript-based web taps in Safari. Default:  false . Warning: depending on viewport size/ratio; this might not accurately tap an element  true  or  false    safariInitialUrl  Initial safari url, default is a local welcome page  e.g.  https://www.github.com    safariAllowPopups  (Sim-only) Allow javascript to open new windows in Safari. Default keeps current sim setting  true  or  false    safariIgnoreFraudWarning  (Sim-only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting.  true  or  false    safariOpenLinksInBackground  (Sim-only) Whether Safari should allow links to open in new windows. Default keeps current sim setting.  true  or  false    keepKeyChains  (Sim-only) Whether to keep keychains (Library/Keychains) when appium session is started/finished  true  or  false    localizableStringsDir  Where to look for localizable strings. Default  en.lproj  en.lproj    processArguments  Arguments to pass to the AUT using instruments  e.g.,  -myflag    interKeyDelay  The delay, in ms, between keystrokes sent to an element when typing.  e.g.,  100    showIOSLog  Whether to show any logs captured from a device in the appium logs. Default  false  true  or  false    sendKeyStrategy  strategy to use to type test into a test field. Simulator default:  oneByOne . Real device default:  grouped  oneByOne ,  grouped  or  setValue    screenshotWaitTimeout  Max timeout in sec to wait for a screenshot to be generated. default: 10  e.g.,  5    waitForAppScript  The ios automation script used to determined if the app has been launched, by default the system wait for the page source not to be empty. The result must be a boolean  e.g.  true; ,  target.elements().length   0; ,  $.delay(5000); true;    webviewConnectRetries  Number of times to send connection message to remote debugger, to get webview. Default:  8  e.g.,  12    appName  The display name of the application under test. Used to automate backgrounding the app in iOS 9+.  e.g.,  UICatalog    customSSLCert  (Sim only) Add an SSL certificate to IOS Simulator.  e.g.  -----BEGIN CERTIFICATE-----MIIFWjCCBEKg... -----END CERTIFICATE-----    webkitResponseTimeout  (Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to  5000  e.g.,  10000    remoteDebugProxy  (Sim only,  = 11.2) If set, Appium sends and receives remote debugging messages through a proxy on either the local port (Sim only,  = 11.2) or a proxy on this unix socket (Sim only  = 11.3) instead of communicating with the iOS remote debugger directly.  e.g.  12000  or  \"/tmp/my.proxy.socket\"    enableAsyncExecuteFromHttps  capability to allow simulators to execute asynchronous JavaScript on pages using HTTPS. Defaults to  false  true  or  false    skipLogCapture  Skips to start capturing logs such as crash, system, safari console and safari network. It might improve performance such as network. Log related commands will not work. Defaults to  false .  true  or  false    webkitDebugProxyPort  (Real device only) Port to which  ios-webkit-debug-proxy  is connected, during real device tests. Default is  27753 .  12021    fullContextList  Returns the detailed information on contexts for the  get available context  command. If this capability is enabled, then each item in the returned contexts list would additionally include WebView title, full URL and the bundle identifier. Defaults to  false .  true  or  false", 
            "title": "iOS Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#ios-only-using-xcuitest", 
            "text": "Please refer to the documentation on the XCUITest driver  repository  about its available capabilities.", 
            "title": "iOS Only, using XCUITest"
        }, 
        {
            "location": "/writing-running-appium/caps/#safaridriver-only", 
            "text": "Please refer to the documentation on the safaridriver  repository  about its available capabilities.", 
            "title": "Safaridriver Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#geckodriver-only", 
            "text": "Please refer to the documentation on the geckodriver  repository  about its available capabilities.", 
            "title": "Geckodriver Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#macdriver-only", 
            "text": "Please refer to the documentation on the MacDriver  repository  about its available capabilities.", 
            "title": "MacDriver Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#mac2driver-only", 
            "text": "Please refer to the documentation on the Mac2Driver  repository  about its available capabilities.", 
            "title": "Mac2Driver Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#youi-engine-only", 
            "text": "Please refer to the documentation on the You.i Engine driver  repository  about its available capabilities.", 
            "title": "You.i Engine Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#winappdriver-only", 
            "text": "Please refer to the documentation on the Appium Windows Driver  repository  about its available capabilities.", 
            "title": "WinAppDriver Only"
        }, 
        {
            "location": "/writing-running-appium/caps/#flutter-driver-only", 
            "text": "Please refer to the documentation on the Flutter Driver  repository  about its available capabilities.", 
            "title": "Flutter driver only"
        }, 
        {
            "location": "/writing-running-appium/default-capabilities-arg/", 
            "text": "The --default-capabilities flag\n\n\nAppium 1.5 does away with most CLI flags that existed previously; the remainder can be converted into JSON and made part of the \n--default-capabilities\n flag. For example:\n\n\n# raw JSON as an argument\n--default-capabilities '{\napp\n: \nmyapp.app\n, \ndeviceName\n: \niPhone Simulator\n}'\n# or the name of a JSON file\n--default-capabilities /path/to/file.json\n\n\n\n\nWindows users\n will need to escape the quotes in JSON passed on the command line: \n--default-capabilities \"{\\\"app\\\": \\\"myapp.app\\\"}\"\n\n\n\n\n\n\n\n\nFlag\n\n\nJSON key\n\n\n\n\n\n\n\n\n\n\n--keep-artifacts\n\n\nkeepArtifacts\n\n\n\n\n\n\n--platform-name\n\n\nplatformName\n\n\n\n\n\n\n--platform-version\n\n\nplatformVersion\n\n\n\n\n\n\n--automation-name\n\n\nautomationName\n\n\n\n\n\n\n--device-name\n\n\ndeviceName\n\n\n\n\n\n\n--browser-name\n\n\nbrowserName\n\n\n\n\n\n\n--app\n\n\napp\n\n\n\n\n\n\n--launch-timeout\n\n\nlaunchTimeout\n\n\n\n\n\n\n--language\n\n\nlanguage\n\n\n\n\n\n\n--locale\n\n\nlocale\n\n\n\n\n\n\n--udid\n\n\nudid\n\n\n\n\n\n\n--orientation\n\n\norientation\n\n\n\n\n\n\n--no-reset\n\n\nnoReset\n\n\n\n\n\n\n--full-reset\n\n\nfullReset\n\n\n\n\n\n\n--app-pkg\n\n\nappPackage\n\n\n\n\n\n\n--app-activity\n\n\nappActivity\n\n\n\n\n\n\n--app-wait-package\n\n\nappWaitPackage\n\n\n\n\n\n\n--app-wait-activity\n\n\nappWaitActivity\n\n\n\n\n\n\n--device-ready-timeout\n\n\ndeviceReadyTimeout\n\n\n\n\n\n\n--android-coverage\n\n\nandroidCoverage\n\n\n\n\n\n\n--avd\n\n\navd\n\n\n\n\n\n\n--avd-args\n\n\navdArgs\n\n\n\n\n\n\n--use-keystore\n\n\nuseKeystore\n\n\n\n\n\n\n--keystore-path\n\n\nkeystorePath\n\n\n\n\n\n\n--keystore-password\n\n\nkeystorePassword\n\n\n\n\n\n\n--key-alias\n\n\nkeyAlias\n\n\n\n\n\n\n--key-password\n\n\nkeyPassword\n\n\n\n\n\n\n--intent-action\n\n\nintentAction\n\n\n\n\n\n\n--intent-category\n\n\nintentCategory\n\n\n\n\n\n\n--intent-flags\n\n\nintentFlags\n\n\n\n\n\n\n--intent-args\n\n\noptionalIntentArguments\n\n\n\n\n\n\n--dont-stop-app-on-reset\n\n\ndontStopAppOnReset\n\n\n\n\n\n\n--calendar-format\n\n\ncalendarFormat\n\n\n\n\n\n\n--native-instruments-lib\n\n\nnativeInstrumentsLib\n\n\n\n\n\n\n--keep-keychains\n\n\nkeepKeyChains\n\n\n\n\n\n\n--localizable-strings-dir\n\n\nlocalizableStringsDir\n\n\n\n\n\n\n--show-ios-log\n\n\nshowIOSLog\n\n\n\n\n\n\n--reboot\n\n\nreboot", 
            "title": "The --default-capabilities flag"
        }, 
        {
            "location": "/writing-running-appium/default-capabilities-arg/#the-default-capabilities-flag", 
            "text": "Appium 1.5 does away with most CLI flags that existed previously; the remainder can be converted into JSON and made part of the  --default-capabilities  flag. For example:  # raw JSON as an argument\n--default-capabilities '{ app :  myapp.app ,  deviceName :  iPhone Simulator }'\n# or the name of a JSON file\n--default-capabilities /path/to/file.json  Windows users  will need to escape the quotes in JSON passed on the command line:  --default-capabilities \"{\\\"app\\\": \\\"myapp.app\\\"}\"     Flag  JSON key      --keep-artifacts  keepArtifacts    --platform-name  platformName    --platform-version  platformVersion    --automation-name  automationName    --device-name  deviceName    --browser-name  browserName    --app  app    --launch-timeout  launchTimeout    --language  language    --locale  locale    --udid  udid    --orientation  orientation    --no-reset  noReset    --full-reset  fullReset    --app-pkg  appPackage    --app-activity  appActivity    --app-wait-package  appWaitPackage    --app-wait-activity  appWaitActivity    --device-ready-timeout  deviceReadyTimeout    --android-coverage  androidCoverage    --avd  avd    --avd-args  avdArgs    --use-keystore  useKeystore    --keystore-path  keystorePath    --keystore-password  keystorePassword    --key-alias  keyAlias    --key-password  keyPassword    --intent-action  intentAction    --intent-category  intentCategory    --intent-flags  intentFlags    --intent-args  optionalIntentArguments    --dont-stop-app-on-reset  dontStopAppOnReset    --calendar-format  calendarFormat    --native-instruments-lib  nativeInstrumentsLib    --keep-keychains  keepKeyChains    --localizable-strings-dir  localizableStringsDir    --show-ios-log  showIOSLog    --reboot  reboot", 
            "title": "The --default-capabilities flag"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/", 
            "text": "Finding and interacting with elements\n\n\nAppium supports a subset of the WebDriver locator strategies such as:\n\n\n\n\nfind by \"class\" (i.e., ui component type)\n\n\nfind by \"xpath\" (i.e., an abstract representation of a path to an element,\nwith certain constraints)\n\n\n\n\nYou can see a list of them in \nSelector Strategies\n\n\nAppium additionally supports some of the \nMobile JSON Wire Protocol\n locator strategies\n\n\n\n\n-ios predicate string\n : a string corresponding to a recursive element search\nusing the \niOS Predicate\n (iOS 10.0 and above)\n\n\n-ios uiautomation\n for iOS 9.3 and below\n\n\n\n\n\n\n-android uiautomator\n: a string corresponding to a recursive element\nsearch using the \nUiAutomator Api\n (Android-only)\n\n\n-android datamatcher\n: a string corresponding to an \nEspresso DataMatcher json\n (Android-only)\n\n\naccessibility id\n: a string corresponding to a recursive element search\nusing the Id/Name that the native Accessibility options utilize.\n\n\n\n\nFinally, Appium supports several additional experimental locator strategies:\n\n\n\n\n-image\n: a string corresponding to a base64-encoded version of an image which should be used by Appium as a template to find a matching screen region, which can then be tapped as if it were an element. For more information on this locator strategy, see the \nFinding Image Elements\n doc.\n\n\n-custom\n: a string which will be sent to an element finding plugin registered via the \ncustomFindModules\n capability. For more information on this strategy, check out the \nElement Finding Plugin\n docs.\n\n\n\n\nIssues\n\n\nThere's a known issue with table cell elements becoming invalidated before\nthere's time to interact with them. We're working on a fix\n\n\nUsing Appium Desktop To Locate Elements\n\n\nAppium provides you with a neat tool that allows you to find the the elements\nyou're looking for. With \nAppium Desktop\n you\ncan find any element and its locators by either clicking the element on the screenshot\nimage, or locating it in the source tree.\n\n\nOverview\n\n\nAppium Desktop has a simple layout, complete with a source tree,\na screenshot, and record and refresh buttons, and interaction tools.\n\n\n\n\nExample\n\n\nAfter launching Appium Desktop and starting a session, you can locate any element in the\nsource. In this test, I'm looking for the accessibility id of the \"Compute Sum\" button.\n\n\nTo find the accessibility id of this button, I click the \"Compute Sum\" button in the\nscreenshot. The element is then highlighted in the source tree. In the panel on the right,\nI can see the accessibility id.\n\n\n\n\nREPL\n\n\nA \nREPL\n is a simple\ninteractive language shell. You can invoke various command interactively. It\nwill help you to make sure your scenarios interactively with Appium server.\n\n\n\n\nAppium Ruby Console\n\n\nWebDriverIO with debug mode", 
            "title": "Finding Elements"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/#finding-and-interacting-with-elements", 
            "text": "Appium supports a subset of the WebDriver locator strategies such as:   find by \"class\" (i.e., ui component type)  find by \"xpath\" (i.e., an abstract representation of a path to an element,\nwith certain constraints)   You can see a list of them in  Selector Strategies  Appium additionally supports some of the  Mobile JSON Wire Protocol  locator strategies   -ios predicate string  : a string corresponding to a recursive element search\nusing the  iOS Predicate  (iOS 10.0 and above)  -ios uiautomation  for iOS 9.3 and below    -android uiautomator : a string corresponding to a recursive element\nsearch using the  UiAutomator Api  (Android-only)  -android datamatcher : a string corresponding to an  Espresso DataMatcher json  (Android-only)  accessibility id : a string corresponding to a recursive element search\nusing the Id/Name that the native Accessibility options utilize.   Finally, Appium supports several additional experimental locator strategies:   -image : a string corresponding to a base64-encoded version of an image which should be used by Appium as a template to find a matching screen region, which can then be tapped as if it were an element. For more information on this locator strategy, see the  Finding Image Elements  doc.  -custom : a string which will be sent to an element finding plugin registered via the  customFindModules  capability. For more information on this strategy, check out the  Element Finding Plugin  docs.", 
            "title": "Finding and interacting with elements"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/#issues", 
            "text": "There's a known issue with table cell elements becoming invalidated before\nthere's time to interact with them. We're working on a fix", 
            "title": "Issues"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/#using-appium-desktop-to-locate-elements", 
            "text": "Appium provides you with a neat tool that allows you to find the the elements\nyou're looking for. With  Appium Desktop  you\ncan find any element and its locators by either clicking the element on the screenshot\nimage, or locating it in the source tree.", 
            "title": "Using Appium Desktop To Locate Elements"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/#overview", 
            "text": "Appium Desktop has a simple layout, complete with a source tree,\na screenshot, and record and refresh buttons, and interaction tools.", 
            "title": "Overview"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/#example", 
            "text": "After launching Appium Desktop and starting a session, you can locate any element in the\nsource. In this test, I'm looking for the accessibility id of the \"Compute Sum\" button.  To find the accessibility id of this button, I click the \"Compute Sum\" button in the\nscreenshot. The element is then highlighted in the source tree. In the panel on the right,\nI can see the accessibility id.", 
            "title": "Example"
        }, 
        {
            "location": "/writing-running-appium/finding-elements/#repl", 
            "text": "A  REPL  is a simple\ninteractive language shell. You can invoke various command interactively. It\nwill help you to make sure your scenarios interactively with Appium server.   Appium Ruby Console  WebDriverIO with debug mode", 
            "title": "REPL"
        }, 
        {
            "location": "/writing-running-appium/touch-actions/", 
            "text": "Automating mobile gestures\n\n\nWhile the Selenium WebDriver spec has support for certain kinds of mobile\ninteraction, its parameters are not always easily mappable to the functionality\nthat the underlying device automation (like UIAutomation in the case of iOS)\nprovides. To that end, Appium implements the new TouchAction / MultiAction API\ndefined in the newest version of the spec\n(\nhttps://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1\n).\nNote that this is different from the earlier version of the TouchAction API in\nthe original JSON Wire Protocol.\n\n\nThese APIs allow you to build up arbitrary gestures with multiple actuators.\nPlease see the Appium client docs for your language in order to find examples\nof using this API.\n\n\nNote for W3C actions\n\n\nW3C actions\n is also available in some drivers such as XCUITest, UIA2, Espresso and Windows.\nW3C actions are implemented to the best of the limitations of the operating systems' test frameworks.\ne.g. WDA cannot handle zero wait \nPR\n.\n\n\nAPI doc\n and API docs of each client help to understand how to call them.\n\n\nAn Overview of the TouchAction / MultiAction API\n\n\nTouchAction\n\n\nTouchAction\n objects contain a chain of events.\n\n\nIn all the appium client libraries, touch objects are created and are given a\nchain of events.\n\n\nThe available events from the spec are:\n * press\n * release\n * moveTo\n * tap\n * wait\n * longPress\n * cancel\n * perform\n\n\nHere's an example of creating an action in pseudocode:\n\n\nTouchAction().press(el0).moveTo(el1).release()\n\n\n\n\nThe above simulates a user pressing down on an element, sliding their finger\nto another position, and removing their finger from the screen.\n\n\nAppium performs the events in sequence. You can add a \nwait\n event to control\nthe timing of the gesture.\n\n\nmoveTo\n coordinates are now \nabsolute\n to the current position. For example, dragging from\n100,100 to 200,200 can be achieved by:\n\n\n.press(100,100) // Start at 100,100\n.moveTo(200,200) // Passing absolute values of 200,200 ending up at 200,200\n\n\n\n\n\nThe appium client libraries have different ways of implementing this, for example:\nyou can pass in coordinates or an element to a \nmoveTo\n event. Passing both\ncoordinates \nand\n an element will treat the coordinates as relative to the\nelement's position, rather than absolute.\n\n\nCalling the \nperform\n event sends the entire sequence of events to appium,\nand the touch gesture is run on your device.\n\n\nMultiTouch\n\n\nMultiTouch\n objects are collections of TouchActions.\n\n\nMultiTouch gestures only have two methods, \nadd\n, and \nperform\n.\n\n\nadd\n is used to add another TouchAction to this MultiTouch.\n\n\nWhen \nperform\n is called, all the TouchActions which were added to the\nMultiTouch are sent to appium and performed as if they happened at the\nsame time. Appium first performs the first event of all TouchActions together,\nthen the second, etc.\n\n\nPseudocode example of tapping with two fingers:\n\n\naction0 = TouchAction().tap(el)\naction1 = TouchAction().tap(el)\nMultiAction().add(action0).add(action1).perform()\n\n\n\n\nBugs and Workarounds\n\n\nAn unfortunate bug exists in the iOS 7.0 - 8.x Simulators where ScrollViews,\nCollectionViews, and TableViews don't recognize gestures initiated by\nUIAutomation (which Appium uses under the hood for iOS). To work around this,\nwe have provided access to a different function, \nscroll\n, which in many cases\nallows you to do what you wanted to do with one of these views, namely, scroll\nit!\n\n\nScrolling\n\n\nTo allow access to this special feature, we override the \nexecute\n or\n\nexecuteScript\n methods in the driver, and prefix the command with \nmobile:\n.\nSee examples below:\n\n\nTo scroll, pass direction in which you intend to scroll as parameter.\n\n\n// javascript\ndriver.execute('mobile: scroll', {direction: 'down'});\n\n\n\n\n// java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\nscrollObject.put(\ndirection\n, \ndown\n);\njs.executeScript(\nmobile: scroll\n, scrollObject);\n\n\n\n\n# ruby\nexecute_script 'mobile: scroll', direction: 'down'\n\n\n\n\n# python\ndriver.execute_script(\nmobile: scroll\n, {\ndirection\n: \ndown\n})\n\n\n\n\n// c#\nDictionary\nstring, string\n scrollObject = new Dictionary\nstring, string\n();\nscrollObject.Add(\ndirection\n, \ndown\n);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: scroll\n, scrollObject));\n\n\n\n\nSample to scroll using direction and element.\n\n\n// javascript\ndriver.execute('mobile: scroll', {direction: 'down', element: element.value.ELEMENT});\n\n\n\n\n// java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\nscrollObject.put(\ndirection\n, \ndown\n);\nscrollObject.put(\nelement\n, ((RemoteWebElement) element).getId());\njs.executeScript(\nmobile: scroll\n, scrollObject);\n\n\n\n\n# ruby\nexecute_script 'mobile: scroll', direction: 'down', element: element.ref\n\n\n\n\n# python\ndriver.execute_script(\nmobile: scroll\n, {\ndirection\n: \ndown\n, element: element.getAttribute(\nid\n)})\n\n\n\n\n// c#\nDictionary\nstring, string\n scrollObject = new Dictionary\nstring, string\n();\nscrollObject.Add(\ndirection\n, \ndown\n);\nscrollObject.Add(\nelement\n, \nelement_id\n);\n((IJavaScriptExecutor)driver).ExecuteScript(\nmobile: scroll\n, scrollObject));\n\n\n\n\nSwiping\n\n\nThis is an XCUITest driver specific method that is similar to scrolling (for reference, see\nhttps://developer.apple.com/reference/xctest/xcuielement).\n\n\nThis method has the same API as \nScrolling\n, just replace \"mobile: scroll\"\nwith \"mobile: swipe\"\n\n\nAutomating Sliders\n\n\niOS\n\n\n\n\nJava\n\n\n\n\n// java\n// slider values can be string representations of numbers between 0 and 1\n// e.g., \n0.1\n is 10%, \n1.0\n is 100%\nWebElement slider =  driver.findElement(By.xpath(\n//window[1]/slider[1]\n));\nslider.sendKeys(\n0.1\n);\n\n\n\n\nAndroid\n\n\nThe best way to interact with the slider on Android is with TouchActions.", 
            "title": "Touch Actions"
        }, 
        {
            "location": "/writing-running-appium/touch-actions/#automating-mobile-gestures", 
            "text": "While the Selenium WebDriver spec has support for certain kinds of mobile\ninteraction, its parameters are not always easily mappable to the functionality\nthat the underlying device automation (like UIAutomation in the case of iOS)\nprovides. To that end, Appium implements the new TouchAction / MultiAction API\ndefined in the newest version of the spec\n( https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1 ).\nNote that this is different from the earlier version of the TouchAction API in\nthe original JSON Wire Protocol.  These APIs allow you to build up arbitrary gestures with multiple actuators.\nPlease see the Appium client docs for your language in order to find examples\nof using this API.  Note for W3C actions  W3C actions  is also available in some drivers such as XCUITest, UIA2, Espresso and Windows.\nW3C actions are implemented to the best of the limitations of the operating systems' test frameworks.\ne.g. WDA cannot handle zero wait  PR .  API doc  and API docs of each client help to understand how to call them.", 
            "title": "Automating mobile gestures"
        }, 
        {
            "location": "/writing-running-appium/touch-actions/#an-overview-of-the-touchaction-multiaction-api", 
            "text": "", 
            "title": "An Overview of the TouchAction / MultiAction API"
        }, 
        {
            "location": "/writing-running-appium/touch-actions/#touchaction", 
            "text": "TouchAction  objects contain a chain of events.  In all the appium client libraries, touch objects are created and are given a\nchain of events.  The available events from the spec are:\n * press\n * release\n * moveTo\n * tap\n * wait\n * longPress\n * cancel\n * perform  Here's an example of creating an action in pseudocode:  TouchAction().press(el0).moveTo(el1).release()  The above simulates a user pressing down on an element, sliding their finger\nto another position, and removing their finger from the screen.  Appium performs the events in sequence. You can add a  wait  event to control\nthe timing of the gesture.  moveTo  coordinates are now  absolute  to the current position. For example, dragging from\n100,100 to 200,200 can be achieved by:  .press(100,100) // Start at 100,100\n.moveTo(200,200) // Passing absolute values of 200,200 ending up at 200,200  The appium client libraries have different ways of implementing this, for example:\nyou can pass in coordinates or an element to a  moveTo  event. Passing both\ncoordinates  and  an element will treat the coordinates as relative to the\nelement's position, rather than absolute.  Calling the  perform  event sends the entire sequence of events to appium,\nand the touch gesture is run on your device.", 
            "title": "TouchAction"
        }, 
        {
            "location": "/writing-running-appium/touch-actions/#multitouch", 
            "text": "MultiTouch  objects are collections of TouchActions.  MultiTouch gestures only have two methods,  add , and  perform .  add  is used to add another TouchAction to this MultiTouch.  When  perform  is called, all the TouchActions which were added to the\nMultiTouch are sent to appium and performed as if they happened at the\nsame time. Appium first performs the first event of all TouchActions together,\nthen the second, etc.  Pseudocode example of tapping with two fingers:  action0 = TouchAction().tap(el)\naction1 = TouchAction().tap(el)\nMultiAction().add(action0).add(action1).perform()", 
            "title": "MultiTouch"
        }, 
        {
            "location": "/writing-running-appium/touch-actions/#bugs-and-workarounds", 
            "text": "An unfortunate bug exists in the iOS 7.0 - 8.x Simulators where ScrollViews,\nCollectionViews, and TableViews don't recognize gestures initiated by\nUIAutomation (which Appium uses under the hood for iOS). To work around this,\nwe have provided access to a different function,  scroll , which in many cases\nallows you to do what you wanted to do with one of these views, namely, scroll\nit!  Scrolling  To allow access to this special feature, we override the  execute  or executeScript  methods in the driver, and prefix the command with  mobile: .\nSee examples below:  To scroll, pass direction in which you intend to scroll as parameter.  // javascript\ndriver.execute('mobile: scroll', {direction: 'down'});  // java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap String, String  scrollObject = new HashMap String, String ();\nscrollObject.put( direction ,  down );\njs.executeScript( mobile: scroll , scrollObject);  # ruby\nexecute_script 'mobile: scroll', direction: 'down'  # python\ndriver.execute_script( mobile: scroll , { direction :  down })  // c#\nDictionary string, string  scrollObject = new Dictionary string, string ();\nscrollObject.Add( direction ,  down );\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject));  Sample to scroll using direction and element.  // javascript\ndriver.execute('mobile: scroll', {direction: 'down', element: element.value.ELEMENT});  // java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nHashMap String, String  scrollObject = new HashMap String, String ();\nscrollObject.put( direction ,  down );\nscrollObject.put( element , ((RemoteWebElement) element).getId());\njs.executeScript( mobile: scroll , scrollObject);  # ruby\nexecute_script 'mobile: scroll', direction: 'down', element: element.ref  # python\ndriver.execute_script( mobile: scroll , { direction :  down , element: element.getAttribute( id )})  // c#\nDictionary string, string  scrollObject = new Dictionary string, string ();\nscrollObject.Add( direction ,  down );\nscrollObject.Add( element ,  element_id );\n((IJavaScriptExecutor)driver).ExecuteScript( mobile: scroll , scrollObject));  Swiping  This is an XCUITest driver specific method that is similar to scrolling (for reference, see\nhttps://developer.apple.com/reference/xctest/xcuielement).  This method has the same API as  Scrolling , just replace \"mobile: scroll\"\nwith \"mobile: swipe\"  Automating Sliders  iOS   Java   // java\n// slider values can be string representations of numbers between 0 and 1\n// e.g.,  0.1  is 10%,  1.0  is 100%\nWebElement slider =  driver.findElement(By.xpath( //window[1]/slider[1] ));\nslider.sendKeys( 0.1 );  Android  The best way to interact with the slider on Android is with TouchActions.", 
            "title": "Bugs and Workarounds"
        }, 
        {
            "location": "/writing-running-appium/server-args/", 
            "text": "Appium server arguments and environment variables\n\n\nSince Appium 1.5, many server arguments have been deprecated in favor of the \n--default-capabilities flag\n.\n\n\nUsage: \nnode . [flags]\n\n\nServer flags\n\n\nAll flags are optional, but some are required in conjunction with certain others.\n\n\n\n\n\n\n\n\n\n\nFlag\n\n\nDefault\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n--shell\n\n\nnull\n\n\nEnter REPL mode\n\n\n\n\n\n\n\n\n--allow-cors\n\n\nfalse\n\n\nTurn on CORS compatibility mode, which will allow connections to the Appium server from within websites hosted on any domain. Be careful when enabling this feature, since there is a potential security risk if you visit a website that uses a cross-domain request to initiate or introspect sessions on your running Appium server.\n\n\n\n\n\n\n\n\n--ipa\n\n\nnull\n\n\n(IOS-only) abs path to compiled .ipa file\n\n\n--ipa /abs/path/to/my.ipa\n\n\n\n\n\n\n-a\n, \n--address\n\n\n0.0.0.0\n\n\nIP Address to listen on\n\n\n--address 0.0.0.0\n\n\n\n\n\n\n-p\n, \n--port\n\n\n4723\n\n\nport to listen on\n\n\n--port 4723\n\n\n\n\n\n\n-pa\n, \n--base-path\n\n\n/wd/hub\n\n\nInitial path segment where the Appium/WebDriver API will be hosted. Every endpoint will be behind this segment.\n\n\n--base-path /my/path/prefix\n\n\n\n\n\n\n-ca\n, \n--callback-address\n\n\nnull\n\n\ncallback IP Address (default: same as --address)\n\n\n--callback-address 127.0.0.1\n\n\n\n\n\n\n-cp\n, \n--callback-port\n\n\nnull\n\n\ncallback port (default: same as port)\n\n\n--callback-port 4723\n\n\n\n\n\n\n-bp\n, \n--bootstrap-port\n\n\n4724\n\n\n(Android-only) port to use on device to talk to Appium\n\n\n--bootstrap-port 4724\n\n\n\n\n\n\n-r\n, \n--backend-retries\n\n\n3\n\n\n(iOS-only) How many times to retry launching Instruments before saying it crashed or timed out\n\n\n--backend-retries 3\n\n\n\n\n\n\n--session-override\n\n\nfalse\n\n\nEnables session override (clobbering)\n\n\n\n\n\n\n\n\n-l\n, \n--pre-launch\n\n\nfalse\n\n\nPre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity)\n\n\n\n\n\n\n\n\n-g\n, \n--log\n\n\nnull\n\n\nAlso send log output to this file\n\n\n--log /path/to/appium.log\n\n\n\n\n\n\n--log-level\n\n\ndebug\n\n\nSet the server log level for console and logfile (specified as \nconsole-level:logfile-level\n, with both being the same if only one value is supplied). Possible values are \ndebug\n, \ninfo\n, \nwarn\n, \nerror\n, which are progressively less verbose.\n\n\n--log-level error:debug\n\n\n\n\n\n\n--log-timestamp\n\n\nfalse\n\n\nShow timestamps in console output\n\n\n\n\n\n\n\n\n--local-timezone\n\n\nfalse\n\n\nUse local timezone for timestamps\n\n\n\n\n\n\n\n\n--log-no-colors\n\n\nfalse\n\n\nDo not use colors in console output\n\n\n\n\n\n\n\n\n-G\n, \n--webhook\n\n\nnull\n\n\nAlso send log output to this HTTP listener\n\n\n--webhook localhost:9876\n\n\n\n\n\n\n--safari\n\n\nfalse\n\n\n(IOS-Only) Use the safari app\n\n\n\n\n\n\n\n\n--default-device\n, \n-dd\n\n\nfalse\n\n\n(IOS-Simulator-only) use the default simulator that instruments launches on its own\n\n\n\n\n\n\n\n\n--force-iphone\n\n\nfalse\n\n\n(IOS-only) Use the iPhone Simulator no matter what the app wants\n\n\n\n\n\n\n\n\n--force-ipad\n\n\nfalse\n\n\n(IOS-only) Use the iPad Simulator no matter what the app wants\n\n\n\n\n\n\n\n\n--tracetemplate\n\n\nnull\n\n\n(IOS-only) .tracetemplate file to use with Instruments\n\n\n--tracetemplate /Users/me/Automation.tracetemplate\n\n\n\n\n\n\n--instruments\n\n\nnull\n\n\n(IOS-only) path to instruments binary\n\n\n--instruments /path/to/instruments\n\n\n\n\n\n\n--nodeconfig\n\n\nnull\n\n\nConfiguration JSON file to register appium with selenium grid\n\n\n--nodeconfig /abs/path/to/nodeconfig.json\n\n\n\n\n\n\n-ra\n, \n--robot-address\n\n\n0.0.0.0\n\n\nIP Address of robot\n\n\n--robot-address 0.0.0.0\n\n\n\n\n\n\n-rp\n, \n--robot-port\n\n\n-1\n\n\nport for robot\n\n\n--robot-port 4242\n\n\n\n\n\n\n--chromedriver-port\n\n\n9515\n\n\nPort upon which ChromeDriver will run\n\n\n--chromedriver-port 9515\n\n\n\n\n\n\n--chromedriver-executable\n\n\nnull\n\n\nChromeDriver executable full path\n\n\n\n\n\n\n\n\n--show-config\n\n\nfalse\n\n\nShow info about the appium server configuration and exit\n\n\n\n\n\n\n\n\n--no-perms-check\n\n\nfalse\n\n\nBypass Appium's checks to ensure we can read/write necessary files\n\n\n\n\n\n\n\n\n--strict-caps\n\n\nfalse\n\n\nCause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\n\n\n\n\n\n\n\n\n--isolate-sim-device\n\n\nfalse\n\n\nXcode 6 has a bug on some platforms where a certain simulator can only be launched without error if all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible for using simctl or xcode to manage the categories of devices used with Appium.\n\n\n\n\n\n\n\n\n--tmp\n\n\nnull\n\n\nAbsolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\\Windows\\Temp\n\n\n\n\n\n\n\n\n--trace-dir\n\n\nnull\n\n\nAbsolute path to directory Appium use to save ios instruments traces, defaults to \n/appium-instruments\n\n\n\n\n\n\n\n\n--debug-log-spacing\n\n\nfalse\n\n\nAdd exaggerated spacing in logs to help with visual inspection\n\n\n\n\n\n\n\n\n--suppress-adb-kill-server\n\n\nfalse\n\n\n(Android-only) If set, prevents Appium from killing the adb server instance\n\n\n\n\n\n\n\n\n--async-trace\n\n\nfalse\n\n\nAdd long stack traces to log entries. Recommended for debugging only.\n\n\n\n\n\n\n\n\n--webkit-debug-proxy-port\n\n\n27753\n\n\n(IOS-only) Local port used for communication with ios-webkit-debug-proxy\n\n\n--webkit-debug-proxy-port 27753\n\n\n\n\n\n\n-dc\n, \n--default-capabilities\n\n\n{}\n\n\nSet the default desired capabilities, which will be set on each session unless overridden by received capabilities.\n\n\n--default-capabilities [ '{\"app\": \"myapp.app\", \"deviceName\": \"iPhone Simulator\"}' | /path/to/caps.json ]\n\n\n\n\n\n\n--reboot\n\n\nfalse\n\n\n- (Android-only) reboot emulator after each session and kill it at the end\n\n\n\n\n\n\n\n\n--command-timeout\n\n\n60\n\n\n[DEPRECATED] No effect. This used to be the default command timeout for the server to use for all sessions (in seconds and should be less than 2147483). Use newCommandTimeout cap instead\n\n\n\n\n\n\n\n\n-k\n, \n--keep-artifacts\n\n\nfalse\n\n\n[DEPRECATED] - no effect, trace is now in tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag.\n\n\n\n\n\n\n\n\n--platform-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS\n\n\n--platform-name iOS\n\n\n\n\n\n\n--platform-version\n\n\nnull\n\n\n[DEPRECATED] - Version of the mobile platform\n\n\n--platform-version 7.1\n\n\n\n\n\n\n--automation-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the automation tool: Appium, XCUITest, etc.\n\n\n--automation-name Appium\n\n\n\n\n\n\n--device-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the mobile device to use\n\n\n--device-name iPhone Retina (4-inch), Android Emulator\n\n\n\n\n\n\n--browser-name\n\n\nnull\n\n\n[DEPRECATED] - Name of the mobile browser: Safari or Chrome\n\n\n--browser-name Safari\n\n\n\n\n\n\n--app\n\n\nnull\n\n\n[DEPRECATED] - IOS: abs path to simulator-compiled .app file or the bundle_id of the desired target on device; Android: abs path to .apk file\n\n\n--app /abs/path/to/my.app\n\n\n\n\n\n\n-lt\n, \n--launch-timeout\n\n\n90000\n\n\n[DEPRECATED] - (iOS-only) how long in ms to wait for Instruments to launch\n\n\n\n\n\n\n\n\n--language\n\n\nnull\n\n\n[DEPRECATED] - Language for the iOS simulator / Android Emulator\n\n\n--language en\n\n\n\n\n\n\n--locale\n\n\nnull\n\n\n[DEPRECATED] - Locale for the iOS simulator / Android Emulator\n\n\n--locale en_US\n\n\n\n\n\n\n-U\n, \n--udid\n\n\nnull\n\n\n[DEPRECATED] - Unique device identifier of the connected physical device\n\n\n--udid 1adsf-sdfas-asdf-123sdf\n\n\n\n\n\n\n--orientation\n\n\nnull\n\n\n[DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation\n\n\n--orientation LANDSCAPE\n\n\n\n\n\n\n--no-reset\n\n\nfalse\n\n\n[DEPRECATED] - Do not reset app state between sessions (IOS: do not delete app plist files; Android: do not uninstall app before new session)\n\n\n\n\n\n\n\n\n--full-reset\n\n\nfalse\n\n\n[DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete.\n\n\n\n\n\n\n\n\n--app-pkg\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example.android.myApp)\n\n\n--app-pkg com.example.android.myApp\n\n\n\n\n\n\n--app-activity\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Activity name for the Android activity you want to launch from your package (e.g., MainActivity)\n\n\n--app-activity MainActivity\n\n\n\n\n\n\n--app-wait-package\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) Package name for the Android activity you want to wait for (e.g., com.example.android.myApp)\n\n\n--app-wait-package com.example.android.myApp\n\n\n\n\n\n\n--app-wait-activity\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) Activity name for the Android activity you want to wait for (e.g., SplashActivity)\n\n\n--app-wait-activity SplashActivity\n\n\n\n\n\n\n--device-ready-timeout\n\n\n5\n\n\n[DEPRECATED] - (Android-only) Timeout in seconds while waiting for device to become ready\n\n\n--device-ready-timeout 5\n\n\n\n\n\n\n--android-coverage\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w\n\n\n--android-coverage com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation\n\n\n\n\n\n\n--avd\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Name of the avd to launch\n\n\n--avd @default\n\n\n\n\n\n\n--avd-args\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd\n\n\n--avd-args -no-snapshot-load\n\n\n\n\n\n\n--use-keystore\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) When set the keystore will be used to sign apks.\n\n\n\n\n\n\n\n\n--keystore-path\n\n\nuser\n/.android/debug.keystore\n\n\n[DEPRECATED] - (Android-only) Path to keystore\n\n\n\n\n\n\n\n\n--keystore-password\n\n\nandroid\n\n\n[DEPRECATED] - (Android-only) Password to keystore\n\n\n\n\n\n\n\n\n--key-alias\n\n\nandroiddebugkey\n\n\n[DEPRECATED] - (Android-only) Key alias\n\n\n\n\n\n\n\n\n--key-password\n\n\nandroid\n\n\n[DEPRECATED] - (Android-only) Key password\n\n\n\n\n\n\n\n\n--intent-action\n\n\nandroid.intent.action.MAIN\n\n\n[DEPRECATED] - (Android-only) Intent action which will be used to start activity\n\n\n--intent-action android.intent.action.MAIN\n\n\n\n\n\n\n--intent-category\n\n\nandroid.intent.category.LAUNCHER\n\n\n[DEPRECATED] - (Android-only) Intent category which will be used to start activity\n\n\n--intent-category android.intent.category.APP_CONTACTS\n\n\n\n\n\n\n--intent-flags\n\n\n0x10200000\n\n\n[DEPRECATED] - (Android-only) Flags that will be used to start activity\n\n\n--intent-flags 0x10200000\n\n\n\n\n\n\n--intent-args\n\n\nnull\n\n\n[DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity\n\n\n--intent-args 0x10200000\n\n\n\n\n\n\n--dont-stop-app-on-reset\n\n\nfalse\n\n\n[DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart\n\n\n\n\n\n\n\n\n--calendar-format\n\n\nnull\n\n\n[DEPRECATED] - (IOS-only) calendar format for the iOS simulator\n\n\n--calendar-format gregorian\n\n\n\n\n\n\n--native-instruments-lib\n\n\nfalse\n\n\n[DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this in appium. If you do not want it patched, pass in this flag.\n\n\n\n\n\n\n\n\n--keep-keychains\n\n\nfalse\n\n\n[DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions\n\n\n\n\n\n\n\n\n--localizable-strings-dir\n\n\nen.lproj\n\n\n[DEPRECATED] - (IOS-only) the relative path of the dir where Localizable.strings file resides\n\n\n--localizable-strings-dir en.lproj\n\n\n\n\n\n\n--show-ios-log\n\n\nfalse\n\n\n[DEPRECATED] - (IOS-only) if set, the iOS system log will be written to the console\n\n\n\n\n\n\n\n\n--relaxed-security\n\n\nfalse\n\n\nDisable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it is not the case if a client could potentially break out of the session sandbox. Can override enabling of specific features with --deny-insecure. See also the \nsecurity doc\n\n\n\n\n\n\n\n\n--allow-insecure\n\n\n[]\n\n\nAllow a list of features which are considered insecure and must be turned on explicitly by system administrators. Feature names are documented by the relevant server/driver. Should be a comma-separated list, or a path to a filename containing one feature name per line. Features listed in --deny-insecure will override anything listed here. Does not make sense to use in conjunction with --relaxed-security. See also the \nsecurity doc\n\n\n--allow-insecure=foo,bar\n\n\n\n\n\n\n--deny-insecure\n\n\n[]\n\n\nSpecify a list of features which will never be allowed to run, even if --relaxed-security is turned on, and even if feature names are listed with --allow-insecure. Should be a comma-separated list, or a path to a filename containing one feature name per line. See also the \nsecurity doc\n\n\n--deny-insecure=foo,bar\n\n\n\n\n\n\n--log-filters\n\n\nnull\n\n\nSpecify a full path to a JSON file containing one or more log filtering rules. This feature is useful for cases when it is necessary to obfuscate sensitive information, which may be present in server log records, like passwords or access tokens. The format of each rule is described in https://github.com/appium/appium-support/blob/master/lib/log-internal.js. An exception will be thrown on server startup if any of the rules has issues.\n\n\n--log-filters=/home/config.json\n\n\n\n\n\n\n\n\nEnvironment variables\n\n\n\n\n\n\n\n\nFlag\n\n\nDefault\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nAPPIUM_PREFER_SYSTEM_UNZIP\n\n\n\n\nTell Appium to always prefer the built-in unzip implementation instead of trying to use the unzip executable bundled with the operationg system, whcih is usually more performance. Setting this environment variable to \n0\n or \nfalse\n could help to avoid issues similar to \nappium#16050\n. This flag is available since Appium 1.22.1.\n\n\n0\n \nfalse", 
            "title": "CLI Arguments"
        }, 
        {
            "location": "/writing-running-appium/server-args/#appium-server-arguments-and-environment-variables", 
            "text": "Since Appium 1.5, many server arguments have been deprecated in favor of the  --default-capabilities flag .  Usage:  node . [flags]", 
            "title": "Appium server arguments and environment variables"
        }, 
        {
            "location": "/writing-running-appium/server-args/#server-flags", 
            "text": "All flags are optional, but some are required in conjunction with certain others.      Flag  Default  Description  Example      --shell  null  Enter REPL mode     --allow-cors  false  Turn on CORS compatibility mode, which will allow connections to the Appium server from within websites hosted on any domain. Be careful when enabling this feature, since there is a potential security risk if you visit a website that uses a cross-domain request to initiate or introspect sessions on your running Appium server.     --ipa  null  (IOS-only) abs path to compiled .ipa file  --ipa /abs/path/to/my.ipa    -a ,  --address  0.0.0.0  IP Address to listen on  --address 0.0.0.0    -p ,  --port  4723  port to listen on  --port 4723    -pa ,  --base-path  /wd/hub  Initial path segment where the Appium/WebDriver API will be hosted. Every endpoint will be behind this segment.  --base-path /my/path/prefix    -ca ,  --callback-address  null  callback IP Address (default: same as --address)  --callback-address 127.0.0.1    -cp ,  --callback-port  null  callback port (default: same as port)  --callback-port 4723    -bp ,  --bootstrap-port  4724  (Android-only) port to use on device to talk to Appium  --bootstrap-port 4724    -r ,  --backend-retries  3  (iOS-only) How many times to retry launching Instruments before saying it crashed or timed out  --backend-retries 3    --session-override  false  Enables session override (clobbering)     -l ,  --pre-launch  false  Pre-launch the application before allowing the first session (Requires --app and, for Android, --app-pkg and --app-activity)     -g ,  --log  null  Also send log output to this file  --log /path/to/appium.log    --log-level  debug  Set the server log level for console and logfile (specified as  console-level:logfile-level , with both being the same if only one value is supplied). Possible values are  debug ,  info ,  warn ,  error , which are progressively less verbose.  --log-level error:debug    --log-timestamp  false  Show timestamps in console output     --local-timezone  false  Use local timezone for timestamps     --log-no-colors  false  Do not use colors in console output     -G ,  --webhook  null  Also send log output to this HTTP listener  --webhook localhost:9876    --safari  false  (IOS-Only) Use the safari app     --default-device ,  -dd  false  (IOS-Simulator-only) use the default simulator that instruments launches on its own     --force-iphone  false  (IOS-only) Use the iPhone Simulator no matter what the app wants     --force-ipad  false  (IOS-only) Use the iPad Simulator no matter what the app wants     --tracetemplate  null  (IOS-only) .tracetemplate file to use with Instruments  --tracetemplate /Users/me/Automation.tracetemplate    --instruments  null  (IOS-only) path to instruments binary  --instruments /path/to/instruments    --nodeconfig  null  Configuration JSON file to register appium with selenium grid  --nodeconfig /abs/path/to/nodeconfig.json    -ra ,  --robot-address  0.0.0.0  IP Address of robot  --robot-address 0.0.0.0    -rp ,  --robot-port  -1  port for robot  --robot-port 4242    --chromedriver-port  9515  Port upon which ChromeDriver will run  --chromedriver-port 9515    --chromedriver-executable  null  ChromeDriver executable full path     --show-config  false  Show info about the appium server configuration and exit     --no-perms-check  false  Bypass Appium's checks to ensure we can read/write necessary files     --strict-caps  false  Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device     --isolate-sim-device  false  Xcode 6 has a bug on some platforms where a certain simulator can only be launched without error if all other simulator devices are first deleted. This option causes Appium to delete all devices other than the one being used by Appium. Note that this is a permanent deletion, and you are responsible for using simctl or xcode to manage the categories of devices used with Appium.     --tmp  null  Absolute path to directory Appium can use to manage temporary files, like built-in iOS apps it needs to move around. On *nix/Mac defaults to /tmp, on Windows defaults to C:\\Windows\\Temp     --trace-dir  null  Absolute path to directory Appium use to save ios instruments traces, defaults to  /appium-instruments     --debug-log-spacing  false  Add exaggerated spacing in logs to help with visual inspection     --suppress-adb-kill-server  false  (Android-only) If set, prevents Appium from killing the adb server instance     --async-trace  false  Add long stack traces to log entries. Recommended for debugging only.     --webkit-debug-proxy-port  27753  (IOS-only) Local port used for communication with ios-webkit-debug-proxy  --webkit-debug-proxy-port 27753    -dc ,  --default-capabilities  {}  Set the default desired capabilities, which will be set on each session unless overridden by received capabilities.  --default-capabilities [ '{\"app\": \"myapp.app\", \"deviceName\": \"iPhone Simulator\"}' | /path/to/caps.json ]    --reboot  false  - (Android-only) reboot emulator after each session and kill it at the end     --command-timeout  60  [DEPRECATED] No effect. This used to be the default command timeout for the server to use for all sessions (in seconds and should be less than 2147483). Use newCommandTimeout cap instead     -k ,  --keep-artifacts  false  [DEPRECATED] - no effect, trace is now in tmp dir by default and is cleared before each run. Please also refer to the --trace-dir flag.     --platform-name  null  [DEPRECATED] - Name of the mobile platform: iOS, Android, or FirefoxOS  --platform-name iOS    --platform-version  null  [DEPRECATED] - Version of the mobile platform  --platform-version 7.1    --automation-name  null  [DEPRECATED] - Name of the automation tool: Appium, XCUITest, etc.  --automation-name Appium    --device-name  null  [DEPRECATED] - Name of the mobile device to use  --device-name iPhone Retina (4-inch), Android Emulator    --browser-name  null  [DEPRECATED] - Name of the mobile browser: Safari or Chrome  --browser-name Safari    --app  null  [DEPRECATED] - IOS: abs path to simulator-compiled .app file or the bundle_id of the desired target on device; Android: abs path to .apk file  --app /abs/path/to/my.app    -lt ,  --launch-timeout  90000  [DEPRECATED] - (iOS-only) how long in ms to wait for Instruments to launch     --language  null  [DEPRECATED] - Language for the iOS simulator / Android Emulator  --language en    --locale  null  [DEPRECATED] - Locale for the iOS simulator / Android Emulator  --locale en_US    -U ,  --udid  null  [DEPRECATED] - Unique device identifier of the connected physical device  --udid 1adsf-sdfas-asdf-123sdf    --orientation  null  [DEPRECATED] - (IOS-only) use LANDSCAPE or PORTRAIT to initialize all requests to this orientation  --orientation LANDSCAPE    --no-reset  false  [DEPRECATED] - Do not reset app state between sessions (IOS: do not delete app plist files; Android: do not uninstall app before new session)     --full-reset  false  [DEPRECATED] - (iOS) Delete the entire simulator folder. (Android) Reset app state by uninstalling app instead of clearing app data. On Android, this will also remove the app after the session is complete.     --app-pkg  null  [DEPRECATED] - (Android-only) Java package of the Android app you want to run (e.g., com.example.android.myApp)  --app-pkg com.example.android.myApp    --app-activity  null  [DEPRECATED] - (Android-only) Activity name for the Android activity you want to launch from your package (e.g., MainActivity)  --app-activity MainActivity    --app-wait-package  false  [DEPRECATED] - (Android-only) Package name for the Android activity you want to wait for (e.g., com.example.android.myApp)  --app-wait-package com.example.android.myApp    --app-wait-activity  false  [DEPRECATED] - (Android-only) Activity name for the Android activity you want to wait for (e.g., SplashActivity)  --app-wait-activity SplashActivity    --device-ready-timeout  5  [DEPRECATED] - (Android-only) Timeout in seconds while waiting for device to become ready  --device-ready-timeout 5    --android-coverage  false  [DEPRECATED] - (Android-only) Fully qualified instrumentation class. Passed to -w in adb shell am instrument -e coverage true -w  --android-coverage com.my.Pkg/com.my.Pkg.instrumentation.MyInstrumentation    --avd  null  [DEPRECATED] - (Android-only) Name of the avd to launch  --avd @default    --avd-args  null  [DEPRECATED] - (Android-only) Additional emulator arguments to launch the avd  --avd-args -no-snapshot-load    --use-keystore  false  [DEPRECATED] - (Android-only) When set the keystore will be used to sign apks.     --keystore-path  user /.android/debug.keystore  [DEPRECATED] - (Android-only) Path to keystore     --keystore-password  android  [DEPRECATED] - (Android-only) Password to keystore     --key-alias  androiddebugkey  [DEPRECATED] - (Android-only) Key alias     --key-password  android  [DEPRECATED] - (Android-only) Key password     --intent-action  android.intent.action.MAIN  [DEPRECATED] - (Android-only) Intent action which will be used to start activity  --intent-action android.intent.action.MAIN    --intent-category  android.intent.category.LAUNCHER  [DEPRECATED] - (Android-only) Intent category which will be used to start activity  --intent-category android.intent.category.APP_CONTACTS    --intent-flags  0x10200000  [DEPRECATED] - (Android-only) Flags that will be used to start activity  --intent-flags 0x10200000    --intent-args  null  [DEPRECATED] - (Android-only) Additional intent arguments that will be used to start activity  --intent-args 0x10200000    --dont-stop-app-on-reset  false  [DEPRECATED] - (Android-only) When included, refrains from stopping the app before restart     --calendar-format  null  [DEPRECATED] - (IOS-only) calendar format for the iOS simulator  --calendar-format gregorian    --native-instruments-lib  false  [DEPRECATED] - (IOS-only) IOS has a weird built-in unavoidable delay. We patch this in appium. If you do not want it patched, pass in this flag.     --keep-keychains  false  [DEPRECATED] - (iOS-only) Whether to keep keychains (Library/Keychains) when reset app between sessions     --localizable-strings-dir  en.lproj  [DEPRECATED] - (IOS-only) the relative path of the dir where Localizable.strings file resides  --localizable-strings-dir en.lproj    --show-ios-log  false  [DEPRECATED] - (IOS-only) if set, the iOS system log will be written to the console     --relaxed-security  false  Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it is not the case if a client could potentially break out of the session sandbox. Can override enabling of specific features with --deny-insecure. See also the  security doc     --allow-insecure  []  Allow a list of features which are considered insecure and must be turned on explicitly by system administrators. Feature names are documented by the relevant server/driver. Should be a comma-separated list, or a path to a filename containing one feature name per line. Features listed in --deny-insecure will override anything listed here. Does not make sense to use in conjunction with --relaxed-security. See also the  security doc  --allow-insecure=foo,bar    --deny-insecure  []  Specify a list of features which will never be allowed to run, even if --relaxed-security is turned on, and even if feature names are listed with --allow-insecure. Should be a comma-separated list, or a path to a filename containing one feature name per line. See also the  security doc  --deny-insecure=foo,bar    --log-filters  null  Specify a full path to a JSON file containing one or more log filtering rules. This feature is useful for cases when it is necessary to obfuscate sensitive information, which may be present in server log records, like passwords or access tokens. The format of each rule is described in https://github.com/appium/appium-support/blob/master/lib/log-internal.js. An exception will be thrown on server startup if any of the rules has issues.  --log-filters=/home/config.json", 
            "title": "Server flags"
        }, 
        {
            "location": "/writing-running-appium/server-args/#environment-variables", 
            "text": "Flag  Default  Description  Example      APPIUM_PREFER_SYSTEM_UNZIP   Tell Appium to always prefer the built-in unzip implementation instead of trying to use the unzip executable bundled with the operationg system, whcih is usually more performance. Setting this environment variable to  0  or  false  could help to avoid issues similar to  appium#16050 . This flag is available since Appium 1.22.1.  0   false", 
            "title": "Environment variables"
        }, 
        {
            "location": "/writing-running-appium/security/", 
            "text": "Security\n\n\nThe Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, if you're running your own Appium server locally, and not sharing it with anyone else, and don't expose Appium's port to the wider internet, you should have nothing to worry about, and can safely enable all Appium's features.\n\n\nBut because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to opt-in to these features explicitly.\n\n\nFor security reasons, Appium client sessions can \nnot\n request feature enablement via capabilities. This is the responsibility of the one who launches the Appium server.\n\n\nSecurity Server Args\n\n\nThe \nserver args\n doc outlines three relevant arguments which may be passed to Appium when starting it from the command line:\n\n\n\n\n--relaxed-security\n: Setting this flag turns on \nall\n insecure features (unless blocked by \n--deny-insecure\n; see below)\n\n\n--allow-insecure\n: Setting this flag to a comma-separated list of feature names or a path to a file containing a feature list (each name on a separate line) will allow \nonly\n the features listed. For example, \n--allow-insecure=adb_shell\n will cause \nonly\n the ADB shell execution feature to be enabled. This is true \nunless\n \n--relaxed-security\n is also used, in which case all features will still be enabled. It makes no sense to combine this flag with \n--relaxed-security\n.\n\n\n--deny-insecure\n: This flag can likewise be set to a comma-separated list of feature names, or a path to a feature file. Any features listed here will be \ndisabled\n, regardless of whether \n--relaxed-security\n is set and regardless of whether the names are also listed with \n--allow-insecure\n.\n\n\n\n\nInsecure Features\n\n\nEach Appium driver is responsible for its own security, and can create its own feature names. These are the features and names we know about for the officially-supported Appium drivers.\n\n\n\n\n\n\n\n\nFeature Name\n\n\nDescription\n\n\nAutomationName\n\n\n\n\n\n\n\n\n\n\nget_server_logs\n\n\nAllows retrieving of Appium server logs via the Webdriver log interface\n\n\nIOS, XCUITest, Android, UiAutomator2, Espresso\n\n\n\n\n\n\nadb_shell\n\n\nAllows execution of arbitrary shell commands via ADB, using the \nmobile: shell\n command\n\n\nAndroid, UiAutomator2, Espresso\n\n\n\n\n\n\nshutdown_other_sims\n\n\nAllow any session to use a capability to shutdown any running simulators on the host\n\n\nXCUITest\n\n\n\n\n\n\nperf_record\n\n\nAllow recording the system performance and other metrics of the simulator\n\n\nXCUITest\n\n\n\n\n\n\nrecord_audio\n\n\nAllow recording of host machine audio inputs\n\n\nXCUITest\n\n\n\n\n\n\nchromedriver_autodownload\n\n\nAllow to download ChromeDriver automatically if Appium does not have proper the version\n\n\nAndroid, UiAutomator2, Espresso\n\n\n\n\n\n\nexecute_driver_script\n\n\nAllows to send a request which has multiple Appium commands. Read \ndocumentation\n for more details\n\n\nAll\n\n\n\n\n\n\n\n\nPlease see also below links. They might have additional flags.\n\n\n\n\nappium-android-driver\n\n\nappium-xcuitest-driver\n\n\nappium-mac-driver\n\n\nappium-windows-driver\n\n\n\n\nFor Driver Developers\n\n\n2 methods exist on objects of classes which extend \nBaseDriver\n, which make the life of the driver developer easier when checking availability of insecure features:\n\n\n\n\nthis.isFeatureEnabled(name)\n: returns true or false depending on whether the server security flags combine to allow the feature in question.\n\n\nthis.ensureFeatureEnabled(name)\n: throws an error with the feature name and a link to this doc if the feature in question is not allowed.", 
            "title": "Server Security"
        }, 
        {
            "location": "/writing-running-appium/security/#security", 
            "text": "The Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, if you're running your own Appium server locally, and not sharing it with anyone else, and don't expose Appium's port to the wider internet, you should have nothing to worry about, and can safely enable all Appium's features.  But because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to opt-in to these features explicitly.  For security reasons, Appium client sessions can  not  request feature enablement via capabilities. This is the responsibility of the one who launches the Appium server.", 
            "title": "Security"
        }, 
        {
            "location": "/writing-running-appium/security/#security-server-args", 
            "text": "The  server args  doc outlines three relevant arguments which may be passed to Appium when starting it from the command line:   --relaxed-security : Setting this flag turns on  all  insecure features (unless blocked by  --deny-insecure ; see below)  --allow-insecure : Setting this flag to a comma-separated list of feature names or a path to a file containing a feature list (each name on a separate line) will allow  only  the features listed. For example,  --allow-insecure=adb_shell  will cause  only  the ADB shell execution feature to be enabled. This is true  unless   --relaxed-security  is also used, in which case all features will still be enabled. It makes no sense to combine this flag with  --relaxed-security .  --deny-insecure : This flag can likewise be set to a comma-separated list of feature names, or a path to a feature file. Any features listed here will be  disabled , regardless of whether  --relaxed-security  is set and regardless of whether the names are also listed with  --allow-insecure .", 
            "title": "Security Server Args"
        }, 
        {
            "location": "/writing-running-appium/security/#insecure-features", 
            "text": "Each Appium driver is responsible for its own security, and can create its own feature names. These are the features and names we know about for the officially-supported Appium drivers.     Feature Name  Description  AutomationName      get_server_logs  Allows retrieving of Appium server logs via the Webdriver log interface  IOS, XCUITest, Android, UiAutomator2, Espresso    adb_shell  Allows execution of arbitrary shell commands via ADB, using the  mobile: shell  command  Android, UiAutomator2, Espresso    shutdown_other_sims  Allow any session to use a capability to shutdown any running simulators on the host  XCUITest    perf_record  Allow recording the system performance and other metrics of the simulator  XCUITest    record_audio  Allow recording of host machine audio inputs  XCUITest    chromedriver_autodownload  Allow to download ChromeDriver automatically if Appium does not have proper the version  Android, UiAutomator2, Espresso    execute_driver_script  Allows to send a request which has multiple Appium commands. Read  documentation  for more details  All     Please see also below links. They might have additional flags.   appium-android-driver  appium-xcuitest-driver  appium-mac-driver  appium-windows-driver", 
            "title": "Insecure Features"
        }, 
        {
            "location": "/writing-running-appium/security/#for-driver-developers", 
            "text": "2 methods exist on objects of classes which extend  BaseDriver , which make the life of the driver developer easier when checking availability of insecure features:   this.isFeatureEnabled(name) : returns true or false depending on whether the server security flags combine to allow the feature in question.  this.ensureFeatureEnabled(name) : throws an error with the feature name and a link to this doc if the feature in question is not allowed.", 
            "title": "For Driver Developers"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/", 
            "text": "Automating mobile web apps\n\n\nIf you're interested in automating your web app in Mobile Safari on iOS or\nChrome on Android, Appium can help you. Basically, you write a normal WebDriver\ntest, and use Appium as the Selenium server with a special set of desired\ncapabilities.\n\n\niOS mobile web automation\n\n\nAppium can automate the Safari browser on real and simulated iOS devices. It is\naccessed by setting the \nbrowserName\n \ndesired capabilty\n\nto \n\"Safari\"\n while leaving the \napp\n capability empty.\n\n\nYou \nmust\n run Safari on the device before attempting to use Appium, in order\nfor the correct preferences to have been set.\n\n\nThen, use desired capabilities like these to run your test in mobile Safari:\n\n\n// javascript\n{\n  platformName: 'iOS'\n  , platformVersion: '13.2'\n  , automationName: 'XCUITest'\n  , browserName: 'Safari'\n  , deviceName: 'iPhone 11'\n}\n\n\n\n\n# python\n{\n  'platformName': 'iOS',\n  'platformVersion': '13.2',\n  'automationName': 'XCUITest',\n  'browserName': 'Safari',\n  'deviceName': 'iPhone 11'\n}\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \niOS\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n13.2\n);\ncapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, \nXCUITest\n);\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, \nSafari\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \niPhone 11\n);\n\n\n\n\n{\n  platformName: 'iOS',\n  platformVersion: '13.2',\n  automationName: 'XCUITest',\n  deviceName: 'iPhone 11',\n  browserName: 'Safari'\n}\n\n\n\n\nMobile Safari on Simulator\n\n\nFirst of all, make sure developer mode is turned on in your Safari\npreferences so that the remote debugger port is open.\n\n\nMobile Safari on a Real iOS Device\n\n\nFor \nXCUITest\n\n\nWe use \nappium-ios-device\n to handle Safari since Appium 1.15.\nYou no longer need to install additional dependencies.\n\n\nFor \nInstruments\n\n\nFor \niOS 9.3 and below\n (pre-XCUITest), we\nuse the \nSafariLauncher App\n app\nto launch Safari and run tests against mobile Safari. This is because Safari is\nan app that is owned by Apple, and Instruments cannot launch it on real devices.\nOnce Safari has been launched by \nSafariLauncher\n, the Remote Debugger\nautomatically connects using the \nios-webkit-debug-proxy\n.\nWhen working with \nios-webkit-debug-proxy\n, you have to trust the machine before\nyou can can run tests against your iOS device.\n\n\nFor instruction on how to install and run \nios-webkit-debugger-proxy\n see\n\niOS WebKit debug proxy\n\ndocumentation.\n\n\nSetup for an iOS real device\n\n\nBefore you can run your tests against Safari on a real device you will need to:\n\n\n\n\nXCUITest\n and \nInstruments\n\n\nTurn on \nweb inspector\n on iOS device (\nsettings \n safari \n advanced\n)\n\n\n\n\n\n\nOnly for \nInstruments\n\n\nHave the \nios-webkit-debug-proxy\n installed, running and listening on port\n  27753 (see the \nhybrid docs\n\n  for instructions)\n\n\nMake sure that \nSafariLauncher\n will work (see the \nSafariLauncher docs\n\n  for instructions)\n\n\n\n\n\n\n\n\nRunning your test\n\n\nTo configure you test to run against safari simply set the \n\"browserName\"\n to be\n\n\"Safari\"\n.\n\n\n// java\n//setup the web driver and launch the webview app.\nDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\ndesiredCapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, \nSafari\n);\ndesiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, \nXCUITest\n);\nURL url = new URL(\nhttp://127.0.0.1:4723/wd/hub\n);\nAppiumDriver driver = new AppiumDriver(url, desiredCapabilities);\n\n// Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get(\nhttp://saucelabs.com/test/guinea-pig\n);\nWebElement div = driver.findElement(By.id(\ni_am_an_id\n));\nAssert.assertEquals(\nI am a div\n, div.getText()); //check the text retrieved matches expected value\ndriver.findElement(By.id(\ncomments\n)).sendKeys(\nMy comment\n); //populate the comments field by id.\n\n//close the app.\ndriver.quit();\n\n\n\n\n# python\n# setup the web driver and launch the webview app.\ncapabilities = { 'browserName': 'Safari', 'automationName': 'XCUITest' }\ndriver = webdriver.Remote('http://localhost:4723/wd/hub', capabilities)\n\n# Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get('http://saucelabs.com/test/guinea-pig');\ndiv = driver.find_element_by_id('i_am_an_id')\n# check the text retrieved matches expected value\nassertEqual('I am a div', div.text)\n\n# populate the comments field by id\ndriver.find_element_by_id('comments').send_keys('My comment')\n\n# close the driver\ndriver.quit()\n\n\n\n\nAndroid mobile web automation\n\n\nAppium supports automating the Chrome browser both real and emulated Android\ndevices.\n\n\nPre-requisites:\n\n\n\n\nMake sure Chrome is installed on your device or emulator.\n\n\nChromedriver needs to be installed (a default version comes with Appium) and\n  configured for automating the specific version of Chrome available on the\n  device. See \nhere\n for more\n  information and details about compatibility.\n\n\n\n\nThen, use \ndesired capabilties\n like\nthese to run your test in Chrome:\n\n\n// javascript\n{\n  platformName: 'Android'\n  , platformVersion: '9.0'\n  , deviceName: 'Android Emulator'\n  , automationName: 'UIAutomator2'\n  , browserName: 'Chrome'\n};\n\n\n\n\n# python\n{\n  'platformName': 'Android',\n  'platformVersion': '9.0',\n  'deviceName': 'Android Emulator',\n  'automationName': 'UIAutomator2',\n  'browserName': 'Chrome'\n}\n\n\n\n\n// java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \nAndroid\n);\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION, \n9.0\n);\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \nAndroid Emulator\n);\ncapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME, \nUIAutomator2\n);\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME, \nChrome\n);\n\n\n\n\n{\n  platformName: 'Android',\n  platformVersion: '9.0',\n  deviceName: 'Android Emulator',\n  automationName: 'UIAutomator2',\n  browserName: 'Chrome'\n}\n\n\n\n\nNote that on 4.4+ devices, you can also use the 'Browser' \nbrowserName\n cap to\nautomate the built-in browser. On all devices you can use the 'Chromium'\n\nbrowserName\n cap to automate a build of Chromium which you have installed.\n\n\nTroubleshooting Chromedriver\n\n\nIf your test target requires newer Chromedriver version,\n\nchromedriver_autodownload\n feature will help.\nIt has been available since Appium 1.15.0 with the security option.\nRead the linked documentation to learn how to use it.\n\nchromedriverExecutableDir\n capability also helps when you need\na specific Chromedriver version.\n\n\nAs of Chrome version 33, a rooted device is no longer required. If running tests\non older versions of Chrome, devices needed to be rooted as Chromedriver\nrequired write access to the \n/data/local\n directory to set Chrome's command\nline arguments.\n\n\nIf testing on Chrome app prior to version 33, ensure \nadb shell\n has read/write\naccess to \n/data/local\n directory on the device:\n\n\n$ adb shell su -c chmod 777 /data/local\n\n\n\n\nThere is a desired capability \nshowChromedriverLog\n which, when set to \ntrue\n,\nwrites the Chromedriver logs inline with the Appium logs. This can be helpful\nfor debugging.\n\n\nFor more Chromedriver specific documentation see \nChromeDriver documentation\n.", 
            "title": "Mobile Web Testing"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#automating-mobile-web-apps", 
            "text": "If you're interested in automating your web app in Mobile Safari on iOS or\nChrome on Android, Appium can help you. Basically, you write a normal WebDriver\ntest, and use Appium as the Selenium server with a special set of desired\ncapabilities.", 
            "title": "Automating mobile web apps"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#ios-mobile-web-automation", 
            "text": "Appium can automate the Safari browser on real and simulated iOS devices. It is\naccessed by setting the  browserName   desired capabilty \nto  \"Safari\"  while leaving the  app  capability empty.  You  must  run Safari on the device before attempting to use Appium, in order\nfor the correct preferences to have been set.  Then, use desired capabilities like these to run your test in mobile Safari:  // javascript\n{\n  platformName: 'iOS'\n  , platformVersion: '13.2'\n  , automationName: 'XCUITest'\n  , browserName: 'Safari'\n  , deviceName: 'iPhone 11'\n}  # python\n{\n  'platformName': 'iOS',\n  'platformVersion': '13.2',\n  'automationName': 'XCUITest',\n  'browserName': 'Safari',\n  'deviceName': 'iPhone 11'\n}  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  iOS );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  13.2 );\ncapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,  XCUITest );\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME,  Safari );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  iPhone 11 );  {\n  platformName: 'iOS',\n  platformVersion: '13.2',\n  automationName: 'XCUITest',\n  deviceName: 'iPhone 11',\n  browserName: 'Safari'\n}", 
            "title": "iOS mobile web automation"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#mobile-safari-on-simulator", 
            "text": "First of all, make sure developer mode is turned on in your Safari\npreferences so that the remote debugger port is open.", 
            "title": "Mobile Safari on Simulator"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#mobile-safari-on-a-real-ios-device", 
            "text": "", 
            "title": "Mobile Safari on a Real iOS Device"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#for-xcuitest", 
            "text": "We use  appium-ios-device  to handle Safari since Appium 1.15.\nYou no longer need to install additional dependencies.", 
            "title": "For XCUITest"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#for-instruments", 
            "text": "For  iOS 9.3 and below  (pre-XCUITest), we\nuse the  SafariLauncher App  app\nto launch Safari and run tests against mobile Safari. This is because Safari is\nan app that is owned by Apple, and Instruments cannot launch it on real devices.\nOnce Safari has been launched by  SafariLauncher , the Remote Debugger\nautomatically connects using the  ios-webkit-debug-proxy .\nWhen working with  ios-webkit-debug-proxy , you have to trust the machine before\nyou can can run tests against your iOS device.  For instruction on how to install and run  ios-webkit-debugger-proxy  see iOS WebKit debug proxy \ndocumentation.", 
            "title": "For Instruments"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#setup-for-an-ios-real-device", 
            "text": "Before you can run your tests against Safari on a real device you will need to:   XCUITest  and  Instruments  Turn on  web inspector  on iOS device ( settings   safari   advanced )    Only for  Instruments  Have the  ios-webkit-debug-proxy  installed, running and listening on port\n  27753 (see the  hybrid docs \n  for instructions)  Make sure that  SafariLauncher  will work (see the  SafariLauncher docs \n  for instructions)", 
            "title": "Setup for an iOS real device"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#running-your-test", 
            "text": "To configure you test to run against safari simply set the  \"browserName\"  to be \"Safari\" .  // java\n//setup the web driver and launch the webview app.\nDesiredCapabilities desiredCapabilities = new DesiredCapabilities();\ndesiredCapabilities.setCapability(MobileCapabilityType.BROWSER_NAME,  Safari );\ndesiredCapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,  XCUITest );\nURL url = new URL( http://127.0.0.1:4723/wd/hub );\nAppiumDriver driver = new AppiumDriver(url, desiredCapabilities);\n\n// Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get( http://saucelabs.com/test/guinea-pig );\nWebElement div = driver.findElement(By.id( i_am_an_id ));\nAssert.assertEquals( I am a div , div.getText()); //check the text retrieved matches expected value\ndriver.findElement(By.id( comments )).sendKeys( My comment ); //populate the comments field by id.\n\n//close the app.\ndriver.quit();  # python\n# setup the web driver and launch the webview app.\ncapabilities = { 'browserName': 'Safari', 'automationName': 'XCUITest' }\ndriver = webdriver.Remote('http://localhost:4723/wd/hub', capabilities)\n\n# Navigate to the page and interact with the elements on the guinea-pig page using id.\ndriver.get('http://saucelabs.com/test/guinea-pig');\ndiv = driver.find_element_by_id('i_am_an_id')\n# check the text retrieved matches expected value\nassertEqual('I am a div', div.text)\n\n# populate the comments field by id\ndriver.find_element_by_id('comments').send_keys('My comment')\n\n# close the driver\ndriver.quit()", 
            "title": "Running your test"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#android-mobile-web-automation", 
            "text": "Appium supports automating the Chrome browser both real and emulated Android\ndevices.  Pre-requisites:   Make sure Chrome is installed on your device or emulator.  Chromedriver needs to be installed (a default version comes with Appium) and\n  configured for automating the specific version of Chrome available on the\n  device. See  here  for more\n  information and details about compatibility.   Then, use  desired capabilties  like\nthese to run your test in Chrome:  // javascript\n{\n  platformName: 'Android'\n  , platformVersion: '9.0'\n  , deviceName: 'Android Emulator'\n  , automationName: 'UIAutomator2'\n  , browserName: 'Chrome'\n};  # python\n{\n  'platformName': 'Android',\n  'platformVersion': '9.0',\n  'deviceName': 'Android Emulator',\n  'automationName': 'UIAutomator2',\n  'browserName': 'Chrome'\n}  // java\nDesiredCapabilities capabilities = new DesiredCapabilities();\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME,  Android );\ncapabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,  9.0 );\ncapabilities.setCapability(MobileCapabilityType.DEVICE_NAME,  Android Emulator );\ncapabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,  UIAutomator2 );\ncapabilities.setCapability(MobileCapabilityType.BROWSER_NAME,  Chrome );  {\n  platformName: 'Android',\n  platformVersion: '9.0',\n  deviceName: 'Android Emulator',\n  automationName: 'UIAutomator2',\n  browserName: 'Chrome'\n}  Note that on 4.4+ devices, you can also use the 'Browser'  browserName  cap to\nautomate the built-in browser. On all devices you can use the 'Chromium' browserName  cap to automate a build of Chromium which you have installed.", 
            "title": "Android mobile web automation"
        }, 
        {
            "location": "/writing-running-appium/web/mobile-web/#troubleshooting-chromedriver", 
            "text": "If your test target requires newer Chromedriver version, chromedriver_autodownload  feature will help.\nIt has been available since Appium 1.15.0 with the security option.\nRead the linked documentation to learn how to use it. chromedriverExecutableDir  capability also helps when you need\na specific Chromedriver version.  As of Chrome version 33, a rooted device is no longer required. If running tests\non older versions of Chrome, devices needed to be rooted as Chromedriver\nrequired write access to the  /data/local  directory to set Chrome's command\nline arguments.  If testing on Chrome app prior to version 33, ensure  adb shell  has read/write\naccess to  /data/local  directory on the device:  $ adb shell su -c chmod 777 /data/local  There is a desired capability  showChromedriverLog  which, when set to  true ,\nwrites the Chromedriver logs inline with the Appium logs. This can be helpful\nfor debugging.  For more Chromedriver specific documentation see  ChromeDriver documentation .", 
            "title": "Troubleshooting Chromedriver"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/", 
            "text": "Automating hybrid apps\n\n\nOne of the core principles of Appium is that you shouldn't have to change your\napp to test it. In line with that methodology, it is possible to test hybrid\napps the same way you can with Selenium for web apps. There is a bit of technical\ncomplexity required so that Appium knows whether you want to automate the native\naspects of the app or the web views. But, thankfully, we can stay within the\nSelenium WebDriver protocol for everything.\n\n\nOnce the test is in a web view context the command set that is available is the\nfull \nSelenium\n \nWebDriver API\n.\n\n\nEntering the web view context\n\n\nHere are the steps required to talk to a web view in your Appium test:\n\n\n\n\nNavigate to a portion of your app where a web view is active\n\n\nRetrieve the currently available contexts\n\n\nThis returns a list of contexts we can access, like \n'NATIVE_APP'\n or \n'WEBVIEW_1'\n\n\n\n\n\n\nSet the context\n with the id of\n  the context you want to access\n\n\nThis puts your Appium session into a mode where all commands are\n  interpreted as being intended for automating the web view, rather than the\n  native portion of the app. For example, if you run \ngetElementByTagName\n, it\n  will operate on the DOM of the web view, rather than return native elements.\n  Of course, certain WebDriver methods only make sense in one context or\n  another, so in the wrong context you will receive an error message.\n\n\n\n\n\n\nTo stop automating in the web view context and go back to automating the\n   native portion of the app, simply \nset the context\n\n   again with the native context id (generally \n'NATIVE_APP'\n) to leave the web\n   context and once again access the native commands.\n\n\n\n\nAutomatically entering the web view context on session start\n\n\nIf your application begins in a web view, and you do not want to automate the\nnative application before entering it, you can have Appium automatically enter\nthe web view context on session initialization by setting the \nautoWebview\n\n\ndesired capability\n to \ntrue\n.\n\n\nExamples\n\n\n// javascript\n// assuming we have an initialized `driver` object for an app\ndriver\n    .contexts().then(function (contexts) { // get list of available views. Returns array: [\nNATIVE_APP\n,\nWEBVIEW_1\n]\n        return driver.context(contexts[1]); // choose the webview context\n    })\n\n    // do some web testing\n    .elementsByCss('.green_button').click()\n\n    .context('NATIVE_APP') // leave webview context\n\n    // do more native stuff here if we want\n\n    .quit() // stop webdrivage\n\n\n\n\n// java\n// assuming we have a set of capabilities\ndriver = new AppiumDriver(new URL(\nhttp://127.0.0.1:4723/wd/hub\n), capabilities);\n\nSet\nString\n contextNames = driver.getContextHandles();\nfor (String contextName : contextNames) {\n    System.out.println(contextName); //prints out something like NATIVE_APP \\n WEBVIEW_1\n}\ndriver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1\n\n//do some web testing\nString myText = driver.findElement(By.cssSelector(\n.green_button\n)).click();\n\ndriver.context(\nNATIVE_APP\n);\n\n// do more native testing if we want\n\ndriver.quit();\n\n\n\n\n# ruby_lib_core\n# assuming we have a set of capabilities\n@driver = Appium::Core.for(url: SERVER_URL, desired_capabilities: capabilities).start_driver\n# ruby_lib\n# opts = { caps: capabilities, appium_lib: { custom_url: SERVER_URL }}\n# @driver = Appium::Driver.new(opts, true).start_driver\n\n# I switch to the last context because its always the webview in our case, in other cases you may need to specify a context\n# View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID\n# Then switch to it using @driver.switch_to.context(\nWEBVIEW_6\n)\n\nGiven(/^I switch to webview$/) do\n    webview = @driver.available_contexts.last\n    @driver.switch_to.context(webview)\nend\n\nGiven(/^I switch out of webview$/) do\n    @driver.switch_to.context(@driver.contexts.first)\nend\n\n# Now you can use CSS to select an element inside your webview\n\nAnd(/^I click a webview button $/) do\n    @driver.find_element(:css, \n.green_button\n).click\nend\n\n\n\n\n# python\n# assuming we have an initialized `driver` object for an app\n\n# switch to webview\nwebview = driver.contexts.last\ndriver.switch_to.context(webview)\n\n# do some webby stuff\ndriver.find_element(By.CSS, \n.green_button\n).click\n\n# switch back to native view\ndriver.switch_to.context(driver.contexts.first)\n\n# do more native testing if we want\n\ndriver.quit()\n\n\n\n\nAutomating hybrid Android apps\n\n\nAppium comes with \nbuilt-in hybrid support via Chromedriver\n,\nwhich allow the automation of any Chrome-backed Android web views.\n\n\nThere is an additional step necessary within your app build, unfortunately. As\ndescribed in the Android \nremote debugging docs\n\nit is necessary to set to \ntrue\n the \nsetWebContentsDebuggingEnabled\n\nproperty on the \nandroid.webkit.WebView\n\nelement.\n\n\nOnce you have set your \ndesired capabilities\n\nand started an Appium session, follow the generalized instructions above.\n\n\nAutomating hybrid iOS apps\n\n\nTo interact with a web view Appium establishes a connection using a custom\nremote debugger. When executing against a simulator this connection is\nestablished directly as the simulator and the Appium server are on the same\nmachine. Appium can automate \nWkWebView\n\nand \nUIWebView\n\nelements. Unfortunately, it is not currently able to handle\n\nSafariViewController\n\nelements.\n\n\nOnce you've set your \ndesired capabilities\n\nand started an Appium session, follow the generalized instructions above.\n\n\nExecution against an iOS real device\n\n\nWhen executing against an iOS real device, Appium is unable to access the web view\ndirectly. Therefore the connection has to be established through the USB cable.\nAppium can establish the connection natively since version 1.15 via \nappium-ios-device\n.\n\nios-webkit-debugger-proxy\n is only necessary for Appium below version 1.15.\n\n\nFor instruction on how to install and run \nios-webkit-debugger-proxy\n see the\n\niOS webkit debug proxy\n\ndocumentation.\n\n\nNow you can start an Appium test session and follow the generalized instructions\nabove.", 
            "title": "Automating Hybrid Apps"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#automating-hybrid-apps", 
            "text": "One of the core principles of Appium is that you shouldn't have to change your\napp to test it. In line with that methodology, it is possible to test hybrid\napps the same way you can with Selenium for web apps. There is a bit of technical\ncomplexity required so that Appium knows whether you want to automate the native\naspects of the app or the web views. But, thankfully, we can stay within the\nSelenium WebDriver protocol for everything.  Once the test is in a web view context the command set that is available is the\nfull  Selenium   WebDriver API .", 
            "title": "Automating hybrid apps"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#entering-the-web-view-context", 
            "text": "Here are the steps required to talk to a web view in your Appium test:   Navigate to a portion of your app where a web view is active  Retrieve the currently available contexts  This returns a list of contexts we can access, like  'NATIVE_APP'  or  'WEBVIEW_1'    Set the context  with the id of\n  the context you want to access  This puts your Appium session into a mode where all commands are\n  interpreted as being intended for automating the web view, rather than the\n  native portion of the app. For example, if you run  getElementByTagName , it\n  will operate on the DOM of the web view, rather than return native elements.\n  Of course, certain WebDriver methods only make sense in one context or\n  another, so in the wrong context you will receive an error message.    To stop automating in the web view context and go back to automating the\n   native portion of the app, simply  set the context \n   again with the native context id (generally  'NATIVE_APP' ) to leave the web\n   context and once again access the native commands.", 
            "title": "Entering the web view context"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#automatically-entering-the-web-view-context-on-session-start", 
            "text": "If your application begins in a web view, and you do not want to automate the\nnative application before entering it, you can have Appium automatically enter\nthe web view context on session initialization by setting the  autoWebview  desired capability  to  true .", 
            "title": "Automatically entering the web view context on session start"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#examples", 
            "text": "// javascript\n// assuming we have an initialized `driver` object for an app\ndriver\n    .contexts().then(function (contexts) { // get list of available views. Returns array: [ NATIVE_APP , WEBVIEW_1 ]\n        return driver.context(contexts[1]); // choose the webview context\n    })\n\n    // do some web testing\n    .elementsByCss('.green_button').click()\n\n    .context('NATIVE_APP') // leave webview context\n\n    // do more native stuff here if we want\n\n    .quit() // stop webdrivage  // java\n// assuming we have a set of capabilities\ndriver = new AppiumDriver(new URL( http://127.0.0.1:4723/wd/hub ), capabilities);\n\nSet String  contextNames = driver.getContextHandles();\nfor (String contextName : contextNames) {\n    System.out.println(contextName); //prints out something like NATIVE_APP \\n WEBVIEW_1\n}\ndriver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1\n\n//do some web testing\nString myText = driver.findElement(By.cssSelector( .green_button )).click();\n\ndriver.context( NATIVE_APP );\n\n// do more native testing if we want\n\ndriver.quit();  # ruby_lib_core\n# assuming we have a set of capabilities\n@driver = Appium::Core.for(url: SERVER_URL, desired_capabilities: capabilities).start_driver\n# ruby_lib\n# opts = { caps: capabilities, appium_lib: { custom_url: SERVER_URL }}\n# @driver = Appium::Driver.new(opts, true).start_driver\n\n# I switch to the last context because its always the webview in our case, in other cases you may need to specify a context\n# View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID\n# Then switch to it using @driver.switch_to.context( WEBVIEW_6 )\n\nGiven(/^I switch to webview$/) do\n    webview = @driver.available_contexts.last\n    @driver.switch_to.context(webview)\nend\n\nGiven(/^I switch out of webview$/) do\n    @driver.switch_to.context(@driver.contexts.first)\nend\n\n# Now you can use CSS to select an element inside your webview\n\nAnd(/^I click a webview button $/) do\n    @driver.find_element(:css,  .green_button ).click\nend  # python\n# assuming we have an initialized `driver` object for an app\n\n# switch to webview\nwebview = driver.contexts.last\ndriver.switch_to.context(webview)\n\n# do some webby stuff\ndriver.find_element(By.CSS,  .green_button ).click\n\n# switch back to native view\ndriver.switch_to.context(driver.contexts.first)\n\n# do more native testing if we want\n\ndriver.quit()", 
            "title": "Examples"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#automating-hybrid-android-apps", 
            "text": "Appium comes with  built-in hybrid support via Chromedriver ,\nwhich allow the automation of any Chrome-backed Android web views.  There is an additional step necessary within your app build, unfortunately. As\ndescribed in the Android  remote debugging docs \nit is necessary to set to  true  the  setWebContentsDebuggingEnabled \nproperty on the  android.webkit.WebView \nelement.  Once you have set your  desired capabilities \nand started an Appium session, follow the generalized instructions above.", 
            "title": "Automating hybrid Android apps"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#automating-hybrid-ios-apps", 
            "text": "To interact with a web view Appium establishes a connection using a custom\nremote debugger. When executing against a simulator this connection is\nestablished directly as the simulator and the Appium server are on the same\nmachine. Appium can automate  WkWebView \nand  UIWebView \nelements. Unfortunately, it is not currently able to handle SafariViewController \nelements.  Once you've set your  desired capabilities \nand started an Appium session, follow the generalized instructions above.", 
            "title": "Automating hybrid iOS apps"
        }, 
        {
            "location": "/writing-running-appium/web/hybrid/#execution-against-an-ios-real-device", 
            "text": "When executing against an iOS real device, Appium is unable to access the web view\ndirectly. Therefore the connection has to be established through the USB cable.\nAppium can establish the connection natively since version 1.15 via  appium-ios-device . ios-webkit-debugger-proxy  is only necessary for Appium below version 1.15.  For instruction on how to install and run  ios-webkit-debugger-proxy  see the iOS webkit debug proxy \ndocumentation.  Now you can start an Appium test session and follow the generalized instructions\nabove.", 
            "title": "Execution against an iOS real device"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/", 
            "text": "iOS WebKit Debug Proxy\n\n\nFor accessing web views on real iOS device appium uses \nios_webkit_debug_proxy\n.\n\n\nInstallation\n\n\nUsing Homebrew\n\n\nTo install the latest tagged version of the ios-webkit-debug-proxy using\nHomebrew, run the following commands in the terminal:\n\n\nshell\n # The first command is only required if you don't have brew installed.\n $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n $ brew update\n $ brew install ios-webkit-debug-proxy\n\n\nBuilding ios-webkit-debug-proxy from source\n\n\nOpen the command terminal on your linux machine. You can find instructions on how to open the\nterminal via your favorite search engine.\n\n\n$ cd  ~\n$ sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev\n$ git clone https://github.com/google/ios-webkit-debug-proxy.git\n$ cd ios-webkit-debug-proxy\n$ ./autogen.sh\n$ make\n$ sudo make install\n\n\n\n\nRunning ios-webkit-debug-proxy\n\n\nOnce installed you can start the proxy with the following command:\n\n\n# Change the udid to be the udid of the attached device and make sure to set the port to 27753\n# as that is the port the remote-debugger uses. You can learn how to retrieve the UDID from\n# Apple's developer resources.\n\n ios_webkit_debug_proxy -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d\n\n\n\n\nYou can also set the desired capability called \nstartIWDP\n to \ntrue\n (see the \ndesired capabilities docs\n). This will run the above command as a subprocess from within Appium and will set the udid, so you don't have to run \nios_webkit_debug_proxy\n yourself anymore. It monitors the proxy for crashes and relaunches when needed.\n\n\n// example desired capabilities\n{\n  \nbrowserName\n: \nSafari\n,\n  \nplatformName\n: \niOS\n,\n  \ndeviceName\n: \niPhone 7\n,\n  \nautomationName\n: \nXCUITest\n,\n  \nstartIWDP\n: true,\n  \nudid\n: \nauto\n\n}\n\n\n\n\nYou may also use \nios-webkit-debug-proxy-launcher\n, a small script included with the Appium codebase, to launch the\nproxy. It monitors the proxy log for errors, and relaunch the proxy\nwhere needed. This is also optional and may help with recent devices:\n\n\n# change the udid\n# note, this is run from an Appium repository\n\n ./bin/ios-webkit-debug-proxy-launcher.js -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d\n\n\n\n\nNOTE:\n the proxy requires the \n\"web inspector\"\n to be turned on to\nallow a connection to be established. Turn it on by going to \nsettings \n\nsafari \n advanced\n.\n\n\nSpecifying non-default port\n\n\nAppium expects \nios-webkit-debug-proxy\n to be running on port \n27753\n. If, for whatever reason,\nthis needs to be changed, the \nwebkitDebugProxyPort\n desired capability can be\nset with the port on which it the proxy is running.", 
            "title": "Using ios-webkit-debug-proxy"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/#ios-webkit-debug-proxy", 
            "text": "For accessing web views on real iOS device appium uses  ios_webkit_debug_proxy .", 
            "title": "iOS WebKit Debug Proxy"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/#using-homebrew", 
            "text": "To install the latest tagged version of the ios-webkit-debug-proxy using\nHomebrew, run the following commands in the terminal:  shell\n # The first command is only required if you don't have brew installed.\n $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n $ brew update\n $ brew install ios-webkit-debug-proxy", 
            "title": "Using Homebrew"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/#building-ios-webkit-debug-proxy-from-source", 
            "text": "Open the command terminal on your linux machine. You can find instructions on how to open the\nterminal via your favorite search engine.  $ cd  ~\n$ sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev\n$ git clone https://github.com/google/ios-webkit-debug-proxy.git\n$ cd ios-webkit-debug-proxy\n$ ./autogen.sh\n$ make\n$ sudo make install", 
            "title": "Building ios-webkit-debug-proxy from source"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/#running-ios-webkit-debug-proxy", 
            "text": "Once installed you can start the proxy with the following command:  # Change the udid to be the udid of the attached device and make sure to set the port to 27753\n# as that is the port the remote-debugger uses. You can learn how to retrieve the UDID from\n# Apple's developer resources.  ios_webkit_debug_proxy -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d  You can also set the desired capability called  startIWDP  to  true  (see the  desired capabilities docs ). This will run the above command as a subprocess from within Appium and will set the udid, so you don't have to run  ios_webkit_debug_proxy  yourself anymore. It monitors the proxy for crashes and relaunches when needed.  // example desired capabilities\n{\n   browserName :  Safari ,\n   platformName :  iOS ,\n   deviceName :  iPhone 7 ,\n   automationName :  XCUITest ,\n   startIWDP : true,\n   udid :  auto \n}  You may also use  ios-webkit-debug-proxy-launcher , a small script included with the Appium codebase, to launch the\nproxy. It monitors the proxy log for errors, and relaunch the proxy\nwhere needed. This is also optional and may help with recent devices:  # change the udid\n# note, this is run from an Appium repository  ./bin/ios-webkit-debug-proxy-launcher.js -c 0e4b2f612b65e98c1d07d22ee08678130d345429:27753 -d  NOTE:  the proxy requires the  \"web inspector\"  to be turned on to\nallow a connection to be established. Turn it on by going to  settings  \nsafari   advanced .", 
            "title": "Running ios-webkit-debug-proxy"
        }, 
        {
            "location": "/writing-running-appium/web/ios-webkit-debug-proxy/#specifying-non-default-port", 
            "text": "Appium expects  ios-webkit-debug-proxy  to be running on port  27753 . If, for whatever reason,\nthis needs to be changed, the  webkitDebugProxyPort  desired capability can be\nset with the port on which it the proxy is running.", 
            "title": "Specifying non-default port"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/", 
            "text": "Chromedriver\n\n\nAppium supports automating Android web pages (in Chrome and the built-in Browser) and\nhybrid apps that are Chrome-backed, by managing a \nChromedriver\n\ninstance and proxying commands to it when necessary. It comes bundled with the\n\nlatest version of Chromedriver\n, installed through the\nnpm package \nappium-chromedriver\n\n(Github: \nappium-chromedriver\n).\n\n\nWith each update to Chromedriver there is an increase in the minimum\nsupported version of Chrome, such that older devices are often unable to be automated\nwith the bundled version. In the Appium server logs there will be an error like:\n\n\nAn unknown server-side error occurred while processing the command.\nOriginal error: unknown error: Chrome version must be \n= 55.0.2883.0\n\n\n\n\nTo get around this it is necessary to provide Appium with a proper Chromedriver binary,\nthat \nmatches\n\nto the Chrome engine version running on the device under test.\nRead the \nChromedriver/Chrome compatibility\n topic below to know more about finding a matching Chromedriver executable.\n\n\nThere are several ways to provide a customized Chromedriver to Appium:\n\n\nWhen installing the server\n\n\nProvide \n--chromedriver_version\n command line argument containing the actual version number\n\n\nnpm install appium --chromedriver_version=\n2.16\n\n\n\n\n\nOr specify the Chromedriver version in the \nCHROMEDRIVER_VERSION\n environment variable,\ne.g,\n\n\nCHROMEDRIVER_VERSION=2.20 npm install appium\n\n\n\n\nThis can also be set to \nLATEST\n to get the most recent version.\n\n\nWhen starting the server\n\n\nChromedriver version can be specified at runtime, by specifying the\n\n--chromedriver-executable\n server flag, along with the full path to the\nChromedriver executable which was manually downloaded and put to the server file system, e.g.,\n\n\nappium --chromedriver-executable /path/to/my/chromedriver\n\n\n\n\nWhen starting a session (manual discovery)\n\n\nChromedriver version can be specified in session capabilities, by providing the\n\nchromedriverExecutable\n cap, containing the full path to a matching\nChromedriver executable, which must be manually downloaded and put to the server file system.\nSee http://appium.io/docs/en/writing-running-appium/caps/ for more details\n\n\nWhen starting a session (automated discovery)\n\n\nAppium could also try to detect the version of the target Chrome engine and\ndownload matching chromedriver for it automatically if it does not exist on the local file system.\nRead the \nAutomatic discovery of compatible Chromedriver\n topic below for more details.\n\n\nChromedriver/Chrome compatibility\n\n\nThe list of Chromedriver versions and their matching minimum\nChrome versions could be found at https://raw.githubusercontent.com/appium/appium-chromedriver/master/config/mapping.json\n\n\nSince version \n2.46\n Google has changed the rules for Chromedriver versioning, so now the major Chromedriver version corresponds to the major web view/browser version, that it can automate. Follow the \nVersion Selection\n document in order to manually find the Chromedriver, that supports your current browser/web view if its major version is equal or above \n73\n.\n\n\nTo find the minimum supported browsers for older Chromedriver versions (below \n73\n), get the \nChromium\n\n\nsource code\n, check out the release commit, and check the variable \nkMinimumSupportedChromeVersion\n\nin the file \nsrc/chrome/test/chromedriver/chrome/version.cc\n. (To find the\nrelease commits, you can use \ngit log --pretty=format:'%h | %s%d' | grep -i \"Release Chromedriver version\"\n.)\n\n\nThe complete list of available Chromedriver releases and release notes is \nhere\n.\n\n\nAutomatic discovery of compatible Chromedriver\n\n\nBeginning with Appium 1.8.0, Appium is able to pick the correct Chromedriver for the\nversion of Chrome under test. While Appium only comes bundled with the Chromedriver\nmost recently released at the time of the Appium version's release, more Chromedriver\nversions can be downloaded and either placed inside the Appium installation (\nnot\n  recommended\n since upgrading Appium will remove them) or in a custom location,\nwhich can be indicated to Appium with the \nchromedriverExecutableDir\n desired\ncapability. This capability is the absolute path to the directory in which you have\nplaced one or more Chromedriver executables.\n\n\nAs well, since new versions of Chromedriver may be available that were not when\nan Appium version was released, a custom mapping of Chromedrivers to the minimum\nChrome version they support can be given to Appium through the \nchromedriverChromeMappingFile\n\ndesired capability. This should be the absolute path to a file with the mapping\nin it. The contents of the file need to be parsable as a JSON object, like:\n\n\n{\n  \n2.42\n: \n63.0.3239\n,\n  \n2.41\n: \n62.0.3202\n\n}\n\n\n\n\nSince Appium 1.15.0 there is a possibility to automatically download the necessary chromedriver(s) into \nchromedriverExecutableDir\n from the official Google storage. The script will automatically search for the newest chromedriver version that supports the given browser/web view, download it (the hash sum is verified as well for the downloaded archive) and add to the \nchromedriverChromeMappingFile\n mapping. Everything, which is needed to be done from your side is to execute the server with \nchromedriver_autodownload\n feature enabled (like \nappium --allow-insecure chromedriver_autodownload\n).\nYou can also check the \nSecurity\n document for more details on how to control potentially insecure server features.\n\n\nTroubleshooting network issues\n\n\nWhen Appium is installed it needs to download Chromedriver, so there is the possibility\nthat there could be network problems that make the install fail.\n\n\nBy default Chromedriver is retrieved from \nhttps://chromedriver.storage.googleapis.com/\n.\nTo use a mirror of the ChromeDriver binaries use npm config property \nchromedriver_cdnurl\n.\n\n\nnpm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver\n\n\n\n\nOr add the property into your \n.npmrc\n file.\n\n\nchromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver\n\n\n\n\nAnother option is to use PATH variable \nCHROMEDRIVER_CDNURL\n.\n\n\nCHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver npm install appium-chromedriver\n\n\n\n\nIt may also be necessary to adjust network proxy and firewall settings to allow\nthe download to occur.\n\n\nW3C support\n\n\nChromedriver didn't follow the W3C standard until version 75. If you encounter proxy command error like \nthis issue\n, please update your Chromedriver version.\nOld Android devices can't use newer chrome drivers. You can avoid the error if you run tests with the Mobile JSON Wire Protocol.\nSince major version \n75\n W3C mode is the default one for Chromedriver, although it could be still switched to JSONWP one depending on the passed session capabilities.\nYou can read the history of W3C support in Chromedriver from \ndownloads\n.", 
            "title": "Using Chromedriver"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#chromedriver", 
            "text": "Appium supports automating Android web pages (in Chrome and the built-in Browser) and\nhybrid apps that are Chrome-backed, by managing a  Chromedriver \ninstance and proxying commands to it when necessary. It comes bundled with the latest version of Chromedriver , installed through the\nnpm package  appium-chromedriver \n(Github:  appium-chromedriver ).  With each update to Chromedriver there is an increase in the minimum\nsupported version of Chrome, such that older devices are often unable to be automated\nwith the bundled version. In the Appium server logs there will be an error like:  An unknown server-side error occurred while processing the command.\nOriginal error: unknown error: Chrome version must be  = 55.0.2883.0  To get around this it is necessary to provide Appium with a proper Chromedriver binary,\nthat  matches \nto the Chrome engine version running on the device under test.\nRead the  Chromedriver/Chrome compatibility  topic below to know more about finding a matching Chromedriver executable.  There are several ways to provide a customized Chromedriver to Appium:", 
            "title": "Chromedriver"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#when-installing-the-server", 
            "text": "Provide  --chromedriver_version  command line argument containing the actual version number  npm install appium --chromedriver_version= 2.16   Or specify the Chromedriver version in the  CHROMEDRIVER_VERSION  environment variable,\ne.g,  CHROMEDRIVER_VERSION=2.20 npm install appium  This can also be set to  LATEST  to get the most recent version.", 
            "title": "When installing the server"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#when-starting-the-server", 
            "text": "Chromedriver version can be specified at runtime, by specifying the --chromedriver-executable  server flag, along with the full path to the\nChromedriver executable which was manually downloaded and put to the server file system, e.g.,  appium --chromedriver-executable /path/to/my/chromedriver", 
            "title": "When starting the server"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#when-starting-a-session-manual-discovery", 
            "text": "Chromedriver version can be specified in session capabilities, by providing the chromedriverExecutable  cap, containing the full path to a matching\nChromedriver executable, which must be manually downloaded and put to the server file system.\nSee http://appium.io/docs/en/writing-running-appium/caps/ for more details", 
            "title": "When starting a session (manual discovery)"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#when-starting-a-session-automated-discovery", 
            "text": "Appium could also try to detect the version of the target Chrome engine and\ndownload matching chromedriver for it automatically if it does not exist on the local file system.\nRead the  Automatic discovery of compatible Chromedriver  topic below for more details.", 
            "title": "When starting a session (automated discovery)"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#chromedriverchrome-compatibility", 
            "text": "The list of Chromedriver versions and their matching minimum\nChrome versions could be found at https://raw.githubusercontent.com/appium/appium-chromedriver/master/config/mapping.json  Since version  2.46  Google has changed the rules for Chromedriver versioning, so now the major Chromedriver version corresponds to the major web view/browser version, that it can automate. Follow the  Version Selection  document in order to manually find the Chromedriver, that supports your current browser/web view if its major version is equal or above  73 .  To find the minimum supported browsers for older Chromedriver versions (below  73 ), get the  Chromium  source code , check out the release commit, and check the variable  kMinimumSupportedChromeVersion \nin the file  src/chrome/test/chromedriver/chrome/version.cc . (To find the\nrelease commits, you can use  git log --pretty=format:'%h | %s%d' | grep -i \"Release Chromedriver version\" .)  The complete list of available Chromedriver releases and release notes is  here .", 
            "title": "Chromedriver/Chrome compatibility"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#automatic-discovery-of-compatible-chromedriver", 
            "text": "Beginning with Appium 1.8.0, Appium is able to pick the correct Chromedriver for the\nversion of Chrome under test. While Appium only comes bundled with the Chromedriver\nmost recently released at the time of the Appium version's release, more Chromedriver\nversions can be downloaded and either placed inside the Appium installation ( not\n  recommended  since upgrading Appium will remove them) or in a custom location,\nwhich can be indicated to Appium with the  chromedriverExecutableDir  desired\ncapability. This capability is the absolute path to the directory in which you have\nplaced one or more Chromedriver executables.  As well, since new versions of Chromedriver may be available that were not when\nan Appium version was released, a custom mapping of Chromedrivers to the minimum\nChrome version they support can be given to Appium through the  chromedriverChromeMappingFile \ndesired capability. This should be the absolute path to a file with the mapping\nin it. The contents of the file need to be parsable as a JSON object, like:  {\n   2.42 :  63.0.3239 ,\n   2.41 :  62.0.3202 \n}  Since Appium 1.15.0 there is a possibility to automatically download the necessary chromedriver(s) into  chromedriverExecutableDir  from the official Google storage. The script will automatically search for the newest chromedriver version that supports the given browser/web view, download it (the hash sum is verified as well for the downloaded archive) and add to the  chromedriverChromeMappingFile  mapping. Everything, which is needed to be done from your side is to execute the server with  chromedriver_autodownload  feature enabled (like  appium --allow-insecure chromedriver_autodownload ).\nYou can also check the  Security  document for more details on how to control potentially insecure server features.", 
            "title": "Automatic discovery of compatible Chromedriver"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#troubleshooting-network-issues", 
            "text": "When Appium is installed it needs to download Chromedriver, so there is the possibility\nthat there could be network problems that make the install fail.  By default Chromedriver is retrieved from  https://chromedriver.storage.googleapis.com/ .\nTo use a mirror of the ChromeDriver binaries use npm config property  chromedriver_cdnurl .  npm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver  Or add the property into your  .npmrc  file.  chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver  Another option is to use PATH variable  CHROMEDRIVER_CDNURL .  CHROMEDRIVER_CDNURL=http://npm.taobao.org/mirrors/chromedriver npm install appium-chromedriver  It may also be necessary to adjust network proxy and firewall settings to allow\nthe download to occur.", 
            "title": "Troubleshooting network issues"
        }, 
        {
            "location": "/writing-running-appium/web/chromedriver/#w3c-support", 
            "text": "Chromedriver didn't follow the W3C standard until version 75. If you encounter proxy command error like  this issue , please update your Chromedriver version.\nOld Android devices can't use newer chrome drivers. You can avoid the error if you run tests with the Mobile JSON Wire Protocol.\nSince major version  75  W3C mode is the default one for Chromedriver, although it could be still switched to JSONWP one depending on the passed session capabilities.\nYou can read the history of W3C support in Chromedriver from  downloads .", 
            "title": "W3C support"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/", 
            "text": "Image Comparison Features\n\n\nThis article describes the set of image comparison features available in Appium. These features are available in all drivers and require OpenCV 3 native libs. Also, each feature is able to visualize the comparison result, so you can always track what is going on under the hood to select optimal matching parameters to achieve the best comparison results.\n\n\nPrerequisites\n\n\n\n\nOpenCV 3+ native libraries\n\n\nopencv4nodejs\n npm module: \nnpm i -g opencv4nodejs\n. By default the preinstall script of this module also downloads and makes all the required OpenCV libs from source, but this requires developer tools to be available on the host system.\n\n\nAppium Server 1.8.0+\n\n\n\n\nPurpose\n\n\nImage comparison might be handy for many automation tasks. For example:\n- It is necessary to figure out whether the given picture example is present on the screen\n- It is necessary to calculate coordinates of some predefined on-screen object\n- It is necessary to verify whether the current on-screen object state is similar to the expected state\n\n\nFeature-based Comparison\n\n\nPerforms images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html for more details on this topic. Such comparison is useful in case the resulting image is rotated/scaled in comparison to the original one.\n\n\nExamples\n\n\n// java\n\nbyte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nFeaturesMatchingResult result = driver\n        .matchImagesFeatures(screenshot, originalImg, new FeaturesMatchingOptions()\n                .withDetectorName(FeatureDetector.ORB)\n                .withGoodMatchesFactor(40)\n                .withMatchFunc(MatchingFunction.BRUTE_FORCE_HAMMING)\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertThat(result.getCount(), is(greaterThan(0)));\nassertThat(result.getTotalCount(), is(greaterThan(0)));\nassertFalse(result.getPoints1().isEmpty());\nassertNotNull(result.getRect1());\nassertFalse(result.getPoints2().isEmpty());\nassertNotNull(result.getRect2());\n\n\n\n\nAll the \nFeaturesMatchingOptions\n builder methods above contain detailed descriptions in their docstrings.\n\n\n# Ruby\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'second/image/path.png'\n\nmatch_result = @driver.match_images_features first_image: image1, second_image: image2\nassert_equal %w(points1 rect1 points2 rect2 totalCount count), match_result.keys\n\nmatch_result_visual = @driver.match_images_features first_image: image1, second_image: image2, visualize: true\nassert_equal %w(points1 rect1 points2 rect2 totalCount count visualization), match_result_visual.keys\nFile.open('match_result_visual.png', 'wb') { |f| f\n Base64.decode64(match_result_visual['visualization']) }\nassert File.size? 'match_result_visual.png'\n\n\n\n\nVisualization Example\n\n\n\n\nOccurrences Lookup\n\n\nPerforms images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html for more details on this topic. Such comparison is useful in case the full image is a superset of the partial image.\n\n\nThere is a subtle difference between occurrence comparison and feature comparison. The former is to be used when the image to be found is a subset of the target/screenshot. The latter is to be used when the image to be found is basically the same as the target but rotated and/or scaled.\n\n\nExamples\n\n\n// java\n\nbyte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nOccurrenceMatchingResult result = driver\n        .findImageOccurrence(screenshot, partialImage, new OccurrenceMatchingOptions()\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertNotNull(result.getRect());\n\n\n\n\nAll the \nOccurrenceMatchingOptions\n builder methods above contain detailed descriptions in their docstrings.\n\n\n# Ruby\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'partial/image/path.png'\n\nfind_result = @driver.find_image_occurrence full_image: image1, partial_image: image2\nassert_equal({ 'rect' =\n { 'x' =\n 0, 'y' =\n 0, 'width' =\n 750, 'height' =\n 1334 } }, find_result)\n\nfind_result_visual = @driver.find_image_occurrence full_image: image1, partial_image: image2, visualize: true\nassert_equal %w(rect visualization), find_result_visual.keys\nFile.open('find_result_visual.png', 'wb') { |f| f\n Base64.decode64(find_result_visual['visualization']) }\nassert File.size? 'find_result_visual.png'\n\n\n\n\n// Typescript / Javascript\n  /*\n     Typescsript code for occurrence comparison using the template matching algorithm.\n     It detects if an image is contained in another image (called the template).\n     The image must have the same scale and look the same. However, you can add a scaling transformation beforehand.\n\n     official doc:\n     https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/image-comparison.md\n     OpenCV algorithm doc:\n     https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html\n     official sample code:\n     https://github.com/justadudewhohacks/opencv4nodejs/blob/master/examples/templateMatching.js\n\n     You must install opencv4nodejs using the -g option.\n\n     The Javascript client driver webdriverio does not support (in January 2020) the \n-image\n strategy implemented in the Appium server. You will have more power and understanding while using openCV directly. Since the appium server is in Javascript, you can do all it does with opencv in your test suite.\n\n     The testing framework mocha can be run with typescript to have async/await.\n     You need to run mocha with those options in the right order and with the associated packages installed:\n     NODE_PATH=/path/to/nodejs/lig/node_modules TS_NODE_PROJECT=config/tsconfig_test.json --require ts-node/register --require tsconfig-paths/register\n     You will also need to make a basic config/tsconfig_test.json\n     Note that paths in tsconfig.json does not support absolute paths. Hence, you cannot move the NODE_PATH there.\n  */\n  import * as path from 'path';\n  const cv = require(path.join(process.env.NODE_PATH, 'opencv4nodejs'));\n  const isImagePresent = async () =\n {\n    /// Take screenshot and read the image\n    const screenImagePath = './appium_screenshot1.png';\n    await driver.saveScreenshot(screenImagePath)\n    const likedImagePath = './occurrence1.png';\n\n    // Load images\n    const originalMatPromise = cv.imreadAsync(screenImagePath);\n    const waldoMatPromise = cv.imreadAsync(likedImagePath);\n    const [originalMat, waldoMat] = await Promise.all([originalMatPromise, waldoMatPromise]);\n\n    // Match template (the brightest locations indicate the highest match)\n    // In the OpenCV doc, the option 5 refers to the algorithm called CV_TM_CCOEFF_NORMED\n    const matched = originalMat.matchTemplate(waldoMat, 5);\n\n    // Use minMaxLoc to locate the highest value (or lower, depending of the type of matching method)\n    const minMax = matched.minMaxLoc();\n    const { maxLoc: { x, y } } = minMax;\n\n    // Draw bounding rectangle\n    originalMat.drawRectangle(\n      new cv.Rect(x, y, waldoMat.cols, waldoMat.rows),\n      new cv.Vec(0, 255, 0),\n      2,\n      cv.LINE_8\n    );\n\n    // Open result in new window\n    // If the image is too big for your screen, you need to write to a file instead.\n    // Check the source of opencv4nodejs for writing an image to a file.\n    cv.imshow('We\\'ve found Waldo!', originalMat);\n    await cv.waitKey();\n\n    // then you know if the image was found by comparing the rectangle with a reference rectangle.\n    // the structure minMax contains the property maxVal that gives the quality of the match\n    // 1 is prefect match, but you may get .999. If you extract an image from the screenshot manually,\n    // you will get an image that matches.\n  };\n\n\n\n\nVisualization Example\n\n\n\n\nThe highlighted picture at the left bottom corner is the resulting match of \n lookup.\n\n\nSimilarity Calculation\n\n\nPerforms images matching to calculate the similarity score between them. The flow there is similar to the one used in \nfindImageOccurrence\n, but it is mandatory that both images are of equal size. Such comparison is useful in case the original image is a copy of the original one, but with changed content.\n\n\nExamples\n\n\n// java\n\nbyte[] screenshot1 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nbyte[] screenshot2 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nSimilarityMatchingResult result = driver\n        .getImagesSimilarity(screenshot1, screenshot2, new SimilarityMatchingOptions()\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertThat(result.getScore(), is(greaterThan(0.0)));\n\n\n\n\nAll the \nSimilarityMatchingOptions\n builder methods above contain detailed descriptions in their docstrings.\n\n\n# Ruby\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'second/image/path.png'\n\nget_images_result = @driver.get_images_similarity first_image: image1, second_image: image2\nassert_equal({ 'score' =\n 0.891606867313385 }, get_images_result)\n\nget_images_result_visual = @driver.get_images_similarity first_image: image1, second_image: image2, visualize: true\nassert_equal %w(score visualization), get_images_result_visual.keys\nFile.open('get_images_result_visual.png', 'wb') { |f| f\n Base64.decode64(get_images_result_visual['visualization']) }\nassert File.size? 'get_images_result_visual.png'\n\n\n\n\nVisualization Example\n\n\n\n\nThe similarity score for two pictures above is ~0.98.", 
            "title": "Image Comparison"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#image-comparison-features", 
            "text": "This article describes the set of image comparison features available in Appium. These features are available in all drivers and require OpenCV 3 native libs. Also, each feature is able to visualize the comparison result, so you can always track what is going on under the hood to select optimal matching parameters to achieve the best comparison results.", 
            "title": "Image Comparison Features"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#prerequisites", 
            "text": "OpenCV 3+ native libraries  opencv4nodejs  npm module:  npm i -g opencv4nodejs . By default the preinstall script of this module also downloads and makes all the required OpenCV libs from source, but this requires developer tools to be available on the host system.  Appium Server 1.8.0+", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#purpose", 
            "text": "Image comparison might be handy for many automation tasks. For example:\n- It is necessary to figure out whether the given picture example is present on the screen\n- It is necessary to calculate coordinates of some predefined on-screen object\n- It is necessary to verify whether the current on-screen object state is similar to the expected state", 
            "title": "Purpose"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#feature-based-comparison", 
            "text": "Performs images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html for more details on this topic. Such comparison is useful in case the resulting image is rotated/scaled in comparison to the original one.", 
            "title": "Feature-based Comparison"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#examples", 
            "text": "// java\n\nbyte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nFeaturesMatchingResult result = driver\n        .matchImagesFeatures(screenshot, originalImg, new FeaturesMatchingOptions()\n                .withDetectorName(FeatureDetector.ORB)\n                .withGoodMatchesFactor(40)\n                .withMatchFunc(MatchingFunction.BRUTE_FORCE_HAMMING)\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertThat(result.getCount(), is(greaterThan(0)));\nassertThat(result.getTotalCount(), is(greaterThan(0)));\nassertFalse(result.getPoints1().isEmpty());\nassertNotNull(result.getRect1());\nassertFalse(result.getPoints2().isEmpty());\nassertNotNull(result.getRect2());  All the  FeaturesMatchingOptions  builder methods above contain detailed descriptions in their docstrings.  # Ruby\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'second/image/path.png'\n\nmatch_result = @driver.match_images_features first_image: image1, second_image: image2\nassert_equal %w(points1 rect1 points2 rect2 totalCount count), match_result.keys\n\nmatch_result_visual = @driver.match_images_features first_image: image1, second_image: image2, visualize: true\nassert_equal %w(points1 rect1 points2 rect2 totalCount count visualization), match_result_visual.keys\nFile.open('match_result_visual.png', 'wb') { |f| f  Base64.decode64(match_result_visual['visualization']) }\nassert File.size? 'match_result_visual.png'", 
            "title": "Examples"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#visualization-example", 
            "text": "", 
            "title": "Visualization Example"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#occurrences-lookup", 
            "text": "Performs images matching by template to find possible occurrence of the partial image in the full image. Read https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html for more details on this topic. Such comparison is useful in case the full image is a superset of the partial image.  There is a subtle difference between occurrence comparison and feature comparison. The former is to be used when the image to be found is a subset of the target/screenshot. The latter is to be used when the image to be found is basically the same as the target but rotated and/or scaled.", 
            "title": "Occurrences Lookup"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#examples_1", 
            "text": "// java\n\nbyte[] screenshot = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nOccurrenceMatchingResult result = driver\n        .findImageOccurrence(screenshot, partialImage, new OccurrenceMatchingOptions()\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertNotNull(result.getRect());  All the  OccurrenceMatchingOptions  builder methods above contain detailed descriptions in their docstrings.  # Ruby\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'partial/image/path.png'\n\nfind_result = @driver.find_image_occurrence full_image: image1, partial_image: image2\nassert_equal({ 'rect' =  { 'x' =  0, 'y' =  0, 'width' =  750, 'height' =  1334 } }, find_result)\n\nfind_result_visual = @driver.find_image_occurrence full_image: image1, partial_image: image2, visualize: true\nassert_equal %w(rect visualization), find_result_visual.keys\nFile.open('find_result_visual.png', 'wb') { |f| f  Base64.decode64(find_result_visual['visualization']) }\nassert File.size? 'find_result_visual.png'  // Typescript / Javascript\n  /*\n     Typescsript code for occurrence comparison using the template matching algorithm.\n     It detects if an image is contained in another image (called the template).\n     The image must have the same scale and look the same. However, you can add a scaling transformation beforehand.\n\n     official doc:\n     https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/image-comparison.md\n     OpenCV algorithm doc:\n     https://docs.opencv.org/2.4/doc/tutorials/imgproc/histograms/template_matching/template_matching.html\n     official sample code:\n     https://github.com/justadudewhohacks/opencv4nodejs/blob/master/examples/templateMatching.js\n\n     You must install opencv4nodejs using the -g option.\n\n     The Javascript client driver webdriverio does not support (in January 2020) the  -image  strategy implemented in the Appium server. You will have more power and understanding while using openCV directly. Since the appium server is in Javascript, you can do all it does with opencv in your test suite.\n\n     The testing framework mocha can be run with typescript to have async/await.\n     You need to run mocha with those options in the right order and with the associated packages installed:\n     NODE_PATH=/path/to/nodejs/lig/node_modules TS_NODE_PROJECT=config/tsconfig_test.json --require ts-node/register --require tsconfig-paths/register\n     You will also need to make a basic config/tsconfig_test.json\n     Note that paths in tsconfig.json does not support absolute paths. Hence, you cannot move the NODE_PATH there.\n  */\n  import * as path from 'path';\n  const cv = require(path.join(process.env.NODE_PATH, 'opencv4nodejs'));\n  const isImagePresent = async () =  {\n    /// Take screenshot and read the image\n    const screenImagePath = './appium_screenshot1.png';\n    await driver.saveScreenshot(screenImagePath)\n    const likedImagePath = './occurrence1.png';\n\n    // Load images\n    const originalMatPromise = cv.imreadAsync(screenImagePath);\n    const waldoMatPromise = cv.imreadAsync(likedImagePath);\n    const [originalMat, waldoMat] = await Promise.all([originalMatPromise, waldoMatPromise]);\n\n    // Match template (the brightest locations indicate the highest match)\n    // In the OpenCV doc, the option 5 refers to the algorithm called CV_TM_CCOEFF_NORMED\n    const matched = originalMat.matchTemplate(waldoMat, 5);\n\n    // Use minMaxLoc to locate the highest value (or lower, depending of the type of matching method)\n    const minMax = matched.minMaxLoc();\n    const { maxLoc: { x, y } } = minMax;\n\n    // Draw bounding rectangle\n    originalMat.drawRectangle(\n      new cv.Rect(x, y, waldoMat.cols, waldoMat.rows),\n      new cv.Vec(0, 255, 0),\n      2,\n      cv.LINE_8\n    );\n\n    // Open result in new window\n    // If the image is too big for your screen, you need to write to a file instead.\n    // Check the source of opencv4nodejs for writing an image to a file.\n    cv.imshow('We\\'ve found Waldo!', originalMat);\n    await cv.waitKey();\n\n    // then you know if the image was found by comparing the rectangle with a reference rectangle.\n    // the structure minMax contains the property maxVal that gives the quality of the match\n    // 1 is prefect match, but you may get .999. If you extract an image from the screenshot manually,\n    // you will get an image that matches.\n  };", 
            "title": "Examples"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#visualization-example_1", 
            "text": "The highlighted picture at the left bottom corner is the resulting match of   lookup.", 
            "title": "Visualization Example"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#similarity-calculation", 
            "text": "Performs images matching to calculate the similarity score between them. The flow there is similar to the one used in  findImageOccurrence , but it is mandatory that both images are of equal size. Such comparison is useful in case the original image is a copy of the original one, but with changed content.", 
            "title": "Similarity Calculation"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#examples_2", 
            "text": "// java\n\nbyte[] screenshot1 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nbyte[] screenshot2 = Base64.encodeBase64(driver.getScreenshotAs(OutputType.BYTES));\nSimilarityMatchingResult result = driver\n        .getImagesSimilarity(screenshot1, screenshot2, new SimilarityMatchingOptions()\n                .withEnabledVisualization());\nassertThat(result.getVisualization().length, is(greaterThan(0)));\nassertThat(result.getScore(), is(greaterThan(0.0)));  All the  SimilarityMatchingOptions  builder methods above contain detailed descriptions in their docstrings.  # Ruby\nimage1 = File.read 'first/image/path.png'\nimage2 = File.read 'second/image/path.png'\n\nget_images_result = @driver.get_images_similarity first_image: image1, second_image: image2\nassert_equal({ 'score' =  0.891606867313385 }, get_images_result)\n\nget_images_result_visual = @driver.get_images_similarity first_image: image1, second_image: image2, visualize: true\nassert_equal %w(score visualization), get_images_result_visual.keys\nFile.open('get_images_result_visual.png', 'wb') { |f| f  Base64.decode64(get_images_result_visual['visualization']) }\nassert File.size? 'get_images_result_visual.png'", 
            "title": "Examples"
        }, 
        {
            "location": "/writing-running-appium/image-comparison/#visualization-example_2", 
            "text": "The similarity score for two pictures above is ~0.98.", 
            "title": "Visualization Example"
        }, 
        {
            "location": "/writing-running-appium/ios/actions/", 
            "text": "Low-Level Insights on iOS Input Events\n\n\nWhat Are Input Events\n\n\niOS uses events concept to handle signals received from different input devices. An event is an object, which is generated in response to a signal from an input device.\nThese objects are then delivered to the corresponding kernel subsystem, which processes them\nand notifies all listening processes about taps, key presses, swipes, etc.\nThis means that in order to emulate a signal generated by\nan external device, such as touch screen, it is necessary to just send event objects with\nthe same properties and in the same sequence as they would be generated by a real device.\n\n\nLets Simulate a Single Tap\n\n\nThe events API itself is a part of Apple private API and is not open sourced and neither\nit is documented. XCTest framework also does not expose any public APIs for input events\ngeneration. Although, there is a possibility to perform events generation via XCTest\nprivate undocumented APIs. In particular, we are interested in \nXCPointerEventPath\n and \nXCSynthesizedEventRecord\n interfaces.\nThese APIs allow to create chains of input events and supply them to the system kernel for execution.\n\n\nIn order to synthesize a single tap it is necessary to:\n- Create a new \nXCPointerEventPath\n instance and init it for touch at the starting point\n- Add a new \nliftUp\n event at \n0.125s\n offset using \nliftUpAtOffset:\n method\n- Add the generated event path object to \nXCSynthesizedEventRecord\n instance using \naddPointerEventPath:\n method\n- Execute the events using \nsynthesizeWithError:\n method of \nXCSynthesizedEventRecord\n instance and control the returned error\n\n\nThere are several limitations to these APIs:\n- Each \nXCPointerEventPath\n instance can only be executed for a single action. If one tries to add, for example, two taps to a single path, then these are effectively ignored\n- Each \nXCPointerEventPath\n instance can only be initialized for a particular pointer type: touch, mouse (since Xcode 10.2) or keyboard (since Xcode 10.2)\n- Events can only be added with increasing offset values to an existing \nXCPointerEventPath\n instance\n\n\nHow About More Complicated Actions\n\n\nUnfortunately, the API is private and has zero documentation.\nThat is why one can only figure out what it really can while playing with it and trying different\ninput combinations.\nIt is known that providing multiple \nXCPointerEventPath\n instances with\noverlapping timeouts will generate a multitouch action with the amount of fingers equal\nto the amount of the supplied event paths.\nSo, in order to generate two-finger symmetric swipe we need to supply the following events:\n\n\n\n\nCreate a two \nXCPointerEventPath\n instances and init them for touch at the starting point\n\n\nAdd a \nmoveToPoint\n event at \n0.525s\n offset using \nmoveToPoint:\n method to each path\n\n\nAdd a \nliftUp\n eventa at \n0.525s\n offset using \nliftUpAtOffset:\n method to each path\n\n\nAdd the generated event paths to \nXCSynthesizedEventRecord\n instance using \naddPointerEventPath:\n method\n\n\nExecute the events using \nsynthesizeWithError:\n method of \nXCSynthesizedEventRecord\n instance and control the returned error\n\n\n\n\nFurther Reading\n\n\nUnfortunately, there is no information on this topic at all (private API \n\u00af\\_(\u30c4)_/\u00af\n). Consider visiting the following resources:\n\n\n\n\nhttps://github.com/appium/WebDriverAgent/tree/master/PrivateHeaders/XCTest\n\n\nhttps://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CTouchActionsIntegrationTests.m\n\n\nhttps://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CMultiTouchActionsIntegrationTests.m\n\n\nhttps://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentLib/Utilities/FBW3CActionsSynthesizer.m", 
            "title": "Low-Level Insights on iOS Input Events"
        }, 
        {
            "location": "/writing-running-appium/ios/actions/#low-level-insights-on-ios-input-events", 
            "text": "", 
            "title": "Low-Level Insights on iOS Input Events"
        }, 
        {
            "location": "/writing-running-appium/ios/actions/#what-are-input-events", 
            "text": "iOS uses events concept to handle signals received from different input devices. An event is an object, which is generated in response to a signal from an input device.\nThese objects are then delivered to the corresponding kernel subsystem, which processes them\nand notifies all listening processes about taps, key presses, swipes, etc.\nThis means that in order to emulate a signal generated by\nan external device, such as touch screen, it is necessary to just send event objects with\nthe same properties and in the same sequence as they would be generated by a real device.", 
            "title": "What Are Input Events"
        }, 
        {
            "location": "/writing-running-appium/ios/actions/#lets-simulate-a-single-tap", 
            "text": "The events API itself is a part of Apple private API and is not open sourced and neither\nit is documented. XCTest framework also does not expose any public APIs for input events\ngeneration. Although, there is a possibility to perform events generation via XCTest\nprivate undocumented APIs. In particular, we are interested in  XCPointerEventPath  and  XCSynthesizedEventRecord  interfaces.\nThese APIs allow to create chains of input events and supply them to the system kernel for execution.  In order to synthesize a single tap it is necessary to:\n- Create a new  XCPointerEventPath  instance and init it for touch at the starting point\n- Add a new  liftUp  event at  0.125s  offset using  liftUpAtOffset:  method\n- Add the generated event path object to  XCSynthesizedEventRecord  instance using  addPointerEventPath:  method\n- Execute the events using  synthesizeWithError:  method of  XCSynthesizedEventRecord  instance and control the returned error  There are several limitations to these APIs:\n- Each  XCPointerEventPath  instance can only be executed for a single action. If one tries to add, for example, two taps to a single path, then these are effectively ignored\n- Each  XCPointerEventPath  instance can only be initialized for a particular pointer type: touch, mouse (since Xcode 10.2) or keyboard (since Xcode 10.2)\n- Events can only be added with increasing offset values to an existing  XCPointerEventPath  instance", 
            "title": "Lets Simulate a Single Tap"
        }, 
        {
            "location": "/writing-running-appium/ios/actions/#how-about-more-complicated-actions", 
            "text": "Unfortunately, the API is private and has zero documentation.\nThat is why one can only figure out what it really can while playing with it and trying different\ninput combinations.\nIt is known that providing multiple  XCPointerEventPath  instances with\noverlapping timeouts will generate a multitouch action with the amount of fingers equal\nto the amount of the supplied event paths.\nSo, in order to generate two-finger symmetric swipe we need to supply the following events:   Create a two  XCPointerEventPath  instances and init them for touch at the starting point  Add a  moveToPoint  event at  0.525s  offset using  moveToPoint:  method to each path  Add a  liftUp  eventa at  0.525s  offset using  liftUpAtOffset:  method to each path  Add the generated event paths to  XCSynthesizedEventRecord  instance using  addPointerEventPath:  method  Execute the events using  synthesizeWithError:  method of  XCSynthesizedEventRecord  instance and control the returned error", 
            "title": "How About More Complicated Actions"
        }, 
        {
            "location": "/writing-running-appium/ios/actions/#further-reading", 
            "text": "Unfortunately, there is no information on this topic at all (private API  \u00af\\_(\u30c4)_/\u00af ). Consider visiting the following resources:   https://github.com/appium/WebDriverAgent/tree/master/PrivateHeaders/XCTest  https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CTouchActionsIntegrationTests.m  https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CMultiTouchActionsIntegrationTests.m  https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentLib/Utilities/FBW3CActionsSynthesizer.m", 
            "title": "Further Reading"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-mobile-gestures/", 
            "text": "Automating Mobile Gestures For iOS With WebDriverAgent/XCTest Backend\n\n\nUnfortunately Apple's XCTest framework does not natively support W3C standards for\nTouchAction interface implementation. Although, it provides rich set of gestures,\nincluding these, that are unique for iOS platform. It is possible to directly invoke these\ngestures in Appium starting from version 1.6.4-beta.\n\n\nIt is important to remember that XCTest and WDA are being constantly changed.\nThis means all \"mobile: *\" commands can be also subject of change in Appium\nwithout any preliminary notice.\n\n\n\n\nmobile: swipe\n\n\nmobile: scroll\n\n\nmobile: pinch\n\n\nmobile: doubleTap\n\n\nmobile: touchAndHold\n\n\nmobile: twoFingerTap\n\n\nmobile: tap\n\n\nmobile: dragFromToForDuration\n\n\nmobile: selectPickerWheelValue\n\n\nmobile: rotateElement\n\n\nmobile: tapWithNumberOfTaps\n\n\n\n\nAdvanced Topics\n\n\nCheck \nWDA Element Commands API\n\nto get the information about the gestures implemented in Facebook WebDriverAgent.\nCheck Apple XCTest documentation on \nXCUIElement\n and\n\nXCUICoordinate\n methods list to get the information\nabout all gestures available there.", 
            "title": "XCUITest Mobile Gestures"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-mobile-gestures/#automating-mobile-gestures-for-ios-with-webdriveragentxctest-backend", 
            "text": "Unfortunately Apple's XCTest framework does not natively support W3C standards for\nTouchAction interface implementation. Although, it provides rich set of gestures,\nincluding these, that are unique for iOS platform. It is possible to directly invoke these\ngestures in Appium starting from version 1.6.4-beta.  It is important to remember that XCTest and WDA are being constantly changed.\nThis means all \"mobile: *\" commands can be also subject of change in Appium\nwithout any preliminary notice.   mobile: swipe  mobile: scroll  mobile: pinch  mobile: doubleTap  mobile: touchAndHold  mobile: twoFingerTap  mobile: tap  mobile: dragFromToForDuration  mobile: selectPickerWheelValue  mobile: rotateElement  mobile: tapWithNumberOfTaps", 
            "title": "Automating Mobile Gestures For iOS With WebDriverAgent/XCTest Backend"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-mobile-gestures/#advanced-topics", 
            "text": "Check  WDA Element Commands API \nto get the information about the gestures implemented in Facebook WebDriverAgent.\nCheck Apple XCTest documentation on  XCUIElement  and XCUICoordinate  methods list to get the information\nabout all gestures available there.", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-mobile-apps-management/", 
            "text": "Advanced Applications Management Commands For iOS With WebDriverAgent/XCTest Backend\n\n\nSince Xcode9 there is a possibility to manage multiple applications in scope of\na single session. It makes it possible to open iOS preferences and change values\nthere while the application under test is in background and then restore it back\nto foreground or check scenarios, where the application under test is\nterminated and then started again. Appium for iOS has special set of \nmobile:\n\nsubcommands, which provides user interface to such features.\n\n\nImportant note:\n Make sure you don't cache WebElement instances between\napplication restarts, since they are going to be invalidated after each restart.\n\n\n\n\nmobile: installApp\n\n\nmobile: removeApp\n\n\nmobile: isAppInstalled\n\n\nmobile: launchApp\n\n\nmobile: terminateApp\n\n\nmobile: activateApp\n\n\nmobile: queryAppState", 
            "title": "XCUITest Mobile App Management"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-mobile-apps-management/#advanced-applications-management-commands-for-ios-with-webdriveragentxctest-backend", 
            "text": "Since Xcode9 there is a possibility to manage multiple applications in scope of\na single session. It makes it possible to open iOS preferences and change values\nthere while the application under test is in background and then restore it back\nto foreground or check scenarios, where the application under test is\nterminated and then started again. Appium for iOS has special set of  mobile: \nsubcommands, which provides user interface to such features.  Important note:  Make sure you don't cache WebElement instances between\napplication restarts, since they are going to be invalidated after each restart.   mobile: installApp  mobile: removeApp  mobile: isAppInstalled  mobile: launchApp  mobile: terminateApp  mobile: activateApp  mobile: queryAppState", 
            "title": "Advanced Applications Management Commands For iOS With WebDriverAgent/XCTest Backend"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-pasteboard/", 
            "text": "Automating Simulator Pasteboard Actions For iOS With WebDriverAgent/XCTest Backend\n\n\nThere is a possibility in Appium to set the content of the iOS Simulator pasteboard\nand read the content from there if needed. Each Simulator maintains its own pasteboard.\nThis feature is only available since Xcode SDK 8.1.\nOn real devices this functionaliry is available with several security limitations. Please check \nGet Clipboard\n/\nSet Clipboard\n for more details.\n\n\n\n\nmobile: setPasteboard\n\n\nmobile: getPasteboard", 
            "title": "iOS Pasteboard Guide"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-pasteboard/#automating-simulator-pasteboard-actions-for-ios-with-webdriveragentxctest-backend", 
            "text": "There is a possibility in Appium to set the content of the iOS Simulator pasteboard\nand read the content from there if needed. Each Simulator maintains its own pasteboard.\nThis feature is only available since Xcode SDK 8.1.\nOn real devices this functionaliry is available with several security limitations. Please check  Get Clipboard / Set Clipboard  for more details.   mobile: setPasteboard  mobile: getPasteboard", 
            "title": "Automating Simulator Pasteboard Actions For iOS With WebDriverAgent/XCTest Backend"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/", 
            "text": "iOS Predicate\n\n\nNOTE\n: iOS predicates are usable in iOS 9.3 and below using the \n-ios uiautomation\n locator strategy and they are usable in iOS 10 and above using the \n-ios predicate string\n locator strategy\n\n\nIt is worth looking at \n'-ios uiautomation'\n search strategy with \nPredicates\n.\n\nUIAutomation JavaScript API\n which has the following useful methods:\n\n\n(UIAElement) UIAElementArray.firstWithPredicate(PredicateString predicateString)\n(UIAElementArray) UIAElementArray.withPredicate(PredicateString predicateString)\n\n\n\n\nNative JS search strategy (powered by Apple) provides much more flexibility and is like Xpath.\n\nPredicates\n can be used to restrict an elements set to select only those ones for which some condition is true.\n\n\n'-ios uiautomation' example:\n\n\n// java\nappiumDriver.findElementsByIosUIAutomation(\ncollectionViews()[0].cells().withPredicate(\\\nANY staticTexts.isVisible == TRUE\\\n)\n);\n\n\n\n\n'-ios predicate string' example:\n\n\n// java\nappiumDriver.findElementsByIosNsPredicate(\nisWDVisible == 1\n);\n\n\n\n\n-  will select only those  \nUIACollectionCell\n elements that have visible \nUIAStaticText\n child elements, and themselves are childs of 1st \nUIACollectionView\n element that should be located under the main app window.  Here \nstaticTexts()\n and \nisVisible()\n are methods available in \nUIAElementArray\n and \nUIAElement\n classes respectively. \nNote that \nUIAElementArray\n numbering begins with \n0\n unlike Xpath where indexes counting starts from \n1\n\n\nHere's a list of available Predicates (mostly taken from \nPredicates Programming Guide\n)\n\n\nBasic Comparisons\n\n\n= , ==\n- The left-hand expression is equal to the right-hand expression:\n\n\ntableViews()[1].cells().firstWithPredicate(\nlabel == 'Olivia' \n)\n\nsame in Xpath: /UIATableView[2]/UIATableCell[@label = 'Olivia'][1]\n\n\n\n\n>= , =>\n- The left-hand expression is greater than or equal to the right-hand expression.\n\n\n= , =\n\n- The left-hand expression is less than or equal to the right-hand expression.\n\n\n>\n- The left-hand expression is greater than the right-hand expression.\n\n\n\n- The left-hand expression is less than the right-hand expression.\n\n\n!= , \n>\n- The left-hand expression is not equal to the right-hand expression.\n\n\nBETWEEN\n- The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example, \n1 BETWEEN { 0 , 33 }\n, or \n$INPUT BETWEEN { $LOWER, $UPPER }\n.\nIn Objective-C, you could create a BETWEEN predicate as shown in the following example:\n\n\nNSPredicate *betweenPredicate =\n    [NSPredicate predicateWithFormat: @\nattributeName BETWEEN %@\n, @[@1, @10]];\n\n\n\n\nThis creates a predicate that matches \n( ( 1 \n= attributeValue ) \n ( attributeValue \n= 10 ) )\n\n\nBoolean Value Predicates\n\n\nTRUEPREDICATE\n- A predicate that always evaluates to \nTRUE\n .\n\n\nFALSEPREDICATE\n- A predicate that always evaluates to \nFALSE\n.\n\n\nBasic Compound Predicates\n\n\nAND , \n\n- Logical AND.\n\n\nOR , ||\n- Logical OR.\n\n\nNOT , !\n- Logical NOT.\n\n\nString Comparisons\n\n\nString comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters \nc\n and \nd\n within square braces to specify case and diacritic insensitivity respectively, for example \nfirstName BEGINSWITH[cd] $FIRST_NAME\n\n\nBEGINSWITH\n- The left-hand expression begins with the right-hand expression.\n\n\nscrollViews()[3].buttons().firstWithPredicate(\nname BEGINSWITH 'results toggle' \n)\n\nsame in Xpath: /UIAScrollView[4]/UIAButton[starts-with(@name, 'results toggle')][1]\n\n\n\n\nCONTAINS\n- The left-hand expression contains the right-hand expression.\n\n\ntableViews()[1].cells().withPredicate(\nANY collectionViews[0].buttons.name CONTAINS 'opera'\n)\n\nsame in Xpath: /UIATableView[2]/UIATableCell[UIACollectionView[1]/UIAButton[contains(@name, 'opera')]]\n\n\n\n\nENDSWITH\n- The left-hand expression ends with the right-hand expression.\n\n\nLIKE\n- The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters.\n\n\ntableViews()[0].cells().firstWithPredicate(\nname LIKE '*Total: $*' \n)\n\nsame in Xpath: /UIATableView[1]/UIATableCell[matches(@name, '.*Total: \\$.*')][1]\n\n\n\n\nMATCHES\n- The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for \nRegular Expressions\n).\n\n\ntableViews().firstWithPredicate(\nvalue MATCHES '.*of 7' \n)\n\nsame in Xpath: /UIATableView[matches(@value, '.*of 7')][1]\n\n\n\n\nAggregate Operations\n\n\nANY , SOME\n- Specifies any of the elements in the following expression. For example \nANY children.age \n 18\n .\n\n\ntableViews()[0].cells().firstWithPredicate(\nSOME staticTexts.name = 'red'\n).staticTexts().withName('red')\n\nsame in Xpath: /UIATableView[1]/UIATableCell[UIAStaticText/@name = 'red'][1]/UIAStaticText[@name = 'red']\n\n\n\n\nALL\n- Specifies all of the elements in the following expression. For example \nALL children.age \n 18\n .\n\n\nNONE\n- Specifies none of the elements in the following expression. For example, \nNONE children.age \n 18\n . This is logically equivalent to \nNOT (ANY ...)\n .\n\n\nIN\n- Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example, \nname IN { 'Ben', 'Melissa', 'Matthew' }\n . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used.\n\n\narray[index]\n- Specifies the element at the specified index in the array.\n\n\narray[FIRST]\n- Specifies the first element in the array.\n\n\narray[LAST]\n- Specifies the last element in the array.\n\n\narray[SIZE]\n- Specifies the size of the array\n\n\nelements()[0].tableViews()[0].cells().withPredicate(\nstaticTexts[SIZE] \n 2\n)\nsame in Xpath: /*[1]/UIATableView[1]/UIATableCell[count(UIAStaticText) \n 2]\n\n\n\n\nIdentifiers\n\n\nC style identifier\n\n- Any C style identifier that is not a reserved word.\n\n\n#symbol\n\n- Used to escape a reserved word into a user identifier.\n\n\n[\\]{octaldigit}{3}\n\n- Used to escape an octal number ( \n\\\n followed by 3 octal digits).\n\n\n[\\][xX]{hexdigit}{2}\n\n- Used to escape a hex number ( \n\\x\n or \n\\X\n followed by 2 hex digits).\n\n\n[\\][uU]{hexdigit}{4}\n\n- Used to escape a Unicode number ( \n\\u\n or \n\\U\n followed by 4 hex digits).\n\n\nLiterals\n\n\nSingle and double quotes produce the same result, but they do not terminate each other. For example, \n\"abc\"\n and \n'abc'\n are identical, whereas \n\"a'b'c\"\n is equivalent to a space-separated concatenation of \na, 'b', c\n.\n\n\nFALSE , NO\n- Logical false.\n\n\nTRUE , YES\n- Logical true.\n\n\nNULL , NIL\n- A null value.\n\n\nSELF\n- Represents the object being evaluated.\n\n\n\"text\"\n- A character string.\n\n\n'text'\n- A character string.\n\n\nComma-separated literal array\n\n- For example, \n{ 'comma', 'separated', 'literal', 'array' }\n .\n\n\nStandard integer and fixed-point notations\n\n- For example, \n1 , 27 , 2.71828 , 19.75\n .\n\n\nFloating-point notation with exponentiation\n\n- For example, \n9.2e-5\n .\n\n\n0x\n- Prefix used to denote a hexadecimal digit sequence.\n\n\n0o\n- Prefix used to denote an octal digit sequence.\n\n\n0b\n- Prefix used to denote a binary digit sequence.\n\n\nReserved Words\n\n\nThe following words are reserved:\n\n\nAND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE\n\n\nAppium predicate helpers\n\n\nAppium has \nhelpers for predicate search\n in app.js:\n\n\n\n\ngetFirstWithPredicate\n\n\ngetFirstWithPredicateWeighted\n\n\ngetAllWithPredicate\n\n\ngetNameContains\n\n\n\n\nHere's a Ruby example:\n\n\n# Ruby example\ntext = 'Various uses'\npredicate = \nname contains[c] '#{text}' || label contains[c] '#{text}' || value contains[c] '#{text}'\n\nelement = execute_script(%Q(au.mainApp().getFirstWithPredicate(\n#{predicate}\n);))\n\nputs element.name # Buttons, Various uses of UIButton", 
            "title": "iOS Predicate Guide"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#ios-predicate", 
            "text": "NOTE : iOS predicates are usable in iOS 9.3 and below using the  -ios uiautomation  locator strategy and they are usable in iOS 10 and above using the  -ios predicate string  locator strategy  It is worth looking at  '-ios uiautomation'  search strategy with  Predicates . UIAutomation JavaScript API  which has the following useful methods:  (UIAElement) UIAElementArray.firstWithPredicate(PredicateString predicateString)\n(UIAElementArray) UIAElementArray.withPredicate(PredicateString predicateString)  Native JS search strategy (powered by Apple) provides much more flexibility and is like Xpath. Predicates  can be used to restrict an elements set to select only those ones for which some condition is true.  '-ios uiautomation' example:  // java\nappiumDriver.findElementsByIosUIAutomation( collectionViews()[0].cells().withPredicate(\\ ANY staticTexts.isVisible == TRUE\\ ) );  '-ios predicate string' example:  // java\nappiumDriver.findElementsByIosNsPredicate( isWDVisible == 1 );  -  will select only those   UIACollectionCell  elements that have visible  UIAStaticText  child elements, and themselves are childs of 1st  UIACollectionView  element that should be located under the main app window.  Here  staticTexts()  and  isVisible()  are methods available in  UIAElementArray  and  UIAElement  classes respectively.  Note that  UIAElementArray  numbering begins with  0  unlike Xpath where indexes counting starts from  1  Here's a list of available Predicates (mostly taken from  Predicates Programming Guide )", 
            "title": "iOS Predicate"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#basic-comparisons", 
            "text": "= , ==\n- The left-hand expression is equal to the right-hand expression:  tableViews()[1].cells().firstWithPredicate( label == 'Olivia'  )\n\nsame in Xpath: /UIATableView[2]/UIATableCell[@label = 'Olivia'][1]  >= , =>\n- The left-hand expression is greater than or equal to the right-hand expression.  = , = \n- The left-hand expression is less than or equal to the right-hand expression.  >\n- The left-hand expression is greater than the right-hand expression.  \n- The left-hand expression is less than the right-hand expression.  != ,  >\n- The left-hand expression is not equal to the right-hand expression.  BETWEEN\n- The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example,  1 BETWEEN { 0 , 33 } , or  $INPUT BETWEEN { $LOWER, $UPPER } .\nIn Objective-C, you could create a BETWEEN predicate as shown in the following example:  NSPredicate *betweenPredicate =\n    [NSPredicate predicateWithFormat: @ attributeName BETWEEN %@ , @[@1, @10]];  This creates a predicate that matches  ( ( 1  = attributeValue )   ( attributeValue  = 10 ) )", 
            "title": "Basic Comparisons"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#boolean-value-predicates", 
            "text": "TRUEPREDICATE\n- A predicate that always evaluates to  TRUE  .  FALSEPREDICATE\n- A predicate that always evaluates to  FALSE .", 
            "title": "Boolean Value Predicates"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#basic-compound-predicates", 
            "text": "AND ,  \n- Logical AND.  OR , ||\n- Logical OR.  NOT , !\n- Logical NOT.", 
            "title": "Basic Compound Predicates"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#string-comparisons", 
            "text": "String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters  c  and  d  within square braces to specify case and diacritic insensitivity respectively, for example  firstName BEGINSWITH[cd] $FIRST_NAME  BEGINSWITH\n- The left-hand expression begins with the right-hand expression.  scrollViews()[3].buttons().firstWithPredicate( name BEGINSWITH 'results toggle'  )\n\nsame in Xpath: /UIAScrollView[4]/UIAButton[starts-with(@name, 'results toggle')][1]  CONTAINS\n- The left-hand expression contains the right-hand expression.  tableViews()[1].cells().withPredicate( ANY collectionViews[0].buttons.name CONTAINS 'opera' )\n\nsame in Xpath: /UIATableView[2]/UIATableCell[UIACollectionView[1]/UIAButton[contains(@name, 'opera')]]  ENDSWITH\n- The left-hand expression ends with the right-hand expression.  LIKE\n- The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters.  tableViews()[0].cells().firstWithPredicate( name LIKE '*Total: $*'  )\n\nsame in Xpath: /UIATableView[1]/UIATableCell[matches(@name, '.*Total: \\$.*')][1]  MATCHES\n- The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for  Regular Expressions ).  tableViews().firstWithPredicate( value MATCHES '.*of 7'  )\n\nsame in Xpath: /UIATableView[matches(@value, '.*of 7')][1]", 
            "title": "String Comparisons"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#aggregate-operations", 
            "text": "ANY , SOME\n- Specifies any of the elements in the following expression. For example  ANY children.age   18  .  tableViews()[0].cells().firstWithPredicate( SOME staticTexts.name = 'red' ).staticTexts().withName('red')\n\nsame in Xpath: /UIATableView[1]/UIATableCell[UIAStaticText/@name = 'red'][1]/UIAStaticText[@name = 'red']  ALL\n- Specifies all of the elements in the following expression. For example  ALL children.age   18  .  NONE\n- Specifies none of the elements in the following expression. For example,  NONE children.age   18  . This is logically equivalent to  NOT (ANY ...)  .  IN\n- Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example,  name IN { 'Ben', 'Melissa', 'Matthew' }  . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used.  array[index]\n- Specifies the element at the specified index in the array.  array[FIRST]\n- Specifies the first element in the array.  array[LAST]\n- Specifies the last element in the array.  array[SIZE]\n- Specifies the size of the array  elements()[0].tableViews()[0].cells().withPredicate( staticTexts[SIZE]   2 )\nsame in Xpath: /*[1]/UIATableView[1]/UIATableCell[count(UIAStaticText)   2]", 
            "title": "Aggregate Operations"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#identifiers", 
            "text": "C style identifier \n- Any C style identifier that is not a reserved word.  #symbol \n- Used to escape a reserved word into a user identifier.  [\\]{octaldigit}{3} \n- Used to escape an octal number (  \\  followed by 3 octal digits).  [\\][xX]{hexdigit}{2} \n- Used to escape a hex number (  \\x  or  \\X  followed by 2 hex digits).  [\\][uU]{hexdigit}{4} \n- Used to escape a Unicode number (  \\u  or  \\U  followed by 4 hex digits).", 
            "title": "Identifiers"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#literals", 
            "text": "Single and double quotes produce the same result, but they do not terminate each other. For example,  \"abc\"  and  'abc'  are identical, whereas  \"a'b'c\"  is equivalent to a space-separated concatenation of  a, 'b', c .  FALSE , NO\n- Logical false.  TRUE , YES\n- Logical true.  NULL , NIL\n- A null value.  SELF\n- Represents the object being evaluated.  \"text\"\n- A character string.  'text'\n- A character string.  Comma-separated literal array \n- For example,  { 'comma', 'separated', 'literal', 'array' }  .  Standard integer and fixed-point notations \n- For example,  1 , 27 , 2.71828 , 19.75  .  Floating-point notation with exponentiation \n- For example,  9.2e-5  .  0x\n- Prefix used to denote a hexadecimal digit sequence.  0o\n- Prefix used to denote an octal digit sequence.  0b\n- Prefix used to denote a binary digit sequence.", 
            "title": "Literals"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#reserved-words", 
            "text": "The following words are reserved:  AND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE", 
            "title": "Reserved Words"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-predicate/#appium-predicate-helpers", 
            "text": "Appium has  helpers for predicate search  in app.js:   getFirstWithPredicate  getFirstWithPredicateWeighted  getAllWithPredicate  getNameContains   Here's a Ruby example:  # Ruby example\ntext = 'Various uses'\npredicate =  name contains[c] '#{text}' || label contains[c] '#{text}' || value contains[c] '#{text}' \nelement = execute_script(%Q(au.mainApp().getFirstWithPredicate( #{predicate} );))\n\nputs element.name # Buttons, Various uses of UIButton", 
            "title": "Appium predicate helpers"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-touch-id/", 
            "text": "Touch ID\n\n\n(see \nhttps://github.com/appium/appium-xcuitest-driver/blob/master/docs/touch-id.md\n)", 
            "title": "iOS Touch ID Guide"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-touch-id/#touch-id", 
            "text": "(see  https://github.com/appium/appium-xcuitest-driver/blob/master/docs/touch-id.md )", 
            "title": "Touch ID"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-install-certificate/", 
            "text": "Automating Installation of Self-Signed Certificate on iOS\n\n\nUnfortunately, Apple does not provide any command line options which can help to install self-signed certificate on a real device or Simulator. However, there is \nover-the-air\n enrollment technology, which allows the deployment of several entity types, including such certificates, by simply downloading specially prepared configuration files with the built-in web browser. After the configuration is downloaded it can be installed and trusted by going through several simple wizard steps.\n\n\n\n\nmobile: installCertificate", 
            "title": "iOS Install Certificate"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-install-certificate/#automating-installation-of-self-signed-certificate-on-ios", 
            "text": "Unfortunately, Apple does not provide any command line options which can help to install self-signed certificate on a real device or Simulator. However, there is  over-the-air  enrollment technology, which allows the deployment of several entity types, including such certificates, by simply downloading specially prepared configuration files with the built-in web browser. After the configuration is downloaded it can be installed and trusted by going through several simple wizard steps.   mobile: installCertificate", 
            "title": "Automating Installation of Self-Signed Certificate on iOS"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/", 
            "text": "tvOS support\n\n\n\n\nAppium 1.13.0+ has tvOS support via XCUITest driver\n\n\nIt does not work on Apple TV 4K since \nios-deploy\n does not work on wireless devices\n\n\n\n\n\n\n\n\n\n\nSetup\n\n\nYou can run tests for tvOS by changing the \nplatformName\n capability like it is done below.\n\n\n{\n    \nautomationName\n: \nXCUITest\n,\n    \nplatformName\n: \ntvOS\n, // here\n    \nplatformVersion\n: \n12.2\n,\n    \ndeviceName\n: \nApple TV\n,\n    ...\n}\n\n\n\n\nTips to build WDA for tvOS\n- Update to the latest Carthage\n- Be sure tvOS simulator exists in your simulator list if you would like to run your test on tvOS simulators\n    - e.g. \nxcrun simctl list | grep \"com.apple.CoreSimulator.SimRuntime.tvOS\"\n shows results\n    - Newer Carthage raises an error like \nCould not find any available simulators for tvOS\n if tvOS simulators do not exist in tvOS build\n\n\nLimitations\n\n\nGesture commands do not work for tvOS. Some commands such as pasteboard do not work as well.\n\n\nWe can handle \nfocus\n on tvOS by simply pressing keys such as up/down/left/right/home.\ntvOS performs actions on the \nfocused\n element. You can get the value of the \nfocus\n attribute via \nAttributes API\n. \nGet active element\n API returns the focused element.\n\n\nBasic Actions\n\n\npressButton\n and getting the focused element by \nget active element\n are basic actions for tvOS.\nConsider using \nwait\n methods since tvOS also has animation.\n\n\n# Ruby\nelement = @driver.find_element :accessibility_id, 'element on the app'\n# Returns true if the element is focused, otherwise false\nelement.focused #=\n 'true'\n# Appium moves the focus to the element by pressing the corresponding keys and clicking the element\nelement.click\n# Get the app state\n@driver.app_state('test.package.name') # =\n :running_in_foreground\n# Press keys\n@driver.execute_script 'mobile: pressButton', { name: 'Home' }\n# Move focus and get the focused element\n@driver.execute_script 'mobile: pressButton', { name: 'Up' }\n# Get a focused element\nelement = @driver.switch_to.active_element\nelement.label #=\n \nSettings\n\n\n\n\n\n# Python\nelement = driver.find_element_by_accessibility_id('element on the app')\nelement.get_attribute('focused')\nelement.click()\ndriver.query_app_state('test.package.name')\ndriver.execute_script('mobile: pressButton', { 'name': 'Home' })\ndriver.execute_script('mobile: pressButton', { 'name': 'Up' })\nelement = driver.switch_to.active_element\nelement.get_attribute('label')\n\n\n\n\n// Java\nWebElement element = driver.findElementByAccessibilityId(\nelement on the app\n);\nelement.getAttribute(\nfocused\n);\nelement.click();\ndriver.queryAppState(\ntest.package.name\n);\ndriver.executeScript(\nmobile: pressButton\n, ImmutableMap.of(\nname\n, \nHome\n));\ndriver.executeScript(\nmobile: pressButton\n, ImmutableMap.of(\nname\n, \nUp\n));\nelement = driver.switchTo().activeElement();\nelement.getAttribute(\nlabel\n);\n\n\n\n\n// webdriver.io example\nconst element = $('~SomeAccessibilityId');\nelement.getAttribute('focused');\nelement.click();\ndriver.execute('mobile: pressButton', {name: 'Home'});\ndriver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = driver.getActiveElement();\nactiveElement.getAttribute('label');\n\n// WD example\nconst element = await driver.elementByAccessibilityId('element on the app');\nawait element.getAttribute('focused');\nawait element.click();\nawait driver.execute('mobile: pressButton', {name: 'Home'});\nawait driver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = await driver.active();\nawait activeElement.getAttribute('label');\n\n\n\n\nMore actions\n\n\ntvOS provides \nremote controller\n based actions. Appium provides \nButtons\n actions via \nmobile: pressButton\n. These are \nmenu\n, \nup/down/left/right\n, \nhome\n, \nplaypause\n and \nselect\n. Available actions are enumerated in the error message if you send unsupported button name to the server.\n\n\nAppium calculates \nup/down/left/right\n and \nselect\n sequence automatically if the combination of \nfind element/s\n and \nclick\n is provided. You should not care about which keys should be pressed to reach an arbitrary element every time.\n\n\nYou can also handle setting a focus or starting/pausing a playback pressing button actions. \nmenu\n button works as \nback\n for iOS context in tvOS.\n\n\nTest Running Environment\n\n\n\n\nSimulators on your machine or real devices connected to your machine\n\n\nTesting and development on real tvOS devices supported by \nHeadSpin\n\n\n\n\nResources\n\n\n\n\nRelated issue:\n\n\nhttps://github.com/appium/appium/pull/12401\n\n\ne.g. \nappium-xcuitest-driver#911\n, \nappium-xcuitest-driver#939\n, \nappium-xcuitest-driver#931\n, \nappium/WebDriverAgent/pull/163", 
            "title": "tvOS support"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#tvos-support", 
            "text": "Appium 1.13.0+ has tvOS support via XCUITest driver  It does not work on Apple TV 4K since  ios-deploy  does not work on wireless devices", 
            "title": "tvOS support"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#setup", 
            "text": "You can run tests for tvOS by changing the  platformName  capability like it is done below.  {\n     automationName :  XCUITest ,\n     platformName :  tvOS , // here\n     platformVersion :  12.2 ,\n     deviceName :  Apple TV ,\n    ...\n}  Tips to build WDA for tvOS\n- Update to the latest Carthage\n- Be sure tvOS simulator exists in your simulator list if you would like to run your test on tvOS simulators\n    - e.g.  xcrun simctl list | grep \"com.apple.CoreSimulator.SimRuntime.tvOS\"  shows results\n    - Newer Carthage raises an error like  Could not find any available simulators for tvOS  if tvOS simulators do not exist in tvOS build", 
            "title": "Setup"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#limitations", 
            "text": "Gesture commands do not work for tvOS. Some commands such as pasteboard do not work as well.  We can handle  focus  on tvOS by simply pressing keys such as up/down/left/right/home.\ntvOS performs actions on the  focused  element. You can get the value of the  focus  attribute via  Attributes API .  Get active element  API returns the focused element.", 
            "title": "Limitations"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#basic-actions", 
            "text": "pressButton  and getting the focused element by  get active element  are basic actions for tvOS.\nConsider using  wait  methods since tvOS also has animation.  # Ruby\nelement = @driver.find_element :accessibility_id, 'element on the app'\n# Returns true if the element is focused, otherwise false\nelement.focused #=  'true'\n# Appium moves the focus to the element by pressing the corresponding keys and clicking the element\nelement.click\n# Get the app state\n@driver.app_state('test.package.name') # =  :running_in_foreground\n# Press keys\n@driver.execute_script 'mobile: pressButton', { name: 'Home' }\n# Move focus and get the focused element\n@driver.execute_script 'mobile: pressButton', { name: 'Up' }\n# Get a focused element\nelement = @driver.switch_to.active_element\nelement.label #=   Settings   # Python\nelement = driver.find_element_by_accessibility_id('element on the app')\nelement.get_attribute('focused')\nelement.click()\ndriver.query_app_state('test.package.name')\ndriver.execute_script('mobile: pressButton', { 'name': 'Home' })\ndriver.execute_script('mobile: pressButton', { 'name': 'Up' })\nelement = driver.switch_to.active_element\nelement.get_attribute('label')  // Java\nWebElement element = driver.findElementByAccessibilityId( element on the app );\nelement.getAttribute( focused );\nelement.click();\ndriver.queryAppState( test.package.name );\ndriver.executeScript( mobile: pressButton , ImmutableMap.of( name ,  Home ));\ndriver.executeScript( mobile: pressButton , ImmutableMap.of( name ,  Up ));\nelement = driver.switchTo().activeElement();\nelement.getAttribute( label );  // webdriver.io example\nconst element = $('~SomeAccessibilityId');\nelement.getAttribute('focused');\nelement.click();\ndriver.execute('mobile: pressButton', {name: 'Home'});\ndriver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = driver.getActiveElement();\nactiveElement.getAttribute('label');\n\n// WD example\nconst element = await driver.elementByAccessibilityId('element on the app');\nawait element.getAttribute('focused');\nawait element.click();\nawait driver.execute('mobile: pressButton', {name: 'Home'});\nawait driver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = await driver.active();\nawait activeElement.getAttribute('label');", 
            "title": "Basic Actions"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#more-actions", 
            "text": "tvOS provides  remote controller  based actions. Appium provides  Buttons  actions via  mobile: pressButton . These are  menu ,  up/down/left/right ,  home ,  playpause  and  select . Available actions are enumerated in the error message if you send unsupported button name to the server.  Appium calculates  up/down/left/right  and  select  sequence automatically if the combination of  find element/s  and  click  is provided. You should not care about which keys should be pressed to reach an arbitrary element every time.  You can also handle setting a focus or starting/pausing a playback pressing button actions.  menu  button works as  back  for iOS context in tvOS.", 
            "title": "More actions"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#test-running-environment", 
            "text": "Simulators on your machine or real devices connected to your machine  Testing and development on real tvOS devices supported by  HeadSpin", 
            "title": "Test Running Environment"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-tvos/#resources", 
            "text": "Related issue:  https://github.com/appium/appium/pull/12401  e.g.  appium-xcuitest-driver#911 ,  appium-xcuitest-driver#939 ,  appium-xcuitest-driver#931 ,  appium/WebDriverAgent/pull/163", 
            "title": "Resources"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/", 
            "text": "Pushing/Pulling files\n\n\nAppium provides \nPull Folder\n, \nPull File\n and \nPush File\n to move files.\nThis documentation aims to help to understand how they work for iOS.\n\n\nFormat\n\n\nBelow is the basic format.\n\n\n\n\n@\napp_bundle_id\n:\noptional_container_type\n/\npath_to_the_file_or_folder_inside_container\n\n\n@\napp_bundle_id\n/\npath_to_the_file_or_folder_inside_container\n\n\npath_to_the_file_or_folder_inside_container\n\n\n\n\nReal device\n\n\nFormat\n\n\nThe format of method argument should be the following:\n\n\n\n\n@\napp_bundle_id\n is the application bundle identifier\n\n\noptional_container_type\n is the container type\n\n\ndocuments\n is the only available option\n\n\nYou may specify \ndocuments\n container type only for bundle ids that exists in the device\n\n\nSince appium-xcuitest-driver v3.55.0, \nmobile: listApps\n provides a list of available applications. Applications which have \nUIFileSharingEnabled\n attribute as \ntrue\n can be specified.\n\n\n\n\n\n\n\n\ne.g. Below \nOn My iPhone\n image has \nSlack\n folder, but \ncom.tinyspeck.chatlyio\n does not exist in installed bundle ids. Then, we cannot mount it as \ncom.tinyspeck.chatlyio@documents/\n\n\n\n    - The others work as \nformat 2\n\n        - Only apps having the flag \nUIFileSharingEnabled\n in their \ninfo.plist\n can be mounted\n- \npath_to_the_file_or_folder_inside_container\n is the target to push/pull to/from them.\n    - If the \noptional_container_type\n is \ndocuments\n, this path will be mapped to\n      \nOn My iPhone/\napp name\n in Files app\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nformat 3\n is not allowed for real devices.\n\n\nExample\n\n\nIf you would like to pull \nPresentation.key\n form Keynote app, you can get it as below.\n\n\n\n\nPull file\n\n\n\n\n// webdriver.io\nlet data = driver.pullFile('@io.appium.example:documents/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');\n\n\n\n\n# ruby_lib_core\nfile = @driver.pull_file '@com.apple.Keynote:documents/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f\n file }\n\n\n\n\nThe file is in \nOn My iPhone/Keynote\n of \nFiles\n app.\n\n\n\n\n\n\n\n\nTop\n\n\nOn  My iPhone\n\n\nKeynote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf the file is in deeper place like \nOn My iPhone/Keynote/Dir1/Dir2\n, then the Ruby command should be:\n\n\n// webdriver.io\nlet data = driver.pullFile('@io.appium.example:documents/Dir1/Dir2/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');\n\n\n\n\n# ruby_lib_core\nfile = @driver.pull_file '@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f\n file }\n\n\n\n\n\n\nPull folder\n\n\n\n\nYou can pull documents root of \nOn My iPhone/Keynote\n as \n@driver.pull_folder '@com.apple.Keynote:documents/'\n.\n\n\n// webdriver.io\nlet data = driver.pullFolder('@io.appium.example:documents/');\nawait fs.writeFile('documents.zip', Buffer.from(data, 'base64'), 'binary');\n\n\n\n\n# ruby_lib_core\nfile = @driver.pull_folder '@com.apple.Keynote:documents/'\nFile.open('documents.zip', 'wb') { |f| f\n file }\n\n\n\n\n\n\nPush file\n\n\n\n\nSame as pull:\n\n\n// webdriver.io\ndriver.pushFile('@com.apple.Keynote:documents/text.txt', new Buffer(\nHello World\n).toString('base64'));\n\n\n\n\n# ruby_lib_core\n@driver.push_file '@com.apple.Keynote:documents/text.txt', (File.read 'path/to/file')\n\n\n\n\nSimulator\n\n\nFormat\n\n\nThe format of method argument should be the following:\n\n\n\n\n@\napp_bundle_id\n is the application bundle identifier\n\n\noptional_container_type\n is the container type\n\n\napp\n, \ndata\n, \ngroups\n or \nA specific App Group container\n\n\nformat 2\n case is handled as \napp\n container\n\n\n\n\n\n\npath_to_the_file_or_folder_inside_container\n is the target to push/pull to/from them\n\n\n\n\nformat 3\n format handles as \napp\n container\n\n\nExample\n\n\n// Java\n// Get AddressBook.sqlitedb in test app package ('app' container)\nbyte[] fileContent = driver.pullFile(\nLibrary/AddressBook/AddressBook.sqlitedb\n);\nPath dstPath = Paths.get(new File(\n/local/path/AddressBook.sqlitedb\n));\nFiles.write(dstPath, fileContent);\n\n\n\n\nreferences\n\n\n\n\nhttps://stackoverflow.com/questions/1108076/where-does-the-iphone-simulator-store-its-data\n\n\nhttps://stackoverflow.com/questions/48884248/how-can-i-add-files-to-the-ios-simulator\n\n\nhttps://apple.stackexchange.com/questions/299413/how-to-allow-the-files-app-to-save-to-on-my-iphone-or-to-on-my-ipad-in-ios/299565#299565", 
            "title": "Pushing/Pulling files"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#pushingpulling-files", 
            "text": "Appium provides  Pull Folder ,  Pull File  and  Push File  to move files.\nThis documentation aims to help to understand how they work for iOS.", 
            "title": "Pushing/Pulling files"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#format", 
            "text": "Below is the basic format.   @ app_bundle_id : optional_container_type / path_to_the_file_or_folder_inside_container  @ app_bundle_id / path_to_the_file_or_folder_inside_container  path_to_the_file_or_folder_inside_container", 
            "title": "Format"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#real-device", 
            "text": "", 
            "title": "Real device"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#format_1", 
            "text": "The format of method argument should be the following:   @ app_bundle_id  is the application bundle identifier  optional_container_type  is the container type  documents  is the only available option  You may specify  documents  container type only for bundle ids that exists in the device  Since appium-xcuitest-driver v3.55.0,  mobile: listApps  provides a list of available applications. Applications which have  UIFileSharingEnabled  attribute as  true  can be specified.     e.g. Below  On My iPhone  image has  Slack  folder, but  com.tinyspeck.chatlyio  does not exist in installed bundle ids. Then, we cannot mount it as  com.tinyspeck.chatlyio@documents/  \n    - The others work as  format 2 \n        - Only apps having the flag  UIFileSharingEnabled  in their  info.plist  can be mounted\n-  path_to_the_file_or_folder_inside_container  is the target to push/pull to/from them.\n    - If the  optional_container_type  is  documents , this path will be mapped to\n       On My iPhone/ app name  in Files app        format 3  is not allowed for real devices.", 
            "title": "Format"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#example", 
            "text": "If you would like to pull  Presentation.key  form Keynote app, you can get it as below.   Pull file   // webdriver.io\nlet data = driver.pullFile('@io.appium.example:documents/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');  # ruby_lib_core\nfile = @driver.pull_file '@com.apple.Keynote:documents/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f  file }  The file is in  On My iPhone/Keynote  of  Files  app.     Top  On  My iPhone  Keynote            If the file is in deeper place like  On My iPhone/Keynote/Dir1/Dir2 , then the Ruby command should be:  // webdriver.io\nlet data = driver.pullFile('@io.appium.example:documents/Dir1/Dir2/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');  # ruby_lib_core\nfile = @driver.pull_file '@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f  file }   Pull folder   You can pull documents root of  On My iPhone/Keynote  as  @driver.pull_folder '@com.apple.Keynote:documents/' .  // webdriver.io\nlet data = driver.pullFolder('@io.appium.example:documents/');\nawait fs.writeFile('documents.zip', Buffer.from(data, 'base64'), 'binary');  # ruby_lib_core\nfile = @driver.pull_folder '@com.apple.Keynote:documents/'\nFile.open('documents.zip', 'wb') { |f| f  file }   Push file   Same as pull:  // webdriver.io\ndriver.pushFile('@com.apple.Keynote:documents/text.txt', new Buffer( Hello World ).toString('base64'));  # ruby_lib_core\n@driver.push_file '@com.apple.Keynote:documents/text.txt', (File.read 'path/to/file')", 
            "title": "Example"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#simulator", 
            "text": "", 
            "title": "Simulator"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#format_2", 
            "text": "The format of method argument should be the following:   @ app_bundle_id  is the application bundle identifier  optional_container_type  is the container type  app ,  data ,  groups  or  A specific App Group container  format 2  case is handled as  app  container    path_to_the_file_or_folder_inside_container  is the target to push/pull to/from them   format 3  format handles as  app  container", 
            "title": "Format"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#example_1", 
            "text": "// Java\n// Get AddressBook.sqlitedb in test app package ('app' container)\nbyte[] fileContent = driver.pullFile( Library/AddressBook/AddressBook.sqlitedb );\nPath dstPath = Paths.get(new File( /local/path/AddressBook.sqlitedb ));\nFiles.write(dstPath, fileContent);", 
            "title": "Example"
        }, 
        {
            "location": "/writing-running-appium/ios/ios-xctest-file-movement/#references", 
            "text": "https://stackoverflow.com/questions/1108076/where-does-the-iphone-simulator-store-its-data  https://stackoverflow.com/questions/48884248/how-can-i-add-files-to-the-ios-simulator  https://apple.stackexchange.com/questions/299413/how-to-allow-the-files-app-to-save-to-on-my-iphone-or-to-on-my-ipad-in-ios/299565#299565", 
            "title": "references"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/", 
            "text": "Audio Capture From iOS Simulators and Real Devices\n\n\nClient Side API\n\n\nSince Appium 1.18.0 there is a possibility to record iOS audio stream and save\nit to a file, which could be then retrieved on the client side.\nApple does not provide any API to directly retrieve the audio stream from a\nSimulator or a real device, but it is possible to redirect that stream to\nthe host machine, where it could be captured.\n\n\n\n\nmobile: startAudioRecording\n\n\nmobile: stopAudioRecording\n\n\n\n\nServer Requirements\n\n\nAppium version should be 1.18.0 or newer.\n\n\nIt is mandatory that the host machine has \nFFMPEG\n installed and available in PATH. On macOS it could be installed via \nBrew\n: \nbrew install ffmpeg\n.\n\n\nmacOS since version 10.15 requires applications that record Microphone audio to be explicitly enabled in System Preferences-\nSecurity \n Privacy-\nPrivacy-\nMicrophone tab.\nMake sure either FFMPEG itself or the parent Appium process (e.g. Terminal) is present in that list.\n\n\nThe feature is potentially unsecure, so it must be explicitly allowed\non the server side.\nThe feature name is \naudio_record\n.\nSee \nSecurity\n for more details.\n\n\nSimulator Setup\n\n\nThe following steps are necessary to setup iOS Simulator audio capture:\n\n\n\n\nInstall \nSoundflower\n\n\nRedirect Simulator audio output to Soundflower. From the main Simulator menu select I/O-\nAudio Output-\nSoundflower (2ch)\n\n\nRun \nffmpeg -f avfoundation -list_devices true -i \"\"\n command in Terminal to get the identifier of the \nSoundflower (2ch)\n device. This identifier prefixed with \n:\n will be then used as \naudioInput\n argument to \nmobile: startAudioRecording\n call\n\n\nTest that your setup works as expected. Run any audio playback in Simulator and execute the following command in Terminal (do not forget to replace the \n-i\n argument value with the one you got from the previous step): \nffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4\n. After 5 seconds there should be \nout.mp4\n file on your Desktop containing the recorded audio stream.\n\n\n\n\nReal Device Setup\n\n\nThe following steps are necessary to setup iOS Real Device audio capture:\n\n\n\n\nConnect your device to the Mac host with a cable\n\n\nRun \nopen -a /System/Applications/Utilities/Audio\\ MIDI\\ Setup.app\n application\n\n\nFind your phone in the list of devices there and click \nEnable\n button next to it\n\n\nRun \nffmpeg -f avfoundation -list_devices true -i \"\"\n command in Terminal and find the identifier of your device in the \nAVFoundation audio devices\n list. This identifier prefixed with \n:\n will be then used as \naudioInput\n argument to \nmobile: startAudioRecording\n call\n\n\nTest that your setup works as expected. Run any audio playback on the device and execute the following command in Terminal (do not forget to replace the \n-i\n argument value with the value you got from the previous step): \nffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4\n. After 5 seconds there should be \nout.mp4\n file on your Desktop containing the recorded audio stream.\n\n\n\n\nApple does not allow phone calls to be redirected this way. You can only record application or system sounds.\n\n\nFurther Reading\n\n\n\n\nhttps://github.com/appium/appium-xcuitest-driver/pull/1207\n\n\nhttps://www.macobserver.com/tips/quick-tip/iphone-audio-input-mac/\n\n\nhttp://www.lorisware.com/blog/2012/04/28/recording-iphone-emulator-video-with-sound/", 
            "title": "Audio Capture"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/#audio-capture-from-ios-simulators-and-real-devices", 
            "text": "", 
            "title": "Audio Capture From iOS Simulators and Real Devices"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/#client-side-api", 
            "text": "Since Appium 1.18.0 there is a possibility to record iOS audio stream and save\nit to a file, which could be then retrieved on the client side.\nApple does not provide any API to directly retrieve the audio stream from a\nSimulator or a real device, but it is possible to redirect that stream to\nthe host machine, where it could be captured.   mobile: startAudioRecording  mobile: stopAudioRecording", 
            "title": "Client Side API"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/#server-requirements", 
            "text": "Appium version should be 1.18.0 or newer.  It is mandatory that the host machine has  FFMPEG  installed and available in PATH. On macOS it could be installed via  Brew :  brew install ffmpeg .  macOS since version 10.15 requires applications that record Microphone audio to be explicitly enabled in System Preferences- Security   Privacy- Privacy- Microphone tab.\nMake sure either FFMPEG itself or the parent Appium process (e.g. Terminal) is present in that list.  The feature is potentially unsecure, so it must be explicitly allowed\non the server side.\nThe feature name is  audio_record .\nSee  Security  for more details.", 
            "title": "Server Requirements"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/#simulator-setup", 
            "text": "The following steps are necessary to setup iOS Simulator audio capture:   Install  Soundflower  Redirect Simulator audio output to Soundflower. From the main Simulator menu select I/O- Audio Output- Soundflower (2ch)  Run  ffmpeg -f avfoundation -list_devices true -i \"\"  command in Terminal to get the identifier of the  Soundflower (2ch)  device. This identifier prefixed with  :  will be then used as  audioInput  argument to  mobile: startAudioRecording  call  Test that your setup works as expected. Run any audio playback in Simulator and execute the following command in Terminal (do not forget to replace the  -i  argument value with the one you got from the previous step):  ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4 . After 5 seconds there should be  out.mp4  file on your Desktop containing the recorded audio stream.", 
            "title": "Simulator Setup"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/#real-device-setup", 
            "text": "The following steps are necessary to setup iOS Real Device audio capture:   Connect your device to the Mac host with a cable  Run  open -a /System/Applications/Utilities/Audio\\ MIDI\\ Setup.app  application  Find your phone in the list of devices there and click  Enable  button next to it  Run  ffmpeg -f avfoundation -list_devices true -i \"\"  command in Terminal and find the identifier of your device in the  AVFoundation audio devices  list. This identifier prefixed with  :  will be then used as  audioInput  argument to  mobile: startAudioRecording  call  Test that your setup works as expected. Run any audio playback on the device and execute the following command in Terminal (do not forget to replace the  -i  argument value with the value you got from the previous step):  ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4 . After 5 seconds there should be  out.mp4  file on your Desktop containing the recorded audio stream.   Apple does not allow phone calls to be redirected this way. You can only record application or system sounds.", 
            "title": "Real Device Setup"
        }, 
        {
            "location": "/writing-running-appium/ios/audio-capture/#further-reading", 
            "text": "https://github.com/appium/appium-xcuitest-driver/pull/1207  https://www.macobserver.com/tips/quick-tip/iphone-audio-input-mac/  http://www.lorisware.com/blog/2012/04/28/recording-iphone-emulator-video-with-sound/", 
            "title": "Further Reading"
        }, 
        {
            "location": "/writing-running-appium/android/actions/", 
            "text": "Low-Level Insights on Android Input Events\n\n\nWhat Are Input Events\n\n\nAndroid OS uses events concept to handle signals received from different input devices.\nIt supports a wide range of different devices, such as touch screen, light pen, mouse, keyboard,\nbut most of them are using \nMotionEvent\n or \nKeyEvent\n APIs, which are derived from the base \nInputEvent\n class. These APIs are quite flexible and support a wide range of different settings.\nWe are particularly interested in the part of these APIs, which are responsible for touch and\nkeyboard events generation/emulation.\n\n\nHow Input Events Are Working\n\n\nAn event is an object, which is generated in response to a signal from an input device.\nThese objects are then delivered to the corresponding kernel subsystem, which processes them\nand notifies all listening processes about taps, key presses, swipes, etc.\nThis means that in order to emulate a signal generated by\nan external device, such as touch screen, it is necessary to just send event objects with\nthe same properties and in the same sequence as they would be generated by a real device.\n\n\nLets Simulate a Single Tap\n\n\nEach input device has a set of actions whose property ranges and sequences are already predefined\nin the operating system. These actions we call \"tap\", \"swipe\" or \"double tap\", etc. The properties\nof each action could be found either in the Android documentation or in the OS source code.\nIn order to perform events sequence, which is recognized as single tap, it is necessary to generate\nthe following motion events:\n - \nACTION_POINTER_DOWN\n\n - wait 125ms (525ms or longer wait will synthesize a long tap action instead)\n - \nACTION_POINTER_UP\n. The \ndownTime\n property should be set to the same timestamp as for \nACTION_POINTER_DOWN\n\n\nIt is also important, that coordinates and other properties of both the starting and the closing event should be equal except of the \neventTime\n one, which is always equal to the current system timestamp in milliseconds (\nSystemClock.uptimeMillis()\n).\nThe \nMotionEvent\n object itself could be created via \nobtain\n API, where parameters are the corresponding event properties.\n\n\nAfter events are created they must be passed to the system for execution.\nSuch action is not secure, so it is only possible in instrumented tests via \ninjectInputEvent\n method of \nIUiAutomationConnection\n interface.\nThis is a very low-level method and it can only be accessed via reflection in automated tests.\nNormally, UiAutomator APIs have wrappers over it (like \ntouchDown\n, \ntouchMove\n, etc.), that already simulate the stuff described above.\n\n\nHow About More Complicated Actions\n\n\nIn theory it is possible to emulate any input action using a generated events sequence.\nAlthough, some actions, like multi-finger swipe,\nare really complicated and require a lot of events to be generated\nwith correct properties and timings. The OS simply ignores given events if they don't follow\ninternal action requirements. There is also a little assistance from UiAutomator framework,\nbecause Google only has wrappers for a limited set of simple actions, like \ntap\n, \ndrag\n or \nswipe\n.\nSo, in order to generate two-finger symmetric swipe we need to supply the following events chain:\n - \nACTION_POINTER_DOWN\n (finger1)\n - \nACTION_POINTER_DOWN\n (finger2)\n - start a loop, that generates \nACTION_POINTER_MOVE\n event each \n20ms\n for both \nfinger1\n and \nfinger2\n until \nACTION_POINTER_UP\n is performed. The \ndownTime\n should be set to the same timestamp as for the corresponding \nACTION_POINTER_DOWN\n. The coordinates of each move event should be points belonging to the path between the corresponding start and end point coordinates normalized by the current timestamp (x0 + sqrt(sqr(x0) + sqr(x1))) * k, y0 + sqrt(sqr(y0) + sqr(y1))) * k).\n - \nACTION_POINTER_UP\n (finger1) The \ndownTime\n property should be set to the same timestamp as for the corresponding \nACTION_POINTER_DOWN\n\n - \nACTION_POINTER_UP\n (finger2) The \ndownTime\n property should be set to the same timestamp as for the corresponding \nACTION_POINTER_DOWN\n\n\nGoogle uses 5ms as interval duration between move events in UiAutomator code,\nbut according to our observations this value is too little,\nwhich causes noticeable delays in actions execution.\n\n\nFurther Reading\n\n\nUnfortunately, there is no so much detailed information on this topic. The only reliable source\nof the information are Android OS sources themselves. Consider visiting the following resources:\n\n\n\n\nhttps://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewConfiguration.java\n\n\nhttps://android.googlesource.com/platform/frameworks/uiautomator/+/refs/heads/master\n\n\nhttps://github.com/appium/appium-uiautomator2-server/tree/master/app/src/main/java/io/appium/uiautomator2/utils/w3c\n\n\nhttps://github.com/appium/appium-uiautomator2-server/tree/master/app/src/test/java/io/appium/uiautomator2/utils/w3c\n\n\nhttps://github.com/appium/appium-espresso-driver/tree/master/espresso-server/app/src/androidTest/java/io/appium/espressoserver/lib/helpers/w3c", 
            "title": "Low-Level Insights on Android Input Events"
        }, 
        {
            "location": "/writing-running-appium/android/actions/#low-level-insights-on-android-input-events", 
            "text": "", 
            "title": "Low-Level Insights on Android Input Events"
        }, 
        {
            "location": "/writing-running-appium/android/actions/#what-are-input-events", 
            "text": "Android OS uses events concept to handle signals received from different input devices.\nIt supports a wide range of different devices, such as touch screen, light pen, mouse, keyboard,\nbut most of them are using  MotionEvent  or  KeyEvent  APIs, which are derived from the base  InputEvent  class. These APIs are quite flexible and support a wide range of different settings.\nWe are particularly interested in the part of these APIs, which are responsible for touch and\nkeyboard events generation/emulation.", 
            "title": "What Are Input Events"
        }, 
        {
            "location": "/writing-running-appium/android/actions/#how-input-events-are-working", 
            "text": "An event is an object, which is generated in response to a signal from an input device.\nThese objects are then delivered to the corresponding kernel subsystem, which processes them\nand notifies all listening processes about taps, key presses, swipes, etc.\nThis means that in order to emulate a signal generated by\nan external device, such as touch screen, it is necessary to just send event objects with\nthe same properties and in the same sequence as they would be generated by a real device.", 
            "title": "How Input Events Are Working"
        }, 
        {
            "location": "/writing-running-appium/android/actions/#lets-simulate-a-single-tap", 
            "text": "Each input device has a set of actions whose property ranges and sequences are already predefined\nin the operating system. These actions we call \"tap\", \"swipe\" or \"double tap\", etc. The properties\nof each action could be found either in the Android documentation or in the OS source code.\nIn order to perform events sequence, which is recognized as single tap, it is necessary to generate\nthe following motion events:\n -  ACTION_POINTER_DOWN \n - wait 125ms (525ms or longer wait will synthesize a long tap action instead)\n -  ACTION_POINTER_UP . The  downTime  property should be set to the same timestamp as for  ACTION_POINTER_DOWN  It is also important, that coordinates and other properties of both the starting and the closing event should be equal except of the  eventTime  one, which is always equal to the current system timestamp in milliseconds ( SystemClock.uptimeMillis() ).\nThe  MotionEvent  object itself could be created via  obtain  API, where parameters are the corresponding event properties.  After events are created they must be passed to the system for execution.\nSuch action is not secure, so it is only possible in instrumented tests via  injectInputEvent  method of  IUiAutomationConnection  interface.\nThis is a very low-level method and it can only be accessed via reflection in automated tests.\nNormally, UiAutomator APIs have wrappers over it (like  touchDown ,  touchMove , etc.), that already simulate the stuff described above.", 
            "title": "Lets Simulate a Single Tap"
        }, 
        {
            "location": "/writing-running-appium/android/actions/#how-about-more-complicated-actions", 
            "text": "In theory it is possible to emulate any input action using a generated events sequence.\nAlthough, some actions, like multi-finger swipe,\nare really complicated and require a lot of events to be generated\nwith correct properties and timings. The OS simply ignores given events if they don't follow\ninternal action requirements. There is also a little assistance from UiAutomator framework,\nbecause Google only has wrappers for a limited set of simple actions, like  tap ,  drag  or  swipe .\nSo, in order to generate two-finger symmetric swipe we need to supply the following events chain:\n -  ACTION_POINTER_DOWN  (finger1)\n -  ACTION_POINTER_DOWN  (finger2)\n - start a loop, that generates  ACTION_POINTER_MOVE  event each  20ms  for both  finger1  and  finger2  until  ACTION_POINTER_UP  is performed. The  downTime  should be set to the same timestamp as for the corresponding  ACTION_POINTER_DOWN . The coordinates of each move event should be points belonging to the path between the corresponding start and end point coordinates normalized by the current timestamp (x0 + sqrt(sqr(x0) + sqr(x1))) * k, y0 + sqrt(sqr(y0) + sqr(y1))) * k).\n -  ACTION_POINTER_UP  (finger1) The  downTime  property should be set to the same timestamp as for the corresponding  ACTION_POINTER_DOWN \n -  ACTION_POINTER_UP  (finger2) The  downTime  property should be set to the same timestamp as for the corresponding  ACTION_POINTER_DOWN  Google uses 5ms as interval duration between move events in UiAutomator code,\nbut according to our observations this value is too little,\nwhich causes noticeable delays in actions execution.", 
            "title": "How About More Complicated Actions"
        }, 
        {
            "location": "/writing-running-appium/android/actions/#further-reading", 
            "text": "Unfortunately, there is no so much detailed information on this topic. The only reliable source\nof the information are Android OS sources themselves. Consider visiting the following resources:   https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewConfiguration.java  https://android.googlesource.com/platform/frameworks/uiautomator/+/refs/heads/master  https://github.com/appium/appium-uiautomator2-server/tree/master/app/src/main/java/io/appium/uiautomator2/utils/w3c  https://github.com/appium/appium-uiautomator2-server/tree/master/app/src/test/java/io/appium/uiautomator2/utils/w3c  https://github.com/appium/appium-espresso-driver/tree/master/espresso-server/app/src/androidTest/java/io/appium/espressoserver/lib/helpers/w3c", 
            "title": "Further Reading"
        }, 
        {
            "location": "/writing-running-appium/android/uiautomator-uiselector/", 
            "text": "uiautomator UiSelector\n\n\nAppium enables searching using \nUiSelectors\n.\n\nUiScrollable\n\nis also supported.\n\n\nNote that the index selector is unreliable so prefer instance instead. The\nfollowing examples are written against the api demos apk using Ruby.\n\n\nFind the first textview.\n\n\n# ruby\nfirst_textview = find_element(:uiautomator, 'new UiSelector().className(\nandroid.widget.TextView\n).instance(0)');\n\n\n\n\nFind the first element by text.\n\n\n# ruby\nfirst_text = find_element(:uiautomator, 'new UiSelector().text(\nAnimation\n)')\nfirst_text.text # \nAnimation\n\n\n\n\n\nFind the first scrollable element, then find a TextView with the text \"Tabs\".\nThe \"Tabs\" element will be scrolled into view.\n\n\n# ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).getChildByText(new UiSelector().className(\nandroid.widget.TextView\n), \nTabs\n)')\n\n\n\n\nAs a special case, scrollIntoView returns the element that is scrolled into view.\nscrollIntoView allows scrolling to any UiSelector.\n\n\n# ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\nWebView\n).instance(0));')\nelement.text # \nWebView", 
            "title": "UiSelector Guide"
        }, 
        {
            "location": "/writing-running-appium/android/uiautomator-uiselector/#uiautomator-uiselector", 
            "text": "Appium enables searching using  UiSelectors . UiScrollable \nis also supported.  Note that the index selector is unreliable so prefer instance instead. The\nfollowing examples are written against the api demos apk using Ruby.  Find the first textview.  # ruby\nfirst_textview = find_element(:uiautomator, 'new UiSelector().className( android.widget.TextView ).instance(0)');  Find the first element by text.  # ruby\nfirst_text = find_element(:uiautomator, 'new UiSelector().text( Animation )')\nfirst_text.text #  Animation   Find the first scrollable element, then find a TextView with the text \"Tabs\".\nThe \"Tabs\" element will be scrolled into view.  # ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).getChildByText(new UiSelector().className( android.widget.TextView ),  Tabs )')  As a special case, scrollIntoView returns the element that is scrolled into view.\nscrollIntoView allows scrolling to any UiSelector.  # ruby\nelement = find_element(:uiautomator, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text( WebView ).instance(0));')\nelement.text #  WebView", 
            "title": "uiautomator UiSelector"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/", 
            "text": "Espresso DataMatcher Selector\n\n\nBy delegating to Espresso's \nData Matcher\n, we can target views that are not visible in the viewport without the need to manually scroll the Views on screen.\n\n\nAdapterViews\n\n\nAndroid apps have special types of Views called \nAdapterViews\n (e.g.: \nScrollView\n, \nListView\n, \nGridView\n) which have child views, but only render that child views that are on-screen. The AdapterView has \"adapter\" object which stores all the data for that view's children, including the views that aren't being rendered.\n\n\nWhen using Espresso's Data Matcher, you can target views that are off-screen by writing a \nHamcrest matcher\n that selects an item from an adapter. If the item is not in the view hierarchy, Espresso automatically scrolls it into view.\n\n\nExample\n\n\nThis is a ListView taken from the source XML of an Android App:\n\n\nandroid.widget.ListView index=\n0\n package=\nio.appium.android.apis\n class=\nandroid.widget.ListView\n checkable=\nfalse\n checked=\nfalse\n clickable=\ntrue\n enabled=\ntrue\n focusable=\ntrue\n focused=\nfalse\n scrollable=\ntrue\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,210][1080,1794]\n resource-id=\nandroid:id/list\n adapter-type=\nHashMap\n adapters=\n{contentDescription=Animation, title=Animation, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }},{contentDescription=Auto Complete, title=Auto Complete, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }}, ...}\n\n    \nandroid.widget.TextView index=\n0\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nDrag and Drop\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,148][1080,274]\n text=\nDrag and Drop\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n1\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nExpandable Lists\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,277][1080,403]\n text=\nExpandable Lists\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n2\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nFocus\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,406][1080,532]\n text=\nFocus\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n3\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nGallery\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,535][1080,661]\n text=\nGallery\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n4\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nGame Controller Input\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,664][1080,790]\n text=\nGame Controller Input\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n5\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nGrid\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,793][1080,919]\n text=\nGrid\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n6\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nHover Events\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,922][1080,1048]\n text=\nHover Events\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n7\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nImageButton\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,1051][1080,1177]\n text=\nImageButton\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n8\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nImageSwitcher\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,1180][1080,1306]\n text=\nImageSwitcher\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n9\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nImageView\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,1309][1080,1435]\n text=\nImageView\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n10\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nLayout Animation\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,1438][1080,1564]\n text=\nLayout Animation\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n11\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nLayouts\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,1567][1080,1693]\n text=\nLayouts\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n    \nandroid.widget.TextView index=\n12\n package=\nio.appium.android.apis\n class=\nandroid.widget.TextView\n content-desc=\nLists\n checkable=\nfalse\n checked=\nfalse\n clickable=\nfalse\n enabled=\ntrue\n focusable=\nfalse\n focused=\nfalse\n scrollable=\nfalse\n long-clickable=\nfalse\n password=\nfalse\n selected=\nfalse\n visible=\ntrue\n bounds=\n[0,1696][1080,1822]\n text=\nLists\n hint=\nfalse\n resource-id=\nandroid:id/text1\n /\n\n\n/android.widget.ListView\n\n\n\n\n\nThis ListView displays menu items [\nDrag and Drop\n, \nExpandable Lists\n, ... to \nLists\n]. This menu has several more items that aren't on-screen and can't be located with standard locators. For example, There's a menu item called \nTextClock\n that is not currently visible in the View hierarchy.\n\n\nThe \nListView\n node in the above XML has an attribute called \nadapters\n that contains the data that \"backs up\" the ListView:\n\n\n{\n    contentDescription = Animation, title = Animation, intent = Intent {\n        cmp = io.appium.android.apis / .ApiDemos(has extras)\n    }\n}, {\n    contentDescription = Auto Complete,\n    title = Auto Complete,\n    intent = Intent {\n        cmp = io.appium.android.apis / .ApiDemos(has extras)\n    }\n}, {\n    contentDescription = Buttons,\n    title = Buttons,\n    intent = Intent {\n        cmp = io.appium.android.apis / .view.Buttons1\n    }\n},\n...\n\n\n\n\nThese items can be targeted using a datamatcher selector. Here's a code snippet that shows how to locate and click \nTextClock\n:\n\n\n// Javascript example\ndriver.findElementById(\nlist\n)\n  .findElement(\n-android datamatcher\n, JSON.stringify({\n    \nname\n: \nhasEntry\n,\n    \nargs\n: [\ntitle\n, \nTextClock\n]\n  }))\n  .click();\n\n\n\n\n# Ruby\n@driver.find_element(:id, 'list')\n  .find_element(:data_matcher, {\n    name: 'hasEntry',\n    args: ['title', 'TextClock']\n  }.to_json)\n  .click\n\n\n\n\n# Python\ndriver.find_element_by_id('list')\n    .find_element_by_android_data_matcher({\n        name='hasEntry',\n        args=['title', 'TextClock']\n    })\n    .click()\n\n\n\n\nThis Appium selector is equivalent to writing this matcher in Espresso:\n\n\n// Espresso code (not Appium code)\nonData(hasEntry(\ntitle\n, \ntextClock\n)\n  .inAdapterView(withId(\nandroid:id/list))\n  .perform(click());\n\n\n\n\nIn this example, we select the parent \nAdapterView\n using an id selector and then find a child of that view by applying a Hamcrest Matcher that matches an object with \ntitle=\"TextClock\"\n.\n\n\nLocating the parent \nAdapterView\n is not necessary if the Activity only has one adapter view. In that case, it can be omitted.\n\n\ndriver.findElement(\n-android datamatcher\n, JSON.stringify({\n    \nname\n: \nhasEntry\n,\n    \nargs\n: [\ntitle\n, \nTextClock\n]\n  }))\n  .click();\n\n\n\n\n# Ruby\n@driver.find_element(:data_matcher, {\n  name: 'hasEntry',\n  args: ['title', 'TextClock']\n}.to_json).click\n\n\n\n\n# Python\ndriver.find_element_by_android_data_matcher({\n    name='hasEntry',\n    args=['title', 'TextClock']\n}).click()\n\n\n\n\nWriting the Selector\n\n\nThe data matcher selector uses Java reflection to invoke a \nHamcrest matcher\n that's used to locate the adapter object. The matcher is in JSON format and has this format\n\n\n{\n  \nname\n: \nMETHOD_NAME\n,\n  \nargs\n: [...],\n\n\n\n\nThe name is a Hamcrest matcher method name. This defaults to the \norg.hamcrest.Matchers\n namespace, but fully qualifed matcher method names can be used too (e.g.: \nandroid.support.test.espresso.matcher.CursorMatchers.withRowBlob\n).\n\n\nThe args are a list of args that the method takes (can be undefined if it takes no args). These can be strings, numbers, booleans or other hamcrest matcher JSON definitions.\n\n\nJSON matcher samples\n\n\nExamples of JSON matchers with the equivalent Espresso \nonData\n matcher\n\n\nStartsWith\n\n\n// 'startsWith' JSON\n{\n  \nname\n: \nstartsWith\n,\n  \nargs\n: \nsubstr\n // if it's a single arg, we don't need args to be an array\n}\n\n\n\n\n// Espresso 'startsWith' example\nonData(startsWith(\nsubstr\n));\n\n\n\n\nMultiple Matchers\n\n\n// 'multiple matchers' JSON\n{\n  \nname\n: \nallOf\n,\n  \nargs\n: [\n    {\nname\n: \ninstanceOf\n, \nargs\n: \nMap.class\n},\n    {\nname\n: \nhasEntry\n, \nargs\n: {\n      \nname\n: \nequalTo\n, \nargs\n: \nSTR\n\n    }},\n    {\nname\n: \nis\n, \nargs\n: \nitem: 50\n}\n  ]\n}\n\n\n\n\n// Espresso 'multiple matchers' example\nonData(allOf(is(instanceOf(Map.class)), hasEntry(equalTo(\nSTR\n), is(\nitem: 50\n))));\n\n\n\n\nCursor Matchers\n\n\n// 'cursor matchers' JSON\n{\n  \nname\n: \nis\n, \nargs\n: {\n    \nname\n: \ninstanceOf\n, \nargs\n: \nCursor.class\n\n  },\n  \nname\n: \nCursorMatchers.withRowString\n, \nargs\n: [\n    \njob_title\n, {\nname\n: \nis\n, \nargs\n: \nBarista\n}\n  ]\n}\n\n\n\n\n// Espresso 'cursor matchers' example\nonData(\n    is(instanceOf(Cursor.class)),\n    CursorMatchers.withRowString(\njob_title\n, is(\nBarista\n))\n);\n\n\n\n\nResources\n\n\n\n\nExplanation of Views vs. Data in Espresso\n\n\nEspresso lists", 
            "title": "Espresso Datamatcher Guide"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#espresso-datamatcher-selector", 
            "text": "By delegating to Espresso's  Data Matcher , we can target views that are not visible in the viewport without the need to manually scroll the Views on screen.", 
            "title": "Espresso DataMatcher Selector"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#adapterviews", 
            "text": "Android apps have special types of Views called  AdapterViews  (e.g.:  ScrollView ,  ListView ,  GridView ) which have child views, but only render that child views that are on-screen. The AdapterView has \"adapter\" object which stores all the data for that view's children, including the views that aren't being rendered.  When using Espresso's Data Matcher, you can target views that are off-screen by writing a  Hamcrest matcher  that selects an item from an adapter. If the item is not in the view hierarchy, Espresso automatically scrolls it into view.", 
            "title": "AdapterViews"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#example", 
            "text": "This is a ListView taken from the source XML of an Android App:  android.widget.ListView index= 0  package= io.appium.android.apis  class= android.widget.ListView  checkable= false  checked= false  clickable= true  enabled= true  focusable= true  focused= false  scrollable= true  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,210][1080,1794]  resource-id= android:id/list  adapter-type= HashMap  adapters= {contentDescription=Animation, title=Animation, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }},{contentDescription=Auto Complete, title=Auto Complete, intent=Intent { cmp=io.appium.android.apis/.ApiDemos (has extras) }}, ...} \n     android.widget.TextView index= 0  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Drag and Drop  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,148][1080,274]  text= Drag and Drop  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 1  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Expandable Lists  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,277][1080,403]  text= Expandable Lists  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 2  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Focus  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,406][1080,532]  text= Focus  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 3  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Gallery  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,535][1080,661]  text= Gallery  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 4  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Game Controller Input  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,664][1080,790]  text= Game Controller Input  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 5  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Grid  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,793][1080,919]  text= Grid  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 6  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Hover Events  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,922][1080,1048]  text= Hover Events  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 7  package= io.appium.android.apis  class= android.widget.TextView  content-desc= ImageButton  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,1051][1080,1177]  text= ImageButton  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 8  package= io.appium.android.apis  class= android.widget.TextView  content-desc= ImageSwitcher  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,1180][1080,1306]  text= ImageSwitcher  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 9  package= io.appium.android.apis  class= android.widget.TextView  content-desc= ImageView  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,1309][1080,1435]  text= ImageView  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 10  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Layout Animation  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,1438][1080,1564]  text= Layout Animation  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 11  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Layouts  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,1567][1080,1693]  text= Layouts  hint= false  resource-id= android:id/text1  / \n     android.widget.TextView index= 12  package= io.appium.android.apis  class= android.widget.TextView  content-desc= Lists  checkable= false  checked= false  clickable= false  enabled= true  focusable= false  focused= false  scrollable= false  long-clickable= false  password= false  selected= false  visible= true  bounds= [0,1696][1080,1822]  text= Lists  hint= false  resource-id= android:id/text1  /  /android.widget.ListView   This ListView displays menu items [ Drag and Drop ,  Expandable Lists , ... to  Lists ]. This menu has several more items that aren't on-screen and can't be located with standard locators. For example, There's a menu item called  TextClock  that is not currently visible in the View hierarchy.  The  ListView  node in the above XML has an attribute called  adapters  that contains the data that \"backs up\" the ListView:  {\n    contentDescription = Animation, title = Animation, intent = Intent {\n        cmp = io.appium.android.apis / .ApiDemos(has extras)\n    }\n}, {\n    contentDescription = Auto Complete,\n    title = Auto Complete,\n    intent = Intent {\n        cmp = io.appium.android.apis / .ApiDemos(has extras)\n    }\n}, {\n    contentDescription = Buttons,\n    title = Buttons,\n    intent = Intent {\n        cmp = io.appium.android.apis / .view.Buttons1\n    }\n},\n...  These items can be targeted using a datamatcher selector. Here's a code snippet that shows how to locate and click  TextClock :  // Javascript example\ndriver.findElementById( list )\n  .findElement( -android datamatcher , JSON.stringify({\n     name :  hasEntry ,\n     args : [ title ,  TextClock ]\n  }))\n  .click();  # Ruby\n@driver.find_element(:id, 'list')\n  .find_element(:data_matcher, {\n    name: 'hasEntry',\n    args: ['title', 'TextClock']\n  }.to_json)\n  .click  # Python\ndriver.find_element_by_id('list')\n    .find_element_by_android_data_matcher({\n        name='hasEntry',\n        args=['title', 'TextClock']\n    })\n    .click()  This Appium selector is equivalent to writing this matcher in Espresso:  // Espresso code (not Appium code)\nonData(hasEntry( title ,  textClock )\n  .inAdapterView(withId( android:id/list))\n  .perform(click());  In this example, we select the parent  AdapterView  using an id selector and then find a child of that view by applying a Hamcrest Matcher that matches an object with  title=\"TextClock\" .  Locating the parent  AdapterView  is not necessary if the Activity only has one adapter view. In that case, it can be omitted.  driver.findElement( -android datamatcher , JSON.stringify({\n     name :  hasEntry ,\n     args : [ title ,  TextClock ]\n  }))\n  .click();  # Ruby\n@driver.find_element(:data_matcher, {\n  name: 'hasEntry',\n  args: ['title', 'TextClock']\n}.to_json).click  # Python\ndriver.find_element_by_android_data_matcher({\n    name='hasEntry',\n    args=['title', 'TextClock']\n}).click()", 
            "title": "Example"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#writing-the-selector", 
            "text": "The data matcher selector uses Java reflection to invoke a  Hamcrest matcher  that's used to locate the adapter object. The matcher is in JSON format and has this format  {\n   name :  METHOD_NAME ,\n   args : [...],  The name is a Hamcrest matcher method name. This defaults to the  org.hamcrest.Matchers  namespace, but fully qualifed matcher method names can be used too (e.g.:  android.support.test.espresso.matcher.CursorMatchers.withRowBlob ).  The args are a list of args that the method takes (can be undefined if it takes no args). These can be strings, numbers, booleans or other hamcrest matcher JSON definitions.", 
            "title": "Writing the Selector"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#json-matcher-samples", 
            "text": "Examples of JSON matchers with the equivalent Espresso  onData  matcher", 
            "title": "JSON matcher samples"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#startswith", 
            "text": "// 'startsWith' JSON\n{\n   name :  startsWith ,\n   args :  substr  // if it's a single arg, we don't need args to be an array\n}  // Espresso 'startsWith' example\nonData(startsWith( substr ));", 
            "title": "StartsWith"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#multiple-matchers", 
            "text": "// 'multiple matchers' JSON\n{\n   name :  allOf ,\n   args : [\n    { name :  instanceOf ,  args :  Map.class },\n    { name :  hasEntry ,  args : {\n       name :  equalTo ,  args :  STR \n    }},\n    { name :  is ,  args :  item: 50 }\n  ]\n}  // Espresso 'multiple matchers' example\nonData(allOf(is(instanceOf(Map.class)), hasEntry(equalTo( STR ), is( item: 50 ))));", 
            "title": "Multiple Matchers"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#cursor-matchers", 
            "text": "// 'cursor matchers' JSON\n{\n   name :  is ,  args : {\n     name :  instanceOf ,  args :  Cursor.class \n  },\n   name :  CursorMatchers.withRowString ,  args : [\n     job_title , { name :  is ,  args :  Barista }\n  ]\n}  // Espresso 'cursor matchers' example\nonData(\n    is(instanceOf(Cursor.class)),\n    CursorMatchers.withRowString( job_title , is( Barista ))\n);", 
            "title": "Cursor Matchers"
        }, 
        {
            "location": "/writing-running-appium/android/espresso-datamatcher-selector/#resources", 
            "text": "Explanation of Views vs. Data in Espresso  Espresso lists", 
            "title": "Resources"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/", 
            "text": "Android Coverage Guide\n\n\nRequirement\n\n\n\n\nOnly Emulators or rooted phones are acceptable\n\n\nNeed to add UiAutomator2 support in your apps. That is to say, you need to implement a subclass of \nInstrumentation\n. \nInstrumentation\n will be responsible to collect your coverage. \n\n\nNeed to implement a BroadcastReceiver to export coverage to disk files. This is because \nInstrumentation\n only collects data into memory.\n\n\n\n\nProject Structure\n\n\nYou may need the following structure of files:\n\n\nsrc/main/java/com/example/pkg\n   |____ MainActivity.java    Your main activity\n   |____ InstrumentActivityListener.java     A customized interface for exporting coverage to files\n   |____ InstrumentActivity.java    Activity launched for coverage. But in most cases, this should be same as MainActivity. The only difference is that it will include a `InstrumentActivityListener` to export coverage data to disk files.\n   |____ JacocoInstrumentation.java    The instrument class created by you. Also it needs to implement `InstrumentActivitylistener`.\n   |____ EndEmmaBroadCast.java    A broadcast receiver which will be invoked by appium-uiautomator2-driver at the end of testing. You need implementing logic to invoke InstrumentActivityListener so as to export coverage to files.\n\n\n\n\nConfigure followings in your caps:\n\n * automationName \uff1a \nuiautomator2\n (case irrelevant)\n\n * androidCoverage \uff1a {package}/{instrumentation class}, in our example, \ncom.example.pkg/com.example.pkg.JacocoInstrumentation\n\n * appWaitActivity \uff1a the FQCN of the activity of InstrumentActivity, in our example, \ncom.example.pkg.InstrumentActivity\n\n * appWaitPackage \uff1a {package}\uff0cin our example, \ncom.example.pkg\n\n\nandroidCoverageEndIntent\n \uff1a The action of the broadcast receiver to invoke the exporting of coverage data to files, in our example \ncom.example.pkg.END_EMMA\n  \n\n\nMethodology\n\n Appium (appium-uiautomator2-driver) will launch app via command like\uff1a\nadb shell am instrument -e coverage true -w com.example.pkg/com.example.pkg.JacocoInstrumentation\n\n After testing is done, Appium (appium-uiautomator2-driver) will execute \nadb shell am broadcast -a com.example.pkg.END_EMMA\n to export coverage to files\uff08If you implement such export in the broadcast receiver\uff09\n\n\nExample\n\n\n[1] Appium Testing Project - Configure Caps\n\n\nPlease refer to \n \"Project Structure\" -\n  \"Configure followings in your caps\" \n\n\n[2] Android Project\n\n\nDefine instrumentation class and broadcast receiver in \nAndroidManifest.xml\n:\n\n\n    \ninstrumentation\n        android:name=\ncom.example.pkg.instrumentation.JacocoInstrumentation\n\n        android:targetPackage=\ncom.example.pkg\n \n\n    \n/instrumentation\n\n\n    \n!-- adb shell am broadcast -a com.example.pkg.END_EMMA --\n\n    \nreceiver android:name=\ncom.example.pkg.EndEmmaBroadcast\n \n\n       \nintent-filter\n\n           \naction android:name=\ncom.example.pkg.END_EMMA\n /\n\n       \n/intent-filter\n\n    \n/receiver\n\n\n\n\n\nThen, \nEndEmmaBroadcast.java\n \uff1a\n\n\npackage com.example.pkg;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Process;\n\n// adb shell am broadcast -a com.example.pkg.END_EMMA\npublic class EndEmmaBroadcast extends BroadcastReceiver {\n    InstrumentActivityListener activityListener;\n\n    public void setInstrumentActivityListener(InstrumentActivityListener listener){\n        this.activityListener = listener;\n    }\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        if(this.activityListener!=null){\n          activityListener.onActivityEnd();\n        }\n        // once coverage is dumped, the processes is ended.\n        Process.killProcess(Process.myPid());\n    }\n}\n\n\n\n\nAfter that, \nJacocoInstrumentation.java\n\uff1a\n\n\npackage com.example.pkg;\n\nimport android.app.Activity;\nimport android.app.Instrumentation;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.os.Bundle;\nimport android.os.Looper;\nimport android.util.Log;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class JacocoInstrumentation  extends Instrumentation implements InstrumentActivityListener {\n    public static String TAG = \nJacocoInstrumentation:\n;\n    private static String DEFAULT_COVERAGE_FILE_PATH = null;\n    private final Bundle mResults = new Bundle();\n    private Intent mIntent;\n    private static final boolean LOGD = true;\n    private boolean mCoverage = true;\n    private String mCoverageFilePath;\n\n    public JacocoInstrumentation() {\n    }\n    @Override\n    public void onCreate(Bundle arguments) {\n        Log.d(TAG, \nonCreate(\n + arguments + \n)\n);\n        super.onCreate(arguments);\n        // bad notation, better use NAME+TimeSeed because you might generate more than 1 corage file\n        DEFAULT_COVERAGE_FILE_PATH = getContext().getFilesDir().getPath().toString() + \n/coverage.ec\n;\n        File file = new File(DEFAULT_COVERAGE_FILE_PATH);\n        if(!file.exists()){\n            try{\n                file.createNewFile();\n            }catch (IOException e){\n                Log.d(TAG,\nFile Exception \uff1a\n+e);\n                e.printStackTrace();}\n        }\n        if(arguments != null) {\n            mCoverageFilePath = arguments.getString(\ncoverageFile\n);\n        }\n        mIntent = new Intent(getTargetContext(), InstrumentActivity.class);\n        mIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        start();\n    }\n    @Override\n    public void onStart() {\n        super.onStart();\n        Looper.prepare();\n        // Register broadcast receiver and start InstrumentActivity\n        InstrumentActivity activity = (InstrumentActivity) startActivitySync(mIntent);\n        EndEmmaBroadcast broadcast = new EndEmmaBroadcast();\n        activity.setInstrumentActivityListener(this);\n        broadcast.setInstrumentActivityListener(this);\n        activity.registerReceiver(broadcast, new IntentFilter(\ncom.example.pkg.END_EMMA\n));\n    }\n    private String getCoverageFilePath() {\n        if (mCoverageFilePath == null) {\n            return DEFAULT_COVERAGE_FILE_PATH;\n        } else {\n            return mCoverageFilePath;\n        }\n    }\n    private void generateCoverageReport() {\n        Log.d(TAG, \ngenerateCoverageReport():\n + getCoverageFilePath());\n        OutputStream out = null;\n        try {\n            out = new FileOutputStream(getCoverageFilePath(), false);\n            Object agent = Class.forName(\norg.jacoco.agent.rt.RT\n)\n                    .getMethod(\ngetAgent\n)\n                    .invoke(null);\n            out.write((byte[]) agent.getClass().getMethod(\ngetExecutionData\n, boolean.class)\n                    .invoke(agent, false));\n        } catch (Exception e) {\n            Log.d(TAG, e.toString(), e);\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onActivityEnd() {\n        if (LOGD)      Log.d(TAG, \nonActivityFinished()\n);\n        if (mCoverage) {\n            generateCoverageReport();\n        }\n        finish(Activity.RESULT_OK, mResults);\n    }\n}\n\n\n\n\n\nThen, \nInstrumentActivityListener.java\n\n\npackage com.example.pkg;\n\npublic interface InstrumentActivityListener {\n    void onActivityEnd();\n}\n\n\n\n\nInstrumentActivity.java\n (This is optional, you can use MainActivity)\n\n\npackage com.example.pkg;\nimport android.app.Instrumentation;\nimport android.os.Bundle;\nimport android.util.Log;\n\n\npublic class InstrumentActivity extends MainActivity {\n    public static String TAG = \nIntrumentedActivity\n;\n    private InstrumentActivityListener listener;\n\n    public void setInstrumentActivityListener(InstrumentActivityListener listener) {\n        this.listener = listener;\n    }\n\n    // Generate output report when the activity is destroyed\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(TAG, \nonDestroy()\n);\n        super.finish();\n        if (listener != null) {\n            listener.onActivityEnd();\n        }\n    }\n}\n\n\n\n\nFinally, the most important part is \ngradle\n:\n\n\n....\n\n\napply plugin: 'jacoco' // add plugin for jacoco\n\n...\n\nandroid {\n    ...\n    defaultConfig {\n        ...\n        testInstrumentationRunner \nandroid.support.test.runner.AndroidJUnitRunner\n\n    }\n\n    buildTypes {\n        release {\n            ...\n        }\n        debug{\n            testCoverageEnabled = true\n        }\n    }\n}\n\ndependencies {\n    ...\n    //uiautomator\n    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.0'\n}\n\n\n\n\n\n[3] Now, build apk and run Appium tests!\n\n\nThe coverage.ec will be generated at /data/data/com.example.pkg/files. Pull it out.\n\n\n[4] About generating HTML reports\n\n\nTo get the HTML report of coverage.ec, you need following steps:\n* [1] pull it into file system by \nadb pull\n \n* [2] create the following task in your gradle file:\n\n\ndef coverageSourceDirs = [\n        './src/main/java'\n]\n\ntask jacocoTestReport(type: JacocoReport) {\n    group = \nReporting\n\n    description = \nGenerate Jacoco coverage reports after running tests.\n\n    reports {\n        xml.enabled = true\n        html.enabled = true\n    }\n    classDirectories = fileTree(\n            dir: './build/intermediates/classes/debug',\n            excludes: ['**/R*.class',\n                       '**/*$InjectAdapter.class',\n                       '**/*$ModuleAdapter.class',\n                       '**/*$ViewInjector*.class'\n            ])\n    sourceDirectories = files(coverageSourceDirs)\n    // NOTE: Put your ec file here\n    executionData = files(\nSOME PATH/coverage.ec\n)\n\n    doFirst {\n        new File(\n$buildDir/intermediates/classes/\n).eachFileRecurse { file -\n\n            if (file.name.contains('$$')) {\n                file.renameTo(file.path.replace('$$', '$'))\n            }\n        }\n    }\n}", 
            "title": "Android Code Coverage Guide"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#android-coverage-guide", 
            "text": "", 
            "title": "Android Coverage Guide"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#requirement", 
            "text": "Only Emulators or rooted phones are acceptable  Need to add UiAutomator2 support in your apps. That is to say, you need to implement a subclass of  Instrumentation .  Instrumentation  will be responsible to collect your coverage.   Need to implement a BroadcastReceiver to export coverage to disk files. This is because  Instrumentation  only collects data into memory.", 
            "title": "Requirement"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#project-structure", 
            "text": "You may need the following structure of files:  src/main/java/com/example/pkg\n   |____ MainActivity.java    Your main activity\n   |____ InstrumentActivityListener.java     A customized interface for exporting coverage to files\n   |____ InstrumentActivity.java    Activity launched for coverage. But in most cases, this should be same as MainActivity. The only difference is that it will include a `InstrumentActivityListener` to export coverage data to disk files.\n   |____ JacocoInstrumentation.java    The instrument class created by you. Also it needs to implement `InstrumentActivitylistener`.\n   |____ EndEmmaBroadCast.java    A broadcast receiver which will be invoked by appium-uiautomator2-driver at the end of testing. You need implementing logic to invoke InstrumentActivityListener so as to export coverage to files.  Configure followings in your caps: \n * automationName \uff1a  uiautomator2  (case irrelevant) \n * androidCoverage \uff1a {package}/{instrumentation class}, in our example,  com.example.pkg/com.example.pkg.JacocoInstrumentation \n * appWaitActivity \uff1a the FQCN of the activity of InstrumentActivity, in our example,  com.example.pkg.InstrumentActivity \n * appWaitPackage \uff1a {package}\uff0cin our example,  com.example.pkg  androidCoverageEndIntent  \uff1a The action of the broadcast receiver to invoke the exporting of coverage data to files, in our example  com.example.pkg.END_EMMA     Methodology \n Appium (appium-uiautomator2-driver) will launch app via command like\uff1a adb shell am instrument -e coverage true -w com.example.pkg/com.example.pkg.JacocoInstrumentation \n After testing is done, Appium (appium-uiautomator2-driver) will execute  adb shell am broadcast -a com.example.pkg.END_EMMA  to export coverage to files\uff08If you implement such export in the broadcast receiver\uff09", 
            "title": "Project Structure"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#1-appium-testing-project-configure-caps", 
            "text": "Please refer to   \"Project Structure\" -   \"Configure followings in your caps\"", 
            "title": "[1] Appium Testing Project - Configure Caps"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#2-android-project", 
            "text": "Define instrumentation class and broadcast receiver in  AndroidManifest.xml :       instrumentation\n        android:name= com.example.pkg.instrumentation.JacocoInstrumentation \n        android:targetPackage= com.example.pkg   \n     /instrumentation \n\n     !-- adb shell am broadcast -a com.example.pkg.END_EMMA -- \n     receiver android:name= com.example.pkg.EndEmmaBroadcast   \n        intent-filter \n            action android:name= com.example.pkg.END_EMMA  / \n        /intent-filter \n     /receiver   Then,  EndEmmaBroadcast.java  \uff1a  package com.example.pkg;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Process;\n\n// adb shell am broadcast -a com.example.pkg.END_EMMA\npublic class EndEmmaBroadcast extends BroadcastReceiver {\n    InstrumentActivityListener activityListener;\n\n    public void setInstrumentActivityListener(InstrumentActivityListener listener){\n        this.activityListener = listener;\n    }\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        if(this.activityListener!=null){\n          activityListener.onActivityEnd();\n        }\n        // once coverage is dumped, the processes is ended.\n        Process.killProcess(Process.myPid());\n    }\n}  After that,  JacocoInstrumentation.java \uff1a  package com.example.pkg;\n\nimport android.app.Activity;\nimport android.app.Instrumentation;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.os.Bundle;\nimport android.os.Looper;\nimport android.util.Log;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class JacocoInstrumentation  extends Instrumentation implements InstrumentActivityListener {\n    public static String TAG =  JacocoInstrumentation: ;\n    private static String DEFAULT_COVERAGE_FILE_PATH = null;\n    private final Bundle mResults = new Bundle();\n    private Intent mIntent;\n    private static final boolean LOGD = true;\n    private boolean mCoverage = true;\n    private String mCoverageFilePath;\n\n    public JacocoInstrumentation() {\n    }\n    @Override\n    public void onCreate(Bundle arguments) {\n        Log.d(TAG,  onCreate(  + arguments +  ) );\n        super.onCreate(arguments);\n        // bad notation, better use NAME+TimeSeed because you might generate more than 1 corage file\n        DEFAULT_COVERAGE_FILE_PATH = getContext().getFilesDir().getPath().toString() +  /coverage.ec ;\n        File file = new File(DEFAULT_COVERAGE_FILE_PATH);\n        if(!file.exists()){\n            try{\n                file.createNewFile();\n            }catch (IOException e){\n                Log.d(TAG, File Exception \uff1a +e);\n                e.printStackTrace();}\n        }\n        if(arguments != null) {\n            mCoverageFilePath = arguments.getString( coverageFile );\n        }\n        mIntent = new Intent(getTargetContext(), InstrumentActivity.class);\n        mIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        start();\n    }\n    @Override\n    public void onStart() {\n        super.onStart();\n        Looper.prepare();\n        // Register broadcast receiver and start InstrumentActivity\n        InstrumentActivity activity = (InstrumentActivity) startActivitySync(mIntent);\n        EndEmmaBroadcast broadcast = new EndEmmaBroadcast();\n        activity.setInstrumentActivityListener(this);\n        broadcast.setInstrumentActivityListener(this);\n        activity.registerReceiver(broadcast, new IntentFilter( com.example.pkg.END_EMMA ));\n    }\n    private String getCoverageFilePath() {\n        if (mCoverageFilePath == null) {\n            return DEFAULT_COVERAGE_FILE_PATH;\n        } else {\n            return mCoverageFilePath;\n        }\n    }\n    private void generateCoverageReport() {\n        Log.d(TAG,  generateCoverageReport():  + getCoverageFilePath());\n        OutputStream out = null;\n        try {\n            out = new FileOutputStream(getCoverageFilePath(), false);\n            Object agent = Class.forName( org.jacoco.agent.rt.RT )\n                    .getMethod( getAgent )\n                    .invoke(null);\n            out.write((byte[]) agent.getClass().getMethod( getExecutionData , boolean.class)\n                    .invoke(agent, false));\n        } catch (Exception e) {\n            Log.d(TAG, e.toString(), e);\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onActivityEnd() {\n        if (LOGD)      Log.d(TAG,  onActivityFinished() );\n        if (mCoverage) {\n            generateCoverageReport();\n        }\n        finish(Activity.RESULT_OK, mResults);\n    }\n}  Then,  InstrumentActivityListener.java  package com.example.pkg;\n\npublic interface InstrumentActivityListener {\n    void onActivityEnd();\n}  InstrumentActivity.java  (This is optional, you can use MainActivity)  package com.example.pkg;\nimport android.app.Instrumentation;\nimport android.os.Bundle;\nimport android.util.Log;\n\n\npublic class InstrumentActivity extends MainActivity {\n    public static String TAG =  IntrumentedActivity ;\n    private InstrumentActivityListener listener;\n\n    public void setInstrumentActivityListener(InstrumentActivityListener listener) {\n        this.listener = listener;\n    }\n\n    // Generate output report when the activity is destroyed\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Log.d(TAG,  onDestroy() );\n        super.finish();\n        if (listener != null) {\n            listener.onActivityEnd();\n        }\n    }\n}  Finally, the most important part is  gradle :  ....\n\n\napply plugin: 'jacoco' // add plugin for jacoco\n\n...\n\nandroid {\n    ...\n    defaultConfig {\n        ...\n        testInstrumentationRunner  android.support.test.runner.AndroidJUnitRunner \n    }\n\n    buildTypes {\n        release {\n            ...\n        }\n        debug{\n            testCoverageEnabled = true\n        }\n    }\n}\n\ndependencies {\n    ...\n    //uiautomator\n    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.0'\n}", 
            "title": "[2] Android Project"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#3-now-build-apk-and-run-appium-tests", 
            "text": "The coverage.ec will be generated at /data/data/com.example.pkg/files. Pull it out.", 
            "title": "[3] Now, build apk and run Appium tests!"
        }, 
        {
            "location": "/writing-running-appium/android/android-coverage/#4-about-generating-html-reports", 
            "text": "To get the HTML report of coverage.ec, you need following steps:\n* [1] pull it into file system by  adb pull  \n* [2] create the following task in your gradle file:  def coverageSourceDirs = [\n        './src/main/java'\n]\n\ntask jacocoTestReport(type: JacocoReport) {\n    group =  Reporting \n    description =  Generate Jacoco coverage reports after running tests. \n    reports {\n        xml.enabled = true\n        html.enabled = true\n    }\n    classDirectories = fileTree(\n            dir: './build/intermediates/classes/debug',\n            excludes: ['**/R*.class',\n                       '**/*$InjectAdapter.class',\n                       '**/*$ModuleAdapter.class',\n                       '**/*$ViewInjector*.class'\n            ])\n    sourceDirectories = files(coverageSourceDirs)\n    // NOTE: Put your ec file here\n    executionData = files( SOME PATH/coverage.ec )\n\n    doFirst {\n        new File( $buildDir/intermediates/classes/ ).eachFileRecurse { file - \n            if (file.name.contains('$$')) {\n                file.renameTo(file.path.replace('$$', '$'))\n            }\n        }\n    }\n}", 
            "title": "[4] About generating HTML reports"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/", 
            "text": "How To Troubleshoot Activities Startup\n\n\nCapabilities\n\n\n\n\nThe Activity class is a crucial component of an Android app, and the way activities are launched and put together is a fundamental part of the platform's application model. Unlike programming paradigms in which apps are launched with a main() method, the Android system initiates code in an Activity instance by invoking specific callback methods that correspond to specific stages of its lifecycle.\n\n \nAndroid Developer Documentation\n\n\n\n\nAppium needs to know package and activity names in order to properly initialize the application under test. This information is expected to be provided in driver capabilities and consists of the following keys:\n\n\n\n\nappActivity\n: The name of the main application activity\n\n\nappPackage\n: The identifier of the application package\n\n\nappWaitActivity\n: The name of the application activity to wait for/which starts the first\n\n\nappWaitPackage\n: The id of the application package to wait for/which starts the first\n\n\nappWaitDuration\n: The maximum duration to wait until the \nappWaitActivity\n is focused in milliseconds (20000 by default)\n\n\nappWaitForLaunch\n: Whether to wait until Activity Manager returns the control to the calling process. By default the driver always waits until \nappWaitDuration\n is expired. Setting this capability to \nfalse\n effectively cancels this wait and unblocks the server loop as soon as \nam\n successfully triggers the command to start the activity.\n\n\n\n\nAll these capabilities are optional. If they are not set explicitly then Appium tries to auto detect them by reading their values from the APK manifest. Although, if the application under test is supposed to be already installed on the device (\nnoReset=true\n) then at least \nappActivity\n and \nappPackage\n options are required to be set, since no package manifest is available in such case. If you don't set \nappWaitPackage\n and \nappWaitActivity\n explicitly then these are getting assigned to \nappPackage\n/\nappActivity\n values automatically. For more details check on the implementation of \npackageAndLaunchActivityFromManifest\n method in the \nappium-adb\n package.\n\n\nHow Appium Starts Activities\n\n\nActivities are started by \nCall activity manager \nam\n. Appium tries to start the \nappPackage\n/\nappActivity\n combination using \nam start\n and then waits until the \nappWaitPackage\n/\nappWaitActivity\n is focused or the \nappWaitDuration\n timeout expires. The currently focused activity name is parsed from \nadb shell dumpsys window windows\n command output (\nmFocusedApp\n or \nmCurrentFocus\n entries). For more details check on the implementation of \nstartApp\n, and \ngetFocusedPackageAndActivity\n methods in the \nappium-adb\n package.\n\n\nPossible Problems And Solutions\n\n\njava.lang.SecurityException: Permission Denial: starting Intent\n\n\nThe full error description usually looks like \n'java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mypackage/.myactivity.MainActivity launchParam=MultiScreenLaunchParams { mDisplayId=0 mBaseDisplayId=0 mFlags=0 } } from null (pid=11366, uid=2000) not exported from uid 10191\n. Such error might be the indication of the fact that the combination of application package and activity name, which has been passed to Appium as \nappPackage\n/\nappActivity\n (or auto detected implicitly), is not the correct one to start the application under test. As a solution, it is necessary to check the correct values with the application developer and test them manually first by executing: \nadb shell am start -W -n com.myfixedpackage/.myfixedactivity.MainActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000\n. If this commands succeeds manually and starts the necessary application on the device then it will work for Appium as well.\n\n\ncom.myactivity or com.myapp.com.myactivity never started\n\n\nThus exception usually indicates, that the first application activity is not the same package/activity, as it is set (or auto detected) by \nappWaitPackage\n/\nappWaitActivity\n. Such error normally happens in applications having multiple activities. In order to resolve the problem one should check with application developer regarding which activity/package is the very first one that appears on application startup. The currently focused activity name might be verified using the \nadb shell dumpsys window windows\n command mentioned above. Also, Appium allows to use wildcards while setting \nappWaitActivity\n value. This might be particularly useful if the activity name is generated dynamically or it is not the same all the time. For example \ncom.mycomany.*\n will match any of \ncom.mycomany.foo\n, \ncom.mycomany.bar\n.\n\n\nCommand '\u2026' timed out after X ms\n\n\nIf you've double checked that activity names are correct, but the startup still times out, then try to increase the value of \nappWaitDuration\n capability. Normally, the default 20 seconds is enough for the most of applications, however, some bigger apps might require more time to start and show the first activity. Please, don't create such apps.\n\n\nThere might be also situations where an activity does not return the control to the calling process at all, so \nam start\n call blocks forever independently of the value of \nappWaitDuration\n, thus causing the timeout. In such case setting \nappWaitForLaunch\n to \nfalse\n might help to resolve the issue. Although, by choosing this option, the driver cannot make sure the activity has fully started, so then it is up to the client code to verify the initial UI state is the one that is expected.", 
            "title": "Activities Startup Troubleshooting Guide"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#how-to-troubleshoot-activities-startup", 
            "text": "", 
            "title": "How To Troubleshoot Activities Startup"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#capabilities", 
            "text": "The Activity class is a crucial component of an Android app, and the way activities are launched and put together is a fundamental part of the platform's application model. Unlike programming paradigms in which apps are launched with a main() method, the Android system initiates code in an Activity instance by invoking specific callback methods that correspond to specific stages of its lifecycle.   Android Developer Documentation   Appium needs to know package and activity names in order to properly initialize the application under test. This information is expected to be provided in driver capabilities and consists of the following keys:   appActivity : The name of the main application activity  appPackage : The identifier of the application package  appWaitActivity : The name of the application activity to wait for/which starts the first  appWaitPackage : The id of the application package to wait for/which starts the first  appWaitDuration : The maximum duration to wait until the  appWaitActivity  is focused in milliseconds (20000 by default)  appWaitForLaunch : Whether to wait until Activity Manager returns the control to the calling process. By default the driver always waits until  appWaitDuration  is expired. Setting this capability to  false  effectively cancels this wait and unblocks the server loop as soon as  am  successfully triggers the command to start the activity.   All these capabilities are optional. If they are not set explicitly then Appium tries to auto detect them by reading their values from the APK manifest. Although, if the application under test is supposed to be already installed on the device ( noReset=true ) then at least  appActivity  and  appPackage  options are required to be set, since no package manifest is available in such case. If you don't set  appWaitPackage  and  appWaitActivity  explicitly then these are getting assigned to  appPackage / appActivity  values automatically. For more details check on the implementation of  packageAndLaunchActivityFromManifest  method in the  appium-adb  package.", 
            "title": "Capabilities"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#how-appium-starts-activities", 
            "text": "Activities are started by  Call activity manager  am . Appium tries to start the  appPackage / appActivity  combination using  am start  and then waits until the  appWaitPackage / appWaitActivity  is focused or the  appWaitDuration  timeout expires. The currently focused activity name is parsed from  adb shell dumpsys window windows  command output ( mFocusedApp  or  mCurrentFocus  entries). For more details check on the implementation of  startApp , and  getFocusedPackageAndActivity  methods in the  appium-adb  package.", 
            "title": "How Appium Starts Activities"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#possible-problems-and-solutions", 
            "text": "", 
            "title": "Possible Problems And Solutions"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#javalangsecurityexception-permission-denial-starting-intent", 
            "text": "The full error description usually looks like  'java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.mypackage/.myactivity.MainActivity launchParam=MultiScreenLaunchParams { mDisplayId=0 mBaseDisplayId=0 mFlags=0 } } from null (pid=11366, uid=2000) not exported from uid 10191 . Such error might be the indication of the fact that the combination of application package and activity name, which has been passed to Appium as  appPackage / appActivity  (or auto detected implicitly), is not the correct one to start the application under test. As a solution, it is necessary to check the correct values with the application developer and test them manually first by executing:  adb shell am start -W -n com.myfixedpackage/.myfixedactivity.MainActivity -S -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -f 0x10200000 . If this commands succeeds manually and starts the necessary application on the device then it will work for Appium as well.", 
            "title": "java.lang.SecurityException: Permission Denial: starting Intent"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#commyactivity-or-commyappcommyactivity-never-started", 
            "text": "Thus exception usually indicates, that the first application activity is not the same package/activity, as it is set (or auto detected) by  appWaitPackage / appWaitActivity . Such error normally happens in applications having multiple activities. In order to resolve the problem one should check with application developer regarding which activity/package is the very first one that appears on application startup. The currently focused activity name might be verified using the  adb shell dumpsys window windows  command mentioned above. Also, Appium allows to use wildcards while setting  appWaitActivity  value. This might be particularly useful if the activity name is generated dynamically or it is not the same all the time. For example  com.mycomany.*  will match any of  com.mycomany.foo ,  com.mycomany.bar .", 
            "title": "com.myactivity or com.myapp.com.myactivity never started"
        }, 
        {
            "location": "/writing-running-appium/android/activity-startup/#command-timed-out-after-x-ms", 
            "text": "If you've double checked that activity names are correct, but the startup still times out, then try to increase the value of  appWaitDuration  capability. Normally, the default 20 seconds is enough for the most of applications, however, some bigger apps might require more time to start and show the first activity. Please, don't create such apps.  There might be also situations where an activity does not return the control to the calling process at all, so  am start  call blocks forever independently of the value of  appWaitDuration , thus causing the timeout. In such case setting  appWaitForLaunch  to  false  might help to resolve the issue. Although, by choosing this option, the driver cannot make sure the activity has fully started, so then it is up to the client code to verify the initial UI state is the one that is expected.", 
            "title": "Command '\u2026' timed out after X ms"
        }, 
        {
            "location": "/writing-running-appium/android/android-shell/", 
            "text": "How To Execute Shell Commands On The Remote Device\n\n\nIt is possible to execute any command on the remote Android device or an emulator under test and get the output from it. This action might be potentially insecure and is disabled on the server side by default. One must provide the \n--relaxed-security\n command line argument while starting the server in order to enable remote shell commands execution (and other insecure features, which are disabled by default). An exception will be thrown if the relaxed security has not been enabled on the server side and one tries to invoke \nmobile: shell\n endpoint on the client side.\n\n\nmobile: shell\n\n\nExecutes the given shell command on the device under test and returns its \nstdout\n or both \nstdout\n and \nstderr\n if \nincludeStderr\n is set to \ntrue\n. An exception will be thrown if the command's return code is not zero. This command acts in the same manner as it would be executed via \nadb shell\n on the host computer.\n\n\nSupported arguments\n\n\n\n\ncommand\n: The name of the remote command. It can also be a full path to an executable, for example \n/bin/ls\n. The parameter is mandatory.\n\n\nargs\n: The list of command arguments represented as an array of strings. If a single string is provided then it will be automatically transformed into one-item array. Optional parameter.\n\n\nincludeStderr\n: Set this argument to \ntrue\n in order to include stderr output to the returned result along with stdout. If enabled then the returned result will be a map of \nstdout\n and \nstderr\n keys containing the corresponding strings otherwise it is just a simple string. \nfalse\n by default.\n\n\ntimeout\n: The shell command timeout in milliseconds. If the command requires more time to finish execution then an exception is going to be thrown. 20000 ms by default.\n\n\n\n\nUsage examples\n\n\n// Java\nMap\nString, Object\n args = new HashMap\n();\nargs.put(\ncommand\n, \necho\n);\nargs.put(\nargs\n, Lists.newArrayList(\narg1\n, \narg2\n));\nString output = driver.executeScript(\nmobile: shell\n, args);\nassert output.equals(\narg1 arg2\n);\n\n\n\n\n# Python\nresult = driver.execute_script('mobile: shell', {\n    'command': 'echo',\n    'args': ['arg1', 'arg2'],\n    'includeStderr': True,\n    'timeout': 5000\n})\nassert result['stdout'] == 'arg1 arg2'\n\n\n\n\n// Javascript\nconst output = driver.executeScript('mobile: shell', [{\n    command: 'ls',\n    args: ['/sdcard'],\n    }]);", 
            "title": "How To Execute Shell Commands On The Remote Device"
        }, 
        {
            "location": "/writing-running-appium/android/android-shell/#how-to-execute-shell-commands-on-the-remote-device", 
            "text": "It is possible to execute any command on the remote Android device or an emulator under test and get the output from it. This action might be potentially insecure and is disabled on the server side by default. One must provide the  --relaxed-security  command line argument while starting the server in order to enable remote shell commands execution (and other insecure features, which are disabled by default). An exception will be thrown if the relaxed security has not been enabled on the server side and one tries to invoke  mobile: shell  endpoint on the client side.", 
            "title": "How To Execute Shell Commands On The Remote Device"
        }, 
        {
            "location": "/writing-running-appium/android/android-shell/#mobile-shell", 
            "text": "Executes the given shell command on the device under test and returns its  stdout  or both  stdout  and  stderr  if  includeStderr  is set to  true . An exception will be thrown if the command's return code is not zero. This command acts in the same manner as it would be executed via  adb shell  on the host computer.", 
            "title": "mobile: shell"
        }, 
        {
            "location": "/writing-running-appium/android/android-shell/#supported-arguments", 
            "text": "command : The name of the remote command. It can also be a full path to an executable, for example  /bin/ls . The parameter is mandatory.  args : The list of command arguments represented as an array of strings. If a single string is provided then it will be automatically transformed into one-item array. Optional parameter.  includeStderr : Set this argument to  true  in order to include stderr output to the returned result along with stdout. If enabled then the returned result will be a map of  stdout  and  stderr  keys containing the corresponding strings otherwise it is just a simple string.  false  by default.  timeout : The shell command timeout in milliseconds. If the command requires more time to finish execution then an exception is going to be thrown. 20000 ms by default.", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-shell/#usage-examples", 
            "text": "// Java\nMap String, Object  args = new HashMap ();\nargs.put( command ,  echo );\nargs.put( args , Lists.newArrayList( arg1 ,  arg2 ));\nString output = driver.executeScript( mobile: shell , args);\nassert output.equals( arg1 arg2 );  # Python\nresult = driver.execute_script('mobile: shell', {\n    'command': 'echo',\n    'args': ['arg1', 'arg2'],\n    'includeStderr': True,\n    'timeout': 5000\n})\nassert result['stdout'] == 'arg1 arg2'  // Javascript\nconst output = driver.executeScript('mobile: shell', [{\n    command: 'ls',\n    args: ['/sdcard'],\n    }]);", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/", 
            "text": "Android Device Screen Streaming With Appium\n\n\nSince Appium 1.16 there is a possibility to stream the screen of the device under test to one or more remote clients. The currently displayed content is broadcasted as configurable \nMJPEG\n stream over http protocol. This allows to observe automated test execution while it is running and catch possible issues earlier. Single MJPEG server supports multiple simultaneous clients that can receive screen updates at the same time. The framerate there depends on the server and device performance, but is close to the real time one and can reach up to 60 frames per second, especially with properly adjusted bitrate and/or scaled screen dimensions.\n\n\nmobile: startScreenStreaming\n\n\nStarts streaming of the device's screen. The streaming can only be started if all the requirements are met:\n- \nGStreamer\n binaries are installed on the server machine. For example, it can be installed using the following command on Mac OS: \nbrew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav\n\n- The device under test has \nscreenrecord\n utility available and the utility supports \n--output-format=h264\n option. Emulators only have this utility since API 27.\n- The \nadb_screen_streaming\n \nserver feature\n is enabled.\n\n\nThe command initializes low-level streaming with adb, pipes it to GStreamer pipeline, which converts h264-encoded frames into JPEG images and sends them to a TCP socket. At the end of this sequence there is Node.js http server, which wraps the TCP stream into HTTP protocol, so the video can be viewed with a normal browser.\nIn case the streaming is already running the command just returns silently. Simultaneous streaming on multiple ports/with different configs is not supported. It is necessary to stop the current stream before starting a new one.\n\n\nSupported arguments\n\n\n\n\nwidth\n: The desired width of the resulting images. This is set to the actual width of the device's screen if unset. The output stream is going to be scaled if the \nwidth\n value is less than the original one. It is recommended to keep the original scale while setting a custom width/height.\n\n\nheight\n: The desired height of the resulting images. This is set to the actual height of the device's screen if unset. The output stream is going to be scaled if the \nheight\n value is less than the original one. It is recommended to keep the original scale while setting a custom width/height.\n\n\nbitRate\n: The bit rate of the original h264-encoded video stream. By default it equals to 4000000 bit/s. It is recommended to set it to lower values if you observe serious frame drop in the resulting MJPEG video.\n\n\nhost\n: The IP address/host name to start the HTTP MJPEG server on. You can set it to \n0.0.0.0\n to trigger the broadcast on all available network interfaces. \n127.0.0.1\n by default.\n\n\nport\n: The port number to start the HTTP MJPEG server on. \n8093\n by default.\n\n\npathname\n: The HTTP request path the MJPEG server should be available on. If unset then any pathname on the given \nhost\n/\nport\n combination will work. Note that the value should always start with a single slash: \n/\n\n\ntcpPort\n: The port number to start the internal TCP MJPEG broadcast on. This type of broadcast always starts on the loopback interface (\n127.0.0.1\n). \n8094\n by default.\n\n\nquality\n: The quality value for the streamed JPEG images. This number should be in range [1, 100], where 100 is the best quality. \n70\n by default.\n\n\nconsiderRotation\n: If set to \ntrue\n then GStreamer pipeline will increase the dimensions of the resulting images to properly fit images in both landscape and portrait orientations. Set it to \ntrue\n if the device rotation is not going to be the same during the broadcasting session. \nfalse\n by default.\n\n\nlogPipelineDetails\n: Whether to log GStreamer pipeline events into the standard log output. Might be useful for debugging purposes. \nfalse\n by default.\n\n\n\n\nUsage examples\n\n\n// Java\nMap\nString, Object\n args = new HashMap\n();\nargs.put(\nwidth\n, 1080);\nargs.put(\nheight\n, 1920);\nargs.put(\nconsiderRotation\n, true);\nargs.put(\nquality\n, 45);\nargs.put(\nbitRate\n, 500000);\ndriver.executeScript(\nmobile: startScreenStreaming\n, args);\n\n\n\n\n# Python\ndriver.execute_script('mobile: startScreenStreaming', {\n    'width': 1080,\n    'height': 1920,\n    'considerRotation': True,\n    'quality': 45,\n    'bitRate': 500000,\n})\n\n\n\n\nmobile: stopScreenStreaming\n\n\nStops the running screen streaming session. If no session has been started before then no action is done. Note that screen streaming session is always stopped automatically as soon as the container driver session is terminated.\n\n\nUsage examples\n\n\n// Java\ndriver.executeScript(\nmobile: stopScreenStreaming\n);\n\n\n\n\n# Python\ndriver.execute_script('mobile: stopScreenStreaming')", 
            "title": "Android Device Screen Streaming"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/#android-device-screen-streaming-with-appium", 
            "text": "Since Appium 1.16 there is a possibility to stream the screen of the device under test to one or more remote clients. The currently displayed content is broadcasted as configurable  MJPEG  stream over http protocol. This allows to observe automated test execution while it is running and catch possible issues earlier. Single MJPEG server supports multiple simultaneous clients that can receive screen updates at the same time. The framerate there depends on the server and device performance, but is close to the real time one and can reach up to 60 frames per second, especially with properly adjusted bitrate and/or scaled screen dimensions.", 
            "title": "Android Device Screen Streaming With Appium"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/#mobile-startscreenstreaming", 
            "text": "Starts streaming of the device's screen. The streaming can only be started if all the requirements are met:\n-  GStreamer  binaries are installed on the server machine. For example, it can be installed using the following command on Mac OS:  brew install gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav \n- The device under test has  screenrecord  utility available and the utility supports  --output-format=h264  option. Emulators only have this utility since API 27.\n- The  adb_screen_streaming   server feature  is enabled.  The command initializes low-level streaming with adb, pipes it to GStreamer pipeline, which converts h264-encoded frames into JPEG images and sends them to a TCP socket. At the end of this sequence there is Node.js http server, which wraps the TCP stream into HTTP protocol, so the video can be viewed with a normal browser.\nIn case the streaming is already running the command just returns silently. Simultaneous streaming on multiple ports/with different configs is not supported. It is necessary to stop the current stream before starting a new one.", 
            "title": "mobile: startScreenStreaming"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/#supported-arguments", 
            "text": "width : The desired width of the resulting images. This is set to the actual width of the device's screen if unset. The output stream is going to be scaled if the  width  value is less than the original one. It is recommended to keep the original scale while setting a custom width/height.  height : The desired height of the resulting images. This is set to the actual height of the device's screen if unset. The output stream is going to be scaled if the  height  value is less than the original one. It is recommended to keep the original scale while setting a custom width/height.  bitRate : The bit rate of the original h264-encoded video stream. By default it equals to 4000000 bit/s. It is recommended to set it to lower values if you observe serious frame drop in the resulting MJPEG video.  host : The IP address/host name to start the HTTP MJPEG server on. You can set it to  0.0.0.0  to trigger the broadcast on all available network interfaces.  127.0.0.1  by default.  port : The port number to start the HTTP MJPEG server on.  8093  by default.  pathname : The HTTP request path the MJPEG server should be available on. If unset then any pathname on the given  host / port  combination will work. Note that the value should always start with a single slash:  /  tcpPort : The port number to start the internal TCP MJPEG broadcast on. This type of broadcast always starts on the loopback interface ( 127.0.0.1 ).  8094  by default.  quality : The quality value for the streamed JPEG images. This number should be in range [1, 100], where 100 is the best quality.  70  by default.  considerRotation : If set to  true  then GStreamer pipeline will increase the dimensions of the resulting images to properly fit images in both landscape and portrait orientations. Set it to  true  if the device rotation is not going to be the same during the broadcasting session.  false  by default.  logPipelineDetails : Whether to log GStreamer pipeline events into the standard log output. Might be useful for debugging purposes.  false  by default.", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/#usage-examples", 
            "text": "// Java\nMap String, Object  args = new HashMap ();\nargs.put( width , 1080);\nargs.put( height , 1920);\nargs.put( considerRotation , true);\nargs.put( quality , 45);\nargs.put( bitRate , 500000);\ndriver.executeScript( mobile: startScreenStreaming , args);  # Python\ndriver.execute_script('mobile: startScreenStreaming', {\n    'width': 1080,\n    'height': 1920,\n    'considerRotation': True,\n    'quality': 45,\n    'bitRate': 500000,\n})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/#mobile-stopscreenstreaming", 
            "text": "Stops the running screen streaming session. If no session has been started before then no action is done. Note that screen streaming session is always stopped automatically as soon as the container driver session is terminated.", 
            "title": "mobile: stopScreenStreaming"
        }, 
        {
            "location": "/writing-running-appium/android/android-screen-streaming/#usage-examples_1", 
            "text": "// Java\ndriver.executeScript( mobile: stopScreenStreaming );  # Python\ndriver.execute_script('mobile: stopScreenStreaming')", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/", 
            "text": "Automating Mobile Gestures With UiAutomator2 Backend\n\n\nTouch actions are the most advanced and the most complicated way to\nimplement any Android gesture. Although, there is a couple of basic\ngestures, like swipe, fling or pinch, which are commonly used in\nAndroid applications and for which it makes sense to have shortcuts,\nwhere only high-level options are configurable.\n\n\nmobile: longClickGesture\n\n\nThis gesture performs long click action on the given element/coordinates.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be clicked.\n  If the element is missing then both click offset coordinates must be provided.\n  If both the element id and offset are provided then the coordinates\n  are parsed as relative offsets from the top left corner of the element.\n\n\nx\n: The x-offset coordinate\n\n\ny\n: The y-offset coordinate\n\n\nduration\n: Click duration in milliseconds. \n500\n by default. The value must not be negative\n\n\n\n\nUsage examples\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nmobile: longClickGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId()\n));\n\n\n\n\n# Python\ndriver.execute_script('mobile: longClickGesture', {'x': 100, 'y': 100, 'duration': 1000})\n\n\n\n\nmobile: doubleClickGesture\n\n\nThis gesture performs double click action on the given element/coordinates.\nAvailable since Appium v1.21\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be clicked.\n  If the element is missing then both click offset coordinates must be provided.\n  If both the element id and offset are provided then the coordinates\n  are parsed as relative offsets from the top left corner of the element.\n\n\nx\n: The x-offset coordinate\n\n\ny\n: The y-offset coordinate\n\n\n\n\nUsage examples\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nmobile: doubleClickGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId()\n));\n\n\n\n\n# Python\ndriver.execute_script('mobile: doubleClickGesture', {'x': 100, 'y': 100})\n\n\n\n\nmobile: clickGesture\n\n\nThis gesture performs click action on the given element/coordinates.\nAvailable since Appium UiAutomator2 driver 1.71.0. Usage of this gesture is recommended\nas a possible workaround for cases where the \"native\" tap call fails,\neven though tap coordinates seem correct. This issue is related to the fact\nthese calls use the legacy UIAutomator-based calls while this extension\nis based on the same foundation as W3C does.\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be clicked.\n  If the element is missing then both click offset coordinates must be provided.\n  If both the element id and offset are provided then the coordinates\n  are parsed as relative offsets from the top left corner of the element.\n\n\nx\n: The x-offset coordinate\n\n\ny\n: The y-offset coordinate\n\n\n\n\nUsage examples\n\n\n// Java\ndriver.executeScript(\nmobile: clickGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId()\n));\n\n\n\n\n# Python\ndriver.execute_script('mobile: clickGesture', {'x': 100, 'y': 100})\n\n\n\n\nmobile: dragGesture\n\n\nThis gesture performs drag action from the given element/coordinates to the given point.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be dragged.\n  If the element id is missing then both start coordinates must be provided.\n  If both the element id and the start coordinates are provided then these\n  coordinates are considered as offsets from the top left element corner.\n\n\nstartX\n: The x-start coordinate\n\n\nstartY\n: The y-start coordinate\n\n\nendX\n: The x-end coordinate. Mandatory argument\n\n\nendY\n: The y-end coordinate. Mandatory argument\n\n\nspeed\n:  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is \n2500 * displayDensity\n\n\n\n\nUsage examples\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nmobile: dragGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId(),\n    \nendX\n, 100,\n    \nendY\n, 100\n));\n\n\n\n\nmobile: flingGesture\n\n\nThis gesture performs fling gesture on the given element/area.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be flinged.\n  If the element id is missing then fling bounding area must be provided.\n  If both the element id and the fling bounding area are provided then this\n  area is effectively ignored.\n\n\nleft\n: The left coordinate of the fling bounding area\n\n\ntop\n: The top coordinate of the fling bounding area\n\n\nwidth\n: The width of the fling bounding area\n\n\nheight\n: The height of the fling bounding area\n\n\ndirection\n: Direction of the fling. Mandatory value.\n  Acceptable values are: \nup\n, \ndown\n, \nleft\n and \nright\n (case insensitive)\n\n\nspeed\n:  The speed at which to perform this\n  gesture in pixels per second. The value must be greater than the minimum fling\n  velocity for the given view (50 by default). The default value is \n7500 * displayDensity\n\n\n\n\nReturned value\n\n\nThe returned value is a boolean one and equals to \ntrue\n if the object can still scroll in the given direction\n\n\nUsage examples\n\n\n// Java\nboolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript(\nmobile: flingGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId(),\n    \ndirection\n, \ndown\n,\n    \nspeed\n, 500\n));\n\n\n\n\nmobile: pinchOpenGesture\n\n\nThis gesture performs pinch-open gesture on the given element/area.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be pinched.\n  If the element id is missing then pinch bounding area must be provided.\n  If both the element id and the pinch bounding area are provided then the\n  area is effectively ignored.\n\n\nleft\n: The left coordinate of the pinch bounding area\n\n\ntop\n: The top coordinate of the pinch bounding area\n\n\nwidth\n: The width of the pinch bounding area\n\n\nheight\n: The height of the pinch bounding area\n\n\npercent\n: The size of the pinch as a percentage of the pinch area size.\n  Valid values must be float numbers in range 0..1, where 1.0 is 100%.\n  Mandatory value.\n\n\nspeed\n:  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is \n2500 * displayDensity\n\n\n\n\nUsage examples\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nmobile: pinchOpenGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId(),\n    \npercent\n, 0.75\n));\n\n\n\n\nmobile: pinchCloseGesture\n\n\nThis gesture performs pinch-close gesture on the given element/area.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be pinched.\n  If the element id is missing then pinch bounding area must be provided.\n  If both the element id and the pinch bounding area are provided then the\n  area is effectively ignored.\n\n\nleft\n: The left coordinate of the pinch bounding area\n\n\ntop\n: The top coordinate of the pinch bounding area\n\n\nwidth\n: The width of the pinch bounding area\n\n\nheight\n: The height of the pinch bounding area\n\n\npercent\n: The size of the pinch as a percentage of the pinch area size.\n  Valid values must be float numbers in range 0..1, where 1.0 is 100%.\n  Mandatory value.\n\n\nspeed\n:  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is \n2500 * displayDensity\n\n\n\n\nUsage examples\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nmobile: pinchCloseGesture\n, ImmutableMap.of(\n    \nelementId\n, ((RemoteWebElement) element).getId(),\n    \npercent\n, 0.75\n));\n\n\n\n\n# Python\ncan_scroll_more = driver.execute_script('mobile: pinchCloseGesture', {\n    'elementId': element.id,\n    'percent': 0.75\n})\n\n\n\n\nmobile: swipeGesture\n\n\nThis gesture performs swipe gesture on the given element/area.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be swiped.\n  If the element id is missing then swipe bounding area must be provided.\n  If both the element id and the swipe bounding area are provided then the\n  area is effectively ignored.\n\n\nleft\n: The left coordinate of the swipe bounding area\n\n\ntop\n: The top coordinate of the swipe bounding area\n\n\nwidth\n: The width of the swipe bounding area\n\n\nheight\n: The height of the swipe bounding area\n\n\ndirection\n: Swipe direction. Mandatory value.\n  Acceptable values are: \nup\n, \ndown\n, \nleft\n and \nright\n (case insensitive)\n\n\npercent\n: The size of the swipe as a percentage of the swipe area size.\n  Valid values must be float numbers in range 0..1, where 1.0 is 100%.\n  Mandatory value.\n\n\nspeed\n:  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is \n5000 * displayDensity\n\n\n\n\nUsage examples\n\n\n// Java\n((JavascriptExecutor) driver).executeScript(\nmobile: swipeGesture\n, ImmutableMap.of(\n    \nleft\n, 100, \ntop\n, 100, \nwidth\n, 200, \nheight\n, 200,\n    \ndirection\n, \nleft\n,\n    \npercent\n, 0.75\n));\n\n\n\n\nmobile: scrollGesture\n\n\nThis gesture performs scroll gesture on the given element/area.\nAvailable since Appium v1.19\n\n\nSupported arguments\n\n\n\n\nelementId\n: The id of the element to be scrolled.\n  If the element id is missing then scroll bounding area must be provided.\n  If both the element id and the scroll bounding area are provided then this\n  area is effectively ignored.\n\n\nleft\n: The left coordinate of the scroll bounding area\n\n\ntop\n: The top coordinate of the scroll bounding area\n\n\nwidth\n: The width of the scroll bounding area\n\n\nheight\n: The height of the scroll bounding area\n\n\ndirection\n: Scrolling direction. Mandatory value.\n  Acceptable values are: \nup\n, \ndown\n, \nleft\n and \nright\n (case insensitive)\n\n\npercent\n: The size of the scroll as a percentage of the scrolling area size.\n  Valid values must be float numbers greater than zero, where 1.0 is 100%.\n  Mandatory value.\n\n\nspeed\n:  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is \n5000 * displayDensity\n\n\n\n\nReturned value\n\n\nThe returned value is a boolean one and equals to \ntrue\n if the object can still scroll in the given direction\n\n\nUsage examples\n\n\n// Java\nboolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript(\nmobile: scrollGesture\n, ImmutableMap.of(\n    \nleft\n, 100, \ntop\n, 100, \nwidth\n, 200, \nheight\n, 200,\n    \ndirection\n, \ndown\n,\n    \npercent\n, 3.0\n));\n\n\n\n\n# Python\ncan_scroll_more = driver.execute_script('mobile: scrollGesture', {\n    'left': 100, 'top': 100, 'width': 200, 'height': 200,\n    'direction': 'down',\n    'percent': 3.0\n})", 
            "title": "Automating Mobile Gestures With UiAutomator2 Backend"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#automating-mobile-gestures-with-uiautomator2-backend", 
            "text": "Touch actions are the most advanced and the most complicated way to\nimplement any Android gesture. Although, there is a couple of basic\ngestures, like swipe, fling or pinch, which are commonly used in\nAndroid applications and for which it makes sense to have shortcuts,\nwhere only high-level options are configurable.", 
            "title": "Automating Mobile Gestures With UiAutomator2 Backend"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-longclickgesture", 
            "text": "This gesture performs long click action on the given element/coordinates.\nAvailable since Appium v1.19", 
            "title": "mobile: longClickGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments", 
            "text": "elementId : The id of the element to be clicked.\n  If the element is missing then both click offset coordinates must be provided.\n  If both the element id and offset are provided then the coordinates\n  are parsed as relative offsets from the top left corner of the element.  x : The x-offset coordinate  y : The y-offset coordinate  duration : Click duration in milliseconds.  500  by default. The value must not be negative", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( mobile: longClickGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId()\n));  # Python\ndriver.execute_script('mobile: longClickGesture', {'x': 100, 'y': 100, 'duration': 1000})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-doubleclickgesture", 
            "text": "This gesture performs double click action on the given element/coordinates.\nAvailable since Appium v1.21", 
            "title": "mobile: doubleClickGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_1", 
            "text": "elementId : The id of the element to be clicked.\n  If the element is missing then both click offset coordinates must be provided.\n  If both the element id and offset are provided then the coordinates\n  are parsed as relative offsets from the top left corner of the element.  x : The x-offset coordinate  y : The y-offset coordinate", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_1", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( mobile: doubleClickGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId()\n));  # Python\ndriver.execute_script('mobile: doubleClickGesture', {'x': 100, 'y': 100})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-clickgesture", 
            "text": "This gesture performs click action on the given element/coordinates.\nAvailable since Appium UiAutomator2 driver 1.71.0. Usage of this gesture is recommended\nas a possible workaround for cases where the \"native\" tap call fails,\neven though tap coordinates seem correct. This issue is related to the fact\nthese calls use the legacy UIAutomator-based calls while this extension\nis based on the same foundation as W3C does.", 
            "title": "mobile: clickGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_2", 
            "text": "elementId : The id of the element to be clicked.\n  If the element is missing then both click offset coordinates must be provided.\n  If both the element id and offset are provided then the coordinates\n  are parsed as relative offsets from the top left corner of the element.  x : The x-offset coordinate  y : The y-offset coordinate", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_2", 
            "text": "// Java\ndriver.executeScript( mobile: clickGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId()\n));  # Python\ndriver.execute_script('mobile: clickGesture', {'x': 100, 'y': 100})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-draggesture", 
            "text": "This gesture performs drag action from the given element/coordinates to the given point.\nAvailable since Appium v1.19", 
            "title": "mobile: dragGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_3", 
            "text": "elementId : The id of the element to be dragged.\n  If the element id is missing then both start coordinates must be provided.\n  If both the element id and the start coordinates are provided then these\n  coordinates are considered as offsets from the top left element corner.  startX : The x-start coordinate  startY : The y-start coordinate  endX : The x-end coordinate. Mandatory argument  endY : The y-end coordinate. Mandatory argument  speed :  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is  2500 * displayDensity", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_3", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( mobile: dragGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId(),\n     endX , 100,\n     endY , 100\n));", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-flinggesture", 
            "text": "This gesture performs fling gesture on the given element/area.\nAvailable since Appium v1.19", 
            "title": "mobile: flingGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_4", 
            "text": "elementId : The id of the element to be flinged.\n  If the element id is missing then fling bounding area must be provided.\n  If both the element id and the fling bounding area are provided then this\n  area is effectively ignored.  left : The left coordinate of the fling bounding area  top : The top coordinate of the fling bounding area  width : The width of the fling bounding area  height : The height of the fling bounding area  direction : Direction of the fling. Mandatory value.\n  Acceptable values are:  up ,  down ,  left  and  right  (case insensitive)  speed :  The speed at which to perform this\n  gesture in pixels per second. The value must be greater than the minimum fling\n  velocity for the given view (50 by default). The default value is  7500 * displayDensity", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#returned-value", 
            "text": "The returned value is a boolean one and equals to  true  if the object can still scroll in the given direction", 
            "title": "Returned value"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_4", 
            "text": "// Java\nboolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript( mobile: flingGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId(),\n     direction ,  down ,\n     speed , 500\n));", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-pinchopengesture", 
            "text": "This gesture performs pinch-open gesture on the given element/area.\nAvailable since Appium v1.19", 
            "title": "mobile: pinchOpenGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_5", 
            "text": "elementId : The id of the element to be pinched.\n  If the element id is missing then pinch bounding area must be provided.\n  If both the element id and the pinch bounding area are provided then the\n  area is effectively ignored.  left : The left coordinate of the pinch bounding area  top : The top coordinate of the pinch bounding area  width : The width of the pinch bounding area  height : The height of the pinch bounding area  percent : The size of the pinch as a percentage of the pinch area size.\n  Valid values must be float numbers in range 0..1, where 1.0 is 100%.\n  Mandatory value.  speed :  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is  2500 * displayDensity", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_5", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( mobile: pinchOpenGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId(),\n     percent , 0.75\n));", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-pinchclosegesture", 
            "text": "This gesture performs pinch-close gesture on the given element/area.\nAvailable since Appium v1.19", 
            "title": "mobile: pinchCloseGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_6", 
            "text": "elementId : The id of the element to be pinched.\n  If the element id is missing then pinch bounding area must be provided.\n  If both the element id and the pinch bounding area are provided then the\n  area is effectively ignored.  left : The left coordinate of the pinch bounding area  top : The top coordinate of the pinch bounding area  width : The width of the pinch bounding area  height : The height of the pinch bounding area  percent : The size of the pinch as a percentage of the pinch area size.\n  Valid values must be float numbers in range 0..1, where 1.0 is 100%.\n  Mandatory value.  speed :  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is  2500 * displayDensity", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_6", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( mobile: pinchCloseGesture , ImmutableMap.of(\n     elementId , ((RemoteWebElement) element).getId(),\n     percent , 0.75\n));  # Python\ncan_scroll_more = driver.execute_script('mobile: pinchCloseGesture', {\n    'elementId': element.id,\n    'percent': 0.75\n})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-swipegesture", 
            "text": "This gesture performs swipe gesture on the given element/area.\nAvailable since Appium v1.19", 
            "title": "mobile: swipeGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_7", 
            "text": "elementId : The id of the element to be swiped.\n  If the element id is missing then swipe bounding area must be provided.\n  If both the element id and the swipe bounding area are provided then the\n  area is effectively ignored.  left : The left coordinate of the swipe bounding area  top : The top coordinate of the swipe bounding area  width : The width of the swipe bounding area  height : The height of the swipe bounding area  direction : Swipe direction. Mandatory value.\n  Acceptable values are:  up ,  down ,  left  and  right  (case insensitive)  percent : The size of the swipe as a percentage of the swipe area size.\n  Valid values must be float numbers in range 0..1, where 1.0 is 100%.\n  Mandatory value.  speed :  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is  5000 * displayDensity", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_7", 
            "text": "// Java\n((JavascriptExecutor) driver).executeScript( mobile: swipeGesture , ImmutableMap.of(\n     left , 100,  top , 100,  width , 200,  height , 200,\n     direction ,  left ,\n     percent , 0.75\n));", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#mobile-scrollgesture", 
            "text": "This gesture performs scroll gesture on the given element/area.\nAvailable since Appium v1.19", 
            "title": "mobile: scrollGesture"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#supported-arguments_8", 
            "text": "elementId : The id of the element to be scrolled.\n  If the element id is missing then scroll bounding area must be provided.\n  If both the element id and the scroll bounding area are provided then this\n  area is effectively ignored.  left : The left coordinate of the scroll bounding area  top : The top coordinate of the scroll bounding area  width : The width of the scroll bounding area  height : The height of the scroll bounding area  direction : Scrolling direction. Mandatory value.\n  Acceptable values are:  up ,  down ,  left  and  right  (case insensitive)  percent : The size of the scroll as a percentage of the scrolling area size.\n  Valid values must be float numbers greater than zero, where 1.0 is 100%.\n  Mandatory value.  speed :  The speed at which to perform this gesture in pixels per second.\n  The value must not be negative. The default value is  5000 * displayDensity", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#returned-value_1", 
            "text": "The returned value is a boolean one and equals to  true  if the object can still scroll in the given direction", 
            "title": "Returned value"
        }, 
        {
            "location": "/writing-running-appium/android/android-mobile-gestures/#usage-examples_8", 
            "text": "// Java\nboolean canScrollMore = (Boolean) ((JavascriptExecutor) driver).executeScript( mobile: scrollGesture , ImmutableMap.of(\n     left , 100,  top , 100,  width , 200,  height , 200,\n     direction ,  down ,\n     percent , 3.0\n));  # Python\ncan_scroll_more = driver.execute_script('mobile: scrollGesture', {\n    'left': 100, 'top': 100, 'width': 200, 'height': 200,\n    'direction': 'down',\n    'percent': 3.0\n})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-ime/", 
            "text": "How To Emulate IME Actions Generation\n\n\nVery often Android developers use \nonEditorAction\n callback with \nactionId\n argument to implement actions handling, for example, when \nSearch\n or \nDone\n button is pressed on the on-screen keyboard. Appium since version 1.9.2 allows to automate the generation of such actions by providing the special \nmobile:\n command.\n\n\nmobile: performEditorAction\n\n\nExecutes the given editor action on the \ncurrently focused\n element.\n\n\nSupported arguments\n\n\n\n\naction\n: The name or an integer code of the editor action to be executed. The following action names are supported: \nnormal, unspecified, none, go, search, send, next, done, previous\n. Read https://developer.android.com/reference/android/view/inputmethod/EditorInfo for more details on this topic.\n\n\n\n\nUsage examples\n\n\n// Java\ndriver.executeScript(\nmobile: performEditorAction\n, ImmutableMap.of(\naction\n, \nGo\n));\n\n\n\n\n# Python\ndriver.execute_script('mobile: performEditorAction', {'action': 'previous'})", 
            "title": "How To Emulate IME Actions Generation"
        }, 
        {
            "location": "/writing-running-appium/android/android-ime/#how-to-emulate-ime-actions-generation", 
            "text": "Very often Android developers use  onEditorAction  callback with  actionId  argument to implement actions handling, for example, when  Search  or  Done  button is pressed on the on-screen keyboard. Appium since version 1.9.2 allows to automate the generation of such actions by providing the special  mobile:  command.", 
            "title": "How To Emulate IME Actions Generation"
        }, 
        {
            "location": "/writing-running-appium/android/android-ime/#mobile-performeditoraction", 
            "text": "Executes the given editor action on the  currently focused  element.", 
            "title": "mobile: performEditorAction"
        }, 
        {
            "location": "/writing-running-appium/android/android-ime/#supported-arguments", 
            "text": "action : The name or an integer code of the editor action to be executed. The following action names are supported:  normal, unspecified, none, go, search, send, next, done, previous . Read https://developer.android.com/reference/android/view/inputmethod/EditorInfo for more details on this topic.", 
            "title": "Supported arguments"
        }, 
        {
            "location": "/writing-running-appium/android/android-ime/#usage-examples", 
            "text": "// Java\ndriver.executeScript( mobile: performEditorAction , ImmutableMap.of( action ,  Go ));  # Python\ndriver.execute_script('mobile: performEditorAction', {'action': 'previous'})", 
            "title": "Usage examples"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/", 
            "text": "How To Test Android App Bundle\n\n\nGoogle has released the \nAndroid App Bundle\n feature.\nAn \n.aab\n file is generated by the feature, which we are supposed to upload to the Google Play Store. We can manage the \n.aab\n file via CLI using the official \nbundletool\n which is available from \nbundletool\n. \nThe guide\n also help us to understand the feature.\n\n\nWe can get distributed apk files from the \n.aab\n file via the CLI. Using the generated files, we can test against the release module. Since Appium 1.9.2, you can Appium tests against an \n.apks\n file using UiAutomator2 driver. \n1\n and \n2\n are PRs for the feature.\n\n\nHow to run tests\n\n\n\n\nExport \nbundletool.jar\n in your path\n\n\nAppium looks for \nbundletool.jar\n in your local environemnt. Make sure you can find the path with \nwhich 'bundletool.jar'\n. If you can't find it, please set the path correctly.\n\n\nPlease make sure the bundletool version is above 1.6.0\n\n\n\n\n\n\nGenerate the \n.apks\n file from the \n.aab\n file\n\n\nThe \n.aab\n is available over Android Studio 3.2\n\n\nYou must sign correctly when you generate \n.apks\n from \n.aab\n. This step requires data signing.\n\n\n\n\n\n\n\n\n$ java -jar apks/bundletool.jar build-apks \\\n    --bundle apks/release/release/app.aab \\ # A generated aab file\n    --output apks/AppBundleSample.apks \\    # An apks file you'd like to out put to\n    --ks apks/sign \\                        # Signing keystore\n    --ks-key-alias key0 \\                   # Alias of the keytstore\n    --ks-pass pass:kazucocoa \\              # Password of the keystore\n    --overwrite                             # Overwrite any existing apks files\n\n\n\n\n\n\nUse the path to the \n.apks\n file as your \napp\n capability.\n\n\n\n\ndesired_capability = caps: {\n    platformName: :android,\n    automationName: 'uiautomator2',\n    platformVersion: '8.1',\n    deviceName: 'Android Emulator',\n    app: \npath/to/your.apks\n,   # This line is important\n    fullReset: true,\n    ...\n}\n\ncore = ::Appium::Core.for(desired_capability)\ndriver = core.start_driver\n\n\n\n\nYou can find another way to get test APKs in https://developer.android.com/guide/app-bundle/\n\n\nYou could also install \n.apks\n bundles via \nInstall App\n command like below.\n\n\ndriver.install_app 'path/to/your.apks'\n\n\n\n\nTips\n\n\nMake \nbundletool.jar\n executable\n\n\nMake sure the bundletool is executable.\n\n$ chmod 655 /path/to/bundletool.jar\n can make it executable, for example.\n\n\nTest with different languages\n\n\nSet \nfullReset: true\n if you would like to test against the app using different languages' resources.\n\n\nAppium only installs the minimum set of resources, following the behavior of the appbundle feature. For example, if a device's language is set of English, Appium will only install the \nen\n resource. The installed apk will have no Japanese resources.\n\n\nIn orfer to force re-install with a different set of language resources, specify \nfullreset: true\n\n\nAn example project\n\n\n\n\nhttps://github.com/KazuCocoa/AppBundleSample", 
            "title": "How To Test Android App Bundle"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/#how-to-test-android-app-bundle", 
            "text": "Google has released the  Android App Bundle  feature.\nAn  .aab  file is generated by the feature, which we are supposed to upload to the Google Play Store. We can manage the  .aab  file via CLI using the official  bundletool  which is available from  bundletool .  The guide  also help us to understand the feature.  We can get distributed apk files from the  .aab  file via the CLI. Using the generated files, we can test against the release module. Since Appium 1.9.2, you can Appium tests against an  .apks  file using UiAutomator2 driver.  1  and  2  are PRs for the feature.", 
            "title": "How To Test Android App Bundle"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/#how-to-run-tests", 
            "text": "Export  bundletool.jar  in your path  Appium looks for  bundletool.jar  in your local environemnt. Make sure you can find the path with  which 'bundletool.jar' . If you can't find it, please set the path correctly.  Please make sure the bundletool version is above 1.6.0    Generate the  .apks  file from the  .aab  file  The  .aab  is available over Android Studio 3.2  You must sign correctly when you generate  .apks  from  .aab . This step requires data signing.     $ java -jar apks/bundletool.jar build-apks \\\n    --bundle apks/release/release/app.aab \\ # A generated aab file\n    --output apks/AppBundleSample.apks \\    # An apks file you'd like to out put to\n    --ks apks/sign \\                        # Signing keystore\n    --ks-key-alias key0 \\                   # Alias of the keytstore\n    --ks-pass pass:kazucocoa \\              # Password of the keystore\n    --overwrite                             # Overwrite any existing apks files   Use the path to the  .apks  file as your  app  capability.   desired_capability = caps: {\n    platformName: :android,\n    automationName: 'uiautomator2',\n    platformVersion: '8.1',\n    deviceName: 'Android Emulator',\n    app:  path/to/your.apks ,   # This line is important\n    fullReset: true,\n    ...\n}\n\ncore = ::Appium::Core.for(desired_capability)\ndriver = core.start_driver  You can find another way to get test APKs in https://developer.android.com/guide/app-bundle/  You could also install  .apks  bundles via  Install App  command like below.  driver.install_app 'path/to/your.apks'", 
            "title": "How to run tests"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/#tips", 
            "text": "", 
            "title": "Tips"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/#make-bundletooljar-executable", 
            "text": "Make sure the bundletool is executable. $ chmod 655 /path/to/bundletool.jar  can make it executable, for example.", 
            "title": "Make bundletool.jar executable"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/#test-with-different-languages", 
            "text": "Set  fullReset: true  if you would like to test against the app using different languages' resources.  Appium only installs the minimum set of resources, following the behavior of the appbundle feature. For example, if a device's language is set of English, Appium will only install the  en  resource. The installed apk will have no Japanese resources.  In orfer to force re-install with a different set of language resources, specify  fullreset: true", 
            "title": "Test with different languages"
        }, 
        {
            "location": "/writing-running-appium/android/android-appbundle/#an-example-project", 
            "text": "https://github.com/KazuCocoa/AppBundleSample", 
            "title": "An example project"
        }, 
        {
            "location": "/writing-running-appium/other/reset-strategies/", 
            "text": "Reset Strategies\n\n\n\n\n\n\n\n\nAutomation Name\n\n\ndefault\n\n\nfullReset\n\n\nnoReset\n\n\n\n\n\n\n\n\n\n\niOS (including XCUITest)\n\n\nShut down sim after test. Do not destroy sim. If it is a simulator and \napp\n capability is provided, uninstalls the app-under-test* but does not destroy simulator. If it is a real device or a simulator with only \nbundleId\n capability, does not uninstall app-under-test.\n\n\nUninstall app before and after real device test, destroy Simulator before and after sim test. They happen only \nbefore\n if \nresetOnSessionStartOnly: true\n is provided\n\n\nDo not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in\n\n\n\n\n\n\nAndroid\n\n\nStop and clear app data after test. Do not uninstall apk\n\n\nStop app, clear app data and uninstall apk before session starts and after test\n\n\nDo not stop app, do not clear app data, and do not uninstall apk.\n\n\n\n\n\n\n\n\n*: Make sure the local data has been deleted from the simulator environment rather than they remain unexpectedly.", 
            "title": "Reset Strategies"
        }, 
        {
            "location": "/writing-running-appium/other/reset-strategies/#reset-strategies", 
            "text": "Automation Name  default  fullReset  noReset      iOS (including XCUITest)  Shut down sim after test. Do not destroy sim. If it is a simulator and  app  capability is provided, uninstalls the app-under-test* but does not destroy simulator. If it is a real device or a simulator with only  bundleId  capability, does not uninstall app-under-test.  Uninstall app before and after real device test, destroy Simulator before and after sim test. They happen only  before  if  resetOnSessionStartOnly: true  is provided  Do not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in    Android  Stop and clear app data after test. Do not uninstall apk  Stop app, clear app data and uninstall apk before session starts and after test  Do not stop app, do not clear app data, and do not uninstall apk.     *: Make sure the local data has been deleted from the simulator environment rather than they remain unexpectedly.", 
            "title": "Reset Strategies"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/", 
            "text": "Adjusting Network Connection\n\n\nThe Selenium \nMobile JSON Wire Protocol Specification\n supports an \nAPI\n for getting and setting the network connection for a device. The API works through a bitmask, assigning an integer to each possible state:\n\n\n\n\n\n\n\n\nValue (Alias)\n\n\nData\n\n\nWifi\n\n\nAirplane Mode\n\n\n\n\n\n\n\n\n\n\n0 (None)\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n1 (Airplane Mode)\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n2 (Wifi only)\n\n\n0\n\n\n1\n\n\n0\n\n\n\n\n\n\n4 (Data only)\n\n\n1\n\n\n0\n\n\n0\n\n\n\n\n\n\n6 (All network on)\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n\n\niOS\n\n\nUnfortunately, at the moment Appium does not support the Selenium network\nconnection API for iOS.\n\n\nAndroid\n\n\nThere are the following limitations:\n\n\nReal Devices\n\n\n\n\nChanging Airplane Mode state only works for Android 6 and older\n\n\nChaning data connection state works for Android 4.4 and older. Newer OS releases (5.0+) must be rooted in order to make the feature working (e. g. \nsu\n binary should available)\n\n\nChanging Wi-Fi connection state should work for all Android versions\n\n\n\n\nEmulators\n\n\n\n\nChanging Airplane Mode state only works for Android 6 and older\n\n\nChaning data connection state should work for all Android versions\n\n\nChanging Wi-Fi connection state should work for all Android versions\n\n\n\n\nWindows\n\n\nUnfortunately, at the moment Appium does not support the Selenium network\nconnection API for Windows.\n\n\n// javascript\n// set airplane mode\ndriver.setNetworkConnection(1)\n\n// set wifi only\ndriver.setNetworkConnection(2)\n\n// set data only\ndriver.setNetworkConnection(4)\n\n// set wifi and data\ndriver.setNetworkConnection(6)\n\n\n\n\nRetrieving the network connection settings returns the same bitmask, from which\nthe status can be decoded.\n\n\n// javascript\ndriver.getNetworkConnection().then(function (connectionType) {\n  switch (connectionType) {\n    case 0:\n      // no network connection\n      break;\n    case 1:\n      // airplane mode\n      break;\n    case 2:\n      // wifi\n      break;\n    case 4:\n      // data\n      break;\n    case 6:\n      // wifi and data\n      break;\n  }\n});", 
            "title": "Network Connection Guide"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/#adjusting-network-connection", 
            "text": "The Selenium  Mobile JSON Wire Protocol Specification  supports an  API  for getting and setting the network connection for a device. The API works through a bitmask, assigning an integer to each possible state:     Value (Alias)  Data  Wifi  Airplane Mode      0 (None)  0  0  0    1 (Airplane Mode)  0  0  1    2 (Wifi only)  0  1  0    4 (Data only)  1  0  0    6 (All network on)  1  1  0", 
            "title": "Adjusting Network Connection"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/#ios", 
            "text": "Unfortunately, at the moment Appium does not support the Selenium network\nconnection API for iOS.", 
            "title": "iOS"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/#android", 
            "text": "There are the following limitations:", 
            "title": "Android"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/#real-devices", 
            "text": "Changing Airplane Mode state only works for Android 6 and older  Chaning data connection state works for Android 4.4 and older. Newer OS releases (5.0+) must be rooted in order to make the feature working (e. g.  su  binary should available)  Changing Wi-Fi connection state should work for all Android versions", 
            "title": "Real Devices"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/#emulators", 
            "text": "Changing Airplane Mode state only works for Android 6 and older  Chaning data connection state should work for all Android versions  Changing Wi-Fi connection state should work for all Android versions", 
            "title": "Emulators"
        }, 
        {
            "location": "/writing-running-appium/other/network-connection/#windows", 
            "text": "Unfortunately, at the moment Appium does not support the Selenium network\nconnection API for Windows.  // javascript\n// set airplane mode\ndriver.setNetworkConnection(1)\n\n// set wifi only\ndriver.setNetworkConnection(2)\n\n// set data only\ndriver.setNetworkConnection(4)\n\n// set wifi and data\ndriver.setNetworkConnection(6)  Retrieving the network connection settings returns the same bitmask, from which\nthe status can be decoded.  // javascript\ndriver.getNetworkConnection().then(function (connectionType) {\n  switch (connectionType) {\n    case 0:\n      // no network connection\n      break;\n    case 1:\n      // airplane mode\n      break;\n    case 2:\n      // wifi\n      break;\n    case 4:\n      // data\n      break;\n    case 6:\n      // wifi and data\n      break;\n  }\n});", 
            "title": "Windows"
        }, 
        {
            "location": "/writing-running-appium/other/unicode/", 
            "text": "Multi-lingual Support\n\n\nOne problem with dealing with non-Latin characters programmatically is that, for characters\nwith accents, there can be multiple ways of encoding the form. So, for the letter\n\n\u00e9\n, there are two encodings: a single combining character \n\u00e9\n (Unicode's\n\nLATIN SMALL LETTER E WITH ACUTE\n), and the combination of the letter \ne\n followed\nby the accent, \n\u0301\n (\nCOMBINING ACUTE ACCENT\n). In order to deal with this, there\nis \nnormalization\n, an operation that makes \n\"equivalent strings have a unique\nbinary representation\"\n.\n\n\nLuckily, normalizing ASCII text (i.e., text that doesn't need to be normalized)\ndoes not cause any changes, and performing\nthe operation multiple times does not have an effect. Thus a normalization\nfunction can be called on text without risking adverse effects.\n\n\n// javascript\nvar unorm = require('unorm');\n\n'some ASCII text' === unorm.nfd('some ASCII text');\nunorm.nfd('Ad\u00e9la\u00efde Herv\u00e9') === unorm.nfd(unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9'));\n\n\n\n\nSo, when dealing with unicode text within a test, you need to normalize, preferably\non both the text expected and that received from Appium. There are a number of\nways to do the normalization, so be sure to perform the same operation on both\nstrings!\n\n\n// javascript\nvar unorm = require('unorm');\ndriver\n  .elementByAccessibilityId('find')\n    .text()\n    .then(function (txt) {\n      unorm.nfd(txt).should.be(unorm.nfd(\n\u00e9 \u0152 \u00f9 \u1e0d\n));\n    });\n\n\n\n\nOne tell-tale sign that the problem is with the encoding of the unicode text is\nan assertion that fails but reports what look to be the same string:\n\n\nAssertionError: expected 'Fran\u00e7ois G\u00e9rard' to deeply equal 'Fran\u00e7ois G\u00e9rard'\n      + expected - actual\n\n      +\nFran\u00e7ois G\u00e9rard\n\n      -\nFran\u00e7ois G\u00e9rard\n\n\n\n\n\nSince the error is just encoding, the output \nlooks\n the same. Normalized, these\nshould equal programmatically as well as visually.\n\n\nFinders\n\n\nFinding by text can also require normalization. For instance, if you have a button\nin an iOS app with the name \n\u041d\u0430\u0439\u0442\u0438\n you may need to normalize the text within the\nfind command.\n\n\n// javascript\nvar unorm = require('unorm');\ndriver\n  .findElementByXPath(unorm.nfd(\n//UIAButton[@name='\u041d\u0430\u0439\u0442\u0438']\n))\n    .should.eventually.exist;\n\n\n\n\nOtherwise the elements may not be found.\n\n\nText Fields\n\n\nBy default the automation tools for both iOS and Android do not support non-ASCII\ncharacters sent to editable fields through the keyboard.\n\n\niOS\n\n\nAppium sends non-ASCII characters to iOS editable fields directly, bypassing the\nkeyboard altogether. While this allows the text to be inputted in tests, it should\nbe kept in mind that any business logic triggered by keyboard input will therefore\nnot be tested.\n\n\nAs above, the text received may need to be normalized before asserting on it.\n\n\n// javascript\nvar unorm = require('unorm');\nvar testText = unorm.nfd(\n\u00e9 \u0152 \u00f9 \u1e0d\n);\ndriver\n  .elementsByClassName('UIATextField').at(1)\n    .sendKeys(testText)\n    .text()\n    .should.become(testText)\n  .nodeify(done);\n\n\n\n\nAndroid\n\n\nAndroid tests allow for Unicode input by installing and using a \nspecialized\nkeyboard\n that allows the text\nto be passed as ASCII text between Appium and the application being tested.\n\n\nIn order to utilize this functionality, set the \nunicodeKeyboard\n desired capability\nis set to \ntrue\n. If the keyboard should be returned to its original state, the\n\nresetKeyboard\n desired capability should also be set to \ntrue\n. Otherwise Appium's\nUnicode keyboard will remain enabled on the device after the tests are completed.\n\n\nThen tests can pass Unicode text to editable fields using \nsend_keys\n.\n\n\n// javascript\nvar desired = {\n  app: '/path/to/app',\n  deviceName: 'Android Emulator',\n  deviceVersion: '4.4',\n  platformName: 'Android',\n  unicodeKeyboard: true,\n  resetKeyboard: true\n};\nvar testText = '\u00e9 \u0152 \u00f9 \u1e0d';\ndriver\n  .elementByClassName('android.widget.EditText')\n  .sendKeys(testText)\n  .text()\n  .should.eventually.become(testText)\n  .nodeify(done);", 
            "title": "Using Unicode with Appium"
        }, 
        {
            "location": "/writing-running-appium/other/unicode/#multi-lingual-support", 
            "text": "One problem with dealing with non-Latin characters programmatically is that, for characters\nwith accents, there can be multiple ways of encoding the form. So, for the letter \u00e9 , there are two encodings: a single combining character  \u00e9  (Unicode's LATIN SMALL LETTER E WITH ACUTE ), and the combination of the letter  e  followed\nby the accent,  \u0301  ( COMBINING ACUTE ACCENT ). In order to deal with this, there\nis  normalization , an operation that makes  \"equivalent strings have a unique\nbinary representation\" .  Luckily, normalizing ASCII text (i.e., text that doesn't need to be normalized)\ndoes not cause any changes, and performing\nthe operation multiple times does not have an effect. Thus a normalization\nfunction can be called on text without risking adverse effects.  // javascript\nvar unorm = require('unorm');\n\n'some ASCII text' === unorm.nfd('some ASCII text');\nunorm.nfd('Ad\u00e9la\u00efde Herv\u00e9') === unorm.nfd(unorm.nfd('Ad\u00e9la\u00efde Herv\u00e9'));  So, when dealing with unicode text within a test, you need to normalize, preferably\non both the text expected and that received from Appium. There are a number of\nways to do the normalization, so be sure to perform the same operation on both\nstrings!  // javascript\nvar unorm = require('unorm');\ndriver\n  .elementByAccessibilityId('find')\n    .text()\n    .then(function (txt) {\n      unorm.nfd(txt).should.be(unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d ));\n    });  One tell-tale sign that the problem is with the encoding of the unicode text is\nan assertion that fails but reports what look to be the same string:  AssertionError: expected 'Fran\u00e7ois G\u00e9rard' to deeply equal 'Fran\u00e7ois G\u00e9rard'\n      + expected - actual\n\n      + Fran\u00e7ois G\u00e9rard \n      - Fran\u00e7ois G\u00e9rard   Since the error is just encoding, the output  looks  the same. Normalized, these\nshould equal programmatically as well as visually.", 
            "title": "Multi-lingual Support"
        }, 
        {
            "location": "/writing-running-appium/other/unicode/#finders", 
            "text": "Finding by text can also require normalization. For instance, if you have a button\nin an iOS app with the name  \u041d\u0430\u0439\u0442\u0438  you may need to normalize the text within the\nfind command.  // javascript\nvar unorm = require('unorm');\ndriver\n  .findElementByXPath(unorm.nfd( //UIAButton[@name='\u041d\u0430\u0439\u0442\u0438'] ))\n    .should.eventually.exist;  Otherwise the elements may not be found.", 
            "title": "Finders"
        }, 
        {
            "location": "/writing-running-appium/other/unicode/#text-fields", 
            "text": "By default the automation tools for both iOS and Android do not support non-ASCII\ncharacters sent to editable fields through the keyboard.", 
            "title": "Text Fields"
        }, 
        {
            "location": "/writing-running-appium/other/unicode/#ios", 
            "text": "Appium sends non-ASCII characters to iOS editable fields directly, bypassing the\nkeyboard altogether. While this allows the text to be inputted in tests, it should\nbe kept in mind that any business logic triggered by keyboard input will therefore\nnot be tested.  As above, the text received may need to be normalized before asserting on it.  // javascript\nvar unorm = require('unorm');\nvar testText = unorm.nfd( \u00e9 \u0152 \u00f9 \u1e0d );\ndriver\n  .elementsByClassName('UIATextField').at(1)\n    .sendKeys(testText)\n    .text()\n    .should.become(testText)\n  .nodeify(done);", 
            "title": "iOS"
        }, 
        {
            "location": "/writing-running-appium/other/unicode/#android", 
            "text": "Android tests allow for Unicode input by installing and using a  specialized\nkeyboard  that allows the text\nto be passed as ASCII text between Appium and the application being tested.  In order to utilize this functionality, set the  unicodeKeyboard  desired capability\nis set to  true . If the keyboard should be returned to its original state, the resetKeyboard  desired capability should also be set to  true . Otherwise Appium's\nUnicode keyboard will remain enabled on the device after the tests are completed.  Then tests can pass Unicode text to editable fields using  send_keys .  // javascript\nvar desired = {\n  app: '/path/to/app',\n  deviceName: 'Android Emulator',\n  deviceVersion: '4.4',\n  platformName: 'Android',\n  unicodeKeyboard: true,\n  resetKeyboard: true\n};\nvar testText = '\u00e9 \u0152 \u00f9 \u1e0d';\ndriver\n  .elementByClassName('android.widget.EditText')\n  .sendKeys(testText)\n  .text()\n  .should.eventually.become(testText)\n  .nodeify(done);", 
            "title": "Android"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/", 
            "text": "Troubleshooting Appium\n\n\nHere's what to do if you're experiencing problems, before you submit a ticket\nto github or write to the \nappium-discuss discussion group\n.\n\n\nGeneral\n\n\n\n\nMake sure you've followed the getting started steps in the \nREADME\n\n\nMake sure your system is set up appropriately (i.e., XCode is updated,\n  Android SDK is installed and \nANDROID_HOME\n is set.\n\n\nMake sure the paths to your applications are correct\n\n\nOn windows run appium.app as administrator or when running from source you need to run cmd as administrator.\n\n\nWhen installing on Mac, make sure the user has write permissions for \n/usr/local/lib\n or install Appium with the command \nnpm install -g appium --unsafe-perm=true --allow-root\n\n\n\n\nIf you're running Appium.app\n\n\n\n\nUpdate the app and restart. If you get a message saying the app can't be updated,\n  re-download it from \nappium.io\n.\n\n\n\n\nIf you're running Appium from source\n\n\n\n\ngit pull\n to make sure you're running the latest code\n\n\nRemove old dependencies: \nrm -rf node_modules\n\n\nRe-install dependencies: \nnpm install\n\n\n\n\nRe-transpile the code: \ngulp transpile\n\n\n\n\n\n\nYou can also use \nAppium Doctor\n to determine whether your system is configured correctly for Appium.\n\n\n\n\nIf you get this error after upgrading to Android SDK 22:\n  \n{ANDROID_HOME}/tools/ant/uibuild.xml:155: SDK does not have any Build Tools installed.\n\nIn the Android SDK 22, the platform and build tools are split up into their\nown items in the SDK manager. Make sure you install the build-tools and platform-tools.\n\n\n\n\nAndroid\n\n\n\n\nMake sure the Android emulator is up and running.\n\n\nIt's sometimes useful to run \nadb kill-server \n adb devices\n. This can\n  reset the connection to the Android device.\n\n\nIf you're running the Android emulator using Fastboot and the emulator isn't being detected by adb, try doing a cold boot:  \nAndroid Studio \n Tools \n AVD Manager \n Actions \n Cold Boot Now\n\n\nMake sure you set ANDROID_HOME pointing to the Android SDK directory\n\n\nAfter setting power state to \noff\n (e.g.: \ndriver.setPowerAC(PowerACState.OFF);\n) you must create a new session.\n\n\nWhen using \n-wipe-data\n in \navdArgs\n the \nnoReset\n capability will be ignored if set to true.\n\n\nMake sure proper developer options are enabled. Some devices have \ncustom options\n to make the device testable. \nThis page\n also has helpful steps to configure devices for automation.\n\n\n\n\nAndroid Espresso\n\n\n\n\nAppium is supposed to disable animations by default, but if it doesn't work try following the \nEspresso setup instructions\n which advises that \"To avoid flakiness, we highly recommend that you turn off system animations on the virtual or physical devices used for testing. On your device, under Settings \n Developer options, disable the following 3 settings: Window animation scale, Transition animation scale, Animator Duration scale\"\n\n\n\n\nWindows\n\n\n\n\nMake sure developer mode is on\n\n\nMake sure command prompt is Admin\n\n\nCheck that the URL Appium server is listening to matches the one specified in test script\n\n\n\n\nIOS\n\n\n\n\nMake sure Instruments.app is not open\n\n\nIf you're running the simulator, make sure your actual device is not\n  plugged in\n\n\nMake sure the accessibility helper is turned off in your Settings app\n\n\nMake sure the app is compiled for the version of the simulator that's being\n  run\n\n\nMake sure the app is compiled for the simulator (or real device) as\n  appropriate (e.g., in debug mode for the simulator), or you might get\n  a \nposix spawn\n error.\n\n\nIf you've ever run Appium with sudo, you might need to \nsudo rm\n  /tmp/instruments_sock\n and try again as not-sudo.\n\n\nIf this is the first time you've run Appium, make sure to authorize the use\n  of Instruments. See the \nUIAutomation Driver\n doc.\n\n\nIf Instruments is crashing when running against a physical device (\"exited with code 253\"), ensure Xcode has downloaded device symbols. Go to Window -\n Devices, and it should start automatically. This is needed after iOS version upgrades.\n\n\nIf you see \niOS Simulator failed to install the application.\n and the\n  paths are correct, try restarting the computer.\n\n\nMake sure your macOS keychain that holds the certificate(s) needed for building your app and the WebDriverAgent is unlocked. Especialy if you are using ssh. General symptom to look for is \ncodesign\n failure.\n\n\nIf you have custom elements in your app, they will not be automatable by\n  UIAutomation (and therefore Appium) by default. You need to set the\n  accessibility status to 'enabled' on them. The way to do this in code is:\n\n\n\n\ncenter\n  [myCustomView setAccessibilityEnabled:YES];\n\n\n\n\nTests on iOS may exhibit symptoms similar to a memory leak including sluggish\n  performance or hangs. If you experience this problem, it's likely due to a\n  known issue with NSLog. One option is to remove NSLog from your code.\n  However, there are several more nuanced approaches that may also help without\n  requiring that you refactor.\n\n\n\n\n### Workaround 1\n  NSLog is a macro and can be redefined. E.g.,\n  ```objectivec\n  // \nYou'll need to define TEST or TEST2 and then recompile.\n\n\n#ifdef TEST\n    #define NSLog(...) _BlackHoleTestLogger(\nVA_ARGS\n);\n  #endif // TEST\n  #ifdef TEST2\n    #define NSLog(...) _StdoutTestLogger(\nVA_ARGS\n);\n  #endif // TEST2\n\n\nvoid _BlackHoleTestLogger(NSString *format, ...) {\n      //\n  }\n\n\nvoid _StdoutTestLogger(NSString *format, ...) {\n      va_list argumentList;\n      va_start(argumentList, format);\n      NSMutableString * message = [[NSMutableString alloc] initWithFormat:format\n                                                  arguments:argumentList];\n\n\n  printf(message);\n\n  va_end(argumentList);\n  [message release];\n\n\n\n}\n  ```\n\n\n### Workaround 2\n  Manually replace the underlying function that NSLog wraps. This method was recommended by\n  \nApple in a similar context.\n\n\n```objectivec\n  extern void _NSSetLogCStringFunction(void(\n)(const char \n, unsigned, BOOL));\n\n\nstatic void _GarbageFreeLogCString(const char *message, unsigned length, BOOL withSyslogBanner) {\n     fprintf(stderr, \"%s\\n\", message);\n  }\n\n\nint main (int argc, const char \nargv[]) {\n     NSAutoreleasePool \npool = [[NSAutoreleasePool alloc] init];\n     int exitCode;\n\n\n setbuf(stderr, NULL);\n\n _NSSetLogCStringFunction(_GarbageFreeLogCString);\n exitCode = WOApplicationMain(@\"Application\", argc, argv);\n [pool release];\n return exitCode;\n\n\n\n}\n  \n``\n* Get\nUnable to launch WebDriverAgent because of xcodebuild failure: Command 'Scripts/bootstrap.sh -d' exited with code 1\nerror message in failing xcodebuild\n    - Make sure\nxcodebuild -checkFirstLaunchStatus\nreturns status code\n0\n- If it returns\n69\n, you should call\nxcodebuild -runFirstLaunch\nonce to prevent the root error,\nInstall Started\nInstall Failed: Error Domain=DVTDownloadableErrors Code=3 \"The authorization was denied since no user interaction was possible.\" UserInfo={AuthorizationErrorCode=-60007, NSLocalizedDescription=The authorization was denied since no user interaction was possible.}`\n    - example: https://github.com/appium/WebDriverAgent/pull/165#discussion_r281458167\n\n\nWebview/Hybrid/Safari app support\n\n\n\n\nMake Sure you enable the 'Web Inspector' on the real device.\n\n\nMake Sure you enable the Safari - Advance Preferences- Developer menu for\n  simulators.\n\n\nMake sure you are properly switching contexts using the \ncontext\n appium commands provided by your client library.\n\n\nIf you getting this error: select_port() failed, when trying to open the\n  proxy, see this \ndiscussion\n\n\nIn a Safari session, if the logs indicate that the initial url cannot be entered, make sure that\n  you have the software keyboard enabled. See this \ndiscussion\n.\n\n\n\n\nLet the community know\n\n\nOnce you've tried the above steps and your issue still isn't resolved,\nhere's what you can do:\n\n\nIf you're having trouble getting Appium working and the error messages Appium\nprovides are not clear, join the \ndiscussion group\n\nand send a message. Please include the following:\n\n\n\n\nHow you're running Appium (Appium.app, npm, source)\n\n\nWhat operating system you are using\n\n\nWhat device and version you are testing against (i.e. Android 4.4, or iOS 7.1)\n\n\nWhether you are running against a real device or a simulator/emulator\n\n\nThe client-side and server-side errors you're getting (i.e.,\n\"In Python this is the exception I get in my test script,\nand here's a link to a paste of the Appium server output)\n\n\nPer above, it's very important to include a paste of the Appium server\noutput when it's run in verbose mode so that we can diagnose what's going on.\n\n\n\n\nIf you've found what you believe is a bug, go straight to the \nissue tracker\n\nand submit an issue describing the bug and a repro case.\n\n\nKnown Issues\n\n\n\n\nIf you've installed Node from the Node website, it requires that you use sudo\n  for \nnpm\n. This is not ideal. Try to get node with \nnvm\n,\n  \nn\n or \nbrew install node\n instead!\n\n\nWebview support works on real iOS devices with a proxy, see \ndiscussion\n.\n\n\nSometimes iOS UI elements become invalidated milliseconds after they are\n  found. This results in an error that looks like \n(null) cannot be tapped\n.\n  Sometimes the only solution is to put the finding-and-clicking code in a retry\n  block.\n\n\nAppium may have difficulties finding the \nnode\n executable if you've\n  installed Node and npm via MacPorts. You must make sure that the MacPorts bin\n  folder (\n/opt/local/bin\n by default) is added to \nPATH\n somewhere in your\n  \n~/.profile\n, \n~/.bash_profile\n or \n~/.bashrc\n.\n\n\n\n\nSpecific Errors\n\n\n\n\n\n\n\n\nAction\n\n\nError\n\n\nResolution\n\n\n\n\n\n\n\n\n\n\nRunning ios test\n\n\n[INST STDERR] posix spawn failure; aborting launch\n\n\nYour app is not compiled correctly for the simulator or device.\n\n\n\n\n\n\nRunning mobile safari test\n\n\nerror: Could not prepare mobile safari with version '7.1'\n\n\nYou probably need to run the authorize script again to make the iOS SDK files writeable. See the \nUIAutomation Driver", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#troubleshooting-appium", 
            "text": "Here's what to do if you're experiencing problems, before you submit a ticket\nto github or write to the  appium-discuss discussion group .", 
            "title": "Troubleshooting Appium"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#general", 
            "text": "Make sure you've followed the getting started steps in the  README  Make sure your system is set up appropriately (i.e., XCode is updated,\n  Android SDK is installed and  ANDROID_HOME  is set.  Make sure the paths to your applications are correct  On windows run appium.app as administrator or when running from source you need to run cmd as administrator.  When installing on Mac, make sure the user has write permissions for  /usr/local/lib  or install Appium with the command  npm install -g appium --unsafe-perm=true --allow-root", 
            "title": "General"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#if-youre-running-appiumapp", 
            "text": "Update the app and restart. If you get a message saying the app can't be updated,\n  re-download it from  appium.io .", 
            "title": "If you're running Appium.app"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#if-youre-running-appium-from-source", 
            "text": "git pull  to make sure you're running the latest code  Remove old dependencies:  rm -rf node_modules  Re-install dependencies:  npm install   Re-transpile the code:  gulp transpile    You can also use  Appium Doctor  to determine whether your system is configured correctly for Appium.   If you get this error after upgrading to Android SDK 22:\n   {ANDROID_HOME}/tools/ant/uibuild.xml:155: SDK does not have any Build Tools installed. \nIn the Android SDK 22, the platform and build tools are split up into their\nown items in the SDK manager. Make sure you install the build-tools and platform-tools.", 
            "title": "If you're running Appium from source"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#android", 
            "text": "Make sure the Android emulator is up and running.  It's sometimes useful to run  adb kill-server   adb devices . This can\n  reset the connection to the Android device.  If you're running the Android emulator using Fastboot and the emulator isn't being detected by adb, try doing a cold boot:   Android Studio   Tools   AVD Manager   Actions   Cold Boot Now  Make sure you set ANDROID_HOME pointing to the Android SDK directory  After setting power state to  off  (e.g.:  driver.setPowerAC(PowerACState.OFF); ) you must create a new session.  When using  -wipe-data  in  avdArgs  the  noReset  capability will be ignored if set to true.  Make sure proper developer options are enabled. Some devices have  custom options  to make the device testable.  This page  also has helpful steps to configure devices for automation.", 
            "title": "Android"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#android-espresso", 
            "text": "Appium is supposed to disable animations by default, but if it doesn't work try following the  Espresso setup instructions  which advises that \"To avoid flakiness, we highly recommend that you turn off system animations on the virtual or physical devices used for testing. On your device, under Settings   Developer options, disable the following 3 settings: Window animation scale, Transition animation scale, Animator Duration scale\"", 
            "title": "Android Espresso"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#windows", 
            "text": "Make sure developer mode is on  Make sure command prompt is Admin  Check that the URL Appium server is listening to matches the one specified in test script", 
            "title": "Windows"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#ios", 
            "text": "Make sure Instruments.app is not open  If you're running the simulator, make sure your actual device is not\n  plugged in  Make sure the accessibility helper is turned off in your Settings app  Make sure the app is compiled for the version of the simulator that's being\n  run  Make sure the app is compiled for the simulator (or real device) as\n  appropriate (e.g., in debug mode for the simulator), or you might get\n  a  posix spawn  error.  If you've ever run Appium with sudo, you might need to  sudo rm\n  /tmp/instruments_sock  and try again as not-sudo.  If this is the first time you've run Appium, make sure to authorize the use\n  of Instruments. See the  UIAutomation Driver  doc.  If Instruments is crashing when running against a physical device (\"exited with code 253\"), ensure Xcode has downloaded device symbols. Go to Window -  Devices, and it should start automatically. This is needed after iOS version upgrades.  If you see  iOS Simulator failed to install the application.  and the\n  paths are correct, try restarting the computer.  Make sure your macOS keychain that holds the certificate(s) needed for building your app and the WebDriverAgent is unlocked. Especialy if you are using ssh. General symptom to look for is  codesign  failure.  If you have custom elements in your app, they will not be automatable by\n  UIAutomation (and therefore Appium) by default. You need to set the\n  accessibility status to 'enabled' on them. The way to do this in code is:   center\n  [myCustomView setAccessibilityEnabled:YES];   Tests on iOS may exhibit symptoms similar to a memory leak including sluggish\n  performance or hangs. If you experience this problem, it's likely due to a\n  known issue with NSLog. One option is to remove NSLog from your code.\n  However, there are several more nuanced approaches that may also help without\n  requiring that you refactor.   ### Workaround 1\n  NSLog is a macro and can be redefined. E.g.,\n  ```objectivec\n  //  You'll need to define TEST or TEST2 and then recompile.  #ifdef TEST\n    #define NSLog(...) _BlackHoleTestLogger( VA_ARGS );\n  #endif // TEST\n  #ifdef TEST2\n    #define NSLog(...) _StdoutTestLogger( VA_ARGS );\n  #endif // TEST2  void _BlackHoleTestLogger(NSString *format, ...) {\n      //\n  }  void _StdoutTestLogger(NSString *format, ...) {\n      va_list argumentList;\n      va_start(argumentList, format);\n      NSMutableString * message = [[NSMutableString alloc] initWithFormat:format\n                                                  arguments:argumentList];    printf(message);\n\n  va_end(argumentList);\n  [message release];  }\n  ```  ### Workaround 2\n  Manually replace the underlying function that NSLog wraps. This method was recommended by\n   Apple in a similar context.  ```objectivec\n  extern void _NSSetLogCStringFunction(void( )(const char  , unsigned, BOOL));  static void _GarbageFreeLogCString(const char *message, unsigned length, BOOL withSyslogBanner) {\n     fprintf(stderr, \"%s\\n\", message);\n  }  int main (int argc, const char  argv[]) {\n     NSAutoreleasePool  pool = [[NSAutoreleasePool alloc] init];\n     int exitCode;   setbuf(stderr, NULL);\n\n _NSSetLogCStringFunction(_GarbageFreeLogCString);\n exitCode = WOApplicationMain(@\"Application\", argc, argv);\n [pool release];\n return exitCode;  }\n   ``\n* Get Unable to launch WebDriverAgent because of xcodebuild failure: Command 'Scripts/bootstrap.sh -d' exited with code 1 error message in failing xcodebuild\n    - Make sure xcodebuild -checkFirstLaunchStatus returns status code 0 - If it returns 69 , you should call xcodebuild -runFirstLaunch once to prevent the root error, Install Started\nInstall Failed: Error Domain=DVTDownloadableErrors Code=3 \"The authorization was denied since no user interaction was possible.\" UserInfo={AuthorizationErrorCode=-60007, NSLocalizedDescription=The authorization was denied since no user interaction was possible.}`\n    - example: https://github.com/appium/WebDriverAgent/pull/165#discussion_r281458167", 
            "title": "IOS"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#webviewhybridsafari-app-support", 
            "text": "Make Sure you enable the 'Web Inspector' on the real device.  Make Sure you enable the Safari - Advance Preferences- Developer menu for\n  simulators.  Make sure you are properly switching contexts using the  context  appium commands provided by your client library.  If you getting this error: select_port() failed, when trying to open the\n  proxy, see this  discussion  In a Safari session, if the logs indicate that the initial url cannot be entered, make sure that\n  you have the software keyboard enabled. See this  discussion .", 
            "title": "Webview/Hybrid/Safari app support"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#let-the-community-know", 
            "text": "Once you've tried the above steps and your issue still isn't resolved,\nhere's what you can do:  If you're having trouble getting Appium working and the error messages Appium\nprovides are not clear, join the  discussion group \nand send a message. Please include the following:   How you're running Appium (Appium.app, npm, source)  What operating system you are using  What device and version you are testing against (i.e. Android 4.4, or iOS 7.1)  Whether you are running against a real device or a simulator/emulator  The client-side and server-side errors you're getting (i.e.,\n\"In Python this is the exception I get in my test script,\nand here's a link to a paste of the Appium server output)  Per above, it's very important to include a paste of the Appium server\noutput when it's run in verbose mode so that we can diagnose what's going on.   If you've found what you believe is a bug, go straight to the  issue tracker \nand submit an issue describing the bug and a repro case.", 
            "title": "Let the community know"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#known-issues", 
            "text": "If you've installed Node from the Node website, it requires that you use sudo\n  for  npm . This is not ideal. Try to get node with  nvm ,\n   n  or  brew install node  instead!  Webview support works on real iOS devices with a proxy, see  discussion .  Sometimes iOS UI elements become invalidated milliseconds after they are\n  found. This results in an error that looks like  (null) cannot be tapped .\n  Sometimes the only solution is to put the finding-and-clicking code in a retry\n  block.  Appium may have difficulties finding the  node  executable if you've\n  installed Node and npm via MacPorts. You must make sure that the MacPorts bin\n  folder ( /opt/local/bin  by default) is added to  PATH  somewhere in your\n   ~/.profile ,  ~/.bash_profile  or  ~/.bashrc .", 
            "title": "Known Issues"
        }, 
        {
            "location": "/writing-running-appium/other/troubleshooting/#specific-errors", 
            "text": "Action  Error  Resolution      Running ios test  [INST STDERR] posix spawn failure; aborting launch  Your app is not compiled correctly for the simulator or device.    Running mobile safari test  error: Could not prepare mobile safari with version '7.1'  You probably need to run the authorize script again to make the iOS SDK files writeable. See the  UIAutomation Driver", 
            "title": "Specific Errors"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/", 
            "text": "Scroll / Swipe actions tutorial\n\n\nAndroid vs iOS UI differences\n\n\nAppium uses XCUITest driver for iOS and UIAutomator2, Espresso for\nAndroid. The default driver for Android is UIAutomator2.\n\n\nWith default driver settings we can see elements outside of the view\nport on iOS, but cannot interact with them. We can check their values,\nbut touches are not reliable. Android UIAutomator2 with default settings\nallows you to see only elements located in the current view port.\nAndroid 'Espresso' \nTODO\n. These behaviors/limitations coming from Apple\nXCUITest and Google UIAutomator2 frameworks.\n\n\nWhile interacting with elements you should always keep in mind these\ndifferences.\n\n\nSimple swipe actions\n\n\n\n\nScreen swipe\n\n\nElement swipe\n\n\nPartial Screen swipe\n\n\n\n\nW3C Actions\n\nhelp to build advanced gestures.\n\n\nAndroid: 'UIScrollable' swipe\n\n\n\n\nSimple example\n\n\nMultiple scroll views example\n\n\nAdd scroll layout\n\n\nTricks and Tips\n\n\n\n\niOS: 'mobile:scroll', 'mobile:swipe' swipe\n\n\n\n\nScreen swipe\n\n\nElement swipe\n\n\nElement search swipe\n\n\n\n\niOS: 'pickerWheels' swipe\n\n\n\n\nFast '.setValue()'\n\n\nSlow 'mobile:selectPickerWheelValue'\n\n\n\n\nSwipe troubleshoot guide\n\n\n\n\nSwipe troubleshoot guide", 
            "title": "Swipe Tutorial"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#scroll-swipe-actions-tutorial", 
            "text": "", 
            "title": "Scroll / Swipe actions tutorial"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#android-vs-ios-ui-differences", 
            "text": "Appium uses XCUITest driver for iOS and UIAutomator2, Espresso for\nAndroid. The default driver for Android is UIAutomator2.  With default driver settings we can see elements outside of the view\nport on iOS, but cannot interact with them. We can check their values,\nbut touches are not reliable. Android UIAutomator2 with default settings\nallows you to see only elements located in the current view port.\nAndroid 'Espresso'  TODO . These behaviors/limitations coming from Apple\nXCUITest and Google UIAutomator2 frameworks.  While interacting with elements you should always keep in mind these\ndifferences.", 
            "title": "Android vs iOS UI differences"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#simple-swipe-actions", 
            "text": "Screen swipe  Element swipe  Partial Screen swipe   W3C Actions \nhelp to build advanced gestures.", 
            "title": "Simple swipe actions"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#android-uiscrollable-swipe", 
            "text": "Simple example  Multiple scroll views example  Add scroll layout  Tricks and Tips", 
            "title": "Android: 'UIScrollable' swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#ios-mobilescroll-mobileswipe-swipe", 
            "text": "Screen swipe  Element swipe  Element search swipe", 
            "title": "iOS: 'mobile:scroll', 'mobile:swipe' swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#ios-pickerwheels-swipe", 
            "text": "Fast '.setValue()'  Slow 'mobile:selectPickerWheelValue'", 
            "title": "iOS: 'pickerWheels' swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe-tutorial/#swipe-troubleshoot-guide", 
            "text": "Swipe troubleshoot guide", 
            "title": "Swipe troubleshoot guide"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-screen/", 
            "text": "Simple Screen swipe\n\n\nSwipe has start and end points. The start point of swipe is most\nimportant. The following elements may prevent swipe start:\n- application interface/menu e.g. header or footer\n- elements that are waiting tap and do not pass touch to scroll view\n\n\nIt is better to start swipe actions at the center of the screen to make\nthem more reliable.\n\n\n\n\n/**\n * Performs swipe from the center of screen\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeScreen(Direction dir) {\n    System.out.println(\nswipeScreen(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    int edgeBorder = 10; // better avoid edges\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n\n    // init start point = center of screen\n    pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2);\n\n    switch (dir) {\n        case DOWN: // center of footer\n            pointOptionEnd = PointOption.point(dims.width / 2, dims.height - edgeBorder);\n            break;\n        case UP: // center of header\n            pointOptionEnd = PointOption.point(dims.width / 2, edgeBorder);\n            break;\n        case LEFT: // center of left side\n            pointOptionEnd = PointOption.point(edgeBorder, dims.height / 2);\n            break;\n        case RIGHT: // center of right side\n            pointOptionEnd = PointOption.point(dims.width - edgeBorder, dims.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException(\nswipeScreen(): dir: '\n + dir + \n' NOT supported\n);\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println(\nswipeScreen(): TouchAction FAILED\\n\n + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}\n\npublic enum Direction {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT;\n}", 
            "title": "Screen"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-screen/#simple-screen-swipe", 
            "text": "Swipe has start and end points. The start point of swipe is most\nimportant. The following elements may prevent swipe start:\n- application interface/menu e.g. header or footer\n- elements that are waiting tap and do not pass touch to scroll view  It is better to start swipe actions at the center of the screen to make\nthem more reliable.   /**\n * Performs swipe from the center of screen\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeScreen(Direction dir) {\n    System.out.println( swipeScreen(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    int edgeBorder = 10; // better avoid edges\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n\n    // init start point = center of screen\n    pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2);\n\n    switch (dir) {\n        case DOWN: // center of footer\n            pointOptionEnd = PointOption.point(dims.width / 2, dims.height - edgeBorder);\n            break;\n        case UP: // center of header\n            pointOptionEnd = PointOption.point(dims.width / 2, edgeBorder);\n            break;\n        case LEFT: // center of left side\n            pointOptionEnd = PointOption.point(edgeBorder, dims.height / 2);\n            break;\n        case RIGHT: // center of right side\n            pointOptionEnd = PointOption.point(dims.width - edgeBorder, dims.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException( swipeScreen(): dir: '  + dir +  ' NOT supported );\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println( swipeScreen(): TouchAction FAILED\\n  + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}\n\npublic enum Direction {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT;\n}", 
            "title": "Simple Screen swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-element/", 
            "text": "Simple Element swipe\n\n\nAndroid: UIAutomator2\n\n\nBy default UIAutomator2 driver only returns elements, which are visible\non the screen. If a container is split between the visible and invisible\nparts of the viewport then a part of its content won't be visible.\n\n\n\n\n/**\n * Performs swipe inside an element\n *\n * @param el  the element to swipe\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeElementAndroid(MobileElement el, Direction dir) {\n    System.out.println(\nswipeElementAndroid(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    int edgeBorder;\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Rectangle rect = el.getRect();\n    // sometimes it is needed to configure edgeBorders\n    // you can also improve borders to have vertical/horizontal\n    // or left/right/up/down border variables\n    edgeBorder = 0;\n\n    switch (dir) {\n        case DOWN: // from up to down\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + edgeBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - edgeBorder);\n            break;\n        case UP: // from down to up\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - edgeBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + edgeBorder);\n            break;\n        case LEFT: // from right to left\n            pointOptionStart = PointOption.point(rect.x + rect.width - edgeBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + edgeBorder,\n                    rect.y + rect.height / 2);\n            break;\n        case RIGHT: // from left to right\n            pointOptionStart = PointOption.point(rect.x + edgeBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + rect.width - edgeBorder,\n                    rect.y + rect.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException(\nswipeElementAndroid(): dir: '\n + dir + \n' NOT supported\n);\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println(\nswipeElementAndroid(): TouchAction FAILED\\n\n + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}\n\n\n\n\niOS: XCUITest\n\n\nXCUITest shows elements outside screen. It is strongly advised to use\neither screen swipe or 'mobile:scroll' / 'mobile:swipe' methods. If you\nstill need or prefer to try element method you should consider the\nfollowing:\n1. Check that both start and end points are on screen.\n2. Scrollview is often a background element. Any header/footer or other\n   elements overlap it and limit swipe possibilities. Try to fix it by\n   configuring correct borders. If borders differ per screen - make them\n   configurable via swipe function variables.\n\n\n/**\n * Performs swipe inside an element\n *\n * @param el  the element to swipe\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeElementIOS(MobileElement el, Direction dir) {\n    System.out.println(\nswipeElementIOS(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 500; // ms\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n    Rectangle rect = el.getRect();\n\n    // check element overlaps screen\n    if (rect.x \n= dims.width || rect.x + rect.width \n= 0\n            || rect.y \n= dims.height || rect.y + rect.height \n= 0) {\n        throw new IllegalArgumentException(\nswipeElementIOS(): Element outside screen\n);\n    }\n\n    // init borders per your app screen\n    // or make them configurable with function variables\n    int leftBorder, rightBorder, upBorder, downBorder;\n    leftBorder = 0;\n    rightBorder = 0;\n    upBorder = 0;\n    downBorder = 0;\n\n    // find rect that overlap screen\n    if (rect.x \n 0) {\n        rect.width = rect.width + rect.x;\n        rect.x = 0;\n    }\n    if (rect.y \n 0) {\n        rect.height = rect.height + rect.y;\n        rect.y = 0;\n    }\n    if (rect.width \n dims.width)\n        rect.width = dims.width;\n    if (rect.height \n dims.height)\n        rect.height = dims.height;\n\n    PointOption pointOptionStart, pointOptionEnd;\n    switch (dir) {\n        case DOWN: // from up to down\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + upBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - downBorder);\n            break;\n        case UP: // from down to up\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - downBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + upBorder);\n            break;\n        case LEFT: // from right to left\n            pointOptionStart = PointOption.point(rect.x + rect.width - rightBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + leftBorder,\n                    rect.y + rect.height / 2);\n            break;\n        case RIGHT: // from left to right\n            pointOptionStart = PointOption.point(rect.x + leftBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + rect.width - rightBorder,\n                    rect.y + rect.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException(\nswipeElementIOS(): dir: '\n + dir + \n' NOT supported\n);\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println(\nswipeElementIOS(): TouchAction FAILED\\n\n + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}", 
            "title": "Element"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-element/#simple-element-swipe", 
            "text": "", 
            "title": "Simple Element swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-element/#android-uiautomator2", 
            "text": "By default UIAutomator2 driver only returns elements, which are visible\non the screen. If a container is split between the visible and invisible\nparts of the viewport then a part of its content won't be visible.   /**\n * Performs swipe inside an element\n *\n * @param el  the element to swipe\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeElementAndroid(MobileElement el, Direction dir) {\n    System.out.println( swipeElementAndroid(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    int edgeBorder;\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Rectangle rect = el.getRect();\n    // sometimes it is needed to configure edgeBorders\n    // you can also improve borders to have vertical/horizontal\n    // or left/right/up/down border variables\n    edgeBorder = 0;\n\n    switch (dir) {\n        case DOWN: // from up to down\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + edgeBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - edgeBorder);\n            break;\n        case UP: // from down to up\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - edgeBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + edgeBorder);\n            break;\n        case LEFT: // from right to left\n            pointOptionStart = PointOption.point(rect.x + rect.width - edgeBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + edgeBorder,\n                    rect.y + rect.height / 2);\n            break;\n        case RIGHT: // from left to right\n            pointOptionStart = PointOption.point(rect.x + edgeBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + rect.width - edgeBorder,\n                    rect.y + rect.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException( swipeElementAndroid(): dir: '  + dir +  ' NOT supported );\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println( swipeElementAndroid(): TouchAction FAILED\\n  + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}", 
            "title": "Android: UIAutomator2"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-element/#ios-xcuitest", 
            "text": "XCUITest shows elements outside screen. It is strongly advised to use\neither screen swipe or 'mobile:scroll' / 'mobile:swipe' methods. If you\nstill need or prefer to try element method you should consider the\nfollowing:\n1. Check that both start and end points are on screen.\n2. Scrollview is often a background element. Any header/footer or other\n   elements overlap it and limit swipe possibilities. Try to fix it by\n   configuring correct borders. If borders differ per screen - make them\n   configurable via swipe function variables.  /**\n * Performs swipe inside an element\n *\n * @param el  the element to swipe\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeElementIOS(MobileElement el, Direction dir) {\n    System.out.println( swipeElementIOS(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 500; // ms\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n    Rectangle rect = el.getRect();\n\n    // check element overlaps screen\n    if (rect.x  = dims.width || rect.x + rect.width  = 0\n            || rect.y  = dims.height || rect.y + rect.height  = 0) {\n        throw new IllegalArgumentException( swipeElementIOS(): Element outside screen );\n    }\n\n    // init borders per your app screen\n    // or make them configurable with function variables\n    int leftBorder, rightBorder, upBorder, downBorder;\n    leftBorder = 0;\n    rightBorder = 0;\n    upBorder = 0;\n    downBorder = 0;\n\n    // find rect that overlap screen\n    if (rect.x   0) {\n        rect.width = rect.width + rect.x;\n        rect.x = 0;\n    }\n    if (rect.y   0) {\n        rect.height = rect.height + rect.y;\n        rect.y = 0;\n    }\n    if (rect.width   dims.width)\n        rect.width = dims.width;\n    if (rect.height   dims.height)\n        rect.height = dims.height;\n\n    PointOption pointOptionStart, pointOptionEnd;\n    switch (dir) {\n        case DOWN: // from up to down\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + upBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - downBorder);\n            break;\n        case UP: // from down to up\n            pointOptionStart = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + rect.height - downBorder);\n            pointOptionEnd = PointOption.point(rect.x + rect.width / 2,\n                    rect.y + upBorder);\n            break;\n        case LEFT: // from right to left\n            pointOptionStart = PointOption.point(rect.x + rect.width - rightBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + leftBorder,\n                    rect.y + rect.height / 2);\n            break;\n        case RIGHT: // from left to right\n            pointOptionStart = PointOption.point(rect.x + leftBorder,\n                    rect.y + rect.height / 2);\n            pointOptionEnd = PointOption.point(rect.x + rect.width - rightBorder,\n                    rect.y + rect.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException( swipeElementIOS(): dir: '  + dir +  ' NOT supported );\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println( swipeElementIOS(): TouchAction FAILED\\n  + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}", 
            "title": "iOS: XCUITest"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-partial-screen/", 
            "text": "Simple Partial Screen swipe\n\n\nThere are some situations when we need just a small screen swipe.\n1. iOS: 'mobile:scroll' that is used for precise scroll fails.\n2. Speed concern: Touch action scroll is faster than any other swipe\n   method.\n\n\nWe could use existing swipe from screen center and reduce move action.\n\n\n/**\n * Performs small swipe from the center of screen\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeScreenSmall(Direction dir) {\n    System.out.println(\nswipeScreenSmall(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n\n    // init start point = center of screen\n    pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2);\n\n    // reduce swipe move into multiplier times comparing to swipeScreen move\n    int mult = 10; // multiplier\n    switch (dir) {\n        case DOWN: // center of footer\n            pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) + (dims.height / 2) / mult);\n            break;\n        case UP: // center of header\n            pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) - (dims.height / 2) / mult);\n            break;\n        case LEFT: // center of left side\n            pointOptionEnd = PointOption.point((dims.width / 2) - (dims.width / 2) / mult, dims.height / 2);\n            break;\n        case RIGHT: // center of right side\n            pointOptionEnd = PointOption.point((dims.width / 2) + (dims.width / 2) / mult, dims.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException(\nswipeScreenSmall(): dir: '\n + dir.toString() + \n' NOT supported\n);\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println(\nswipeScreenSmall(): TouchAction FAILED\\n\n + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}", 
            "title": "Partial screen"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/simple-partial-screen/#simple-partial-screen-swipe", 
            "text": "There are some situations when we need just a small screen swipe.\n1. iOS: 'mobile:scroll' that is used for precise scroll fails.\n2. Speed concern: Touch action scroll is faster than any other swipe\n   method.  We could use existing swipe from screen center and reduce move action.  /**\n * Performs small swipe from the center of screen\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeScreenSmall(Direction dir) {\n    System.out.println( swipeScreenSmall(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n\n    // init start point = center of screen\n    pointOptionStart = PointOption.point(dims.width / 2, dims.height / 2);\n\n    // reduce swipe move into multiplier times comparing to swipeScreen move\n    int mult = 10; // multiplier\n    switch (dir) {\n        case DOWN: // center of footer\n            pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) + (dims.height / 2) / mult);\n            break;\n        case UP: // center of header\n            pointOptionEnd = PointOption.point(dims.width / 2, (dims.height / 2) - (dims.height / 2) / mult);\n            break;\n        case LEFT: // center of left side\n            pointOptionEnd = PointOption.point((dims.width / 2) - (dims.width / 2) / mult, dims.height / 2);\n            break;\n        case RIGHT: // center of right side\n            pointOptionEnd = PointOption.point((dims.width / 2) + (dims.width / 2) / mult, dims.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException( swipeScreenSmall(): dir: '  + dir.toString() +  ' NOT supported );\n    }\n\n    // execute swipe using TouchAction\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println( swipeScreenSmall(): TouchAction FAILED\\n  + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}", 
            "title": "Simple Partial Screen swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-simple/", 
            "text": "Android 'UIScrollable' swipe: Simple example\n\n\nUIScrollable is a powerful Android class that performs element lookups\nin scrollable layouts. In most cases you should use \"scrollIntoView\"\nclass which performs scroll action until the destination element is\nfound on the screen.\n\n\nAndroid developer\n\ndocumentation\n\nfor UIScrollable.\n\n\nWe can use UIScrollable swipe in following cases:\n- search elements in a list (e.g. country list)\n- search elements outside of the screen (e.g. input field, text or\n  button)\n\n\nScrollIntoView has UiSelector as search criteria input that allows you\nto find elements by:\n- by text (exact, contains, match, starts with or regex)\n- id (exact or regex)\n- some other methods (rarely used) see in Android developer\n  documentation\n- a combination of available search methods\n\n\nAndroid developer\n\ndocumentation\n\nfor UiSelector.\n\n\nIn a simple example we assume that we have one scrolling view and scroll\ndirection from the bottom to the top of the screen.\n\n\n\n\nSearch by text\n\n\n// Page object\n@AndroidFindBy(uiAutomator = \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n        \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n)\nMobileElement element;\n\n@AndroidFindBy(uiAutomator = \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n        \n.scrollIntoView(new UiSelector().textContains(\\\npart_text\\\n))\n)\nMobileElement element;\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));\n\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n         \n.scrollIntoView(new UiSelector().textContains(\\\npart_text\\\n))\n));\n\n\n\n\nSearch by id\n\n\n// Page object\n@AndroidFindBy(uiAutomator = \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n        \n.scrollIntoView(new UiSelector().resourceIdMatches(\\\n.*part_id.*\\\n))\n)\nMobileElement element;\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n         \n.scrollIntoView(new UiSelector().resourceIdMatches(\\\n.*part_id.*\\\n))\n));\n\n\n\n\n\nSearch by id and text\n\n\n// Page object\n@AndroidFindBy(uiAutomator = \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n        \n.scrollIntoView(new UiSelector().resourceIdMatches(\\\n.*part_id.*\\\n).text(\\\nexact_text\\\n))\n)\nMobileElement element;\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true))\n +\n         \n.scrollIntoView(new UiSelector().resourceIdMatches(\\\n.*part_id.*\\\n).text(\\\nexact_text\\\n))\n));\n\n\n\n\n\nLong view issue\n\n\nFor some longer views it is necessary to increase \"setMaxSearchSwipes\".\nThis value allows to set the maximum count of swipe retries made until\nthe search is stopped.\n\n\n// set max swipes to 10\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true)).setMaxSearchSwipes(10)\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));", 
            "title": "Simple"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-simple/#android-uiscrollable-swipe-simple-example", 
            "text": "UIScrollable is a powerful Android class that performs element lookups\nin scrollable layouts. In most cases you should use \"scrollIntoView\"\nclass which performs scroll action until the destination element is\nfound on the screen.  Android developer documentation \nfor UIScrollable.  We can use UIScrollable swipe in following cases:\n- search elements in a list (e.g. country list)\n- search elements outside of the screen (e.g. input field, text or\n  button)  ScrollIntoView has UiSelector as search criteria input that allows you\nto find elements by:\n- by text (exact, contains, match, starts with or regex)\n- id (exact or regex)\n- some other methods (rarely used) see in Android developer\n  documentation\n- a combination of available search methods  Android developer documentation \nfor UiSelector.  In a simple example we assume that we have one scrolling view and scroll\ndirection from the bottom to the top of the screen.", 
            "title": "Android 'UIScrollable' swipe: Simple example"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-simple/#search-by-text", 
            "text": "// Page object\n@AndroidFindBy(uiAutomator =  new UiScrollable(new UiSelector().scrollable(true))  +\n         .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) )\nMobileElement element;\n\n@AndroidFindBy(uiAutomator =  new UiScrollable(new UiSelector().scrollable(true))  +\n         .scrollIntoView(new UiSelector().textContains(\\ part_text\\ )) )\nMobileElement element;\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true))  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));\n\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true))  +\n          .scrollIntoView(new UiSelector().textContains(\\ part_text\\ )) ));", 
            "title": "Search by text"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-simple/#search-by-id", 
            "text": "// Page object\n@AndroidFindBy(uiAutomator =  new UiScrollable(new UiSelector().scrollable(true))  +\n         .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ )) )\nMobileElement element;\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true))  +\n          .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ )) ));", 
            "title": "Search by id"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-simple/#search-by-id-and-text", 
            "text": "// Page object\n@AndroidFindBy(uiAutomator =  new UiScrollable(new UiSelector().scrollable(true))  +\n         .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).text(\\ exact_text\\ )) )\nMobileElement element;\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true))  +\n          .scrollIntoView(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).text(\\ exact_text\\ )) ));", 
            "title": "Search by id and text"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-simple/#long-view-issue", 
            "text": "For some longer views it is necessary to increase \"setMaxSearchSwipes\".\nThis value allows to set the maximum count of swipe retries made until\nthe search is stopped.  // set max swipes to 10\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true)).setMaxSearchSwipes(10)  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));", 
            "title": "Long view issue"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-multiple/", 
            "text": "Android 'UIScrollable' swipe: Multiple scroll views example\n\n\nWith more then one scrollView on the screen, there is a chance, that\nUIScrollable fails to scroll to the destination subview. In such case we\nwould need to specify the locator of the destination subview as \"new\nUiSelector().scrollable(true)\".\n\n\nBy instance\n\n\n// first scrollView\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true).instance(0))\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));\n\n// second scrollView\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true).instance(1))\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));\n\n\n\n\n\nBy id\n\n\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().resourceIdMatches(\\\n.*part_id.*\\\n).scrollable(true))\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));", 
            "title": "Multiple scroll views"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-multiple/#android-uiscrollable-swipe-multiple-scroll-views-example", 
            "text": "With more then one scrollView on the screen, there is a chance, that\nUIScrollable fails to scroll to the destination subview. In such case we\nwould need to specify the locator of the destination subview as \"new\nUiSelector().scrollable(true)\".", 
            "title": "Android 'UIScrollable' swipe: Multiple scroll views example"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-multiple/#by-instance", 
            "text": "// first scrollView\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true).instance(0))  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));\n\n// second scrollView\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true).instance(1))  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));", 
            "title": "By instance"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-multiple/#by-id", 
            "text": "// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().resourceIdMatches(\\ .*part_id.*\\ ).scrollable(true))  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));", 
            "title": "By id"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-layout-direction/", 
            "text": "Android 'UIScrollable' swipe: Add scroll layout\n\n\nThere are horizontal or vertical scroll views. If UIAutomator fails to\nautomatically perform the scroll then explicitly specifying the layout\ncould solve the issue.\n\n\nSet scroll view layout\n\n\n// setAsVerticalList\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true)).setAsVerticalList()\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));\n\n// setAsHorizontalList\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n        \nnew UiScrollable(new UiSelector().scrollable(true)).setAsHorizontalList()\n +\n         \n.scrollIntoView(new UiSelector().text(\\\nexact_text\\\n))\n));", 
            "title": "Add scroll layout"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-layout-direction/#android-uiscrollable-swipe-add-scroll-layout", 
            "text": "There are horizontal or vertical scroll views. If UIAutomator fails to\nautomatically perform the scroll then explicitly specifying the layout\ncould solve the issue.", 
            "title": "Android 'UIScrollable' swipe: Add scroll layout"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-layout-direction/#set-scroll-view-layout", 
            "text": "// setAsVerticalList\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true)).setAsVerticalList()  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));\n\n// setAsHorizontalList\n// FindElement\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         new UiScrollable(new UiSelector().scrollable(true)).setAsHorizontalList()  +\n          .scrollIntoView(new UiSelector().text(\\ exact_text\\ )) ));", 
            "title": "Set scroll view layout"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-tricks/", 
            "text": "Android 'UIScrollable' swipe: Tricks and Tips\n\n\nWhile Appium does not allow you to use the full power 'UIScrollable'\ndirectly, it is possible to ignore errors and do the trick.\n\n\nScroll forward\n\n\n// scrollForward (moves exactly one view)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).scrollForward()\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingForward (performs quick swipe)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).flingForward()\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n\n\n\nScroll backward\n\n\n// scrollBackward (moves exactly one view)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).scrollBackward()\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingBackward (performs quick swipe)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).flingBackward()\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n\n\n\nScroll to beginning\n\n\n// scrollToBeginning (moves exactly by one view. 10 scrolls max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).scrollToBeginning(10)\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingToBeginning (performs quick swipes. 10 swipes max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).flingToBeginning(10)\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n\n\n\nScroll to end\n\n\n// scrollToEnd (moves exactly by one view. 10 scrolls max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).scrollToEnd(10)\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingToEnd (performs quick swipes. 10 swipes max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n            \nnew UiScrollable(new UiSelector().scrollable(true)).flingToEnd(10)\n));\n} catch (InvalidSelectorException e) {\n    // ignore\n}", 
            "title": "Tricks and Tips"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-tricks/#android-uiscrollable-swipe-tricks-and-tips", 
            "text": "While Appium does not allow you to use the full power 'UIScrollable'\ndirectly, it is possible to ignore errors and do the trick.", 
            "title": "Android 'UIScrollable' swipe: Tricks and Tips"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-tricks/#scroll-forward", 
            "text": "// scrollForward (moves exactly one view)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).scrollForward() ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingForward (performs quick swipe)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).flingForward() ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}", 
            "title": "Scroll forward"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-tricks/#scroll-backward", 
            "text": "// scrollBackward (moves exactly one view)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).scrollBackward() ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingBackward (performs quick swipe)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).flingBackward() ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}", 
            "title": "Scroll backward"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-tricks/#scroll-to-beginning", 
            "text": "// scrollToBeginning (moves exactly by one view. 10 scrolls max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).scrollToBeginning(10) ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingToBeginning (performs quick swipes. 10 swipes max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).flingToBeginning(10) ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}", 
            "title": "Scroll to beginning"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/android-tricks/#scroll-to-end", 
            "text": "// scrollToEnd (moves exactly by one view. 10 scrolls max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).scrollToEnd(10) ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}\n\n// flingToEnd (performs quick swipes. 10 swipes max)\ntry {\n    driver.findElement(MobileBy.AndroidUIAutomator(\n             new UiScrollable(new UiSelector().scrollable(true)).flingToEnd(10) ));\n} catch (InvalidSelectorException e) {\n    // ignore\n}", 
            "title": "Scroll to end"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-mobile-screen/", 
            "text": "iOS 'mobile:': Screen swipe\n\n\nXCTest framework supports unique gestures like \"mobile:scroll\" and\n\"mobile:swipe\". They are not so flexible as UIScrollable but still\nuseful.\n\n\nMore info\n\nhttps://developer.apple.com/documentation/xctest/xcuielement\n in\n'Scrolling' and 'Performing Gestures' sections.\n\n\nAs usual swipe performs swipe action while scroll tries to change one\nvisible view port only.\n\n\n!Note! Scroll direction differs between scroll and swipe commands\n\n\n/**\n * Performs screen scroll\n *\n * @param dir the direction of scroll\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollScreenIOS(Direction dir) {\n    System.out.println(\nmobileScrollScreenIOS(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\n\n    switch (dir) {\n        case DOWN: // from down to up (! differs from mobile:swipe)\n            scrollObject.put(\ndirection\n, \ndown\n);\n            break;\n        case UP: // from up to down (! differs from mobile:swipe)\n            scrollObject.put(\ndirection\n, \nup\n);\n            break;\n        case LEFT: // from left to right (! differs from mobile:swipe)\n            scrollObject.put(\ndirection\n, \nleft\n);\n            break;\n        case RIGHT: // from right to left (! differs from mobile:swipe)\n            scrollObject.put(\ndirection\n, \nright\n);\n            break;\n        default:\n            throw new IllegalArgumentException(\nmobileScrollIOS(): dir: '\n + dir + \n' NOT supported\n);\n    }\n    try {\n        driver.executeScript(\nmobile:scroll\n, scrollObject); // swipe faster then scroll\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println(\nmobileScrollIOS(): FAILED\\n\n + e.getMessage());\n        return;\n    }\n}\n\n/**\n * Performs screen swipe\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void mobileSwipeScreenIOS(Direction dir) {\n    System.out.println(\nmobileSwipeScreenIOS(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\n\n    switch (dir) {\n        case DOWN: // from up to down (! differs from mobile:scroll)\n            scrollObject.put(\ndirection\n, \ndown\n);\n            break;\n        case UP: // from down to up  (! differs from mobile:scroll)\n            scrollObject.put(\ndirection\n, \nup\n);\n            break;\n        case LEFT: // from right to left  (! differs from mobile:scroll)\n            scrollObject.put(\ndirection\n, \nleft\n);\n            break;\n        case RIGHT: // from left to right  (! differs from mobile:scroll)\n            scrollObject.put(\ndirection\n, \nright\n);\n            break;\n        default:\n            throw new IllegalArgumentException(\nmobileSwipeScreenIOS(): dir: '\n + dir + \n' NOT supported\n);\n    }\n    try {\n        driver.executeScript(\nmobile:swipe\n, scrollObject);\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println(\nmobileSwipeScreenIOS(): FAILED\\n\n + e.getMessage());\n        return;\n    }\n}", 
            "title": "Screen"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-mobile-screen/#ios-mobile-screen-swipe", 
            "text": "XCTest framework supports unique gestures like \"mobile:scroll\" and\n\"mobile:swipe\". They are not so flexible as UIScrollable but still\nuseful.  More info https://developer.apple.com/documentation/xctest/xcuielement  in\n'Scrolling' and 'Performing Gestures' sections.  As usual swipe performs swipe action while scroll tries to change one\nvisible view port only.  !Note! Scroll direction differs between scroll and swipe commands  /**\n * Performs screen scroll\n *\n * @param dir the direction of scroll\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollScreenIOS(Direction dir) {\n    System.out.println( mobileScrollScreenIOS(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap String, String  scrollObject = new HashMap String, String ();\n\n    switch (dir) {\n        case DOWN: // from down to up (! differs from mobile:swipe)\n            scrollObject.put( direction ,  down );\n            break;\n        case UP: // from up to down (! differs from mobile:swipe)\n            scrollObject.put( direction ,  up );\n            break;\n        case LEFT: // from left to right (! differs from mobile:swipe)\n            scrollObject.put( direction ,  left );\n            break;\n        case RIGHT: // from right to left (! differs from mobile:swipe)\n            scrollObject.put( direction ,  right );\n            break;\n        default:\n            throw new IllegalArgumentException( mobileScrollIOS(): dir: '  + dir +  ' NOT supported );\n    }\n    try {\n        driver.executeScript( mobile:scroll , scrollObject); // swipe faster then scroll\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println( mobileScrollIOS(): FAILED\\n  + e.getMessage());\n        return;\n    }\n}\n\n/**\n * Performs screen swipe\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void mobileSwipeScreenIOS(Direction dir) {\n    System.out.println( mobileSwipeScreenIOS(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap String, String  scrollObject = new HashMap String, String ();\n\n    switch (dir) {\n        case DOWN: // from up to down (! differs from mobile:scroll)\n            scrollObject.put( direction ,  down );\n            break;\n        case UP: // from down to up  (! differs from mobile:scroll)\n            scrollObject.put( direction ,  up );\n            break;\n        case LEFT: // from right to left  (! differs from mobile:scroll)\n            scrollObject.put( direction ,  left );\n            break;\n        case RIGHT: // from left to right  (! differs from mobile:scroll)\n            scrollObject.put( direction ,  right );\n            break;\n        default:\n            throw new IllegalArgumentException( mobileSwipeScreenIOS(): dir: '  + dir +  ' NOT supported );\n    }\n    try {\n        driver.executeScript( mobile:swipe , scrollObject);\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println( mobileSwipeScreenIOS(): FAILED\\n  + e.getMessage());\n        return;\n    }\n}", 
            "title": "iOS 'mobile:': Screen swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-mobile-element/", 
            "text": "iOS 'mobile:': Element swipe\n\n\nTo swipe inside of an element you need to add the id of this element\ninto swipe methods.\n\n\n// find element to swipe inside\nMobileElement el = (MobileElement) driver.findElement(MobileBy.id(\nmy_id\n));\n\n// execute scroll\nmobileScrollElementIOS(el, Direction.RIGHT);\nmobileScrollElementIOS(el, Direction.LEFT);\n\n// execute swipe\n// !remember! to execute swipe in same direction as scroll use reverse direction\nmobileSwipeElementIOS(el, Direction.LEFT);\nmobileSwipeElementIOS(el, Direction.RIGHT);\n\n/**\n * Performs scroll inside element\n *\n * @param el  the element to scroll\n * @param dir the direction of scroll\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollElementIOS(MobileElement el, Direction dir) {\n    System.out.println(\nmobileScrollElementIOS(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\n\n    switch (dir) {\n        case DOWN: // from down to up (! differs from mobile:swipe)\n        case UP: // from up to down (! differs from mobile:swipe)\n        case LEFT: // from left to right (! differs from mobile:swipe)\n        case RIGHT: // from right to left (! differs from mobile:swipe)\n            scrollObject.put(\ndirection\n, dir.name().toLowerCase());\n            break;\n        default:\n            throw new IllegalArgumentException(\nmobileScrollElementIOS(): dir: '\n + dir + \n' NOT supported\n);\n    }\n    scrollObject.put(\nelement\n, el.getId());\n    try {\n        driver.executeScript(\nmobile:scroll\n, scrollObject); // swipe faster then scroll\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println(\nmobileScrollElementIOS(): FAILED\\n\n + e.getMessage());\n        return;\n    }\n}\n\n/**\n * Performs swipe inside element\n *\n * @param el  the element to swipe\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void mobileSwipeElementIOS(MobileElement el, Direction dir) {\n    System.out.println(\nmobileSwipeElementIOS(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\n\n    switch (dir) {\n        case DOWN: // from up to down (! differs from mobile:scroll)\n        case UP: // from down to up  (! differs from mobile:scroll)\n        case LEFT: // from right to left  (! differs from mobile:scroll)\n        case RIGHT: // from left to right  (! differs from mobile:scroll)\n            scrollObject.put(\ndirection\n, dir.name().toLowerCase());\n            break;\n        default:\n            throw new IllegalArgumentException(\nmobileSwipeElementIOS(): dir: '\n + dir + \n' NOT supported\n);\n    }\n    scrollObject.put(\nelement\n, el.getId());\n    try {\n        driver.executeScript(\nmobile:swipe\n, scrollObject);\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println(\nmobileSwipeElementIOS(): FAILED\\n\n + e.getMessage());\n        return;\n    }\n}", 
            "title": "Element"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-mobile-element/#ios-mobile-element-swipe", 
            "text": "To swipe inside of an element you need to add the id of this element\ninto swipe methods.  // find element to swipe inside\nMobileElement el = (MobileElement) driver.findElement(MobileBy.id( my_id ));\n\n// execute scroll\nmobileScrollElementIOS(el, Direction.RIGHT);\nmobileScrollElementIOS(el, Direction.LEFT);\n\n// execute swipe\n// !remember! to execute swipe in same direction as scroll use reverse direction\nmobileSwipeElementIOS(el, Direction.LEFT);\nmobileSwipeElementIOS(el, Direction.RIGHT);\n\n/**\n * Performs scroll inside element\n *\n * @param el  the element to scroll\n * @param dir the direction of scroll\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollElementIOS(MobileElement el, Direction dir) {\n    System.out.println( mobileScrollElementIOS(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap String, String  scrollObject = new HashMap String, String ();\n\n    switch (dir) {\n        case DOWN: // from down to up (! differs from mobile:swipe)\n        case UP: // from up to down (! differs from mobile:swipe)\n        case LEFT: // from left to right (! differs from mobile:swipe)\n        case RIGHT: // from right to left (! differs from mobile:swipe)\n            scrollObject.put( direction , dir.name().toLowerCase());\n            break;\n        default:\n            throw new IllegalArgumentException( mobileScrollElementIOS(): dir: '  + dir +  ' NOT supported );\n    }\n    scrollObject.put( element , el.getId());\n    try {\n        driver.executeScript( mobile:scroll , scrollObject); // swipe faster then scroll\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println( mobileScrollElementIOS(): FAILED\\n  + e.getMessage());\n        return;\n    }\n}\n\n/**\n * Performs swipe inside element\n *\n * @param el  the element to swipe\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void mobileSwipeElementIOS(MobileElement el, Direction dir) {\n    System.out.println( mobileSwipeElementIOS(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap String, String  scrollObject = new HashMap String, String ();\n\n    switch (dir) {\n        case DOWN: // from up to down (! differs from mobile:scroll)\n        case UP: // from down to up  (! differs from mobile:scroll)\n        case LEFT: // from right to left  (! differs from mobile:scroll)\n        case RIGHT: // from left to right  (! differs from mobile:scroll)\n            scrollObject.put( direction , dir.name().toLowerCase());\n            break;\n        default:\n            throw new IllegalArgumentException( mobileSwipeElementIOS(): dir: '  + dir +  ' NOT supported );\n    }\n    scrollObject.put( element , el.getId());\n    try {\n        driver.executeScript( mobile:swipe , scrollObject);\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println( mobileSwipeElementIOS(): FAILED\\n  + e.getMessage());\n        return;\n    }\n}", 
            "title": "iOS 'mobile:': Element swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-mobile-element-search/", 
            "text": "iOS 'mobile:': Element search swipe\n\n\nTo search an element or a scroll view use:\n- element id with \nname\n argument\n- or specify NSPredicate string using \npredicateString\n\n  argument\n\n\nNSPredicate examples available \nhere\n or\n\nhttps://kapeli.com/cheat_sheets/NSPredicate.docset/Contents/Resources/Documents/index\n\nis a good NSPredicate cheat sheet.\n\n\nNSPredicate covers element id search with 'name ==\naccessibilityIdentifier' predicate string.\n\n\nString pre = \nlabel == 'exact_text'\n;\nMobileElement el = (MobileElement) driver.findElement(MobileBy.id(\nelement_id\n));\n\nmobileScrollToElementIOS(el, pre);\n\n/**\n * Performs element scroll by predicate string\n *\n * @param el  the element to scroll\n * @param pre the predicate string\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollToElementIOS(MobileElement el, String pre) {\n    System.out.println(\nmobileScrollToElementIOS(): pre: '\n + pre + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap\nString, String\n scrollObject = new HashMap\nString, String\n();\n    scrollObject.put(\nelement\n, el.getId());\n    scrollObject.put(\npredicateString\n, pre);\n    try {\n        driver.executeScript(\nmobile:scroll\n, scrollObject);\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println(\nmobileScrollToElementIOS(): FAILED\\n\n + e.getMessage());\n        return;\n    }\n}\n\n\n\n\n'mobileScrollToElementIOS' works UNRELIABLE and often missing needed\nelement while scrolling (especially in complex views). Sometimes helps\nset \nsimpleIsVisibleCheck'\n capability to true.\n\n\nAs workaround try use combination of simple scroll(screen or element)\nand check that the destination element is visible on each step.\n\n\nExample of screen scroll and element visibility check.\n\n\nString pre = \nlabel == 'exact_text'\n;\nmobileScrollScreenByPredicateIOS(pre, Direction.DOWN);\n\n/**\n * Performs screen scroll by predicate string\n *\n * @param pre the predicate string\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollScreenByPredicateIOS(String pre, Direction dir) {\n    System.out.println(\nmobileScrollScreenByPredicateIOS(): dir: '\n + dir + \n'\n); // always log your actions\n    final int MAX_SWIPES = 5; // limit maximum swipes\n\n    for (int i = 0; i \n MAX_SWIPES; i++) {\n        try {\n            if (driver.findElement(MobileBy.iOSNsPredicateString(pre)).isDisplayed())\n                break;\n        } catch (Exception e) {\n            // ignore\n        }\n        mobileScrollScreenIOS(dir);\n    }\n}", 
            "title": "Element search"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-mobile-element-search/#ios-mobile-element-search-swipe", 
            "text": "To search an element or a scroll view use:\n- element id with  name  argument\n- or specify NSPredicate string using  predicateString \n  argument  NSPredicate examples available  here  or https://kapeli.com/cheat_sheets/NSPredicate.docset/Contents/Resources/Documents/index \nis a good NSPredicate cheat sheet.  NSPredicate covers element id search with 'name ==\naccessibilityIdentifier' predicate string.  String pre =  label == 'exact_text' ;\nMobileElement el = (MobileElement) driver.findElement(MobileBy.id( element_id ));\n\nmobileScrollToElementIOS(el, pre);\n\n/**\n * Performs element scroll by predicate string\n *\n * @param el  the element to scroll\n * @param pre the predicate string\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollToElementIOS(MobileElement el, String pre) {\n    System.out.println( mobileScrollToElementIOS(): pre: '  + pre +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n    final HashMap String, String  scrollObject = new HashMap String, String ();\n    scrollObject.put( element , el.getId());\n    scrollObject.put( predicateString , pre);\n    try {\n        driver.executeScript( mobile:scroll , scrollObject);\n        Thread.sleep(ANIMATION_TIME); // always allow swipe action to complete\n    } catch (Exception e) {\n        System.err.println( mobileScrollToElementIOS(): FAILED\\n  + e.getMessage());\n        return;\n    }\n}  'mobileScrollToElementIOS' works UNRELIABLE and often missing needed\nelement while scrolling (especially in complex views). Sometimes helps\nset  simpleIsVisibleCheck'  capability to true.  As workaround try use combination of simple scroll(screen or element)\nand check that the destination element is visible on each step.  Example of screen scroll and element visibility check.  String pre =  label == 'exact_text' ;\nmobileScrollScreenByPredicateIOS(pre, Direction.DOWN);\n\n/**\n * Performs screen scroll by predicate string\n *\n * @param pre the predicate string\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void mobileScrollScreenByPredicateIOS(String pre, Direction dir) {\n    System.out.println( mobileScrollScreenByPredicateIOS(): dir: '  + dir +  ' ); // always log your actions\n    final int MAX_SWIPES = 5; // limit maximum swipes\n\n    for (int i = 0; i   MAX_SWIPES; i++) {\n        try {\n            if (driver.findElement(MobileBy.iOSNsPredicateString(pre)).isDisplayed())\n                break;\n        } catch (Exception e) {\n            // ignore\n        }\n        mobileScrollScreenIOS(dir);\n    }\n}", 
            "title": "iOS 'mobile:': Element search swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/", 
            "text": "iOS pickerWheels: Fast '.setValue()' example\n\n\nUnfortunately, XCTest cannot always properly interact with picker wheel\ncontrols. Sometimes the setValue() call might not have any effect.\n\n\nHow to make picker wheel controls more compatible to XCTest:\n- if PickerWheel view is simple e.g. any text: month name, date or\n  country name in most cases '.setValue()' works.\n- if PickerWheel value complicated e.g. country flag image and country\n  text then the probability of failure increases.\n\n\nOne PickerWheel\n\n\nString txt = \nexact_text\n;\nMobileElement el = (MobileElement) driver.findElement(MobileBy.className(\nXCUIElementTypePickerWheel\n));\nel.setValue(txt);\n\n\n\n\nMultiple PickerWheels\n\n\nString txt = \nexact_text\n;\nList\nMobileElement\n el = driver.findElements(MobileBy.className(\nXCUIElementTypePickerWheel\n));\n\n// set first PickerWheel\nel.get(0).setValue(txt);\n\n// set second PickerWheel\nel.get(1).setValue(txt);", 
            "title": "Fast"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/#ios-pickerwheels-fast-setvalue-example", 
            "text": "Unfortunately, XCTest cannot always properly interact with picker wheel\ncontrols. Sometimes the setValue() call might not have any effect.  How to make picker wheel controls more compatible to XCTest:\n- if PickerWheel view is simple e.g. any text: month name, date or\n  country name in most cases '.setValue()' works.\n- if PickerWheel value complicated e.g. country flag image and country\n  text then the probability of failure increases.", 
            "title": "iOS pickerWheels: Fast '.setValue()' example"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/#one-pickerwheel", 
            "text": "String txt =  exact_text ;\nMobileElement el = (MobileElement) driver.findElement(MobileBy.className( XCUIElementTypePickerWheel ));\nel.setValue(txt);", 
            "title": "One PickerWheel"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-set-value/#multiple-pickerwheels", 
            "text": "String txt =  exact_text ;\nList MobileElement  el = driver.findElements(MobileBy.className( XCUIElementTypePickerWheel ));\n\n// set first PickerWheel\nel.get(0).setValue(txt);\n\n// set second PickerWheel\nel.get(1).setValue(txt);", 
            "title": "Multiple PickerWheels"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-mobile/", 
            "text": "iOS pickerWheels: Slow 'mobile:selectPickerWheelValue' example\n\n\nIf \n.setValue()\n fails then \nmobile: selectPickerWheelValue\n helper\ncould be used as a workaround.\n\n\nThis mobile method allows to select the next or the previous picker\nvalue.\n\n\nIt is necessary to keep changing picker wheel values until the current\none is equal the desired one or the count of retries exceeds.\n\n\ndocumentation\n\n\nSelect PickerWheel example\n\n\n\nAssert.assertTrue(setPickerWheel(\nmy_text\n, Order.NEXT), \nsetPickerWheel(): FAILED\n);\n\n/**\n * Set PickerWheel value\n *\n * @param text  the text to select\n * @param order the direction of search\n * @return result of set\n * @version java-client: 7.3.0\n **/\npublic boolean setPickerWheel(String text, Order order) {\n    System.out.println(\nsetPickerWheel(): text: '\n + text\n        + \n',order: '\n + order + \n'\n); // always log your actions\n\n    // find pickerWheel\n    MobileElement pickerWheel =\n        (MobileElement) driver.findElement(MobileBy.className(\nXCUIElementTypePickerWheel\n));\n\n    // limit search time to avoid infinite loops\n    String resultText;\n    Long startTime = System.currentTimeMillis();\n    do {\n        resultText = pickerWheel.getText();\n        if (resultText.equals(text))\n            return true;\n        if (!selectPickerWheelIOS(pickerWheel, order))\n            return false;\n    } while (System.currentTimeMillis() \n startTime + 60 * 1000); // 60 sec MAX\n    return false;\n}\n\n/**\n * Performs set next or previous value\n *\n * @param el    the pickerWheel element\n * @param order the order to select\n * @return result of select\n * @version java-client: 7.3.0\n **/\npublic boolean selectPickerWheelIOS(MobileElement el, Order order) {\n    System.out.println(\nselectPickerWheelIOS(): order: '\n + order + \n'\n); // always log your actions\n\n    HashMap\nString, Object\n params = new HashMap\n();\n    params.put(\norder\n, order.name().toLowerCase());\n    params.put(\noffset\n, \n0.2\n); // tap offset\n    params.put(\nelement\n, el.getId()); // pickerWheel element\n    try {\n        driver.executeScript(\nmobile: selectPickerWheelValue\n, params);\n        return true;\n    } catch (InvalidElementStateException e1) {\n        System.out.println(\nselectPickerWheelIOS(): FAILED\\n\n + e1.getMessage());\n    } catch (InvalidArgumentException e2) {\n        System.out.println(\nselectPickerWheelIOS(): FAILED\\n\n + e2.getMessage());\n    }\n    return false;\n}\n\npublic enum Order {\n    NEXT,\n    PREVIOUS;\n}", 
            "title": "Slow"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-mobile/#ios-pickerwheels-slow-mobileselectpickerwheelvalue-example", 
            "text": "If  .setValue()  fails then  mobile: selectPickerWheelValue  helper\ncould be used as a workaround.  This mobile method allows to select the next or the previous picker\nvalue.  It is necessary to keep changing picker wheel values until the current\none is equal the desired one or the count of retries exceeds.  documentation", 
            "title": "iOS pickerWheels: Slow 'mobile:selectPickerWheelValue' example"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/ios-picker-wheels-mobile/#select-pickerwheel-example", 
            "text": "Assert.assertTrue(setPickerWheel( my_text , Order.NEXT),  setPickerWheel(): FAILED );\n\n/**\n * Set PickerWheel value\n *\n * @param text  the text to select\n * @param order the direction of search\n * @return result of set\n * @version java-client: 7.3.0\n **/\npublic boolean setPickerWheel(String text, Order order) {\n    System.out.println( setPickerWheel(): text: '  + text\n        +  ',order: '  + order +  ' ); // always log your actions\n\n    // find pickerWheel\n    MobileElement pickerWheel =\n        (MobileElement) driver.findElement(MobileBy.className( XCUIElementTypePickerWheel ));\n\n    // limit search time to avoid infinite loops\n    String resultText;\n    Long startTime = System.currentTimeMillis();\n    do {\n        resultText = pickerWheel.getText();\n        if (resultText.equals(text))\n            return true;\n        if (!selectPickerWheelIOS(pickerWheel, order))\n            return false;\n    } while (System.currentTimeMillis()   startTime + 60 * 1000); // 60 sec MAX\n    return false;\n}\n\n/**\n * Performs set next or previous value\n *\n * @param el    the pickerWheel element\n * @param order the order to select\n * @return result of select\n * @version java-client: 7.3.0\n **/\npublic boolean selectPickerWheelIOS(MobileElement el, Order order) {\n    System.out.println( selectPickerWheelIOS(): order: '  + order +  ' ); // always log your actions\n\n    HashMap String, Object  params = new HashMap ();\n    params.put( order , order.name().toLowerCase());\n    params.put( offset ,  0.2 ); // tap offset\n    params.put( element , el.getId()); // pickerWheel element\n    try {\n        driver.executeScript( mobile: selectPickerWheelValue , params);\n        return true;\n    } catch (InvalidElementStateException e1) {\n        System.out.println( selectPickerWheelIOS(): FAILED\\n  + e1.getMessage());\n    } catch (InvalidArgumentException e2) {\n        System.out.println( selectPickerWheelIOS(): FAILED\\n  + e2.getMessage());\n    }\n    return false;\n}\n\npublic enum Order {\n    NEXT,\n    PREVIOUS;\n}", 
            "title": "Select PickerWheel example"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/", 
            "text": "Swipe troubleshoot guide\n\n\nSimple swipe actions\n\n\nWith touch action swipe problems execute following steps to check:\n\n\n\n\nAdd logs to touch coordinates.\n\n\n\n\nSwipe screen example with logs:\n\n\n/**\n * Performs swipe from the center of screen\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeScreenWithLogs(Direction dir) {\n    System.out.println(\nswipeScreen(): dir: '\n + dir + \n'\n); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    int edgeBorder = 10; // better avoid edges\n    Point pointStart, pointEnd;\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n\n    // init start point = center of screen\n    pointStart = new Point(dims.width / 2, dims.height / 2);\n\n    switch (dir) {\n        case DOWN: // center of footer\n            pointEnd = new Point(dims.width / 2, dims.height - edgeBorder);\n            break;\n        case UP: // center of header\n            pointEnd = new Point(dims.width / 2, edgeBorder);\n            break;\n        case LEFT: // center of left side\n            pointEnd = new Point(edgeBorder, dims.height / 2);\n            break;\n        case RIGHT: // center of right side\n            pointEnd = new Point(dims.width - edgeBorder, dims.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException(\nswipeScreen(): dir: '\n + dir.toString() + \n' NOT supported\n);\n    }\n\n    // execute swipe using TouchAction\n    pointOptionStart = PointOption.point(pointStart.x, pointStart.y);\n    pointOptionEnd = PointOption.point(pointEnd.x, pointEnd.y);\n    System.out.println(\nswipeScreen(): pointStart: {\n + pointStart.x + \n,\n + pointStart.y + \n}\n);\n    System.out.println(\nswipeScreen(): pointEnd: {\n + pointEnd.x + \n,\n + pointEnd.y + \n}\n);\n    System.out.println(\nswipeScreen(): screenSize: {\n + dims.width + \n,\n + dims.height + \n}\n);\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println(\nswipeScreen(): TouchAction FAILED\\n\n + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}\n\n\n\n\nExample output:\n\n\nswipeScreen(): dir: 'DOWN'\nswipeScreen(): pointStart: {187,333}\nswipeScreen(): pointEnd: {187,657}\nswipeScreen(): screenSize: {375,667}\nswipeScreen(): dir: 'UP'\nswipeScreen(): pointStart: {187,333}\nswipeScreen(): pointEnd: {187,10}\nswipeScreen(): screenSize: {375,667}\n\n\n\n\n\n\nIn Android enable 'Show Taps' and 'Pointer location' in 'Settings -\n\n   System -\n Developer options -\n Input tab' to see touches visually.\n\n\nCheck swipe manually using the same start and end points.\n\n\n\n\nAndroid: 'UIScrollable' swipe\n\n\nScroll does not start:\n\n\n\n\nCheck number of scrollViews on screen. If more then one -\n specify\n   scrollView by instance/resource-id/classname/...\n\n\nCheck scrollView layout and use 'setAsVerticalList' or\n   'setAsHorizontalList'.\n\n\nUse combination of specifying scrollView element and layout.\n\n\nAll fails -\n switch to simple element swipe.\n\n\n\n\nMissed the search element:\n\n\n\n\nAdd pause in test before search and manually swipe to needed element\n   while test in pause. After pause add code to check element search.\n   E.g. if you specified search element by text:\n\n\n\n\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         \nnew UiSelector().text(\\\nexact_text\\\n)\n));\n// or\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n         \nnew UiSelector().textContains(\\\npart_text\\\n)\n));\n\ntry {\n    System.out.println(\nElement found: \n + !element.getId().isEmpty());\n} catch (Exception e) {\n    System.out.println(\nElement found: false\n);\n}\n\n\n\n\niOS: 'mobile:scroll', 'mobile:swipe' swipe\n\n\nScroll does not start:\n\n\n\n\nCheck direction. Note that 'scroll' and 'swipe' method directions\n   differ!\n\n\nAll fails -\n switch to simple element swipe.\n\n\n\n\nMissed the search element:\n\n\n\n\nIf you need precise swipe prefer scroll method.\n\n\nSometimes when search element appeared partly tap on it will fail.\n   Use strategy of simple-partial-element swipe (like\n   simple-partial-screen example) on tap fail and repeat tap again after\n   partial element swipe.", 
            "title": "Guide"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#swipe-troubleshoot-guide", 
            "text": "", 
            "title": "Swipe troubleshoot guide"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#simple-swipe-actions", 
            "text": "With touch action swipe problems execute following steps to check:   Add logs to touch coordinates.   Swipe screen example with logs:  /**\n * Performs swipe from the center of screen\n *\n * @param dir the direction of swipe\n * @version java-client: 7.3.0\n **/\npublic void swipeScreenWithLogs(Direction dir) {\n    System.out.println( swipeScreen(): dir: '  + dir +  ' ); // always log your actions\n\n    // Animation default time:\n    //  - Android: 300 ms\n    //  - iOS: 200 ms\n    // final value depends on your app and could be greater\n    final int ANIMATION_TIME = 200; // ms\n\n    final int PRESS_TIME = 200; // ms\n\n    int edgeBorder = 10; // better avoid edges\n    Point pointStart, pointEnd;\n    PointOption pointOptionStart, pointOptionEnd;\n\n    // init screen variables\n    Dimension dims = driver.manage().window().getSize();\n\n    // init start point = center of screen\n    pointStart = new Point(dims.width / 2, dims.height / 2);\n\n    switch (dir) {\n        case DOWN: // center of footer\n            pointEnd = new Point(dims.width / 2, dims.height - edgeBorder);\n            break;\n        case UP: // center of header\n            pointEnd = new Point(dims.width / 2, edgeBorder);\n            break;\n        case LEFT: // center of left side\n            pointEnd = new Point(edgeBorder, dims.height / 2);\n            break;\n        case RIGHT: // center of right side\n            pointEnd = new Point(dims.width - edgeBorder, dims.height / 2);\n            break;\n        default:\n            throw new IllegalArgumentException( swipeScreen(): dir: '  + dir.toString() +  ' NOT supported );\n    }\n\n    // execute swipe using TouchAction\n    pointOptionStart = PointOption.point(pointStart.x, pointStart.y);\n    pointOptionEnd = PointOption.point(pointEnd.x, pointEnd.y);\n    System.out.println( swipeScreen(): pointStart: {  + pointStart.x +  ,  + pointStart.y +  } );\n    System.out.println( swipeScreen(): pointEnd: {  + pointEnd.x +  ,  + pointEnd.y +  } );\n    System.out.println( swipeScreen(): screenSize: {  + dims.width +  ,  + dims.height +  } );\n    try {\n        new TouchAction(driver)\n                .press(pointOptionStart)\n                // a bit more reliable when we add small wait\n                .waitAction(WaitOptions.waitOptions(Duration.ofMillis(PRESS_TIME)))\n                .moveTo(pointOptionEnd)\n                .release().perform();\n    } catch (Exception e) {\n        System.err.println( swipeScreen(): TouchAction FAILED\\n  + e.getMessage());\n        return;\n    }\n\n    // always allow swipe action to complete\n    try {\n        Thread.sleep(ANIMATION_TIME);\n    } catch (InterruptedException e) {\n        // ignore\n    }\n}  Example output:  swipeScreen(): dir: 'DOWN'\nswipeScreen(): pointStart: {187,333}\nswipeScreen(): pointEnd: {187,657}\nswipeScreen(): screenSize: {375,667}\nswipeScreen(): dir: 'UP'\nswipeScreen(): pointStart: {187,333}\nswipeScreen(): pointEnd: {187,10}\nswipeScreen(): screenSize: {375,667}   In Android enable 'Show Taps' and 'Pointer location' in 'Settings - \n   System -  Developer options -  Input tab' to see touches visually.  Check swipe manually using the same start and end points.", 
            "title": "Simple swipe actions"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#android-uiscrollable-swipe", 
            "text": "", 
            "title": "Android: 'UIScrollable' swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#scroll-does-not-start", 
            "text": "Check number of scrollViews on screen. If more then one -  specify\n   scrollView by instance/resource-id/classname/...  Check scrollView layout and use 'setAsVerticalList' or\n   'setAsHorizontalList'.  Use combination of specifying scrollView element and layout.  All fails -  switch to simple element swipe.", 
            "title": "Scroll does not start:"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#missed-the-search-element", 
            "text": "Add pause in test before search and manually swipe to needed element\n   while test in pause. After pause add code to check element search.\n   E.g. if you specified search element by text:   MobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n          new UiSelector().text(\\ exact_text\\ ) ));\n// or\nMobileElement element = (MobileElement) driver.findElement(MobileBy.AndroidUIAutomator(\n          new UiSelector().textContains(\\ part_text\\ ) ));\n\ntry {\n    System.out.println( Element found:   + !element.getId().isEmpty());\n} catch (Exception e) {\n    System.out.println( Element found: false );\n}", 
            "title": "Missed the search element:"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#ios-mobilescroll-mobileswipe-swipe", 
            "text": "", 
            "title": "iOS: 'mobile:scroll', 'mobile:swipe' swipe"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#scroll-does-not-start_1", 
            "text": "Check direction. Note that 'scroll' and 'swipe' method directions\n   differ!  All fails -  switch to simple element swipe.", 
            "title": "Scroll does not start:"
        }, 
        {
            "location": "/writing-running-appium/tutorial/swipe/swipe-troubleshoot-guide/#missed-the-search-element_1", 
            "text": "If you need precise swipe prefer scroll method.  Sometimes when search element appeared partly tap on it will fail.\n   Use strategy of simple-partial-element swipe (like\n   simple-partial-screen example) on tap fail and repeat tap again after\n   partial element swipe.", 
            "title": "Missed the search element:"
        }, 
        {
            "location": "/advanced-concepts/image-elements/", 
            "text": "Finding and Interacting with Image Elements\n\n\nUsing the experimental \n-image\n locator strategy, it is possible to send an Appium an image file representing an element you want to tap. If Appium can find a screen region matching your template, it will wrap up information about this region as a standard \nWebElement\n and send it back to your Appium client.\n\n\nThe strategy will be made available differently for each Appium client, for example: \ndriver.findElementByImage()\n.\n\n\nImage Selectors\n\n\nIn conjunction with any locator strategy, you need to use a \"selector\" which details the specific nature of your find request. In the case of the \n-image\n strategy, the selector must be a string which is a base64-encoded image file representing the template you want to use for matching.\n\n\nImage Elements\n\n\nIf the image match is successful, Appium will cache information about the match and create a standard response for your client to consume, resulting in the instantiation of a standard element object in your test script. Using this element object, you are able to call a small number of methods on the \"Image Element\", as if it were a bona-fide \nWebElement\n:\n\n\n\n\nclick\n\n\nisDisplayed\n\n\ngetSize\n\n\ngetLocation\n\n\ngetLocationInView\n\n\ngetElementRect\n\n\ngetAttribute\n\n\nvisual\n returns matched image as base64 data if \ngetMatchedImageResult\n is \ntrue\n\n\nscore\n returns the similarity score as a float number in range \n[0.0, 1.0]\n sine Appium 1.18.0\n\n\n\n\n\n\n\n\nThese actions are supported on \"Image Elements\" because they are the actions which involve only use of screen position for their functioning. Other actions (like \nsendKeys\n, for example) are not supported, because all Appium can know based on your template image is whether or not there is a screen region which visually matches it--Appium has no way of turning that information into a driver-specific UI element object, which would be necessary for the use of other actions.\n\n\nIt's important to keep this important point in mind: there is nothing \"magic\" about Image Elements---they merely reference screen coordinates, and thus \"tapping\" an Image Element is internally nothing more than Appium constructing a tap at a point in the center of the Image Element's screen bounds (and in fact you can tell Appium which API to use to perform that tap---see below).\n\n\nRelated Settings\n\n\nBecause finding elements by image relies on image analysis software in conjunction with Appium's screenshot functionality and the reference images you yourself provide, we provide a number of settings that help you modulate this feature, in some cases potentially speeding up the match or making it more accurate.\n\n\nTo access these settings, you should use the Appium \nSettings API\n. These are the settings that are available:\n\n\n\n\n\n\n\n\nSetting Name\n\n\nDescription\n\n\nPossible Values\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nimageMatchThreshold\n\n\nThe OpenCV match threshold below which to consider the find a failure. Basically the range of possibilities is between 0 (which means no threshold should be used) and 1 (which means that the reference image must be an exact pixel-for-pixel match). The exact values in between have no absolute meaning. For example a match that requires drastic resizing of a reference image will come out as a lower match strength than otherwise. It's recommended you try the default setting, and then incrementally lower the threshold if you're not finding matching elements. If you're matching the wrong element, try increasing the threshold value.\n\n\nNumbers from 0 to 1\n\n\n0.4\n\n\n\n\n\n\nfixImageFindScreenshotDims\n\n\nAppium knows the screen dimensions, and ultimately these are the dimensions which are relevant for deciding where to tap on the screen. If the screenshot retrieved (via Appium's native methods, or an external source) does not match the screen dimensions, this setting dictates that Appium will adjust the size of the screenshot to match, ensuring that matched elements are found at the correct coordinates. Turn this setting off if you know it's not necessary, and Appium will forego the check, potentially speeding things up a bit.\n\n\ntrue\n or \nfalse\n\n\ntrue\n\n\n\n\n\n\nfixImageTemplateSize\n\n\nOpenCV will not allow the matching of a reference image / template if that image is larger than the base image to match against. It can happen that the reference image you send in has dimensions which are larger than the screenshot Appium retrieves. In this case the match will automatically fail. If you set this setting to \ntrue\n, Appium will resize the template to ensure it is at least smaller than the size of the screenshot.\n\n\ntrue\n or \nfalse\n\n\nfalse\n\n\n\n\n\n\nfixImageTemplateScale\n\n\nAppium resizes a base image to fit its window size before matching them with OpenCV. If you set this setting to \ntrue\n, Appium scales a reference image you send in as the same scale Appium scales the base image to fit the window size. e.g. iOS screenshot is \n750 \u00d7 1334\n pixels base image. The window size is \n375 x 667\n. Appium rescale the base image to window size scaling it with \n0.5\n. A reference image is based on the screenshot size, never the image matches with the window size scale. This settings allow Appium to scale the reference image with \n0.5\n. \nappium-base-driver#306\n\n\ntrue\n or \nfalse\n\n\nfalse\n\n\n\n\n\n\ndefaultImageTemplateScale\n\n\nAppium does not resize template images by default (the value of 1.0). Although, storing scaled template images might help to save size of the storage. E.g. One has could represent 1080 \u00d7 126 pixels area by 270 \u00d7 32 pixels template image (the value of defaultImageTemplateScale is expected to be set to 4.0). Check \nappium-base-driver#307\n for more details.\n\n\ne.g., \n0.5\n, \n10.0\n, \n100\n\n\n1.0\n\n\n\n\n\n\ncheckForImageElementStaleness\n\n\nIt can happen that, in between the time you have matched an image element and the time you choose to tap on it, the element is no longer present. The only way for Appium to determine this is to attempt to re-match the template immediately before tapping. If that re-match fails, you will get a \nStaleElementException\n, as you would expect. Turn this to \nfalse\n to skip the check, potentially speeding things up, but potentially running into stale element issues without the benefit of an exception to let you know you did.\n\n\ntrue\n or \nfalse\n\n\ntrue\n\n\n\n\n\n\nautoUpdateImageElementPosition\n\n\nIt can happen that a matched image changes position in between the time it is found and the time you tap on it. As with the previous setting, Appium can automatically adjust its position if it determines in a re-match that the position changed.\n\n\ntrue\n or \nfalse\n\n\nfalse\n\n\n\n\n\n\nimageElementTapStrategy\n\n\nIn order to tap on a found image element, Appium has to use one of its touch action strategies. The available strategies are the W3C Actions API, or the older MJSONWP TouchActions API. Stick to the default unless the driver you are using does not support the W3C Actions API for some reason.\n\n\n\"w3cActions\"\n or \n\"touchActions\"\n\n\n\"w3cActions\"\n\n\n\n\n\n\ngetMatchedImageResult\n\n\nAppium does not store the matched image result. Although, storing the result in memory might help for debugging whether which area is matched by find by image. Appium returns the image against \nattribute\n API as \nvisual\n.\n\n\ntrue\n or \nfalse\n\n\nfalse\n\n\n\n\n\n\nimageMatchMethod\n\n\nThe name of the template matching method for \nfind element by image\n since Appium 1.22.0. Please read \npy_template_matching\n for more details about the meaning of each value.\n\n\nTM_CCOEFF\n, \nTM_CCOEFF_NORMED\n, \nTM_CCORR\n, \nTM_CCORR_NORMED\n, \nTM_SQDIFF\n, \nTM_SQDIFF_NORMED\n\n\nTM_CCOEFF_NORMED\n\n\n\n\n\n\n\n\nNote that each language-specific Appium client may make these settings available via special constants which could differ slightly from the exact setting names mentioned above.\n\n\nDebug\n\n\ngetMatchedImageResult\n might help for debugging if Appium found the provided image expectedly. \nvisual\n attribute returns base64 data if \ngetMatchedImageResult\n is \ntrue\n.\n\n\n# Ruby core\n@driver.update_settings({ getMatchedImageResult: true })\nel = @driver.find_element_by_image 'path/to/img.ong'\nimg_el.visual # returns base64 encoded string\n\n\n\n\n# Python\nself.driver.update_settings({\ngetMatchedImageResult\n: True})\nel = self.driver.find_element_by_image('path/to/img.ong')\nel.get_attribute('visual') # returns base64 encoded string\n\n\n\n\nreference: https://github.com/appium/appium-base-driver/pull/327", 
            "title": "Finding Image Elements"
        }, 
        {
            "location": "/advanced-concepts/image-elements/#finding-and-interacting-with-image-elements", 
            "text": "Using the experimental  -image  locator strategy, it is possible to send an Appium an image file representing an element you want to tap. If Appium can find a screen region matching your template, it will wrap up information about this region as a standard  WebElement  and send it back to your Appium client.  The strategy will be made available differently for each Appium client, for example:  driver.findElementByImage() .", 
            "title": "Finding and Interacting with Image Elements"
        }, 
        {
            "location": "/advanced-concepts/image-elements/#image-selectors", 
            "text": "In conjunction with any locator strategy, you need to use a \"selector\" which details the specific nature of your find request. In the case of the  -image  strategy, the selector must be a string which is a base64-encoded image file representing the template you want to use for matching.", 
            "title": "Image Selectors"
        }, 
        {
            "location": "/advanced-concepts/image-elements/#image-elements", 
            "text": "If the image match is successful, Appium will cache information about the match and create a standard response for your client to consume, resulting in the instantiation of a standard element object in your test script. Using this element object, you are able to call a small number of methods on the \"Image Element\", as if it were a bona-fide  WebElement :   click  isDisplayed  getSize  getLocation  getLocationInView  getElementRect  getAttribute  visual  returns matched image as base64 data if  getMatchedImageResult  is  true  score  returns the similarity score as a float number in range  [0.0, 1.0]  sine Appium 1.18.0     These actions are supported on \"Image Elements\" because they are the actions which involve only use of screen position for their functioning. Other actions (like  sendKeys , for example) are not supported, because all Appium can know based on your template image is whether or not there is a screen region which visually matches it--Appium has no way of turning that information into a driver-specific UI element object, which would be necessary for the use of other actions.  It's important to keep this important point in mind: there is nothing \"magic\" about Image Elements---they merely reference screen coordinates, and thus \"tapping\" an Image Element is internally nothing more than Appium constructing a tap at a point in the center of the Image Element's screen bounds (and in fact you can tell Appium which API to use to perform that tap---see below).", 
            "title": "Image Elements"
        }, 
        {
            "location": "/advanced-concepts/image-elements/#related-settings", 
            "text": "Because finding elements by image relies on image analysis software in conjunction with Appium's screenshot functionality and the reference images you yourself provide, we provide a number of settings that help you modulate this feature, in some cases potentially speeding up the match or making it more accurate.  To access these settings, you should use the Appium  Settings API . These are the settings that are available:     Setting Name  Description  Possible Values  Default Value      imageMatchThreshold  The OpenCV match threshold below which to consider the find a failure. Basically the range of possibilities is between 0 (which means no threshold should be used) and 1 (which means that the reference image must be an exact pixel-for-pixel match). The exact values in between have no absolute meaning. For example a match that requires drastic resizing of a reference image will come out as a lower match strength than otherwise. It's recommended you try the default setting, and then incrementally lower the threshold if you're not finding matching elements. If you're matching the wrong element, try increasing the threshold value.  Numbers from 0 to 1  0.4    fixImageFindScreenshotDims  Appium knows the screen dimensions, and ultimately these are the dimensions which are relevant for deciding where to tap on the screen. If the screenshot retrieved (via Appium's native methods, or an external source) does not match the screen dimensions, this setting dictates that Appium will adjust the size of the screenshot to match, ensuring that matched elements are found at the correct coordinates. Turn this setting off if you know it's not necessary, and Appium will forego the check, potentially speeding things up a bit.  true  or  false  true    fixImageTemplateSize  OpenCV will not allow the matching of a reference image / template if that image is larger than the base image to match against. It can happen that the reference image you send in has dimensions which are larger than the screenshot Appium retrieves. In this case the match will automatically fail. If you set this setting to  true , Appium will resize the template to ensure it is at least smaller than the size of the screenshot.  true  or  false  false    fixImageTemplateScale  Appium resizes a base image to fit its window size before matching them with OpenCV. If you set this setting to  true , Appium scales a reference image you send in as the same scale Appium scales the base image to fit the window size. e.g. iOS screenshot is  750 \u00d7 1334  pixels base image. The window size is  375 x 667 . Appium rescale the base image to window size scaling it with  0.5 . A reference image is based on the screenshot size, never the image matches with the window size scale. This settings allow Appium to scale the reference image with  0.5 .  appium-base-driver#306  true  or  false  false    defaultImageTemplateScale  Appium does not resize template images by default (the value of 1.0). Although, storing scaled template images might help to save size of the storage. E.g. One has could represent 1080 \u00d7 126 pixels area by 270 \u00d7 32 pixels template image (the value of defaultImageTemplateScale is expected to be set to 4.0). Check  appium-base-driver#307  for more details.  e.g.,  0.5 ,  10.0 ,  100  1.0    checkForImageElementStaleness  It can happen that, in between the time you have matched an image element and the time you choose to tap on it, the element is no longer present. The only way for Appium to determine this is to attempt to re-match the template immediately before tapping. If that re-match fails, you will get a  StaleElementException , as you would expect. Turn this to  false  to skip the check, potentially speeding things up, but potentially running into stale element issues without the benefit of an exception to let you know you did.  true  or  false  true    autoUpdateImageElementPosition  It can happen that a matched image changes position in between the time it is found and the time you tap on it. As with the previous setting, Appium can automatically adjust its position if it determines in a re-match that the position changed.  true  or  false  false    imageElementTapStrategy  In order to tap on a found image element, Appium has to use one of its touch action strategies. The available strategies are the W3C Actions API, or the older MJSONWP TouchActions API. Stick to the default unless the driver you are using does not support the W3C Actions API for some reason.  \"w3cActions\"  or  \"touchActions\"  \"w3cActions\"    getMatchedImageResult  Appium does not store the matched image result. Although, storing the result in memory might help for debugging whether which area is matched by find by image. Appium returns the image against  attribute  API as  visual .  true  or  false  false    imageMatchMethod  The name of the template matching method for  find element by image  since Appium 1.22.0. Please read  py_template_matching  for more details about the meaning of each value.  TM_CCOEFF ,  TM_CCOEFF_NORMED ,  TM_CCORR ,  TM_CCORR_NORMED ,  TM_SQDIFF ,  TM_SQDIFF_NORMED  TM_CCOEFF_NORMED     Note that each language-specific Appium client may make these settings available via special constants which could differ slightly from the exact setting names mentioned above.", 
            "title": "Related Settings"
        }, 
        {
            "location": "/advanced-concepts/image-elements/#debug", 
            "text": "getMatchedImageResult  might help for debugging if Appium found the provided image expectedly.  visual  attribute returns base64 data if  getMatchedImageResult  is  true .  # Ruby core\n@driver.update_settings({ getMatchedImageResult: true })\nel = @driver.find_element_by_image 'path/to/img.ong'\nimg_el.visual # returns base64 encoded string  # Python\nself.driver.update_settings({ getMatchedImageResult : True})\nel = self.driver.find_element_by_image('path/to/img.ong')\nel.get_attribute('visual') # returns base64 encoded string  reference: https://github.com/appium/appium-base-driver/pull/327", 
            "title": "Debug"
        }, 
        {
            "location": "/advanced-concepts/element-finding-plugins/", 
            "text": "Element Finding Plugins\n\n\nAs of version 1.9.2, Appium supports the use of plugins that can be used to assist in finding elements, via the \n-custom\n locator strategy. This is an experimental feature.\n\n\nUsage\n\n\n\n\n\n\nYou install a third-party element finding plugin which has been developed according to the Appium element finding plugin standard (see below). (It must, therefore, be a Node module, whether installed via NPM or referenced locally). You can install this plugin wherever you like on your system, though there are three basic options:\n\n\n\n\nA directory you manage separately from Appium (by running \nnpm install \nplugin\n in an arbitrary folder)\n\n\nInside the Appium dependency tree itself (by running \nnpm install \nplugin\n inside the Appium root directory)\n\n\nGlobally on your system (by running \nnpm install -g \nplugin\n)\n\n\n\n\n(Of course, the plugin itself might have its own additional installation or setup instructions, which would be detailed in the plugin's docs.)\n\n\n\n\n\n\nYou add a new capability to your test: \ncustomFindModules\n. This capability must be an object with at least one key and one value. The key is called the \"plugin shortcut\", and the value is called the \"plugin reference\". In this example:\n\n\n{\n    \"customFindModules\": {\n        \"plug\": \"my-element-finding-plugin\"\n    }\n}\n\n\n\"plug\" is the shortcut, and \"my-element-finding-plugin\" is the reference.\nYou will use the shortcut in your own test code, so it can be any string\nwhich is a valid JSON key. The reference must be a reference to the plugin's\nNode module, and it must be formatted in such a way that Appium can\n\nrequire\n it using\nNode's \nmodule resolution\n.\n\n\n\n\n\n\nOnce you've started a session with this capability, we say that the plugin (or plugins---multiple plugins are of course supported) are \nregistered\n. You can find an element using a registered plugin by doing two things:\n\n\n\n\nUsing the \n-custom\n locator strategy\n\n\nPrefixing your selector with \nshortcut\n:\n\n\n\n\nSo with the example plugin above, if I wanted to find an element using the selector \"foo\", it would look like this (in imaginary client code):\n\n\ndriver.findElement('-custom', 'plug:foo');\n\n\n\n\nIn other words, I'm using the \n-custom\n locator strategy, and sending in the selector \nfoo\n, making sure Appium knows that it is specifically the \nplug\n plugin which should handle the find request.\n\n\nIn the case where only one plugin is registered, you can omit the shortcut in the selector (since Appium will not be confused about which plugin you want to use):\n\n\ndriver.findElement('-custom', 'foo');\n\n\n\n\nThe \n-custom\n locator strategy is not well supported in all Appium clients at this point; check client documentation for the correct invocation for this strategy.\n\n\nDeveloping a Plugin\n\n\nAnyone can develop an element finding plugin for Appium. The only rules are as follows:\n\n\n\n\nThe plugin must be a Node module which has a named export called \nfind\n\n\nThis method, when called, must return a (possibly empty) array of element objects\n\n\n\n\nWhen Appium calls your \nfind\n method, it will pass the following parameters:\n\n\n\n\nAn instance of the \ndriver\n object representing the current session (this would be, for example an instance of \nXCUITestDriver\n)\n\n\nA logging object which you can use to write logs into the Appium log\n\n\nThe selector (a string) the user of your plugin has sent for the purpose of finding the element\n\n\nA boolean value: whether the user is looking for multiple elements (true) or not (false). Note that you must always return an array, regardless of whether the user needs more than one element. This flag is passed in case it is useful for optimizing searches that do not require multiple elements returned.\n\n\n\n\nThat's all there is to it! See the list of known plugins below for concrete examples.\n\n\nList of Known Plugins\n\n\n\n\nTest.ai Classifier", 
            "title": "Using Element Finding Plugins"
        }, 
        {
            "location": "/advanced-concepts/element-finding-plugins/#element-finding-plugins", 
            "text": "As of version 1.9.2, Appium supports the use of plugins that can be used to assist in finding elements, via the  -custom  locator strategy. This is an experimental feature.", 
            "title": "Element Finding Plugins"
        }, 
        {
            "location": "/advanced-concepts/element-finding-plugins/#usage", 
            "text": "You install a third-party element finding plugin which has been developed according to the Appium element finding plugin standard (see below). (It must, therefore, be a Node module, whether installed via NPM or referenced locally). You can install this plugin wherever you like on your system, though there are three basic options:   A directory you manage separately from Appium (by running  npm install  plugin  in an arbitrary folder)  Inside the Appium dependency tree itself (by running  npm install  plugin  inside the Appium root directory)  Globally on your system (by running  npm install -g  plugin )   (Of course, the plugin itself might have its own additional installation or setup instructions, which would be detailed in the plugin's docs.)    You add a new capability to your test:  customFindModules . This capability must be an object with at least one key and one value. The key is called the \"plugin shortcut\", and the value is called the \"plugin reference\". In this example:  {\n    \"customFindModules\": {\n        \"plug\": \"my-element-finding-plugin\"\n    }\n}  \"plug\" is the shortcut, and \"my-element-finding-plugin\" is the reference.\nYou will use the shortcut in your own test code, so it can be any string\nwhich is a valid JSON key. The reference must be a reference to the plugin's\nNode module, and it must be formatted in such a way that Appium can require  it using\nNode's  module resolution .    Once you've started a session with this capability, we say that the plugin (or plugins---multiple plugins are of course supported) are  registered . You can find an element using a registered plugin by doing two things:   Using the  -custom  locator strategy  Prefixing your selector with  shortcut :   So with the example plugin above, if I wanted to find an element using the selector \"foo\", it would look like this (in imaginary client code):  driver.findElement('-custom', 'plug:foo');  In other words, I'm using the  -custom  locator strategy, and sending in the selector  foo , making sure Appium knows that it is specifically the  plug  plugin which should handle the find request.  In the case where only one plugin is registered, you can omit the shortcut in the selector (since Appium will not be confused about which plugin you want to use):  driver.findElement('-custom', 'foo');  The  -custom  locator strategy is not well supported in all Appium clients at this point; check client documentation for the correct invocation for this strategy.", 
            "title": "Usage"
        }, 
        {
            "location": "/advanced-concepts/element-finding-plugins/#developing-a-plugin", 
            "text": "Anyone can develop an element finding plugin for Appium. The only rules are as follows:   The plugin must be a Node module which has a named export called  find  This method, when called, must return a (possibly empty) array of element objects   When Appium calls your  find  method, it will pass the following parameters:   An instance of the  driver  object representing the current session (this would be, for example an instance of  XCUITestDriver )  A logging object which you can use to write logs into the Appium log  The selector (a string) the user of your plugin has sent for the purpose of finding the element  A boolean value: whether the user is looking for multiple elements (true) or not (false). Note that you must always return an array, regardless of whether the user needs more than one element. This flag is passed in case it is useful for optimizing searches that do not require multiple elements returned.   That's all there is to it! See the list of known plugins below for concrete examples.", 
            "title": "Developing a Plugin"
        }, 
        {
            "location": "/advanced-concepts/element-finding-plugins/#list-of-known-plugins", 
            "text": "Test.ai Classifier", 
            "title": "List of Known Plugins"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/", 
            "text": "Migrating your iOS tests from UIAutomation (iOS 9.3 and below) to XCUITest (iOS 9.3 and up)\n\n\nFor iOS automation, Appium relies on system frameworks provided by Apple. For iOS 9.2 and below, Apple's only automation technology was called UIAutomation, and it ran in the context of a process called \"Instruments\". As of iOS 10, Apple has completely removed the UIAutomation instrument, thus making it impossible for Appium to allow testing in the way it used to. Fortunately, Apple introduced a new automation technology, called XCUITest, beginning with iOS 9.3. For iOS 10 and up, this will be the only supported automation framework from Apple.\n\n\nAppium has built in support for XCUITest beginning with Appium 1.6. For the most part, the capabilities of XCUITest match those of UIAutomation, and so the Appium team was able to ensure that test behavior will stay the same. This is one of the great things about using Appium! Even with Apple completely changing the technology your tests are using, your scripts can stay mostly the same! That being said, there are some differences you'll need to be aware of which might require modification of your test scripts if you want to run them under our XCUITest automation backend. This document will help you with those differences.\n\n\nElement class name schema\n\n\nWith XCUITest, Apple has given different class names to the UI elements which make up the view hierarchy. For example, \nUIAButton\n is now \nXCUIElementTypeButton\n. In many cases, there is a direct mapping between these two classes. If you use the \nclass name\n locator strategy to find elements, Appium 1.6 will rewrite the selector for you. Likewise, if you use the \nxpath\n locator strategy, Appium 1.6 will find any \nUIA*\n elements in your XPath string and rewrite them appropriately.\n\n\nThis does not however guarantee that your tests will work exactly the same, for two reasons:\n\n\n\n\nThe application hierarchy reported to Appium will not necessarily be identical within XCUITest to what it was within UIAutomation. If you have a path-based XPath selector, it may need to be adjusted.\n\n\nThe list of class names is not entirely identical either. Many elements are returned by XCUITest as belonging to the \nXCUIElementTypeOther\n class, a sort of catch-all container.\n\n\n\n\nPage source\n\n\nAs mentioned just above, if you rely on the app source XML from the \npage source\n command, the XML output will now differ significantly from what it was under UIAutomation.\n\n\n-ios uiautomation\n locator strategy\n\n\nThis locator strategy was specifically built on UIAutomation, so it is not included in the XCUITest automation backend. We will be working on a similar \"native\"-type locator strategy in coming releases.\n\n\nxpath\n locator strategy\n\n\n\n\nTry not to use XPath locators unless there is absolutely no other alternative. In general, xpath locators might be many times slower than other types of locators like accessibility id, class name and predicate (up to 100 times slower in some special cases). They are so slow, because xpath location is not natively supported by Apple's XCTest framework.\n\n\nUse\n\n\n\n\ndriver.findElement(x)\n\n\n\n\ncall instead of\n\n\ndriver.findElements(x)[0]\n\n\n\n\nto lookup single element by xpath. The more possible UI elements are matched by your locator the slower it is.\n3. Be very specific when locating elements by xpath. Such locators like\n\n\n//*\n\n\n\n\nmay take minutes to complete depending on how many UI elements your application has (e. g.\n\n\ndriver.findElement(By.xpath(\n//XCUIElementTypeButton[@value='blabla']\n))\n\n\n\n\nis faster than\n\n\ndriver.findElement(By.xpath(\n//*[@value='blabla']\n))\n\n\n\n\nor\n\n\ndriver.findElement(By.xpath(\n//XCUIElementTypeButton\n)))\n\n\n\n\n\n\nIn most cases it would be faster to perform multiple nested findElement calls than to perform a single call by xpath (e.g.\n\n\n\n\ndriver.findElement(x).findElement(y)\n\n\n\n\nis usually faster than\n\n\ndriver.findElement(z)\n\n\n\n\n\nwhere x and y are non-xpath locators and z is a xpath locator).\n\n\nAPI differences\n\n\nUnfortunately, the XCUITest API and the UIAutomation API are not equivalent. In many cases (like with \ntap/click\n), the behavior is identical. But some features that were available in the UIAutomation backend are not yet available in the new XCUITest backend. These known lacking features include:\n* Geolocation support (e.g., \ndriver.location\n)\n* Shaking the device\n* Locking the device\n* Rotating the device (note that this is \nNOT\n device \norientation\n, which is supported)\n\n\nWe will endeavor to add these features back in future releases of Appium.\n\n\nScrolling and clicking\n\n\nIn the previous UIAutomation-based driver, if you tried to click on an element that wasn't in view, UIAutomation would scroll to the element automatically and then tap it. With XCUITest, this is no longer the case. You are now responsible for ensuring your element is in view before interacting with it (the same way a user would be responsible for the same).\n\n\nOther known issues\n\n\nFinally, a list of known issues with the initial 1.6 release (we'll strike through issues which have been resolved):\n\n\n\n\nUnable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994).\n\n\nshake\n is not implemented due to lack of support from Apple.\n\n\nlock\n is not implemented due to lack of support from Apple.\n\n\nSetting geo-location not supported due to lack of support from Apple.\n\n\nThrough the TouchAction/MultiAction API, \nzoom\n gestures work but \npinch\n gestures do not, due to an Apple issue.\n\n\nThrough the TouchAction/MultiAction API, \nswipe\n gestures are currently not supported, though they should be soon (https://github.com/appium/appium/issues/7573).\n\n\nThe capabilities \nautoAcceptAlerts\n and \nautoDismissAlerts\n do not currently work, and there is continued debate about whether we will be able to implement them in the future.\n\n\nThere is an issue with the iOS SDK such that PickerWheels built using certain API methods are not automatable by XCUITest. See https://github.com/appium/appium/issues/6962 for the workaround, to ensure your PickerWheels are built properly.\n\n\n\n\nAs far as possible, we will add the missing features and fix other known issues in future versions of Appium.", 
            "title": "Migrating to XCUITest"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#migrating-your-ios-tests-from-uiautomation-ios-93-and-below-to-xcuitest-ios-93-and-up", 
            "text": "For iOS automation, Appium relies on system frameworks provided by Apple. For iOS 9.2 and below, Apple's only automation technology was called UIAutomation, and it ran in the context of a process called \"Instruments\". As of iOS 10, Apple has completely removed the UIAutomation instrument, thus making it impossible for Appium to allow testing in the way it used to. Fortunately, Apple introduced a new automation technology, called XCUITest, beginning with iOS 9.3. For iOS 10 and up, this will be the only supported automation framework from Apple.  Appium has built in support for XCUITest beginning with Appium 1.6. For the most part, the capabilities of XCUITest match those of UIAutomation, and so the Appium team was able to ensure that test behavior will stay the same. This is one of the great things about using Appium! Even with Apple completely changing the technology your tests are using, your scripts can stay mostly the same! That being said, there are some differences you'll need to be aware of which might require modification of your test scripts if you want to run them under our XCUITest automation backend. This document will help you with those differences.", 
            "title": "Migrating your iOS tests from UIAutomation (iOS 9.3 and below) to XCUITest (iOS 9.3 and up)"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#element-class-name-schema", 
            "text": "With XCUITest, Apple has given different class names to the UI elements which make up the view hierarchy. For example,  UIAButton  is now  XCUIElementTypeButton . In many cases, there is a direct mapping between these two classes. If you use the  class name  locator strategy to find elements, Appium 1.6 will rewrite the selector for you. Likewise, if you use the  xpath  locator strategy, Appium 1.6 will find any  UIA*  elements in your XPath string and rewrite them appropriately.  This does not however guarantee that your tests will work exactly the same, for two reasons:   The application hierarchy reported to Appium will not necessarily be identical within XCUITest to what it was within UIAutomation. If you have a path-based XPath selector, it may need to be adjusted.  The list of class names is not entirely identical either. Many elements are returned by XCUITest as belonging to the  XCUIElementTypeOther  class, a sort of catch-all container.", 
            "title": "Element class name schema"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#page-source", 
            "text": "As mentioned just above, if you rely on the app source XML from the  page source  command, the XML output will now differ significantly from what it was under UIAutomation.", 
            "title": "Page source"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#-ios-uiautomation-locator-strategy", 
            "text": "This locator strategy was specifically built on UIAutomation, so it is not included in the XCUITest automation backend. We will be working on a similar \"native\"-type locator strategy in coming releases.", 
            "title": "-ios uiautomation locator strategy"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#xpath-locator-strategy", 
            "text": "Try not to use XPath locators unless there is absolutely no other alternative. In general, xpath locators might be many times slower than other types of locators like accessibility id, class name and predicate (up to 100 times slower in some special cases). They are so slow, because xpath location is not natively supported by Apple's XCTest framework.  Use   driver.findElement(x)  call instead of  driver.findElements(x)[0]  to lookup single element by xpath. The more possible UI elements are matched by your locator the slower it is.\n3. Be very specific when locating elements by xpath. Such locators like  //*  may take minutes to complete depending on how many UI elements your application has (e. g.  driver.findElement(By.xpath( //XCUIElementTypeButton[@value='blabla'] ))  is faster than  driver.findElement(By.xpath( //*[@value='blabla'] ))  or  driver.findElement(By.xpath( //XCUIElementTypeButton )))   In most cases it would be faster to perform multiple nested findElement calls than to perform a single call by xpath (e.g.   driver.findElement(x).findElement(y)  is usually faster than  driver.findElement(z)  where x and y are non-xpath locators and z is a xpath locator).", 
            "title": "xpath locator strategy"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#api-differences", 
            "text": "Unfortunately, the XCUITest API and the UIAutomation API are not equivalent. In many cases (like with  tap/click ), the behavior is identical. But some features that were available in the UIAutomation backend are not yet available in the new XCUITest backend. These known lacking features include:\n* Geolocation support (e.g.,  driver.location )\n* Shaking the device\n* Locking the device\n* Rotating the device (note that this is  NOT  device  orientation , which is supported)  We will endeavor to add these features back in future releases of Appium.", 
            "title": "API differences"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#scrolling-and-clicking", 
            "text": "In the previous UIAutomation-based driver, if you tried to click on an element that wasn't in view, UIAutomation would scroll to the element automatically and then tap it. With XCUITest, this is no longer the case. You are now responsible for ensuring your element is in view before interacting with it (the same way a user would be responsible for the same).", 
            "title": "Scrolling and clicking"
        }, 
        {
            "location": "/advanced-concepts/migrating-to-xcuitest/#other-known-issues", 
            "text": "Finally, a list of known issues with the initial 1.6 release (we'll strike through issues which have been resolved):   Unable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994).  shake  is not implemented due to lack of support from Apple.  lock  is not implemented due to lack of support from Apple.  Setting geo-location not supported due to lack of support from Apple.  Through the TouchAction/MultiAction API,  zoom  gestures work but  pinch  gestures do not, due to an Apple issue.  Through the TouchAction/MultiAction API,  swipe  gestures are currently not supported, though they should be soon (https://github.com/appium/appium/issues/7573).  The capabilities  autoAcceptAlerts  and  autoDismissAlerts  do not currently work, and there is continued debate about whether we will be able to implement them in the future.  There is an issue with the iOS SDK such that PickerWheels built using certain API methods are not automatable by XCUITest. See https://github.com/appium/appium/issues/6962 for the workaround, to ensure your PickerWheels are built properly.   As far as possible, we will add the missing features and fix other known issues in future versions of Appium.", 
            "title": "Other known issues"
        }, 
        {
            "location": "/advanced-concepts/grid/", 
            "text": "Selenium Grid 4\n\n\nRelay\n feature in Grid 4 allows you to proxy Appium requests to an appium server instance.\n\n\nPlease check \nRelaying commands to a service endpoint that supports WebDriver\n and \nSelenium Grid 4 and Appium together in harmony\n about the configuration and for more details.\n\n\nSelenium Grid 3\n\n\nYou are able to register your appium server with a local \nSelenium grid\n (\nsetup docs\n) by using the\n\n--nodeconfig\n server parameter.\n\n\n appium --nodeconfig /path/to/nodeconfig.json\n# or, if running from source:\n\n node . --nodeconfig /path/to/nodeconfig.json\n\n\n\n\nIn the node config file you have to define the \nbrowserName\n,\n\nversion\n and \nplatform\n and based on these parameters the grid\nwill re-direct your test to the right device. You will also need to\nconfigure your \nhost\n details and the \nselenium grid\n details. For\na full list of all parameters and descriptions look\n\nhere\n\n\nOnce you start the appium server and it registers with the grid,\nyou will see your device on the grid console page:\n\n\n\"http://\n\\\ngrid-ip-adress>\n:\n\\\ngrid-port>\n/grid/console\"\n\n\nGrid Node Configuration Example json file\n\n\n{\n  \ncapabilities\n:\n      [\n        {\n          \nbrowserName\n: \ne.g._iPhone5_or_iPad4\n,\n          \nversion\n:\nversion_of_iOS_e.g._7.1\n,\n          \nmaxInstances\n: 1,\n          \nplatform\n:\nplatform_e.g._MAC_or_ANDROID\n\n        }\n      ],\n  \nconfiguration\n:\n  {\n    \ncleanUpCycle\n:2000,\n    \ntimeout\n:30000,\n    \nproxy\n: \norg.openqa.grid.selenium.proxy.DefaultRemoteProxy\n,\n    \nurl\n:\nhttp://\nhost_name_appium_server_or_ip-address_appium_server\n:\nappium_port\n/wd/hub\n,\n    \nhost\n: \nhost_name_appium_server_or_ip-address_appium_server\n,\n    \nport\n: \nappium_port\n,\n    \nmaxSession\n: 1,\n    \nregister\n: true,\n    \nregisterCycle\n: 5000,\n    \nhubPort\n: \ngrid_port\n,\n    \nhubHost\n: \nGrid_host_name_or_grid_ip-address\n\n    \nhubProtocol\n: \nProtocol_of_Grid_defaults_to_http\n\n  }\n}\n\n\n\n\nValid platforms are listed \nhere\n\n\nIf \nurl\n, \nhost\n, and \nport\n are not given, the config will be auto updated\nto point to localhost:whatever-port-Appium-started-on.\n\n\nIf your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your \nhost\n \n \nurl\n docs; \nlocalhost\n and \n127.0.0.1\n will prevent Selenium Grid from connecting correctly.", 
            "title": "Using Selenium Grid with Appium"
        }, 
        {
            "location": "/advanced-concepts/grid/#selenium-grid-4", 
            "text": "Relay  feature in Grid 4 allows you to proxy Appium requests to an appium server instance.  Please check  Relaying commands to a service endpoint that supports WebDriver  and  Selenium Grid 4 and Appium together in harmony  about the configuration and for more details.", 
            "title": "Selenium Grid 4"
        }, 
        {
            "location": "/advanced-concepts/grid/#selenium-grid-3", 
            "text": "You are able to register your appium server with a local  Selenium grid  ( setup docs ) by using the --nodeconfig  server parameter.   appium --nodeconfig /path/to/nodeconfig.json\n# or, if running from source:  node . --nodeconfig /path/to/nodeconfig.json  In the node config file you have to define the  browserName , version  and  platform  and based on these parameters the grid\nwill re-direct your test to the right device. You will also need to\nconfigure your  host  details and the  selenium grid  details. For\na full list of all parameters and descriptions look here  Once you start the appium server and it registers with the grid,\nyou will see your device on the grid console page:  \"http:// \\ grid-ip-adress> : \\ grid-port> /grid/console\"", 
            "title": "Selenium Grid 3"
        }, 
        {
            "location": "/advanced-concepts/grid/#grid-node-configuration-example-json-file", 
            "text": "{\n   capabilities :\n      [\n        {\n           browserName :  e.g._iPhone5_or_iPad4 ,\n           version : version_of_iOS_e.g._7.1 ,\n           maxInstances : 1,\n           platform : platform_e.g._MAC_or_ANDROID \n        }\n      ],\n   configuration :\n  {\n     cleanUpCycle :2000,\n     timeout :30000,\n     proxy :  org.openqa.grid.selenium.proxy.DefaultRemoteProxy ,\n     url : http:// host_name_appium_server_or_ip-address_appium_server : appium_port /wd/hub ,\n     host :  host_name_appium_server_or_ip-address_appium_server ,\n     port :  appium_port ,\n     maxSession : 1,\n     register : true,\n     registerCycle : 5000,\n     hubPort :  grid_port ,\n     hubHost :  Grid_host_name_or_grid_ip-address \n     hubProtocol :  Protocol_of_Grid_defaults_to_http \n  }\n}  Valid platforms are listed  here  If  url ,  host , and  port  are not given, the config will be auto updated\nto point to localhost:whatever-port-Appium-started-on.  If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your  host     url  docs;  localhost  and  127.0.0.1  will prevent Selenium Grid from connecting correctly.", 
            "title": "Grid Node Configuration Example json file"
        }, 
        {
            "location": "/advanced-concepts/log-filters/", 
            "text": "Appium Logs Filtering\n\n\nSometimes it might be necessary to hide sensitive information, like passwords, identifiers, hashes, etc from the server log.\nSince version 1.18.0 Appium supports \n--log-filters\n command line argument.\nThis argument allows to provide the path to a special config file, containing one or more log obfuscation rules.\n\n\nConfig Format\n\n\nThe filtering config must be a valid JSON file containing array of filtering rules.\nEach rule is an object with a set of predefined properties.\nThe following rule properties are supported:\n\n\n\n\npattern\n: A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern.\n\n\ntext\n: A simple non-empty exact text match to replace. Either this property or the above one must be provided. \npattern\n has priority over \ntext\n if both are provided.\n\n\nflags\n: Regular expression flags for the given pattern. Supported flags are the same as for the standard JavaScript RegExp constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2. The 'g' (global matching) flag is always enabled though.\n\n\nreplacer\n: The replacer value to use. By default equals to \n**SECURE**\n. Could also be an empty value.\n\n\n\n\nConfig Examples\n\n\nReplace all occurrences of \nmy.magic.app\n string with the default replacer:\n\n\n[\n    {\n        \ntext\n: \nmy.magic.app\n\n    }\n]\n\n\n\n\nReplace all occurrences of \nmy.magic.\nany char\n string with a custom replacer (case insensitive):\n\n\n[\n    {\n        \npattern\n: \nmy\\\\.magic\\\\.\\\\w\n,\n        \nflags\n: \ni\n,\n        \nreplacer\n: \n***\n\n    }\n]\n\n\n\n\nReplace all occurrences of \nmy.magic.\nany chars\n and/or \nyour.magic\n strings with a custom replacer (case insensitive):\n\n\n[\n    {\n        \npattern\n: \nmy\\\\.magic\\\\.\\\\w+\n,\n        \nflags\n: \ni\n,\n        \nreplacer\n: \n***\n\n    },\n    {\n        \npattern\n: \nyour\\\\.magic\n,\n        \nflags\n: \ni\n,\n        \nreplacer\n: \n***\n\n    }\n]\n\n\n\n\nCut off all log lines to max 15 chars (advanced):\n\n\n[\n    {\n        \npattern\n: \n(.{1,15}).*\n,\n        \nflags\n: \ns\n,\n        \nreplacer\n: \n$1\n\n    }\n]\n\n\n\n\nConfig Errors Handling\n\n\nIf any of config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.", 
            "title": "Appium Logs Filtering"
        }, 
        {
            "location": "/advanced-concepts/log-filters/#appium-logs-filtering", 
            "text": "Sometimes it might be necessary to hide sensitive information, like passwords, identifiers, hashes, etc from the server log.\nSince version 1.18.0 Appium supports  --log-filters  command line argument.\nThis argument allows to provide the path to a special config file, containing one or more log obfuscation rules.", 
            "title": "Appium Logs Filtering"
        }, 
        {
            "location": "/advanced-concepts/log-filters/#config-format", 
            "text": "The filtering config must be a valid JSON file containing array of filtering rules.\nEach rule is an object with a set of predefined properties.\nThe following rule properties are supported:   pattern : A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern.  text : A simple non-empty exact text match to replace. Either this property or the above one must be provided.  pattern  has priority over  text  if both are provided.  flags : Regular expression flags for the given pattern. Supported flags are the same as for the standard JavaScript RegExp constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2. The 'g' (global matching) flag is always enabled though.  replacer : The replacer value to use. By default equals to  **SECURE** . Could also be an empty value.", 
            "title": "Config Format"
        }, 
        {
            "location": "/advanced-concepts/log-filters/#config-examples", 
            "text": "Replace all occurrences of  my.magic.app  string with the default replacer:  [\n    {\n         text :  my.magic.app \n    }\n]  Replace all occurrences of  my.magic. any char  string with a custom replacer (case insensitive):  [\n    {\n         pattern :  my\\\\.magic\\\\.\\\\w ,\n         flags :  i ,\n         replacer :  *** \n    }\n]  Replace all occurrences of  my.magic. any chars  and/or  your.magic  strings with a custom replacer (case insensitive):  [\n    {\n         pattern :  my\\\\.magic\\\\.\\\\w+ ,\n         flags :  i ,\n         replacer :  *** \n    },\n    {\n         pattern :  your\\\\.magic ,\n         flags :  i ,\n         replacer :  *** \n    }\n]  Cut off all log lines to max 15 chars (advanced):  [\n    {\n         pattern :  (.{1,15}).* ,\n         flags :  s ,\n         replacer :  $1 \n    }\n]", 
            "title": "Config Examples"
        }, 
        {
            "location": "/advanced-concepts/log-filters/#config-errors-handling", 
            "text": "If any of config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.", 
            "title": "Config Errors Handling"
        }, 
        {
            "location": "/advanced-concepts/cross-domain-iframes/", 
            "text": "Cross-domain iFrame Automation\n\n\nSame-origin policy\n prevents Appium from automating iFrames that have a different domain to the parent.\n\n\nSubdomain workaround\n\n\nIf the parent and the iFrame share the same domain (e.g. \nsite.com\n and \nshop.site.com\n), you can\nset \ndocument.domain\n on both the parent and each iFrame to a common domain. This solves the same-origin policy issue and allows automation. For example:\n\n\nParent:\n\n\nhtml\n\n  \nhead\n\n    \nscript\n\n      document.domain = 'site.com';\n    \n/script\n\n  \n/head\n\n  \nbody\n\n    \niframe src=\nhttp://shop.site.com\n width=\n200\n height=\n200\n/iframe\n\n  \n/body\n\n\n/html\n\n\n\n\n\nChild iFrame:\n\n\nhtml\n\n  \nhead\n\n    \nscript\n\n      document.domain = 'site.com';\n    \n/script\n\n  \n/head\n\n  \nbody\n\n    \np\nThis is an iFrame!\n/p\n\n  \n/body\n\n\n/html", 
            "title": "Cross-domain iframes"
        }, 
        {
            "location": "/advanced-concepts/cross-domain-iframes/#cross-domain-iframe-automation", 
            "text": "Same-origin policy  prevents Appium from automating iFrames that have a different domain to the parent.", 
            "title": "Cross-domain iFrame Automation"
        }, 
        {
            "location": "/advanced-concepts/cross-domain-iframes/#subdomain-workaround", 
            "text": "If the parent and the iFrame share the same domain (e.g.  site.com  and  shop.site.com ), you can\nset  document.domain  on both the parent and each iFrame to a common domain. This solves the same-origin policy issue and allows automation. For example:  Parent:  html \n   head \n     script \n      document.domain = 'site.com';\n     /script \n   /head \n   body \n     iframe src= http://shop.site.com  width= 200  height= 200 /iframe \n   /body  /html   Child iFrame:  html \n   head \n     script \n      document.domain = 'site.com';\n     /script \n   /head \n   body \n     p This is an iFrame! /p \n   /body  /html", 
            "title": "Subdomain workaround"
        }, 
        {
            "location": "/advanced-concepts/wda-custom-server/", 
            "text": "How To Set Up And Customize WebDriverAgent Server\n\n\nAppium for iOS uses \nWebDriverAgent\n\nas the automation backend. This backend is based on Apple's XCTest framework and shares all the\nknown problem that are present in XCTest. For some of them we have workarounds, but there\nare some that are hardly possible to workaround, for example https://github.com/facebookarchive/WebDriverAgent/issues/507.\nThe approach described in this article enables you to have full control over how WDA is built, managed,\nand run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in\nlong-running perspective.\n\n\nImportant points:\n * The steps below are not necessary if default Appium capabilities are used.\n The server will do everything for you, however you won't have so much control over WDA.\n * It is mandatory to have SSH or physical access to the machine to which the device under test\n is connected.\n\n\nWDA Setup\n\n\nWebDriverAgent source is automatically downloaded with Appium. The usual folder location\nin case Appium is installed via npm tool (\nnpm install -g appium\n) is\n\n/usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent\n\n\ncd /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent\n./Scripts/bootstrap.sh -d\n\n\n\n\nAlso, it might be necessary to create an empty folder for WDA resources:\n\n\nmkdir -p /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/Resources/WebDriverAgent.bundle\n\n\n\n\nNo further configuration steps are needed if you're going to execute your automated tests on\niOS Simulator.\n\n\nReal device, however, requires some more work to be done. Follow\n\nreal device configuration documentation\n\nto setup code signing.\n\n\nIn order to make sure that WDA source is configured properly:\n\n\n\n\nOpen \n/usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj\n\nin Xcode\n\n\nSelect \nWebDriverAgentRunner\n project\n\n\nSelect your real phone/Simulator you'd like to run automated tests on as build target\n\n\nSelect Product-\nTest from the main menu\n\n\n\n\nXcode should successfully build the project and install it on the real device/Simulator,\nso you'll see the icon of WebDriverAgentRunner application on the springboard.\n\n\nWDA Startup\n\n\nWebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls\nfor your application under test. The server address will be \nlocalhost\n if you run your tests on Simulator\nor the actual phone IP address in case of real device. Appium uses \nappium-ios-device\n to route network requests\nto a real device from \nlocalhost\n via USB, which means one can use this tool to unify WDA network\naddress for Simulator and for real device.\n\n\nYou can use \nappium-ios-device\n to connect to\na remote device requiring the module from your JavaScript code as same as Appium.\nAlternatively, you can also use \niproxy\n, \ngo-ios\n or \ntidevice\n to handle WebDriverAgent process outside Appium. For instance, \niproxy\n could be installed using npm: \nnpm install -g iproxy\n.\n\n\nThis helper class written in Java illustrates the main implementation details\nwit \niproxy\n:\n\n\npublic class WDAServer {\n    private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName());\n\n    private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1;\n    private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4);\n    private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1);\n\n    // These settings are needed to properly sign WDA for real device tests\n    // See https://github.com/appium/appium-xcuitest-driver for more details\n    private static final File KEYCHAIN = new File(String.format(\n%s/%s\n,\n            System.getProperty(\nuser.home\n), \n/Library/Keychains/MyKeychain.keychain\n));\n    private static final String KEYCHAIN_PASSWORD = \n******\n;\n\n    private static final File IPROXY_EXECUTABLE = new File(\n/usr/local/bin/iproxy\n);\n    private static final File XCODEBUILD_EXECUTABLE = new File(\n/usr/bin/xcodebuild\n);\n    private static final File WDA_PROJECT =\n            new File(\n/usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent\n +\n                    \n/WebDriverAgent.xcodeproj\n);\n    private static final String WDA_SCHEME = \nWebDriverAgentRunner\n;\n    private static final String WDA_CONFIGURATION = \nDebug\n;\n    private static final File XCODEBUILD_LOG = new File(\n/usr/local/var/log/appium/build.log\n);\n    private static final File IPROXY_LOG = new File(\n/usr/local/var/log/appium/iproxy.log\n);\n\n    private static final int PORT = 8100;\n    public static final String SERVER_URL = String.format(\nhttp://127.0.0.1:%d\n, PORT);\n\n    private static final String[] IPROXY_CMDLINE = new String[]{\n            IPROXY_EXECUTABLE.getAbsolutePath(),\n            Integer.toString(PORT),\n            Integer.toString(PORT),\n            String.format(\n %s 2\n1 \n, IPROXY_LOG.getAbsolutePath())\n    };\n\n    private static WDAServer instance = null;\n    private final boolean isRealDevice;\n    private final String deviceId;\n    private final String platformVersion;\n    private int failedRestartRetriesCount = 0;\n\n    private WDAServer() {\n        try {\n            this.isRealDevice = !getIsSimulatorFromConfig(getClass());\n            final String udid;\n            if (isRealDevice) {\n                udid = IOSRealDeviceHelpers.getUDID();\n            } else {\n                udid = IOSSimulatorHelpers.getId();\n            }\n            this.deviceId = udid;\n            this.platformVersion = getPlatformVersionFromConfig(getClass());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        ensureToolsExistence();\n        ensureParentDirExistence();\n    }\n\n    public synchronized static WDAServer getInstance() {\n        if (instance == null) {\n            instance = new WDAServer();\n        }\n        return instance;\n    }\n\n    private boolean waitUntilIsRunning(Timedelta timeout) throws Exception {\n        final URL status = new URL(SERVER_URL + \n/status\n);\n        try {\n            if (timeout.asSeconds() \n 5) {\n                log.debug(String.format(\nWaiting max %s until WDA server starts responding...\n, timeout));\n            }\n            new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status);\n            return true;\n        } catch (UrlChecker.TimeoutException e) {\n            return false;\n        }\n    }\n\n    private static void ensureParentDirExistence() {\n        if (!XCODEBUILD_LOG.getParentFile().exists()) {\n            if (!XCODEBUILD_LOG.getParentFile().mkdirs()) {\n                throw new IllegalStateException(String.format(\n                        \nThe script has failed to create '%s' folder for Appium logs. \n +\n                                \nPlease make sure your account has correct access permissions on the parent folder(s)\n,\n                        XCODEBUILD_LOG.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    private void ensureToolsExistence() {\n        if (isRealDevice \n !IPROXY_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format(\n%s tool is expected to be installed (`npm install -g iproxy`)\n,\n                    IPROXY_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!XCODEBUILD_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format(\nxcodebuild tool is not detected on the current system at %s\n,\n                    XCODEBUILD_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!WDA_PROJECT.exists()) {\n            throw new IllegalStateException(String.format(\nWDA project is expected to exist at %s\n,\n                    WDA_PROJECT.getAbsolutePath()));\n        }\n    }\n\n    private List\nString\n generateXcodebuildCmdline() {\n        final List\nString\n result = new ArrayList\n();\n        result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath());\n        result.add(\nclean build test\n);\n        result.add(String.format(\n-project %s\n, WDA_PROJECT.getAbsolutePath()));\n        result.add(String.format(\n-scheme %s\n, WDA_SCHEME));\n        result.add(String.format(\n-destination id=%s\n, deviceId));\n        result.add(String.format(\n-configuration %s\n, WDA_CONFIGURATION));\n        result.add(String.format(\nIPHONEOS_DEPLOYMENT_TARGET=%s\n, platformVersion));\n        result.add(String.format(\n %s 2\n1 \n, XCODEBUILD_LOG.getAbsolutePath()));\n        return result;\n    }\n\n    private static List\nString\n generateKeychainUnlockCmdlines() throws Exception {\n        final List\nString\n result = new ArrayList\n();\n        result.add(String.format(\n/usr/bin/security -v list-keychains -s %s\n, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format(\n/usr/bin/security -v unlock-keychain -p %s %s\n,\n                KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format(\n/usr/bin/security set-keychain-settings -t 3600 %s\n, KEYCHAIN.getAbsolutePath()));\n        return result;\n    }\n\n    public synchronized void restart() throws Exception {\n        if (isRealDevice \n failedRestartRetriesCount \n= MAX_REAL_DEVICE_RESTART_RETRIES) {\n            throw new IllegalStateException(String.format(\n                    \nWDA server cannot start on the connected device with udid %s after %s retries. \n +\n                            \nReboot the device manually and try again\n, deviceId, MAX_REAL_DEVICE_RESTART_RETRIES));\n        }\n\n        final String hostname = InetAddress.getLocalHost().getHostName();\n        log.info(String.format(\nTrying to (re)start WDA server on %s:%s...\n, hostname, PORT));\n        UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName());\n\n        final File scriptFile = File.createTempFile(\nscript\n, \n.sh\n);\n        try {\n            final List\nString\n scriptContent = new ArrayList\n();\n            scriptContent.add(\n#!/bin/bash\n);\n            if (isRealDevice \n isRunningInJenkinsNetwork()) {\n                scriptContent.add(String.join(\n\\n\n, generateKeychainUnlockCmdlines()));\n            }\n            if (isRealDevice) {\n                scriptContent.add(String.join(\n \n, IPROXY_CMDLINE));\n            }\n            final String wdaBuildCmdline = String.join(\n \n, generateXcodebuildCmdline());\n            log.debug(String.format(\nBuilding WDA with command line:\\n%s\\n\n, wdaBuildCmdline));\n            scriptContent.add(wdaBuildCmdline);\n            try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) {\n                output.write(String.join(\n\\n\n, scriptContent));\n            }\n            new ProcessBuilder(\n/bin/chmod\n, \nu+x\n, scriptFile.getCanonicalPath())\n                    .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS);\n            final ProcessBuilder pb = new ProcessBuilder(\n/bin/bash\n, scriptFile.getCanonicalPath());\n            final Map\nString, String\n env = pb.environment();\n            // This is needed for Jenkins\n            env.put(\nBUILD_ID\n, \ndontKillMe\n);\n            // This line is important. If USE_PORT environment variable is not set then WDA\n            // takes port number zero by default and won't accept any incoming requests\n            env.put(\nUSE_PORT\n, Integer.toString(PORT));\n            log.info(String.format(\nWaiting max %s for WDA to be (re)started on %s:%s...\n, RESTART_TIMEOUT.toString(),\n                    hostname, PORT));\n            final Timedelta started = Timedelta.now();\n            pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS);\n            if (!waitUntilIsRunning(RESTART_TIMEOUT)) {\n                ++failedRestartRetriesCount;\n                throw new IllegalStateException(\n                        String.format(\nWDA server has failed to start after %s timeout on server '%s'.\\n\n\n                                        + \nPlease make sure that iDevice is properly connected and you can build \n\n                                        + \nWDA manually from XCode.\\n\n\n                                        + \nXcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n\n,\n                                RESTART_TIMEOUT, hostname,\n                                getLog(XCODEBUILD_LOG).orElse(\nEMPTY\n), getLog(IPROXY_LOG).orElse(\nEMPTY\n))\n                );\n            }\n\n            log.info(String.format(\nWDA server has been successfully (re)started after %s \n +\n                    \nand now is listening on %s:%s\n, Timedelta.now().diff(started).toString(), hostname, PORT));\n        } finally {\n            scriptFile.delete();\n        }\n    }\n\n    public boolean isRunning() throws Exception {\n        if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName())\n                || (isRealDevice \n !isProcessRunning(IPROXY_EXECUTABLE.getName()))) {\n            return false;\n        }\n        return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3));\n    }\n\n    public Optional\nString\n getLog(File logFile) {\n        if (logFile.exists()) {\n            try {\n                return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName(\nUTF-8\n)));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return Optional.empty();\n    }\n}\n\n\n\n\nOne should call this piece of code before to start Appium iOS driver, for example, in setUp method:\n\n\n   if (!WDAServer.getInstance().isRunning()) {\n       WDAServer.getInstance().restart();\n   }\n\n\n\n\nIt is important to set \nwebDriverAgentUrl\n capability for Appium driver to let it know\nthat our WDA driver is ready for use:\n\n\n    capabilities.setCapability(\nwebDriverAgentUrl\n, WDAServer.SERVER_URL);\n\n\n\n\nImportant Notes\n\n\n\n\nThe process does not have direct access to keychain if it is executed by Jenkins agent,\n so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail\n\n\nWe kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even\n if these are frozen\n\n\nWe prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue\n running in background even after the actual code execution is finished. This is extremely important\n if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum\n human interaction\n\n\nThe value of \nBUILD_ID\n environment variable is changed to avoid killing of the background process\n by Jenkins agent after the job is finished\n\n\nisRunning\n check is done by verifying the actual network endpoint\n\n\nThe output of daemonized processes is logged, so it is possible to track errors and unexpected failures.\n The content of the log files is automatically added to the actual error message if the server fails to (re)start.\n\n\nReal device id can be parsed from \nsystem_profiler SPUSBDataType\n output\n\n\nSimulator id can be parsed from \nxcrun simctl list\n output\n\n\nUrlChecker\n class is imported from org.openqa.selenium.net package", 
            "title": "Using a custom WDA server"
        }, 
        {
            "location": "/advanced-concepts/wda-custom-server/#how-to-set-up-and-customize-webdriveragent-server", 
            "text": "Appium for iOS uses  WebDriverAgent \nas the automation backend. This backend is based on Apple's XCTest framework and shares all the\nknown problem that are present in XCTest. For some of them we have workarounds, but there\nare some that are hardly possible to workaround, for example https://github.com/facebookarchive/WebDriverAgent/issues/507.\nThe approach described in this article enables you to have full control over how WDA is built, managed,\nand run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in\nlong-running perspective.  Important points:\n * The steps below are not necessary if default Appium capabilities are used.\n The server will do everything for you, however you won't have so much control over WDA.\n * It is mandatory to have SSH or physical access to the machine to which the device under test\n is connected.", 
            "title": "How To Set Up And Customize WebDriverAgent Server"
        }, 
        {
            "location": "/advanced-concepts/wda-custom-server/#wda-setup", 
            "text": "WebDriverAgent source is automatically downloaded with Appium. The usual folder location\nin case Appium is installed via npm tool ( npm install -g appium ) is /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent  cd /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent\n./Scripts/bootstrap.sh -d  Also, it might be necessary to create an empty folder for WDA resources:  mkdir -p /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/Resources/WebDriverAgent.bundle  No further configuration steps are needed if you're going to execute your automated tests on\niOS Simulator.  Real device, however, requires some more work to be done. Follow real device configuration documentation \nto setup code signing.  In order to make sure that WDA source is configured properly:   Open  /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj \nin Xcode  Select  WebDriverAgentRunner  project  Select your real phone/Simulator you'd like to run automated tests on as build target  Select Product- Test from the main menu   Xcode should successfully build the project and install it on the real device/Simulator,\nso you'll see the icon of WebDriverAgentRunner application on the springboard.", 
            "title": "WDA Setup"
        }, 
        {
            "location": "/advanced-concepts/wda-custom-server/#wda-startup", 
            "text": "WebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls\nfor your application under test. The server address will be  localhost  if you run your tests on Simulator\nor the actual phone IP address in case of real device. Appium uses  appium-ios-device  to route network requests\nto a real device from  localhost  via USB, which means one can use this tool to unify WDA network\naddress for Simulator and for real device.  You can use  appium-ios-device  to connect to\na remote device requiring the module from your JavaScript code as same as Appium.\nAlternatively, you can also use  iproxy ,  go-ios  or  tidevice  to handle WebDriverAgent process outside Appium. For instance,  iproxy  could be installed using npm:  npm install -g iproxy .  This helper class written in Java illustrates the main implementation details\nwit  iproxy :  public class WDAServer {\n    private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName());\n\n    private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1;\n    private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4);\n    private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1);\n\n    // These settings are needed to properly sign WDA for real device tests\n    // See https://github.com/appium/appium-xcuitest-driver for more details\n    private static final File KEYCHAIN = new File(String.format( %s/%s ,\n            System.getProperty( user.home ),  /Library/Keychains/MyKeychain.keychain ));\n    private static final String KEYCHAIN_PASSWORD =  ****** ;\n\n    private static final File IPROXY_EXECUTABLE = new File( /usr/local/bin/iproxy );\n    private static final File XCODEBUILD_EXECUTABLE = new File( /usr/bin/xcodebuild );\n    private static final File WDA_PROJECT =\n            new File( /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent  +\n                     /WebDriverAgent.xcodeproj );\n    private static final String WDA_SCHEME =  WebDriverAgentRunner ;\n    private static final String WDA_CONFIGURATION =  Debug ;\n    private static final File XCODEBUILD_LOG = new File( /usr/local/var/log/appium/build.log );\n    private static final File IPROXY_LOG = new File( /usr/local/var/log/appium/iproxy.log );\n\n    private static final int PORT = 8100;\n    public static final String SERVER_URL = String.format( http://127.0.0.1:%d , PORT);\n\n    private static final String[] IPROXY_CMDLINE = new String[]{\n            IPROXY_EXECUTABLE.getAbsolutePath(),\n            Integer.toString(PORT),\n            Integer.toString(PORT),\n            String.format(  %s 2 1  , IPROXY_LOG.getAbsolutePath())\n    };\n\n    private static WDAServer instance = null;\n    private final boolean isRealDevice;\n    private final String deviceId;\n    private final String platformVersion;\n    private int failedRestartRetriesCount = 0;\n\n    private WDAServer() {\n        try {\n            this.isRealDevice = !getIsSimulatorFromConfig(getClass());\n            final String udid;\n            if (isRealDevice) {\n                udid = IOSRealDeviceHelpers.getUDID();\n            } else {\n                udid = IOSSimulatorHelpers.getId();\n            }\n            this.deviceId = udid;\n            this.platformVersion = getPlatformVersionFromConfig(getClass());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        ensureToolsExistence();\n        ensureParentDirExistence();\n    }\n\n    public synchronized static WDAServer getInstance() {\n        if (instance == null) {\n            instance = new WDAServer();\n        }\n        return instance;\n    }\n\n    private boolean waitUntilIsRunning(Timedelta timeout) throws Exception {\n        final URL status = new URL(SERVER_URL +  /status );\n        try {\n            if (timeout.asSeconds()   5) {\n                log.debug(String.format( Waiting max %s until WDA server starts responding... , timeout));\n            }\n            new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status);\n            return true;\n        } catch (UrlChecker.TimeoutException e) {\n            return false;\n        }\n    }\n\n    private static void ensureParentDirExistence() {\n        if (!XCODEBUILD_LOG.getParentFile().exists()) {\n            if (!XCODEBUILD_LOG.getParentFile().mkdirs()) {\n                throw new IllegalStateException(String.format(\n                         The script has failed to create '%s' folder for Appium logs.   +\n                                 Please make sure your account has correct access permissions on the parent folder(s) ,\n                        XCODEBUILD_LOG.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    private void ensureToolsExistence() {\n        if (isRealDevice   !IPROXY_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format( %s tool is expected to be installed (`npm install -g iproxy`) ,\n                    IPROXY_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!XCODEBUILD_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format( xcodebuild tool is not detected on the current system at %s ,\n                    XCODEBUILD_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!WDA_PROJECT.exists()) {\n            throw new IllegalStateException(String.format( WDA project is expected to exist at %s ,\n                    WDA_PROJECT.getAbsolutePath()));\n        }\n    }\n\n    private List String  generateXcodebuildCmdline() {\n        final List String  result = new ArrayList ();\n        result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath());\n        result.add( clean build test );\n        result.add(String.format( -project %s , WDA_PROJECT.getAbsolutePath()));\n        result.add(String.format( -scheme %s , WDA_SCHEME));\n        result.add(String.format( -destination id=%s , deviceId));\n        result.add(String.format( -configuration %s , WDA_CONFIGURATION));\n        result.add(String.format( IPHONEOS_DEPLOYMENT_TARGET=%s , platformVersion));\n        result.add(String.format(  %s 2 1  , XCODEBUILD_LOG.getAbsolutePath()));\n        return result;\n    }\n\n    private static List String  generateKeychainUnlockCmdlines() throws Exception {\n        final List String  result = new ArrayList ();\n        result.add(String.format( /usr/bin/security -v list-keychains -s %s , KEYCHAIN.getAbsolutePath()));\n        result.add(String.format( /usr/bin/security -v unlock-keychain -p %s %s ,\n                KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format( /usr/bin/security set-keychain-settings -t 3600 %s , KEYCHAIN.getAbsolutePath()));\n        return result;\n    }\n\n    public synchronized void restart() throws Exception {\n        if (isRealDevice   failedRestartRetriesCount  = MAX_REAL_DEVICE_RESTART_RETRIES) {\n            throw new IllegalStateException(String.format(\n                     WDA server cannot start on the connected device with udid %s after %s retries.   +\n                             Reboot the device manually and try again , deviceId, MAX_REAL_DEVICE_RESTART_RETRIES));\n        }\n\n        final String hostname = InetAddress.getLocalHost().getHostName();\n        log.info(String.format( Trying to (re)start WDA server on %s:%s... , hostname, PORT));\n        UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName());\n\n        final File scriptFile = File.createTempFile( script ,  .sh );\n        try {\n            final List String  scriptContent = new ArrayList ();\n            scriptContent.add( #!/bin/bash );\n            if (isRealDevice   isRunningInJenkinsNetwork()) {\n                scriptContent.add(String.join( \\n , generateKeychainUnlockCmdlines()));\n            }\n            if (isRealDevice) {\n                scriptContent.add(String.join(   , IPROXY_CMDLINE));\n            }\n            final String wdaBuildCmdline = String.join(   , generateXcodebuildCmdline());\n            log.debug(String.format( Building WDA with command line:\\n%s\\n , wdaBuildCmdline));\n            scriptContent.add(wdaBuildCmdline);\n            try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) {\n                output.write(String.join( \\n , scriptContent));\n            }\n            new ProcessBuilder( /bin/chmod ,  u+x , scriptFile.getCanonicalPath())\n                    .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS);\n            final ProcessBuilder pb = new ProcessBuilder( /bin/bash , scriptFile.getCanonicalPath());\n            final Map String, String  env = pb.environment();\n            // This is needed for Jenkins\n            env.put( BUILD_ID ,  dontKillMe );\n            // This line is important. If USE_PORT environment variable is not set then WDA\n            // takes port number zero by default and won't accept any incoming requests\n            env.put( USE_PORT , Integer.toString(PORT));\n            log.info(String.format( Waiting max %s for WDA to be (re)started on %s:%s... , RESTART_TIMEOUT.toString(),\n                    hostname, PORT));\n            final Timedelta started = Timedelta.now();\n            pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS);\n            if (!waitUntilIsRunning(RESTART_TIMEOUT)) {\n                ++failedRestartRetriesCount;\n                throw new IllegalStateException(\n                        String.format( WDA server has failed to start after %s timeout on server '%s'.\\n \n                                        +  Please make sure that iDevice is properly connected and you can build  \n                                        +  WDA manually from XCode.\\n \n                                        +  Xcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n ,\n                                RESTART_TIMEOUT, hostname,\n                                getLog(XCODEBUILD_LOG).orElse( EMPTY ), getLog(IPROXY_LOG).orElse( EMPTY ))\n                );\n            }\n\n            log.info(String.format( WDA server has been successfully (re)started after %s   +\n                     and now is listening on %s:%s , Timedelta.now().diff(started).toString(), hostname, PORT));\n        } finally {\n            scriptFile.delete();\n        }\n    }\n\n    public boolean isRunning() throws Exception {\n        if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName())\n                || (isRealDevice   !isProcessRunning(IPROXY_EXECUTABLE.getName()))) {\n            return false;\n        }\n        return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3));\n    }\n\n    public Optional String  getLog(File logFile) {\n        if (logFile.exists()) {\n            try {\n                return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName( UTF-8 )));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return Optional.empty();\n    }\n}  One should call this piece of code before to start Appium iOS driver, for example, in setUp method:     if (!WDAServer.getInstance().isRunning()) {\n       WDAServer.getInstance().restart();\n   }  It is important to set  webDriverAgentUrl  capability for Appium driver to let it know\nthat our WDA driver is ready for use:      capabilities.setCapability( webDriverAgentUrl , WDAServer.SERVER_URL);", 
            "title": "WDA Startup"
        }, 
        {
            "location": "/advanced-concepts/wda-custom-server/#important-notes", 
            "text": "The process does not have direct access to keychain if it is executed by Jenkins agent,\n so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail  We kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even\n if these are frozen  We prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue\n running in background even after the actual code execution is finished. This is extremely important\n if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum\n human interaction  The value of  BUILD_ID  environment variable is changed to avoid killing of the background process\n by Jenkins agent after the job is finished  isRunning  check is done by verifying the actual network endpoint  The output of daemonized processes is logged, so it is possible to track errors and unexpected failures.\n The content of the log files is automatically added to the actual error message if the server fails to (re)start.  Real device id can be parsed from  system_profiler SPUSBDataType  output  Simulator id can be parsed from  xcrun simctl list  output  UrlChecker  class is imported from org.openqa.selenium.net package", 
            "title": "Important Notes"
        }, 
        {
            "location": "/advanced-concepts/multiple-xcode-versions/", 
            "text": "Running Appium with multiple Xcode versions installed\n\n\nIf you have multiple Xcode installations you may choose which toolset Appium\nshould use with one of two ways:\n\n\nxcode-select tool\n\n\nOnly available with sudo privileges, affects the whole system.\n\n\nAssuming you want to choose \n/Applications/Xcode7.app\n:\n1. Set default Xcode.\n  \nsudo xcode-select -s /Applications/Xcode7.app/Contents/Developer\n\n2. Run Appium (from command line or with GUI).\n  \nappium\n\n\nEnvironment variable\n\n\nNo privileges needed, affects only the current shell, so Appium should be started\nwithin that shell.\n\n\nAssuming you want to choose \n/Applications/Xcode9.app\n:\n1. Set \nDEVELOPER_DIR\n environment variable.\n  \nexport DEVELOPER_DIR=/Applications/Xcode9.app/Contents/Developer\n\n2. Run Appium \nfrom the same shell.\n\n  \nappium", 
            "title": "Running with multiple versions of Xcode"
        }, 
        {
            "location": "/advanced-concepts/multiple-xcode-versions/#running-appium-with-multiple-xcode-versions-installed", 
            "text": "If you have multiple Xcode installations you may choose which toolset Appium\nshould use with one of two ways:", 
            "title": "Running Appium with multiple Xcode versions installed"
        }, 
        {
            "location": "/advanced-concepts/multiple-xcode-versions/#xcode-select-tool", 
            "text": "Only available with sudo privileges, affects the whole system.  Assuming you want to choose  /Applications/Xcode7.app :\n1. Set default Xcode.\n   sudo xcode-select -s /Applications/Xcode7.app/Contents/Developer \n2. Run Appium (from command line or with GUI).\n   appium", 
            "title": "xcode-select tool"
        }, 
        {
            "location": "/advanced-concepts/multiple-xcode-versions/#environment-variable", 
            "text": "No privileges needed, affects only the current shell, so Appium should be started\nwithin that shell.  Assuming you want to choose  /Applications/Xcode9.app :\n1. Set  DEVELOPER_DIR  environment variable.\n   export DEVELOPER_DIR=/Applications/Xcode9.app/Contents/Developer \n2. Run Appium  from the same shell. \n   appium", 
            "title": "Environment variable"
        }, 
        {
            "location": "/advanced-concepts/event-timings/", 
            "text": "Appium Event Timing\n\n\nAppium comes with the ability to retrieve timing information about startup\ninformation and command length. This is an advanced feature that is controlled\nby the use of the \neventTimings\n capability (set it to \ntrue\n to log event\ntimings).\n\n\nWith this capability turned on, the \nGET /session/:id\n response (i.e., the\nresponse to \ndriver.getSessionDetails()\n or similar, depending on client) will\nbe decorated with an \nevents\n property. This is the structure of that \nevents\n\nproperty:\n\n\n{\n    \nevent_type\n: [\noccurence_timestamp_1\n, ...],\n    \ncommands\n: [\n        {\n            \ncmd\n: \ncommand_name\n,\n            \nstartTime\n: \njs_timestamp\n,\n            \nendTime\n: \njs_timestamp\n\n        },\n        ...\n    ]\n}\n\n\n\n\nIn other words, the \nevents\n property has 2 kinds of properties of its own:\n\n\n\n\nProperties which are the names of event types\n\n\nThe \ncommands\n property\n\n\n\n\nProperties which are names of event types correspond to an array of timestamps\nwhen that event happened. It's an array because events might happen multiple\ntimes in the course of a session. Examples of event types include:\n\n\n\n\nnewSessionRequested\n\n\nnewSessionStarted\n\n\n\n\n(Individual drivers will define their own event types, so we do not have an\nexhaustive list to share here. It's best to actually get one of these responses\nfrom a real session to inspect the possible event types.)\n\n\nThe \ncommands\n property is an array of objects. Each object has the name of the\nAppium-internal command (for example \nclick\n), as well as the time the command\nstarted processing and the time it finished processing.\n\n\nWith this data, you can calculate the time between events, or a strict timeline\nof events, or statistical information about average length of a certain type of\ncommand, and so on.\n\n\nYou can only receive data about events that have happened when you make the\ncall to \n/session/:id\n, so the best time to get data about an entire session is\nright before quitting it.\n\n\nThe Appium team maintains an event timings parser tool that can be used to\ngenerate various kinds of reports from event timings output:\n\nappium/appium-event-parser\n.\n\n\nAdd a custom event\n\n\nSince Appium 1.16.0, you can add a custom event.\nYou can send a custom event name to the Appium server using the \nLog Event API\n, and the server will store the timestamp. The \nGet events\n command can be used to retrieve named events' timestamps later on.", 
            "title": "The Event Timings API"
        }, 
        {
            "location": "/advanced-concepts/event-timings/#appium-event-timing", 
            "text": "Appium comes with the ability to retrieve timing information about startup\ninformation and command length. This is an advanced feature that is controlled\nby the use of the  eventTimings  capability (set it to  true  to log event\ntimings).  With this capability turned on, the  GET /session/:id  response (i.e., the\nresponse to  driver.getSessionDetails()  or similar, depending on client) will\nbe decorated with an  events  property. This is the structure of that  events \nproperty:  {\n     event_type : [ occurence_timestamp_1 , ...],\n     commands : [\n        {\n             cmd :  command_name ,\n             startTime :  js_timestamp ,\n             endTime :  js_timestamp \n        },\n        ...\n    ]\n}  In other words, the  events  property has 2 kinds of properties of its own:   Properties which are the names of event types  The  commands  property   Properties which are names of event types correspond to an array of timestamps\nwhen that event happened. It's an array because events might happen multiple\ntimes in the course of a session. Examples of event types include:   newSessionRequested  newSessionStarted   (Individual drivers will define their own event types, so we do not have an\nexhaustive list to share here. It's best to actually get one of these responses\nfrom a real session to inspect the possible event types.)  The  commands  property is an array of objects. Each object has the name of the\nAppium-internal command (for example  click ), as well as the time the command\nstarted processing and the time it finished processing.  With this data, you can calculate the time between events, or a strict timeline\nof events, or statistical information about average length of a certain type of\ncommand, and so on.  You can only receive data about events that have happened when you make the\ncall to  /session/:id , so the best time to get data about an entire session is\nright before quitting it.  The Appium team maintains an event timings parser tool that can be used to\ngenerate various kinds of reports from event timings output: appium/appium-event-parser .", 
            "title": "Appium Event Timing"
        }, 
        {
            "location": "/advanced-concepts/event-timings/#add-a-custom-event", 
            "text": "Since Appium 1.16.0, you can add a custom event.\nYou can send a custom event name to the Appium server using the  Log Event API , and the server will store the timestamp. The  Get events  command can be used to retrieve named events' timestamps later on.", 
            "title": "Add a custom event"
        }, 
        {
            "location": "/advanced-concepts/parallel-tests/", 
            "text": "Parallel Android Tests\n\n\nAppium provides a way for users to automate multiple Android sessions on a single machine on single server instance. All it involves is starting Appium server on any available port.\n\n\nNote, that it is not possible to have more than one session running on the \nsame\n device.\n\n\nThe important capabilities:\n\n\n\n\nudid\n the device id\n\n\nchromedriverPort\n the chromedriver port (if using webviews or chrome)\n\n\nmjpegServerPort\n If you are using \nappium-uiautomator2-driver\n, set a unique MJPEG server port for each parallel session. Otherwise you might get a port conflict such as in \nthis issue\n.\n\n\nsystemPort\n If you are using \nappium-uiautomator2-driver\n, set a unique system port for each parallel session. Otherwise you might get a port conflict such as in \nthis issue\n.\n\n\nchromedriverPort\n If you are using \nappium-chromedriver\n, set a unique ChromeDriver port for each parallel session. Otherwise, you might get a port conflict with the error message \nAddress already in use (48)\n in the ChromeDriver log.\n\n\n\n\nParallel iOS Tests\n\n\nSince Xcode9, Appium supports parallel RealDevice and Simulator testing. Start your Appium Server on any available port.\n\n\nThe important capabilities:\n\n\nRealDevice\n\n\n\n\nudid\n must be a unique device UDID for each parallel session\n\n\nwdaLocalPort\n must be a unique port number for each parallel session. The default value is 8100\n\n\nderivedDataPath\n set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.\n\n\n\n\nSimulator\n\n\n\n\nEither \nudid\n, which is the unique simulator UDID for each parallel session(this can be retrieved from xcrun simctl list) or a unique combination of \ndeviceName\n and \nplatformVersion\n to identify the appropriate simulator with the given name and version number for each parallel session\n\n\nwdaLocalPort\n must be a unique port number for each parallel session. The default value is 8100\n\n\nderivedDataPath\n set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.\n\n\n\n\nTroubleshooting\n\n\nWhen running on Jenkins, watch out for the \nProcessTreeKiller\n when running multiple parallel test jobs on the same machine. If you are spawning simulators in one test job, Jenkins might kill all your simulators when the first test ends - causing errors in the remaining test jobs!\n\n\nUse \nBUILD_ID=dontKillMe\n to prevent this from happening.", 
            "title": "Setup for Parallel Testing"
        }, 
        {
            "location": "/advanced-concepts/parallel-tests/#parallel-android-tests", 
            "text": "Appium provides a way for users to automate multiple Android sessions on a single machine on single server instance. All it involves is starting Appium server on any available port.  Note, that it is not possible to have more than one session running on the  same  device.  The important capabilities:   udid  the device id  chromedriverPort  the chromedriver port (if using webviews or chrome)  mjpegServerPort  If you are using  appium-uiautomator2-driver , set a unique MJPEG server port for each parallel session. Otherwise you might get a port conflict such as in  this issue .  systemPort  If you are using  appium-uiautomator2-driver , set a unique system port for each parallel session. Otherwise you might get a port conflict such as in  this issue .  chromedriverPort  If you are using  appium-chromedriver , set a unique ChromeDriver port for each parallel session. Otherwise, you might get a port conflict with the error message  Address already in use (48)  in the ChromeDriver log.", 
            "title": "Parallel Android Tests"
        }, 
        {
            "location": "/advanced-concepts/parallel-tests/#parallel-ios-tests", 
            "text": "Since Xcode9, Appium supports parallel RealDevice and Simulator testing. Start your Appium Server on any available port.  The important capabilities:", 
            "title": "Parallel iOS Tests"
        }, 
        {
            "location": "/advanced-concepts/parallel-tests/#realdevice", 
            "text": "udid  must be a unique device UDID for each parallel session  wdaLocalPort  must be a unique port number for each parallel session. The default value is 8100  derivedDataPath  set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.", 
            "title": "RealDevice"
        }, 
        {
            "location": "/advanced-concepts/parallel-tests/#simulator", 
            "text": "Either  udid , which is the unique simulator UDID for each parallel session(this can be retrieved from xcrun simctl list) or a unique combination of  deviceName  and  platformVersion  to identify the appropriate simulator with the given name and version number for each parallel session  wdaLocalPort  must be a unique port number for each parallel session. The default value is 8100  derivedDataPath  set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.", 
            "title": "Simulator"
        }, 
        {
            "location": "/advanced-concepts/parallel-tests/#troubleshooting", 
            "text": "When running on Jenkins, watch out for the  ProcessTreeKiller  when running multiple parallel test jobs on the same machine. If you are spawning simulators in one test job, Jenkins might kill all your simulators when the first test ends - causing errors in the remaining test jobs!  Use  BUILD_ID=dontKillMe  to prevent this from happening.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/advanced-concepts/settings/", 
            "text": "Settings\n\n\nSettings are a new concept introduced by Appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.\n\n\nSettings are a way to specify the behavior of the appium server.\n\n\nSettings are:\n - Mutable, they can be changed during a session\n - Only relevant during the session they are applied. They are reset for each new session.\n - Control the way the appium server behaves during test automation. They do not apply to controlling the app or device under test.\n\n\nAn example of a setting would be \nignoreUnimportantViews\n for Android. Android can be set to ignore elements in the View Hierarchy which it deems irrelevant. Setting this can cause tests to run faster. A user who \nwants\n to access the ignored elements however, would want to disable \nignoreUnimportantViews\n, and reenable it afterwards.\n\n\nAnother example of a use-case for settings would be telling appium to ignore elements which are not visible.\n\n\nSettings are implemented via the following API endpoints:\n\n\nUpdate Device Settings\n\n\nPOST\n /session/:sessionId/appium/settings\n\n\n\n\nExpects a JSON hash of settings, where keys correspond to setting names, and values to the value of the setting.\n\n\n\n\n{\n  settings: {\n   ignoreUnimportantViews : true\n  }\n}\n\n\n\n\nRetrieve Device Settings\n\n\nGET\n /session/:sessionId/appium/settings\n\n\n\n\nReturns a JSON hash of all the currently specified settings.\n\n\n\n\n{\n  ignoreUnimportantViews : true\n}\n\n\n\n\nGeneral Supported Settings\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nValues\n\n\n\n\n\n\n\n\n\n\nshouldUseCompactResponses\n\n\nReturns compact (standards-compliant) \n faster responses in find element/s. Defaults to \ntrue\n\n\nfalse\n or \ntrue\n\n\n\n\n\n\nelementResponseAttributes\n\n\nThe comma-separated list of fields to return with each element. It works only \nshouldUseCompactResponses\n is \nfalse\n. Defaults to \"type,label\" in iOS, \"\" in Android.\n\n\ne.g., \n\"name,text,rect,attribute/name,attribute/value\"\n\n\n\n\n\n\n\n\nImage Elements\n also has image elements specific settings.\n\n\nUiAutomator2\n\n\nPlease refer to the documentation on the \nUiAutomator2 Driver repository\n\n\nXCUITest\n\n\nPlease refer to the documentation on the \nXCUITest Driver repository\n\n\nMac2\n\n\nPlease refer to the documentation on the \nMac2Driver repository", 
            "title": "The Settings API"
        }, 
        {
            "location": "/advanced-concepts/settings/#settings", 
            "text": "Settings are a new concept introduced by Appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.  Settings are a way to specify the behavior of the appium server.  Settings are:\n - Mutable, they can be changed during a session\n - Only relevant during the session they are applied. They are reset for each new session.\n - Control the way the appium server behaves during test automation. They do not apply to controlling the app or device under test.  An example of a setting would be  ignoreUnimportantViews  for Android. Android can be set to ignore elements in the View Hierarchy which it deems irrelevant. Setting this can cause tests to run faster. A user who  wants  to access the ignored elements however, would want to disable  ignoreUnimportantViews , and reenable it afterwards.  Another example of a use-case for settings would be telling appium to ignore elements which are not visible.  Settings are implemented via the following API endpoints:", 
            "title": "Settings"
        }, 
        {
            "location": "/advanced-concepts/settings/#update-device-settings", 
            "text": "POST  /session/:sessionId/appium/settings   Expects a JSON hash of settings, where keys correspond to setting names, and values to the value of the setting.   {\n  settings: {\n   ignoreUnimportantViews : true\n  }\n}", 
            "title": "Update Device Settings"
        }, 
        {
            "location": "/advanced-concepts/settings/#retrieve-device-settings", 
            "text": "GET  /session/:sessionId/appium/settings   Returns a JSON hash of all the currently specified settings.   {\n  ignoreUnimportantViews : true\n}", 
            "title": "Retrieve Device Settings"
        }, 
        {
            "location": "/advanced-concepts/settings/#general-supported-settings", 
            "text": "Name  Description  Values      shouldUseCompactResponses  Returns compact (standards-compliant)   faster responses in find element/s. Defaults to  true  false  or  true    elementResponseAttributes  The comma-separated list of fields to return with each element. It works only  shouldUseCompactResponses  is  false . Defaults to \"type,label\" in iOS, \"\" in Android.  e.g.,  \"name,text,rect,attribute/name,attribute/value\"     Image Elements  also has image elements specific settings.", 
            "title": "General Supported Settings"
        }, 
        {
            "location": "/advanced-concepts/settings/#uiautomator2", 
            "text": "Please refer to the documentation on the  UiAutomator2 Driver repository", 
            "title": "UiAutomator2"
        }, 
        {
            "location": "/advanced-concepts/settings/#xcuitest", 
            "text": "Please refer to the documentation on the  XCUITest Driver repository", 
            "title": "XCUITest"
        }, 
        {
            "location": "/advanced-concepts/settings/#mac2", 
            "text": "Please refer to the documentation on the  Mac2Driver repository", 
            "title": "Mac2"
        }, 
        {
            "location": "/advanced-concepts/memory-collection/", 
            "text": "Memory Collection\n\n\nSince Node v. 12 it is possible to collect the dumps of Appium's memory usage to be analyzed for problems.\nThis is \nextremely\n useful for finding memory leaks.\n\n\nCreating a dump file\n\n\nTo create a dump file at any given time, add the following command line parameter to \nnode\n process, which executes the appium.js script:\n\n\n--heapsnapshot-signal=\nlt;signal\ngt;\n\n\n\n\nwhere \nsignal\n can be one of available custom signals, for example \nSIGUSR2\n. Then you will be able to\n\n\nkill -SIGUSR2 \nlt;nodePID\ngt;\n\n\n\n\nDump files are created in the same folder where the main Appium script has been executed.\nThey have the \n.heapsnapshot\n extension, and can be loaded into the Chrome Inspector for further investigation.\n\n\nExamples\n\n\n# 1. Go to the directory where appium is installed via NPM using one of the two cd command below, depending on appium \n# is installed globally or locally\n## if your appium is globally installed via NPM with command \nnpm install -g appium\n:\ncd \n$(npm -g root)/appium/\n\n## else if your appium is locally installed via NPM:\ncd \n$(npm root)/appium/\n\n\n# 2. Start appium server with heapsnapshot signal\n# \n at the end puts the process at background, so we can continue working on the same terminal\nnode --heapsnapshot-signal=SIGUSR2 . \n\n\n# 3. Get the PID of previous node process\npid=$!\n\n# 4. When it's time to dump the heap, issue a SIGUSR2 signal to the PID got above\nkill -SIGUSR2 $pid\n# Then the heap dump file is created in current directory\n\n\n\n\nDump file analysis\n\n\nRead the \nRising Stack article\n for more details.", 
            "title": "Memory Collection"
        }, 
        {
            "location": "/advanced-concepts/memory-collection/#memory-collection", 
            "text": "Since Node v. 12 it is possible to collect the dumps of Appium's memory usage to be analyzed for problems.\nThis is  extremely  useful for finding memory leaks.", 
            "title": "Memory Collection"
        }, 
        {
            "location": "/advanced-concepts/memory-collection/#creating-a-dump-file", 
            "text": "To create a dump file at any given time, add the following command line parameter to  node  process, which executes the appium.js script:  --heapsnapshot-signal= lt;signal gt;  where  signal  can be one of available custom signals, for example  SIGUSR2 . Then you will be able to  kill -SIGUSR2  lt;nodePID gt;  Dump files are created in the same folder where the main Appium script has been executed.\nThey have the  .heapsnapshot  extension, and can be loaded into the Chrome Inspector for further investigation.", 
            "title": "Creating a dump file"
        }, 
        {
            "location": "/advanced-concepts/memory-collection/#examples", 
            "text": "# 1. Go to the directory where appium is installed via NPM using one of the two cd command below, depending on appium \n# is installed globally or locally\n## if your appium is globally installed via NPM with command  npm install -g appium :\ncd  $(npm -g root)/appium/ \n## else if your appium is locally installed via NPM:\ncd  $(npm root)/appium/ \n\n# 2. Start appium server with heapsnapshot signal\n#   at the end puts the process at background, so we can continue working on the same terminal\nnode --heapsnapshot-signal=SIGUSR2 .  \n\n# 3. Get the PID of previous node process\npid=$!\n\n# 4. When it's time to dump the heap, issue a SIGUSR2 signal to the PID got above\nkill -SIGUSR2 $pid\n# Then the heap dump file is created in current directory", 
            "title": "Examples"
        }, 
        {
            "location": "/advanced-concepts/memory-collection/#dump-file-analysis", 
            "text": "Read the  Rising Stack article  for more details.", 
            "title": "Dump file analysis"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/", 
            "text": "Running Appium from Source\n\n\nSo you want to run Appium from source and help fix bugs and add features?\nGreat! Just fork the project, make a change, and send a pull request! Please\nhave a look at our \nStyle Guide\n before getting to work.\nPlease make sure the unit and functional tests pass before sending a pull\nrequest; for more information on how to run tests, keep reading!\n\n\nNode.js\n\n\nAppium is written in JavaScript, and run with the \nNode.js\n engine. Currently\nversion 6+ is supported. While Node.js can be installed globally on the system,\na version manager is \nhighly\n recommended.\n* NVM - \nhttps://github.com/creationix/nvm\n\n* N - \nhttps://github.com/tj/n\n\n\nYour Node.js installation will include the \nNPM\n package manager, which Appium\nwill need in order to manage dependencies. Appiums supports NPM version 3+.\n\n\nSetting up Appium from Source\n\n\nAn Appium setup involves the Appium server, which sends messages back and forth\nbetween your test code and devices/emulators, and a test script, written in\nwhatever language binding exists that is compatible with Appium. Run an\ninstance of an Appium server, and then run your test.\n\n\nThe quick way to get started:\n\n\ngit clone https://github.com/appium/appium.git\ncd appium\nnpm install\nnpm run build\nnode .\n\n\n\n\nHacking on Appium\n\n\nInstall the \nappium-doctor\n tool, and run it to verify all of the\ndependencies are set up correctly (since dependencies for building Appium\nare different from those for simply running it):\n\n\nnpm install -g appium-doctor\nappium-doctor --dev\n\n\n\n\nInstall the Node.js dependencies:\n\n\nnpm install\n\n\n\n\nWhen pulling new code from GitHub, if there are changes to \npackage.json\n it\nis necessary to remove the old dependencies and re-run \nnpm install\n:\n\n\nrm -rf node_modules \n rm -rf package-lock.json \n npm install\n\n\n\n\nAt this point, you will be able to start the Appium server:\n\n\nnode .\n\n\n\n\nSee \nthe server documentation\n\nfor a full list of command line arguments that can be used.\n\n\nHacking with Appium for Android\n\n\nTo work on Android, make sure you have \nant\n, \nmaven\n, and \nadb\n installed\nand added to system \nPATH\n environment variable. Also you would need the\nandroid-19+ sdk installed.\nFrom your local repo's command prompt, install/run the following:\n\n\nSet up Appium by running:\n\n\nrm -rf node_modules \n rm -rf package-lock.json \n npm install\n\n\n\n\nMake sure you have one and only one Android emulator or device running, e.g.,\nby running this command in another process (assuming the \nemulator\n command is\non your path):\n\n\nemulator -avd \nMyAvdName\n\n\n\n\n\nNow you are ready to run the Appium server via \nnode .\n.\n\n\nMaking sure you're up to date\n\n\nSince Appium uses dev versions of some packages, it often becomes necessary to\ninstall new \nnpm\n packages or update various things. Running \nnpm install\n will\nupdate everything necessary. You will also need to do this when Appium bumps\nits version up. Prior to running \nnpm install\n it is recommended to remove\nall the old dependencies in the \nnode_modules\n directory:\n\n\nrm -rf node_modules \n rm -rf package-lock.json \n npm install\n\n\n\n\nDifferent packages\n\n\nAppium is made up of a number of different packages. While it is often possible\nto work in a single package, it is also often the case that work, whether fixing\na bug or adding a new feature, requires working on multiple packages simultaneously.\n\n\nUnfortunately the dependencies installed when running \nnpm install\n are those that\nhave already been published, so some work is needed to link together local development\nversions of the packages that are being worked on.\n\n\nIn the case where one package, \nA\n, depends on another package, \nB\n, the following steps\nare necessary to link the two:\n1. In one terminal, enter into package \nB\n\n    \ncd B\n\n2. Use \nNPM link\n to create symbolic link to this package\n    \nnpm link\n\n3. In another terminal, enter into package \nA\n\n    \ncd A\n\n4. Use \nNPM link\n to link the dependent package \nB\n to the development version\n    \nnpm link B\n\n\nNow the version of \nB\n that \nA\n uses will be your local version. Remember, however, that\nchanges made to the JavaScript will only be available when they have been transpiled, so\nwhen you are going to test from package \nA\n, run \nnpm run build\n in the directory for\npackage \nB\n.\n\n\nRunning Tests\n\n\nFirst, check out our documentation on \nrunning tests in\ngeneral\n Make sure your\nsystem is set up properly for the platforms you desire to test on.\n\n\nOnce your system is set up and your code is up to date, you can run unit tests\nwith:\n\n\nnpm run test\n\n\n\n\nYou can run functional tests for all supported platforms (after ensuring that\nAppium is running in another window with \nnode .\n) with:\n\n\nnpm run e2e-test\n\n\n\n\nDebugging Node\n\n\nThis project has multiple launch configurations for running NodeJS code from within \nVSCode\n\n\n\n\nDebug\n: Runs Appium server in debug mode so you can set breakpoints inside VSCode source files\n\n\nAttach Debug\n: Attach to a currently running Appium server\n\n\nExample Usage\n\n\nFrom root, run \nnode --inspect-brk . --port 5555\n\n\nRun \nattach debug\n\n\nSetup breakpoints in VSCode\n\n\n\n\n\n\nTest All\n: Runs all mocha tests in \ntest/\n. Can setup breakpoints in test code and source code\n\n\nTest Current File\n: Runs the currently focused-on mocha file. Fails if it's not valid mocha test\n\n\n\n\nCommitting code\n\n\nEach Appium package installs a pre-commit hook which will run the \nlinter\n and\nthe unit tests before the commit is made. Any error in either of these will stop\nthe commit from occurring.\n\n\nOnce code is committed and a \npull request\n\nis made to the correct Appium respository on \nGitHub\n, Appium build system\nwill run all of the functional tests.", 
            "title": "Running Appium from Source"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#running-appium-from-source", 
            "text": "So you want to run Appium from source and help fix bugs and add features?\nGreat! Just fork the project, make a change, and send a pull request! Please\nhave a look at our  Style Guide  before getting to work.\nPlease make sure the unit and functional tests pass before sending a pull\nrequest; for more information on how to run tests, keep reading!", 
            "title": "Running Appium from Source"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#nodejs", 
            "text": "Appium is written in JavaScript, and run with the  Node.js  engine. Currently\nversion 6+ is supported. While Node.js can be installed globally on the system,\na version manager is  highly  recommended.\n* NVM -  https://github.com/creationix/nvm \n* N -  https://github.com/tj/n  Your Node.js installation will include the  NPM  package manager, which Appium\nwill need in order to manage dependencies. Appiums supports NPM version 3+.", 
            "title": "Node.js"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#setting-up-appium-from-source", 
            "text": "An Appium setup involves the Appium server, which sends messages back and forth\nbetween your test code and devices/emulators, and a test script, written in\nwhatever language binding exists that is compatible with Appium. Run an\ninstance of an Appium server, and then run your test.  The quick way to get started:  git clone https://github.com/appium/appium.git\ncd appium\nnpm install\nnpm run build\nnode .", 
            "title": "Setting up Appium from Source"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#hacking-on-appium", 
            "text": "Install the  appium-doctor  tool, and run it to verify all of the\ndependencies are set up correctly (since dependencies for building Appium\nare different from those for simply running it):  npm install -g appium-doctor\nappium-doctor --dev  Install the Node.js dependencies:  npm install  When pulling new code from GitHub, if there are changes to  package.json  it\nis necessary to remove the old dependencies and re-run  npm install :  rm -rf node_modules   rm -rf package-lock.json   npm install  At this point, you will be able to start the Appium server:  node .  See  the server documentation \nfor a full list of command line arguments that can be used.", 
            "title": "Hacking on Appium"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#hacking-with-appium-for-android", 
            "text": "To work on Android, make sure you have  ant ,  maven , and  adb  installed\nand added to system  PATH  environment variable. Also you would need the\nandroid-19+ sdk installed.\nFrom your local repo's command prompt, install/run the following:  Set up Appium by running:  rm -rf node_modules   rm -rf package-lock.json   npm install  Make sure you have one and only one Android emulator or device running, e.g.,\nby running this command in another process (assuming the  emulator  command is\non your path):  emulator -avd  MyAvdName   Now you are ready to run the Appium server via  node . .", 
            "title": "Hacking with Appium for Android"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#making-sure-youre-up-to-date", 
            "text": "Since Appium uses dev versions of some packages, it often becomes necessary to\ninstall new  npm  packages or update various things. Running  npm install  will\nupdate everything necessary. You will also need to do this when Appium bumps\nits version up. Prior to running  npm install  it is recommended to remove\nall the old dependencies in the  node_modules  directory:  rm -rf node_modules   rm -rf package-lock.json   npm install", 
            "title": "Making sure you're up to date"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#different-packages", 
            "text": "Appium is made up of a number of different packages. While it is often possible\nto work in a single package, it is also often the case that work, whether fixing\na bug or adding a new feature, requires working on multiple packages simultaneously.  Unfortunately the dependencies installed when running  npm install  are those that\nhave already been published, so some work is needed to link together local development\nversions of the packages that are being worked on.  In the case where one package,  A , depends on another package,  B , the following steps\nare necessary to link the two:\n1. In one terminal, enter into package  B \n     cd B \n2. Use  NPM link  to create symbolic link to this package\n     npm link \n3. In another terminal, enter into package  A \n     cd A \n4. Use  NPM link  to link the dependent package  B  to the development version\n     npm link B  Now the version of  B  that  A  uses will be your local version. Remember, however, that\nchanges made to the JavaScript will only be available when they have been transpiled, so\nwhen you are going to test from package  A , run  npm run build  in the directory for\npackage  B .", 
            "title": "Different packages"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#running-tests", 
            "text": "First, check out our documentation on  running tests in\ngeneral  Make sure your\nsystem is set up properly for the platforms you desire to test on.  Once your system is set up and your code is up to date, you can run unit tests\nwith:  npm run test  You can run functional tests for all supported platforms (after ensuring that\nAppium is running in another window with  node . ) with:  npm run e2e-test", 
            "title": "Running Tests"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#debugging-node", 
            "text": "This project has multiple launch configurations for running NodeJS code from within  VSCode   Debug : Runs Appium server in debug mode so you can set breakpoints inside VSCode source files  Attach Debug : Attach to a currently running Appium server  Example Usage  From root, run  node --inspect-brk . --port 5555  Run  attach debug  Setup breakpoints in VSCode    Test All : Runs all mocha tests in  test/ . Can setup breakpoints in test code and source code  Test Current File : Runs the currently focused-on mocha file. Fails if it's not valid mocha test", 
            "title": "Debugging Node"
        }, 
        {
            "location": "/contributing-to-appium/appium-from-source/#committing-code", 
            "text": "Each Appium package installs a pre-commit hook which will run the  linter  and\nthe unit tests before the commit is made. Any error in either of these will stop\nthe commit from occurring.  Once code is committed and a  pull request \nis made to the correct Appium respository on  GitHub , Appium build system\nwill run all of the functional tests.", 
            "title": "Committing code"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/", 
            "text": "A Developer's Overview of Appium\n\n\nBefore reading this document, please ensure that you have read and understood\nthe more general \nintroduction to Appium\nconcepts\n and the more general \ncontribution\ninstructions\n.\n\n\nTechnical Vision\n\n\nAppium aims to be a Mobile JSONWP front-end for the best app automation\ntechnologies. That's it. We want to take all the different useful automation\nengines and smooth away their differences and gotchas by making Appium drivers\nfor them and bringing them under the umbrella of Appium itself. This is very\nsimilar to the goal of the Selenium project. For our part, we want to have\nevery driver be an independent entity (separate repo, tests, etc...) even as it\nuses shared libraries that make the development of an Appium driver as simple\nand boilerplate-free as possible. We use modern JavaScript because JavaScript\nis everywhere and it's easy for many developers to understand and contribute\nback to.\n\n\nDeveloper Community\n\n\nAnyone is welcome to become an Appium developer; just read this guide and get\nsome of your code merged, and you are one of us! If you stick around and help\na lot, we will also make you a committer so that you can continue to help the\ncommunity more easily. If you are developing code for Appium and have\nquestions, reach out to the developer community at\n\nappium-developers@googlegroups.com\n. Note that this is a mailing list for\n\ndevelopment\n questions, not \nusage\n questions or bug reports. Usage questions\nbelong on \ndiscuss.appium.io\n. The GitHub issue\ntracker is for bug reports and feature requests only.\n\n\nAgile Development Workflow\n\n\nThe Appium team runs development according to a very lightweight version of\nSCRUM. Every two weeks we begin a new \"sprint\", or a period of time in which we\nhave decided what we want to accomplish. Anyone familiar with the Appium\ncodebase is welcome to attend our sprint planning and participate as a SCRUM\nteam member for that sprint. No long-term commitments required! During the\nsprint, we update each other with daily progress in the \n#standup\n room in our\n\nAppium Slack Group\n (there are no real-time daily\nstandups). At the end of the sprint, to celebrate our accomplishments and\nreflect on how things went, we hold a \"retrospective\", which might result in\na list of things we can try differently or do better next time around.\n\n\nUltimately, the goal is to time an Appium release at the end of each sprint, so\nevery two weeks. We're not quite there, but hopefully we will be soon.\n\n\nCurrent meeting times:\n* Sprint Planning: every other Monday from 10:00 AM - 10:45 AM (Pacific Time)\n* Sprint Retrospective: every other \nother\n Friday from 1:00 PM - 1:30 PM (Pacific Time)\n\n\nWe hold meetings using \nZoom\n video chat.\n\n\nIf you are interested in participating a sprint, ping \n@jlipps\n or \n@isaac\n in\nthe Appium Slack Group, or DM \n@jlipps\n on Twitter, and we'll share how to join\nthe video chat for the next sprint.\n\n\nArchitecture\n\n\nAppium is primarily a collection of \nnode.js\n packages that\ncombine to form a running node.js server. These packages are maintained\nindependently of one another and each have their own GitHub repo, CI, and\nrelease process. Some packages (like \nappium-ios-driver\n) are large and add\nsignificant functionality to Appium, while others play a support role and\nexpose one specific bit of functionality that is reused by other packages.\n\n\nFor an overview of the package hierarchy and the role that each package plays,\nplease check out our \npackage\noverview\n doc.\n\n\nTranspilation\n\n\nAppium is written in a new form of JavaScript, called ES6 (or now ES2015).\nBecause this version of the language is not yet supported natively by older\nversions of node.js, Appium code is \ntranspiled\n to ES5 (the more\nwidely-supported version of JS). This transpilation process must occur before\nany code is run. In addition to the new language features of ES6, we have\nadopted two very important keywords from the \nsubsequent\n version of JS, namely\n\nasync\n and \nawait\n, which assist in writing asynchronous code cleanly. Because\nof the transpilation step, Appium packages include tools which watch code for\nchanges and automatically re-transpile the code. Usually, the same tool will\nautomatically run unit tests as well to ensure that nothing small has broken.\nMost Appium packages have this as the default behavior when running \ngulp\n.\n\n\nLinting and Style\n\n\nIt's important for all of Appium's JS to look and feel the same. This includes\nstyle conventions as well as coding patterns and which libraries we use to\nsolve various problems. You should get familiar with our new \nES2015 Style\nGuide\n. When transpiling,\nAppium packages will automatically run ESLint or other lint tools and provide\nwarning or error feedback if the code doesn't conform to our style. These tools\nare not necessarily exhaustive of the kinds of style issues we care about, so\nwe may also mention style issues in our reviews. This isn't to be nit-picky but\nto have a clean, consistent, and readable codebase!\n\n\nSubmitting Code\n\n\nGetting your code into Appium is easy: just submit a PR to one of our repos and\nengage with the maintainers in the review process. We have a number of\nrequirements for code submissions (but don't worry! If the following seems like\na lot, we will helpfully and patiently walk you through each step. Just send in\nyour PR and we'll go from there):\n\n\n\n\nFollow the style of the surrounding code and our Style Guide\n\n\nAtomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with \ngit rebase -i\n and squashing!\n\n\nNo merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR.\n\n\nAlmost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. We will be happy to walk you through the test creation process. Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage.\n\n\n\n\nIf you do all of these things before submission, your code will almost\ncertainly be accepted very quickly! Of course, if you're thinking of making\na change to Appium that requires a lot of work, you might reach out to the\ndevelopers list to make sure that the change is in line with our philosophy and\nin principle something that we'll accept before you get going.\n\n\nTesting\n\n\nAlways make sure that your changes are tested! In addition to writing unit and\ne2e tests, make sure you run existing tests before you begin to make changes\nand before you push code to be reviewed. We do have CI set up for every Appium\nrepository as a safety net for reviewers to know whether the code they are\nreviewing has passed muster. Running tests in any Appium package is easy!\nUnless the README says otherwise, here are the things you can do:\n\n\nnpm run lint            # run eslint on the code\nnpm run watch           # watch directory to re-transpile on code change, lint, and run unit tests\nnpm run test            # same as above but don't watch\nnpm run e2e-test        # transpile and run end-to-end/functional tests\n_FORCE_LOGS=1 \ncommand\n # show module log output during test run\n\n\n\n\nNote that we have a convention for unit test files to end in \n-specs.js\n and\nfor e2e test files to end in \n-e2e-specs.js\n.\n\n\nReleasing\n\n\nThe release process for any Appium module other than the main Appium package is\npretty straightforward (note that you will need to be an NPM owner for the\npackage if you want to publish it. Ownership is managed by the Appium\ncommitters; talk to @jlipps, @kazucocoa, @dang, @mykola-mokhnach if you believe you should be an owner\nand are not):\n\n\n\n\nrm -rf node_modules \n rm -rf package-lock.json \n npm install\n and run tests to make sure a clean install works.\n\n\nDetermine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of \nSemVer\n (see also this explanation of \nhow SemVer works with NPM\n).\n\n\nUpdate the \nCHANGELOG\n and/or \nREADME\n with any appropriate changes and commit. Most subpackages don't have a \nCHANGELOG\n.\n\n\nRun \nnpm version \nversion-type\n with the appropriate version type.\n\n\nPush the appropriate branch to GitHub, and don't forget to include the \n--tags\n flag to include the tag just created by \nnpm version\n.\n\n\nRun \nnpm publish\n (with \n--tag beta\n if this isn't an official release).\n\n\n\n\nFor the main Appium package, all the above steps must be taken, but with\nseveral changes. One reason is that for the main package we use NPM shrinkwrap\nto ensure dependencies don't change between installations. Another reason is\nthat we develop on master and release on various branches. The way it works is\nas follows: we always develop and add new code to master. When we are ready to\nmake a new minor or major release (i.e., \n1.5.0\n or \n2.0.0\n), we create\na release branch (\n1.5\n or \n2.0\n respectively). We then publish off of that\nbranch. As we feel the need to make patch releases, we first pull the patch\ninto master, then cherry-pick individual patches to the release branch (perhaps\neven multiple release branches). Then we again publish from those branches with\nthe updated patch version (\n1.5.1\n or \n2.0.1\n for example).\n\n\nEvery release should have at least one release candidate prior to the GA release.\nFor example, if we're releasing 1.20.0 then we should checkout branch \n1.12\n and\nthen first release \n1.12.0-rc.0\n. We keep releasing new release candidates until\nwe're happy with it and then \"upgrade\" to GA. The GA release should have identical\ncode and shrinkwrap as the most recent release candidate. The only difference should\nbe the version, which is reflected in package.json and npm-shrinkwrap.json\n\n\nA note about \nnpm shrinkwrap\n:\n We use \nnpm shrinkwrap\n\nin order to lock dependencies on release. Without it, any development on dependent\npackages will be reflected when Appium is installed, which may lead to issues. Since\nthe configuration file, \nnpm-shrinkwrap.json\n, only exists on release branches,\nit is necessary to manually manage it during the release process. It needs to be\nchecked in to GitHub along with changes to \npackage.json\n. With npm 5+ there is\nalso a \npackage-lock.json\n file produced. During the shrinkwrap process this is\nconverted into the \nnpm-shrinkwrap.json\n file.\n\n\nFollow directions in \nRelease Appium Doc", 
            "title": "Developer Overview"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#a-developers-overview-of-appium", 
            "text": "Before reading this document, please ensure that you have read and understood\nthe more general  introduction to Appium\nconcepts  and the more general  contribution\ninstructions .", 
            "title": "A Developer's Overview of Appium"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#technical-vision", 
            "text": "Appium aims to be a Mobile JSONWP front-end for the best app automation\ntechnologies. That's it. We want to take all the different useful automation\nengines and smooth away their differences and gotchas by making Appium drivers\nfor them and bringing them under the umbrella of Appium itself. This is very\nsimilar to the goal of the Selenium project. For our part, we want to have\nevery driver be an independent entity (separate repo, tests, etc...) even as it\nuses shared libraries that make the development of an Appium driver as simple\nand boilerplate-free as possible. We use modern JavaScript because JavaScript\nis everywhere and it's easy for many developers to understand and contribute\nback to.", 
            "title": "Technical Vision"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#developer-community", 
            "text": "Anyone is welcome to become an Appium developer; just read this guide and get\nsome of your code merged, and you are one of us! If you stick around and help\na lot, we will also make you a committer so that you can continue to help the\ncommunity more easily. If you are developing code for Appium and have\nquestions, reach out to the developer community at appium-developers@googlegroups.com . Note that this is a mailing list for development  questions, not  usage  questions or bug reports. Usage questions\nbelong on  discuss.appium.io . The GitHub issue\ntracker is for bug reports and feature requests only.", 
            "title": "Developer Community"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#agile-development-workflow", 
            "text": "The Appium team runs development according to a very lightweight version of\nSCRUM. Every two weeks we begin a new \"sprint\", or a period of time in which we\nhave decided what we want to accomplish. Anyone familiar with the Appium\ncodebase is welcome to attend our sprint planning and participate as a SCRUM\nteam member for that sprint. No long-term commitments required! During the\nsprint, we update each other with daily progress in the  #standup  room in our Appium Slack Group  (there are no real-time daily\nstandups). At the end of the sprint, to celebrate our accomplishments and\nreflect on how things went, we hold a \"retrospective\", which might result in\na list of things we can try differently or do better next time around.  Ultimately, the goal is to time an Appium release at the end of each sprint, so\nevery two weeks. We're not quite there, but hopefully we will be soon.  Current meeting times:\n* Sprint Planning: every other Monday from 10:00 AM - 10:45 AM (Pacific Time)\n* Sprint Retrospective: every other  other  Friday from 1:00 PM - 1:30 PM (Pacific Time)  We hold meetings using  Zoom  video chat.  If you are interested in participating a sprint, ping  @jlipps  or  @isaac  in\nthe Appium Slack Group, or DM  @jlipps  on Twitter, and we'll share how to join\nthe video chat for the next sprint.", 
            "title": "Agile Development Workflow"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#architecture", 
            "text": "Appium is primarily a collection of  node.js  packages that\ncombine to form a running node.js server. These packages are maintained\nindependently of one another and each have their own GitHub repo, CI, and\nrelease process. Some packages (like  appium-ios-driver ) are large and add\nsignificant functionality to Appium, while others play a support role and\nexpose one specific bit of functionality that is reused by other packages.  For an overview of the package hierarchy and the role that each package plays,\nplease check out our  package\noverview  doc.", 
            "title": "Architecture"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#transpilation", 
            "text": "Appium is written in a new form of JavaScript, called ES6 (or now ES2015).\nBecause this version of the language is not yet supported natively by older\nversions of node.js, Appium code is  transpiled  to ES5 (the more\nwidely-supported version of JS). This transpilation process must occur before\nany code is run. In addition to the new language features of ES6, we have\nadopted two very important keywords from the  subsequent  version of JS, namely async  and  await , which assist in writing asynchronous code cleanly. Because\nof the transpilation step, Appium packages include tools which watch code for\nchanges and automatically re-transpile the code. Usually, the same tool will\nautomatically run unit tests as well to ensure that nothing small has broken.\nMost Appium packages have this as the default behavior when running  gulp .", 
            "title": "Transpilation"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#linting-and-style", 
            "text": "It's important for all of Appium's JS to look and feel the same. This includes\nstyle conventions as well as coding patterns and which libraries we use to\nsolve various problems. You should get familiar with our new  ES2015 Style\nGuide . When transpiling,\nAppium packages will automatically run ESLint or other lint tools and provide\nwarning or error feedback if the code doesn't conform to our style. These tools\nare not necessarily exhaustive of the kinds of style issues we care about, so\nwe may also mention style issues in our reviews. This isn't to be nit-picky but\nto have a clean, consistent, and readable codebase!", 
            "title": "Linting and Style"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#submitting-code", 
            "text": "Getting your code into Appium is easy: just submit a PR to one of our repos and\nengage with the maintainers in the review process. We have a number of\nrequirements for code submissions (but don't worry! If the following seems like\na lot, we will helpfully and patiently walk you through each step. Just send in\nyour PR and we'll go from there):   Follow the style of the surrounding code and our Style Guide  Atomic commits--one commit per logical change (i.e., make sure that commits don't need to come in a group in order for the program to work. It should work at any given commit). Usually this means one commit per PR. You'll want to get very familiar with  git rebase -i  and squashing!  No merge commits: always rebase on top of latest master (or whatever other branch you're asking to merge into) before submitting your PR.  Almost all changes should have tests. Bugfixes should at the least have unit tests that prove that the bug has been fixed. New features should have unit tests and in most cases e2e tests to prove that the feature actually works. We will be happy to walk you through the test creation process. Reading the surrounding test code is a good place to start. Our CI systems usually run test coverage statistics and we will likely not merge code that decreases test coverage.   If you do all of these things before submission, your code will almost\ncertainly be accepted very quickly! Of course, if you're thinking of making\na change to Appium that requires a lot of work, you might reach out to the\ndevelopers list to make sure that the change is in line with our philosophy and\nin principle something that we'll accept before you get going.", 
            "title": "Submitting Code"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#testing", 
            "text": "Always make sure that your changes are tested! In addition to writing unit and\ne2e tests, make sure you run existing tests before you begin to make changes\nand before you push code to be reviewed. We do have CI set up for every Appium\nrepository as a safety net for reviewers to know whether the code they are\nreviewing has passed muster. Running tests in any Appium package is easy!\nUnless the README says otherwise, here are the things you can do:  npm run lint            # run eslint on the code\nnpm run watch           # watch directory to re-transpile on code change, lint, and run unit tests\nnpm run test            # same as above but don't watch\nnpm run e2e-test        # transpile and run end-to-end/functional tests\n_FORCE_LOGS=1  command  # show module log output during test run  Note that we have a convention for unit test files to end in  -specs.js  and\nfor e2e test files to end in  -e2e-specs.js .", 
            "title": "Testing"
        }, 
        {
            "location": "/contributing-to-appium/developers-overview/#releasing", 
            "text": "The release process for any Appium module other than the main Appium package is\npretty straightforward (note that you will need to be an NPM owner for the\npackage if you want to publish it. Ownership is managed by the Appium\ncommitters; talk to @jlipps, @kazucocoa, @dang, @mykola-mokhnach if you believe you should be an owner\nand are not):   rm -rf node_modules   rm -rf package-lock.json   npm install  and run tests to make sure a clean install works.  Determine whether we have a patch (bugfix), minor (feature), or major (breaking) release according to the principles of  SemVer  (see also this explanation of  how SemVer works with NPM ).  Update the  CHANGELOG  and/or  README  with any appropriate changes and commit. Most subpackages don't have a  CHANGELOG .  Run  npm version  version-type  with the appropriate version type.  Push the appropriate branch to GitHub, and don't forget to include the  --tags  flag to include the tag just created by  npm version .  Run  npm publish  (with  --tag beta  if this isn't an official release).   For the main Appium package, all the above steps must be taken, but with\nseveral changes. One reason is that for the main package we use NPM shrinkwrap\nto ensure dependencies don't change between installations. Another reason is\nthat we develop on master and release on various branches. The way it works is\nas follows: we always develop and add new code to master. When we are ready to\nmake a new minor or major release (i.e.,  1.5.0  or  2.0.0 ), we create\na release branch ( 1.5  or  2.0  respectively). We then publish off of that\nbranch. As we feel the need to make patch releases, we first pull the patch\ninto master, then cherry-pick individual patches to the release branch (perhaps\neven multiple release branches). Then we again publish from those branches with\nthe updated patch version ( 1.5.1  or  2.0.1  for example).  Every release should have at least one release candidate prior to the GA release.\nFor example, if we're releasing 1.20.0 then we should checkout branch  1.12  and\nthen first release  1.12.0-rc.0 . We keep releasing new release candidates until\nwe're happy with it and then \"upgrade\" to GA. The GA release should have identical\ncode and shrinkwrap as the most recent release candidate. The only difference should\nbe the version, which is reflected in package.json and npm-shrinkwrap.json  A note about  npm shrinkwrap :  We use  npm shrinkwrap \nin order to lock dependencies on release. Without it, any development on dependent\npackages will be reflected when Appium is installed, which may lead to issues. Since\nthe configuration file,  npm-shrinkwrap.json , only exists on release branches,\nit is necessary to manually manage it during the release process. It needs to be\nchecked in to GitHub along with changes to  package.json . With npm 5+ there is\nalso a  package-lock.json  file produced. During the shrinkwrap process this is\nconverted into the  npm-shrinkwrap.json  file.  Follow directions in  Release Appium Doc", 
            "title": "Releasing"
        }, 
        {
            "location": "/contributing-to-appium/dev-tools/", 
            "text": "Appium development commands\n\n\nEach Appium package has a number of NPM scripts that are used to automate\ndevelopment tasks:\n\n\n\n\n\n\n\n\nTask\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnpm run build\n\n\nTranspile code into the \nbuild\n directory\n\n\n\n\n\n\nnpm run lint\n\n\nRuns ESLint\n\n\n\n\n\n\nnpm run test\n\n\nCleans, lints, transpiles, and runs unit tests\n\n\n\n\n\n\nnpm run e2e-test\n\n\nTranpiles and runs functional tests\n\n\n\n\n\n\nnpm run watch\n\n\nAutomatically runs \ntest\n command when code is changed\n\n\n\n\n\n\nnpm run mocha\n\n\nGives access to \nmocha\n test runner\n\n\n\n\n\n\n\n\nIn addition, the main Appium package has a task \nnpm generate-docs\n which generates\nthe command documentation.", 
            "title": "Standard Dev Commands"
        }, 
        {
            "location": "/contributing-to-appium/dev-tools/#appium-development-commands", 
            "text": "Each Appium package has a number of NPM scripts that are used to automate\ndevelopment tasks:     Task  Description      npm run build  Transpile code into the  build  directory    npm run lint  Runs ESLint    npm run test  Cleans, lints, transpiles, and runs unit tests    npm run e2e-test  Tranpiles and runs functional tests    npm run watch  Automatically runs  test  command when code is changed    npm run mocha  Gives access to  mocha  test runner     In addition, the main Appium package has a task  npm generate-docs  which generates\nthe command documentation.", 
            "title": "Appium development commands"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/", 
            "text": "Style guide for contributors\n\n\nThanks for your contribution to Appium! Here are the principles we use when\nwriting javascript. Please conform to these so we can merge your pull request\nwithout going back and forth about style. The main principle is: \nmake your\ncode look like the surrounding code\n.\n\n\nJavaScript\n\n\nWith the exception of the code that runs on the devices themselves\n(\nappium-uiautomator2-server\n for\nAndroid, \nWebDriverAgent\n for iOS), Appium is written in \nNode.js\n. If you are\nnot familiar with JavaScript, please familiarize yourself before attempting\nto modify the code. There are plenty of good, free resources (see, for example,\n\nYou Don't Know JavaScript\n).\n\n\nRebasing\n\n\nCommits in a pull request should consist of \nlogical changes\n.\nIf there are multiple authors, make sure each author has their own commit.\nIt's not a good idea to modify author information. Merge commits should be\nrebased out of pull requests.\n\n\nLinting\n\n\nAll code must pass \nESLint\n. To check your code, you can simply run \nnpm run lint\n\nfrom the Appium repo dir. The configuration is specified in the\n\neslint-config-appium\n package.\n\n\nMost modern editors have integration with ESLint. See \nhere\n for details.\n\n\nStyle notes\n\n\nWe use a future version of JavaScript and take advantage of the \nBabel\n\ntranspiler to render it down to what is supported by current versions of\n\nNode.js\n. We use \nES2015\n (formerly called ES6) with some\nnot-yet-standard features, namely \nasync/await\n. This style guide\nmust be followed diligently in all Appium contributions! Luckily, linting\nwill enforce most of these rules!\n\n\n\n\nUse two spaces for indentation, \nno tabs\n\n\n\n\nUse single spaces around operators\n\n\njs\nlet x = 1;\n\nnot\n\njs\nlet x=1;\n\n\n\n\n\n\nSpaces after commas and colons in lists, objects, function calls, etc...\n\n\njs\nlet x = myFunc('lol', {foo: bar, baz: boo});\n\nnot\n\njs\nlet x = myFunc('lol',{foo:bar,baz:boo});\n\n\n\n\n\n\nAlways end statements with semicolons\n\n\n\n\n\n\nBrackets for \nfunction\n, \nif\n, etc... go on same line, \nelse\n gets sandwiched\n\n\njs\nif (foo === bar) {\n  // do something\n} else {\n  // do something else\n}\n\nnot\n\njs\nif (foo === bar)\n{\n  // do something\n}\nelse\n{\n  // do something else\n}\n\n\n\n\n\n\nSpace after \nif\n, \nfor\n, and \nfunction\n:\n\n\njs\nif (foo === bar) {\n\n\njs\nfor (let i = 0; i \n 10; i ++) {\n\n\njs\nlet lol = function (foo) {\n\nnot\n\njs\nif(foo === bar) {\n\n\njs\nfor(let i = 0; i \n 10; i ++) {\n\n\njs\nlet lol = function(foo) {\n\n\n\n\n\n\nAvoid bracketless \nif\n for one-liners:\n\n\njs\nif (foo === bar) {\n  foo++;\n}\n\nnot\n\njs\nif (foo === bar)\n  foo++;\n\nexcept in the case of short-circuiting to return/error\n\njs\nif (err) return;\n\n\njs\nif (err) throw new Error(err);\n\n\n\n\n\n\nUse \n===\n, not \n==\n, and \n!==\n, not \n!=\n for \nno surprises\n\n\n\n\nLine length shouldn't be longer than 79 characters\n\n\n\n\nBreak up long strings like this:\n\n\njavascript\nmyFunc('This is a really long string that's longer ' +\n       'than 79 characters so I broke it up, woo');\n\n\n\n\n\n\nComments should line up with code\n\n\njs\nif (foo === 5) {\n  myFunc(foo);\n  // foo++;\n}\n\nnot\n\njs\nif (foo === 5) {\n  myFunc(foo);\n//foo++;\n}\n\n\n\n\n\n\nVariable names should be camelCased:\n\n\njs\nlet myVariable = 42;\n\nnot\n\njs\nlet my_variable = 42;\n\n\n\n\n\n\nCheck for \nundefined\n using Appium's \nappium-support\n package\n\n\njs\nutil.hasValue(myVariable)\n\n\n\n\n\n\nDefine a variable with a default value\n\n\njs\nlet x = y || z;\n\nnot\n\njs\nlet x = y ? y : z;\n\n\n\n\n\n\nTest Style:\n\n\nTests are written using \nmocha\n and \nchai\n. The WebDriver\nlibrary used is \nwd\n.\n\n\nKeep on the same line if it makes sense semantically and length is not an issue:\n\n\nExamples:\n\n\ndriver.elementByTagName('el1').should.become('123');\n\ndriver\n  .elementsByTagName('el1').should.eventually.have.length(0);\n\n\n\n\nAlternatively use extra indents to improve readability:\n\n\ndriver\n  .elementById('comments')\n    .clear()\n    .click()\n    .keys('hello world')\n    .getValue()\n    .should.become('hello world')\n  .elementById('comments')\n    .getValue().should.become('hello world');\n\ndriver\n  .execute(\n'NaN'--\n)\n    .should.be.rejectedWith('status: 13');", 
            "title": "Appium Style Guide"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/#style-guide-for-contributors", 
            "text": "Thanks for your contribution to Appium! Here are the principles we use when\nwriting javascript. Please conform to these so we can merge your pull request\nwithout going back and forth about style. The main principle is:  make your\ncode look like the surrounding code .", 
            "title": "Style guide for contributors"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/#javascript", 
            "text": "With the exception of the code that runs on the devices themselves\n( appium-uiautomator2-server  for\nAndroid,  WebDriverAgent  for iOS), Appium is written in  Node.js . If you are\nnot familiar with JavaScript, please familiarize yourself before attempting\nto modify the code. There are plenty of good, free resources (see, for example, You Don't Know JavaScript ).", 
            "title": "JavaScript"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/#rebasing", 
            "text": "Commits in a pull request should consist of  logical changes .\nIf there are multiple authors, make sure each author has their own commit.\nIt's not a good idea to modify author information. Merge commits should be\nrebased out of pull requests.", 
            "title": "Rebasing"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/#linting", 
            "text": "All code must pass  ESLint . To check your code, you can simply run  npm run lint \nfrom the Appium repo dir. The configuration is specified in the eslint-config-appium  package.  Most modern editors have integration with ESLint. See  here  for details.", 
            "title": "Linting"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/#style-notes", 
            "text": "We use a future version of JavaScript and take advantage of the  Babel \ntranspiler to render it down to what is supported by current versions of Node.js . We use  ES2015  (formerly called ES6) with some\nnot-yet-standard features, namely  async/await . This style guide\nmust be followed diligently in all Appium contributions! Luckily, linting\nwill enforce most of these rules!   Use two spaces for indentation,  no tabs   Use single spaces around operators  js\nlet x = 1; \nnot js\nlet x=1;    Spaces after commas and colons in lists, objects, function calls, etc...  js\nlet x = myFunc('lol', {foo: bar, baz: boo}); \nnot js\nlet x = myFunc('lol',{foo:bar,baz:boo});    Always end statements with semicolons    Brackets for  function ,  if , etc... go on same line,  else  gets sandwiched  js\nif (foo === bar) {\n  // do something\n} else {\n  // do something else\n} \nnot js\nif (foo === bar)\n{\n  // do something\n}\nelse\n{\n  // do something else\n}    Space after  if ,  for , and  function :  js\nif (foo === bar) {  js\nfor (let i = 0; i   10; i ++) {  js\nlet lol = function (foo) { \nnot js\nif(foo === bar) {  js\nfor(let i = 0; i   10; i ++) {  js\nlet lol = function(foo) {    Avoid bracketless  if  for one-liners:  js\nif (foo === bar) {\n  foo++;\n} \nnot js\nif (foo === bar)\n  foo++; \nexcept in the case of short-circuiting to return/error js\nif (err) return;  js\nif (err) throw new Error(err);    Use  === , not  == , and  !== , not  !=  for  no surprises   Line length shouldn't be longer than 79 characters   Break up long strings like this:  javascript\nmyFunc('This is a really long string that's longer ' +\n       'than 79 characters so I broke it up, woo');    Comments should line up with code  js\nif (foo === 5) {\n  myFunc(foo);\n  // foo++;\n} \nnot js\nif (foo === 5) {\n  myFunc(foo);\n//foo++;\n}    Variable names should be camelCased:  js\nlet myVariable = 42; \nnot js\nlet my_variable = 42;    Check for  undefined  using Appium's  appium-support  package  js\nutil.hasValue(myVariable)    Define a variable with a default value  js\nlet x = y || z; \nnot js\nlet x = y ? y : z;", 
            "title": "Style notes"
        }, 
        {
            "location": "/contributing-to-appium/style-guide/#test-style", 
            "text": "Tests are written using  mocha  and  chai . The WebDriver\nlibrary used is  wd .  Keep on the same line if it makes sense semantically and length is not an issue:  Examples:  driver.elementByTagName('el1').should.become('123');\n\ndriver\n  .elementsByTagName('el1').should.eventually.have.length(0);  Alternatively use extra indents to improve readability:  driver\n  .elementById('comments')\n    .clear()\n    .click()\n    .keys('hello world')\n    .getValue()\n    .should.become('hello world')\n  .elementById('comments')\n    .getValue().should.become('hello world');\n\ndriver\n  .execute( 'NaN'-- )\n    .should.be.rejectedWith('status: 13');", 
            "title": "Test Style:"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/", 
            "text": "How to write docs\n\n\n##\n is used to write a h2 header. Each document must start with a h2 header.\nThis is to support appium.io docs generation. Don't use the \n---\n underline method of creating headers.\nDon't use h1 \n#\n or \n===\n for heading as it is not supported for table of contents (folder name is used as h1).\n\n\nSubheaders\n\n\n###\n is used to write subheaders.\n\n\nRegular headers\n\n\n####\n is used for headers that don't appear in the table of contents.\nDon't use h5 \n#####\n, or h6 \n######\n.\n\n\nLine breaks\n\n\nDon't use line breaks such as \n--\n or \n---\n.\n\n\nLinking\n\n\nLink to the readme:\n\n\n[readme](../../README.md)\n\n\nLink to contributing:\n\n\n[contributing](../../CONTRIBUTING.md)\n\n\nLink to another document\n\n\n[link text](filename.md)\n\n\nWriting Commands Documents\n\n\nThe command documents located in \ndocs/en/commands\n, are generated\ndocs and aren't meant to be edited directly. The command documentation is defined in\n\ncommands-yml/commands\n.\n\n\nGenerating Commands Documents\n\n\nTo generate the commands docs, run \nnpm run generate-docs\n. This will generate the markdown\nfiles in \ndocs/en/commands\n and then they need to be committed and pushed.\n\n\nAdding Documents to Appium.io\n\n\nMarkdown files in \ndocs/\n aren't automatically added to the site. To add a document to \nappium.io\n\nyou need to add it as an entry in the appropriate location in the table of\ncontents, \ntoc.js\n\n\nPublishing\n\n\nTo publish documentation on \nappium.io\n see \nappium.io (Github)\n.", 
            "title": "How to Write Docs"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#how-to-write-docs", 
            "text": "##  is used to write a h2 header. Each document must start with a h2 header.\nThis is to support appium.io docs generation. Don't use the  ---  underline method of creating headers.\nDon't use h1  #  or  ===  for heading as it is not supported for table of contents (folder name is used as h1).", 
            "title": "How to write docs"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#subheaders", 
            "text": "###  is used to write subheaders.", 
            "title": "Subheaders"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#regular-headers", 
            "text": "####  is used for headers that don't appear in the table of contents.\nDon't use h5  ##### , or h6  ###### .", 
            "title": "Regular headers"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#line-breaks", 
            "text": "Don't use line breaks such as  --  or  --- .", 
            "title": "Line breaks"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#linking", 
            "text": "Link to the readme:  [readme](../../README.md)  Link to contributing:  [contributing](../../CONTRIBUTING.md)  Link to another document  [link text](filename.md)", 
            "title": "Linking"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#writing-commands-documents", 
            "text": "The command documents located in  docs/en/commands , are generated\ndocs and aren't meant to be edited directly. The command documentation is defined in commands-yml/commands .", 
            "title": "Writing Commands Documents"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#generating-commands-documents", 
            "text": "To generate the commands docs, run  npm run generate-docs . This will generate the markdown\nfiles in  docs/en/commands  and then they need to be committed and pushed.", 
            "title": "Generating Commands Documents"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#adding-documents-to-appiumio", 
            "text": "Markdown files in  docs/  aren't automatically added to the site. To add a document to  appium.io \nyou need to add it as an entry in the appropriate location in the table of\ncontents,  toc.js", 
            "title": "Adding Documents to Appium.io"
        }, 
        {
            "location": "/contributing-to-appium/how-to-write-docs/#publishing", 
            "text": "To publish documentation on  appium.io  see  appium.io (Github) .", 
            "title": "Publishing"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/", 
            "text": "Appium in a Nutshell\n\n\n\n\nappium\n\n\n\n\nruns basic checks\n\n\nnode version (\n= 5)\n\n\nCLI arguments checks\n\n\ncontains all available and supported CLI arguments\n\n\ncheck for deprecation and mutual exclusion\n\n\n\n\n\n\nput logging together\n\n\nmixture out of npmlog, winston and a custom logger\n\n\ninitiates AppiumDriver (extends Basedriver)\n\n\nassigns iOS/Android/Fake driver to session\n\n\ncreates/deletes Appium session\n\n\nstarts baseServer (appium-express)\n\n\npasses routes given by driver\n\n\n\n\nappium-express (part of appium-base-driver)\n\n\n\n\nstarts express server (allows x-domain-origin)\n\n\ninitialises routes from AppiumDriver\n\n\ntimeout handling\n\n\nserves a static page for test purposes\n\n\nconnects req/res events to logger\n\n\n\n\nmobile-json-wire-protocol (part of appium-base-driver)\n\n\n\n\nprovides list of Appium commands\n\n\nsubclassed by drivers that will use the protocol\n\n\nkind of middleware between client and driver\n\n\nhandles jwp proxy for driver\n\n\ncontains error classes for all types of errors\n\n\nsanitises error responses\n\n\n(un)wraps params to commands\n\n\nchecks required params, validates params\n\n\n\n\nappium-base-driver\n\n\n\n\ndesigned to have a single testing session per instantiation\n\n\ncontains constraints on caps (platformName has to be present, etc)\n\n\nvalidates capabilities\n\n\nruns chain of promised commands with single concurrency\n\n\nhandles session restart\n\n\nhandles swipe options\n\n\nexports class (DeviceSettings) to manage device settings (get/update)\n\n\ncontains basic commands\n\n\nto find elements\n\n\ncreate/delete sessions\n\n\nhandle timeouts\n\n\nset/update device settings\n\n\nprovides helper methods for commands\n\n\n\n\nappium-ios-driver\n\n\n\n\ncan also run as standalone server (has a small server part that extends from appium-express)\n\n\nsupported strategies: \"name\", \"xpath\", \"id\", \"-ios uiautomation\", \"class name\", \"accessibility id\u201d\n\n\ncan start a simulator or a real device (if udid is given)\n\n\nruns for each type a huge set of instructions\n\n\nremoveInstrumentsSocket\n\n\nsetBundleIdFromApp\n\n\ncreateInstruments\n\n\nrunSimReset, isolateSimDevice, setLocale || runRealDeviceReset\n\n\nsetPreferences || runRealDeviceReset\n\n\nstartLogCapture\n\n\nprelaunchSimulator || (noop)\n\n\nstartInstruments\n\n\nonInstrumentsLaunch\n\n\nconfigureBootstrap\n\n\nsetBundleId\n\n\nsetInitialOrientation\n\n\ninitAutoWebview\n\n\nwaitForAppLaunched\n\n\n\n\n\n\nall instructions are helper methods within driver.js\n\n\ncontains a more specific set of capability constraints\n\n\nhas logic to build and run Safari (safari-launcher) using appium-xcode\n\n\nimplements commands for iOS driver\n\n\nSelenium commands are compiled to ui-automator commands\n\n\ncommands will be send out to uiAutoClient (appium-uiauto)\n\n\nconnects to appium remote debugger\n\n\n\n\nappium-xcode\n\n\n\n\nruns shell commands to return useful data from Xcode like\n\n\ngetPath\n\n\ngetVersion\n\n\ngetAutomationTraceTemplatePath\n\n\ngetMaxIOSSDK\n\n\n\u2026\n\n\nhas an auto-retry built in\n\n\n\n\nappium-uiauto\n\n\n\n\nwrapper for the iOS UI Automation framework\n\n\ntalks to it via socket connection\n\n\nruns a command queue that get filled up by the sendCommand function\n\n\nhandles responses (as a buffer) from the ui-automation framework\n\n\nuses osascript to rotate screenshots\n\n\nprovides method to bootstrap simulator/realdevice (dynamic-bootstrap)\n\n\njavascript files which are run in the iOS UI Automation context (not node)\n\n\nresponsible to execute actual iOS UI Automation commands\n\n\nsee \nUIAutomation docs\n\n\ncommand flow is like\n\n\nWebdriver command -\n iOS driver command -\n uiauto-command\n\n\n\n\n\n\n\n\nappium-instruments\n\n\n\n\nwrapper to run instruments commands\n\n\na lot of exec calls to talk to instruments binary\n\n\nall of them take callbacks to propagate the result\n\n\nuses \"iwd\" (instruments without delay) packages which have to be compiled first\n\n\nspecial Instruments package that gets rid of a delay between commands\n\n\ncontains also older versions of iwd instrument (v4 - v7)\n\n\n\n\nappium-ios-log\n\n\n\n\ncaptures console, performance and crash logs from the iOS simulator or real device\n\n\nby either calling tail to grab logs from a system path (simulator devices)\n\n\nor by calling deviceconsole (real devices)\n\n\nperformance logs are getting grabbed using the remote-debugger\n\n\ncrash logs remain in \u201c.crash\u201d files on the system\n\n\n\n\nappium-ios-simulator\n\n\n\n\nwrapper around iOS simulator app\n\n\nstart and shutdown (kill all) simulators\n\n\nupdating settings and locals\n\n\nupdate/clean safari\n\n\ngrabs meta data about the simulator device\n\n\nuses simctl to talk to the simulator\n\n\nworks for Xcode 6 and 7\n\n\n\n\nnode-simctl\n\n\n\n\nwrapper around simctl binary (cli utility to control an iOS simulator)\n\n\nexecuted as a subcommand of xcrun (locate or invoke developer tools from the command-line)\n\n\ncontains functions to\n\n\ninstall/remove apps\n\n\nlaunch and shutdown simulators\n\n\ncreate/erase/delete devices\n\n\nget list of devices\n\n\n\n\nappium-cookies\n\n\n\n\nsimple package to create and receive cookies\n\n\nused in the appium-ios-driver to implement jswonwire cookie commands within the web context\n\n\n\n\nappium-chromedriver\n\n\n\n\nwrapper around the chrome driver\n\n\ndownloads and installs chromedriver binaries\n\n\nlaunches, restarts and stops (or kills all) chrome instances\n\n\nuses appium-jsonwp-proxy to send json wire protocol commands to the driver\n\n\n\n\njsonwp-proxy (part of appium-base-driver)\n\n\n\n\nallows to send json wire protocol commands to a server that understands it (browser drivers)\n\n\nparses response into json\n\n\nallows to proxy requests to a proxied server\n\n\nused for communication in appium-chromedriver\n\n\n\n\nappium-android-driver\n\n\n\n\nsimilar to appium-ios-driver it can run as standalone server\n\n\nautomates native, hybrid and mobile web apps on emulators/simulators and real devices\n\n\ntakes care of installing android packages to the device\n\n\nruns chromedriver sessions if desired\n\n\ncontains a more specific set of capability constraints\n\n\nuses appium-adb to talk to the emulator/simulator/realdevice\n\n\nand appium-android-bootstrap to execute the actual commands\n\n\ncontains helpers to figure out which web view belongs to which app package vice versa\n\n\n\n\nappium-adb\n\n\n\n\nwrapper around the Android Debug Bridge (adb)\n\n\ncontains a bunch of commands that are basically just rpc to the adb binary\n\n\nhouses jar files to run for special use cases like signing, verifying apps or moving manifests\n\n\nallows special (mobile specific) emulator commands that are not related to the webdriver protocol like\n\n\nlocking the screen\n\n\npress back button\n\n\npress home button\n\n\nset/get airplane mode\n\n\nset/get wifi state\n\n\ncaptures logcat\n\n\nhandles emulator/simulator actions (e.g. reboot)\n\n\n\n\nappium-android-bootstrap\n\n\n\n\nJavaScript interface, and Java code, for interacting with Android UI Automator\n\n\nbuilds AppiumBootstrap.jar that contains logic to execute the commands\n\n\ncounterpart to appium-uiauto\n\n\nonce started it creates a web socket connection to the device\n\n\napplication provides start/shutdown/sendCommand interface\n\n\ncommand flow is like:\n\n\nSelenium command -\n appium-adb -\n appium-android-bootstrap -\n Java code using the Android UI Automator framework\n\n\n\n\nappium-uiautomator\n\n\n\n\nstarts and shutdowns uiautomator server given by appium-android-bootstrap jar build\n\n\ncommand flow is like\n\n\nappium-android-bootstrap:start -\n appium-uiautomator:start -\n appium-adb:install bootstrap\n\n\n\n\nappium-android-ime\n\n\n\n\nallows to send and receive unicode characters from/to the Android device\n\n\nencodes text into UTF-7 sends it to the device and recodes it as Unicode\n\n\nused by appium-android-driver\n\n\n\n\nappium-doctor\n\n\n\n\ndiagnoses, reports and fixes common Node, iOS and Android configuration issues before starting Appium\n\n\nexposes cli command \u201cappium-doctor\"\n\n\nit checks for\n\n\nAndroid:\n\n\nandroid sdk exists and configured properly\n\n\nenv variables and path check\n\n\n\n\n\n\niOS:\n\n\nxcode is installed (with command line tools)\n\n\ndev tools security check\n\n\nauth check\n\n\nnode binary check\n\n\n\n\n\n\n\n\nappium-gulp-plugins\n\n\n\n\ndev package with custom plugins used across appium modules (for Appium development only)\n\n\ncontains task for\n\n\ne2e and unit tests (with coverage reporting)\n\n\ntranspiling ES2016 into ES5\n\n\nstatic code analysis (eslint)\n\n\nwatch task for dev\n\n\n\n\nappium-remote-debugger\n\n\n\n\nRPC client to connect Appium to iOS webviews\n\n\ncan connect to WebKit devtools\n\n\nfor iOS only\n\n\nhas two rpc client classes\n\n\nremote-debugger-rpc-client: uses tcp6 that connects to localhost:27753\n\n\nwebkit-rpc-client: uses WebSockets to connect to ws://localhost:27753/devtools/page/${pageId}\n\n\n\n\nnode-teen_process\n\n\n\n\nhelper module that exposes:\n\n\nexec: ES7 (async/await) implementation of exec that uses spawn under the hood\n\n\nSubProcess: cuts down boilerplate when using spawn (especially when using in an async/await context)\n\n\n\n\nappium-logger\n\n\n\n\nbasic logger defaulting to npmlog with special consideration for running tests\n\n\nexposes getLogger function that gets used by almost all Appium packages\n\n\ndefers to already-running logger if there is one, so everything bubbles up\n\n\n\n\nappium-support\n\n\n\n\nutility functions used to support libs used across appium packages.\n\n\nprovides promise wrappers for some common operations like\n\n\nsystem methods (isWindows, isLinux \u2026)\n\n\nutility methods like hasValue, escapeSpace\n\n\na bunch of fs methods\n\n\nplist helpers for parsing and updating plist files", 
            "title": "Appium Package Structure"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-in-a-nutshell", 
            "text": "", 
            "title": "Appium in a Nutshell"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium", 
            "text": "runs basic checks  node version ( = 5)  CLI arguments checks  contains all available and supported CLI arguments  check for deprecation and mutual exclusion    put logging together  mixture out of npmlog, winston and a custom logger  initiates AppiumDriver (extends Basedriver)  assigns iOS/Android/Fake driver to session  creates/deletes Appium session  starts baseServer (appium-express)  passes routes given by driver", 
            "title": "appium"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-express-part-of-appium-base-driver", 
            "text": "starts express server (allows x-domain-origin)  initialises routes from AppiumDriver  timeout handling  serves a static page for test purposes  connects req/res events to logger", 
            "title": "appium-express (part of appium-base-driver)"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#mobile-json-wire-protocol-part-of-appium-base-driver", 
            "text": "provides list of Appium commands  subclassed by drivers that will use the protocol  kind of middleware between client and driver  handles jwp proxy for driver  contains error classes for all types of errors  sanitises error responses  (un)wraps params to commands  checks required params, validates params", 
            "title": "mobile-json-wire-protocol (part of appium-base-driver)"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-base-driver", 
            "text": "designed to have a single testing session per instantiation  contains constraints on caps (platformName has to be present, etc)  validates capabilities  runs chain of promised commands with single concurrency  handles session restart  handles swipe options  exports class (DeviceSettings) to manage device settings (get/update)  contains basic commands  to find elements  create/delete sessions  handle timeouts  set/update device settings  provides helper methods for commands", 
            "title": "appium-base-driver"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-ios-driver", 
            "text": "can also run as standalone server (has a small server part that extends from appium-express)  supported strategies: \"name\", \"xpath\", \"id\", \"-ios uiautomation\", \"class name\", \"accessibility id\u201d  can start a simulator or a real device (if udid is given)  runs for each type a huge set of instructions  removeInstrumentsSocket  setBundleIdFromApp  createInstruments  runSimReset, isolateSimDevice, setLocale || runRealDeviceReset  setPreferences || runRealDeviceReset  startLogCapture  prelaunchSimulator || (noop)  startInstruments  onInstrumentsLaunch  configureBootstrap  setBundleId  setInitialOrientation  initAutoWebview  waitForAppLaunched    all instructions are helper methods within driver.js  contains a more specific set of capability constraints  has logic to build and run Safari (safari-launcher) using appium-xcode  implements commands for iOS driver  Selenium commands are compiled to ui-automator commands  commands will be send out to uiAutoClient (appium-uiauto)  connects to appium remote debugger", 
            "title": "appium-ios-driver"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-xcode", 
            "text": "runs shell commands to return useful data from Xcode like  getPath  getVersion  getAutomationTraceTemplatePath  getMaxIOSSDK  \u2026  has an auto-retry built in", 
            "title": "appium-xcode"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-uiauto", 
            "text": "wrapper for the iOS UI Automation framework  talks to it via socket connection  runs a command queue that get filled up by the sendCommand function  handles responses (as a buffer) from the ui-automation framework  uses osascript to rotate screenshots  provides method to bootstrap simulator/realdevice (dynamic-bootstrap)  javascript files which are run in the iOS UI Automation context (not node)  responsible to execute actual iOS UI Automation commands  see  UIAutomation docs  command flow is like  Webdriver command -  iOS driver command -  uiauto-command", 
            "title": "appium-uiauto"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-instruments", 
            "text": "wrapper to run instruments commands  a lot of exec calls to talk to instruments binary  all of them take callbacks to propagate the result  uses \"iwd\" (instruments without delay) packages which have to be compiled first  special Instruments package that gets rid of a delay between commands  contains also older versions of iwd instrument (v4 - v7)", 
            "title": "appium-instruments"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-ios-log", 
            "text": "captures console, performance and crash logs from the iOS simulator or real device  by either calling tail to grab logs from a system path (simulator devices)  or by calling deviceconsole (real devices)  performance logs are getting grabbed using the remote-debugger  crash logs remain in \u201c.crash\u201d files on the system", 
            "title": "appium-ios-log"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-ios-simulator", 
            "text": "wrapper around iOS simulator app  start and shutdown (kill all) simulators  updating settings and locals  update/clean safari  grabs meta data about the simulator device  uses simctl to talk to the simulator  works for Xcode 6 and 7", 
            "title": "appium-ios-simulator"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#node-simctl", 
            "text": "wrapper around simctl binary (cli utility to control an iOS simulator)  executed as a subcommand of xcrun (locate or invoke developer tools from the command-line)  contains functions to  install/remove apps  launch and shutdown simulators  create/erase/delete devices  get list of devices", 
            "title": "node-simctl"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-cookies", 
            "text": "simple package to create and receive cookies  used in the appium-ios-driver to implement jswonwire cookie commands within the web context", 
            "title": "appium-cookies"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-chromedriver", 
            "text": "wrapper around the chrome driver  downloads and installs chromedriver binaries  launches, restarts and stops (or kills all) chrome instances  uses appium-jsonwp-proxy to send json wire protocol commands to the driver", 
            "title": "appium-chromedriver"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#jsonwp-proxy-part-of-appium-base-driver", 
            "text": "allows to send json wire protocol commands to a server that understands it (browser drivers)  parses response into json  allows to proxy requests to a proxied server  used for communication in appium-chromedriver", 
            "title": "jsonwp-proxy (part of appium-base-driver)"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-android-driver", 
            "text": "similar to appium-ios-driver it can run as standalone server  automates native, hybrid and mobile web apps on emulators/simulators and real devices  takes care of installing android packages to the device  runs chromedriver sessions if desired  contains a more specific set of capability constraints  uses appium-adb to talk to the emulator/simulator/realdevice  and appium-android-bootstrap to execute the actual commands  contains helpers to figure out which web view belongs to which app package vice versa", 
            "title": "appium-android-driver"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-adb", 
            "text": "wrapper around the Android Debug Bridge (adb)  contains a bunch of commands that are basically just rpc to the adb binary  houses jar files to run for special use cases like signing, verifying apps or moving manifests  allows special (mobile specific) emulator commands that are not related to the webdriver protocol like  locking the screen  press back button  press home button  set/get airplane mode  set/get wifi state  captures logcat  handles emulator/simulator actions (e.g. reboot)", 
            "title": "appium-adb"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-android-bootstrap", 
            "text": "JavaScript interface, and Java code, for interacting with Android UI Automator  builds AppiumBootstrap.jar that contains logic to execute the commands  counterpart to appium-uiauto  once started it creates a web socket connection to the device  application provides start/shutdown/sendCommand interface  command flow is like:  Selenium command -  appium-adb -  appium-android-bootstrap -  Java code using the Android UI Automator framework", 
            "title": "appium-android-bootstrap"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-uiautomator", 
            "text": "starts and shutdowns uiautomator server given by appium-android-bootstrap jar build  command flow is like  appium-android-bootstrap:start -  appium-uiautomator:start -  appium-adb:install bootstrap", 
            "title": "appium-uiautomator"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-android-ime", 
            "text": "allows to send and receive unicode characters from/to the Android device  encodes text into UTF-7 sends it to the device and recodes it as Unicode  used by appium-android-driver", 
            "title": "appium-android-ime"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-doctor", 
            "text": "diagnoses, reports and fixes common Node, iOS and Android configuration issues before starting Appium  exposes cli command \u201cappium-doctor\"  it checks for  Android:  android sdk exists and configured properly  env variables and path check    iOS:  xcode is installed (with command line tools)  dev tools security check  auth check  node binary check", 
            "title": "appium-doctor"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-gulp-plugins", 
            "text": "dev package with custom plugins used across appium modules (for Appium development only)  contains task for  e2e and unit tests (with coverage reporting)  transpiling ES2016 into ES5  static code analysis (eslint)  watch task for dev", 
            "title": "appium-gulp-plugins"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-remote-debugger", 
            "text": "RPC client to connect Appium to iOS webviews  can connect to WebKit devtools  for iOS only  has two rpc client classes  remote-debugger-rpc-client: uses tcp6 that connects to localhost:27753  webkit-rpc-client: uses WebSockets to connect to ws://localhost:27753/devtools/page/${pageId}", 
            "title": "appium-remote-debugger"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#node-teen_process", 
            "text": "helper module that exposes:  exec: ES7 (async/await) implementation of exec that uses spawn under the hood  SubProcess: cuts down boilerplate when using spawn (especially when using in an async/await context)", 
            "title": "node-teen_process"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-logger", 
            "text": "basic logger defaulting to npmlog with special consideration for running tests  exposes getLogger function that gets used by almost all Appium packages  defers to already-running logger if there is one, so everything bubbles up", 
            "title": "appium-logger"
        }, 
        {
            "location": "/contributing-to-appium/appium-packages/#appium-support", 
            "text": "utility functions used to support libs used across appium packages.  provides promise wrappers for some common operations like  system methods (isWindows, isLinux \u2026)  utility methods like hasValue, escapeSpace  a bunch of fs methods  plist helpers for parsing and updating plist files", 
            "title": "appium-support"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/", 
            "text": "Releasing Appium\n\n\nAppium follows the GitLab flow approach. Releases are made on release branches that have the format \nreleases/x.y\n where \nx\n is a major version and \ny\n is a minor version. The main Appium repository doesn't strictly follow semver (unlike the dependencies of Appium). A minor release (e.g.: \n1.20.0\n) means that we're creating a new release that has a newly created set of dependencies that are shrinkwrapped to the latest. A patch release (e.g.: \n1.20.4\n) isn't strictly a \"patch\", but just means that we're making an intermediary release that brings in small changes. For example, suppose I have a new version of \nappium-xcuitest-driver\n that I want to publish and it can't wait until the next minor release. To bring in that change, I would checkout the release branch (e.g.: \ngit checkout releases/1.20\n); install the dependency (\nnpm install appium-xcuitest-driver@version \n git commit -a -m 'bump appium-xcuitest-driver to version $version\n); release a \"release candidate\" (see below) and then when it's ready, graduate the \"release candidate\" to general availability\n\n\nCreate a release branch\n\n\n\n\nbash ./scripts/release-branch.sh x.y\n where \nx\n is the major version and \ny\n is the minor version (example: \nbash ./scripts/release-branch.sh 1.20\n)\n\n\nThis will create:\n\n\nA release branch \nreleases/1.20\n\n\nA git tag \nv1.20.0-rc.0\n\n\nPublish a NPM package \n1.20.0-rc.0\n as a release candidate\n\n\n\n\n\n\nCreate a changelog pull request\n\n\n\n\nCreate a release candidate\n\n\n\n\nCheckout the release branch (e.g.: \ngit checkout releases/1.21 \n git pull origin releases/1.21\n)\n\n\nbash ./scripts/release.sh rc\n\n\n\n\nPublish to GA\n\n\n\n\nCheckout the release branch (e.g.: \ngit checkout releases/1.21 \n git pull origin releases/1.21\n)\n\n\nbash ./scripts/release-latest.sh 1.21.0\n\n\nThe \n1.21.0\n must be proper version name\n\n\n\n\n\n\nUpdate the site docs by going to https://github.com/appium/appium.io/pulls and merging the latest pull request that was opened by the Triager bot. Close any other pull requests opened by Triager bot.\n\n\nCreate a new release on GitHub: go to \nhttps://github.com/appium/appium/releases/tag/v\nVERSION\n and hit \"Edit Tag\". Make the release name \nVERSION\n (e.g., \n2.0.5\n), then paste in the changelog (but not the changelog header for this version). If it's a beta release, mark as pre-release.\n\n\nPlease check \nCreate a discussion for this release\n and select \nRelease\n category\n\n\n\n\n\n\nCreate a new post on discuss.appium.io announcing the release. Post it in the \"News\" category. Paste in the changelog and any choice comments. Pin it and unpin the previous release post.\n\n\nBegin process of releasing \nappium-desktop\n.\n\n\nNotify @jlipps to so he can tweet a link to the discuss post.\n\n\nCreate the next beta\n\n\nBump the \nversion\n name in \npackage.json\n for the next beta on the main branch. e.g. \n1.22.0-beta.0\n\n\nCommit the change without a tag,\n\n\nPush the version as \nnpm publish --tag beta\n.\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\nWhen you publish a version to a wrong channel\n\n\nFor example, you accidentally pusbed \nrc\n version into the \nlatest\n channel.\nThen, you could add the \ndeprecated\n label to this version , and re-tag the previous stable version in order to keep the stable one via \nnpm install\n.\n\ndist-tag\n command helps to achieve that.\n\n\n$ npm deprecate appium@1.21.0-rc.0 \nthis release should be in rc channel\n --tag=latest\n$ npm dist-tag add appium@1.20.2 latest\n\n\n\n\nYou can confirm if the above step works by calling \nnpm install -g appium\n.\nOnce you can install \nappium@1.20.2\n, the above step worked.\n(You may need to wait for a few minutes because of npm caching.)", 
            "title": "Release Appium"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/#releasing-appium", 
            "text": "Appium follows the GitLab flow approach. Releases are made on release branches that have the format  releases/x.y  where  x  is a major version and  y  is a minor version. The main Appium repository doesn't strictly follow semver (unlike the dependencies of Appium). A minor release (e.g.:  1.20.0 ) means that we're creating a new release that has a newly created set of dependencies that are shrinkwrapped to the latest. A patch release (e.g.:  1.20.4 ) isn't strictly a \"patch\", but just means that we're making an intermediary release that brings in small changes. For example, suppose I have a new version of  appium-xcuitest-driver  that I want to publish and it can't wait until the next minor release. To bring in that change, I would checkout the release branch (e.g.:  git checkout releases/1.20 ); install the dependency ( npm install appium-xcuitest-driver@version   git commit -a -m 'bump appium-xcuitest-driver to version $version ); release a \"release candidate\" (see below) and then when it's ready, graduate the \"release candidate\" to general availability", 
            "title": "Releasing Appium"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/#create-a-release-branch", 
            "text": "bash ./scripts/release-branch.sh x.y  where  x  is the major version and  y  is the minor version (example:  bash ./scripts/release-branch.sh 1.20 )  This will create:  A release branch  releases/1.20  A git tag  v1.20.0-rc.0  Publish a NPM package  1.20.0-rc.0  as a release candidate    Create a changelog pull request", 
            "title": "Create a release branch"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/#create-a-release-candidate", 
            "text": "Checkout the release branch (e.g.:  git checkout releases/1.21   git pull origin releases/1.21 )  bash ./scripts/release.sh rc", 
            "title": "Create a release candidate"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/#publish-to-ga", 
            "text": "Checkout the release branch (e.g.:  git checkout releases/1.21   git pull origin releases/1.21 )  bash ./scripts/release-latest.sh 1.21.0  The  1.21.0  must be proper version name    Update the site docs by going to https://github.com/appium/appium.io/pulls and merging the latest pull request that was opened by the Triager bot. Close any other pull requests opened by Triager bot.  Create a new release on GitHub: go to  https://github.com/appium/appium/releases/tag/v VERSION  and hit \"Edit Tag\". Make the release name  VERSION  (e.g.,  2.0.5 ), then paste in the changelog (but not the changelog header for this version). If it's a beta release, mark as pre-release.  Please check  Create a discussion for this release  and select  Release  category    Create a new post on discuss.appium.io announcing the release. Post it in the \"News\" category. Paste in the changelog and any choice comments. Pin it and unpin the previous release post.  Begin process of releasing  appium-desktop .  Notify @jlipps to so he can tweet a link to the discuss post.  Create the next beta  Bump the  version  name in  package.json  for the next beta on the main branch. e.g.  1.22.0-beta.0  Commit the change without a tag,  Push the version as  npm publish --tag beta .", 
            "title": "Publish to GA"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/contributing-to-appium/release-appium/#when-you-publish-a-version-to-a-wrong-channel", 
            "text": "For example, you accidentally pusbed  rc  version into the  latest  channel.\nThen, you could add the  deprecated  label to this version , and re-tag the previous stable version in order to keep the stable one via  npm install . dist-tag  command helps to achieve that.  $ npm deprecate appium@1.21.0-rc.0  this release should be in rc channel  --tag=latest\n$ npm dist-tag add appium@1.20.2 latest  You can confirm if the above step works by calling  npm install -g appium .\nOnce you can install  appium@1.20.2 , the above step worked.\n(You may need to wait for a few minutes because of npm caching.)", 
            "title": "When you publish a version to a wrong channel"
        }, 
        {
            "location": "/contributing-to-appium/credits/", 
            "text": "Credits\n\n\nThese are the projects that inspired us, or are depended upon to make Appium awesome.\n\n\n\n\nApple UIAutomation\n\n\nGhostDriver\n\n\nIOS Auto\n\n\nIOS Driver\n\n\nMechanic.js\n\n\nnode-webkit\n\n\nRemote Debug\n\n\nSelenium Project\n\n\nios-webkit-debug-proxy\n\n\ninstruments-without-delay\n\n\ndeviceconsole\n\n\nWinAppDriver\n\n\nWebDriverAgent", 
            "title": "Credits"
        }, 
        {
            "location": "/contributing-to-appium/credits/#credits", 
            "text": "", 
            "title": "Credits"
        }, 
        {
            "location": "/contributing-to-appium/credits/#these-are-the-projects-that-inspired-us-or-are-depended-upon-to-make-appium-awesome", 
            "text": "Apple UIAutomation  GhostDriver  IOS Auto  IOS Driver  Mechanic.js  node-webkit  Remote Debug  Selenium Project  ios-webkit-debug-proxy  instruments-without-delay  deviceconsole  WinAppDriver  WebDriverAgent", 
            "title": "These are the projects that inspired us, or are depended upon to make Appium awesome."
        }
    ]
}